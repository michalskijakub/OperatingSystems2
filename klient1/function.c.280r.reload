
;; Function pobierz_plansze (pobierz_plansze, funcdef_no=6, decl_uid=6214, cgraph_uid=6, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) ?mr {*cmpdi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 36:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 63
	 Choosing alt 0 in insn 63:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 65:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 66:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 76:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 87:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6 7
EBB 8
EBB 9
EBB 10 11
EBB 12 13
EBB 14

********** Pseudo live ranges #1: **********

  BB 14
   Insn 99: point = 0, n_alt = -1
   Insn 98: point = 0, n_alt = -2
   Insn 94: point = 1, n_alt = -2
  BB 3
   Insn 101: point = 4, n_alt = -1
   Insn 13: point = 4, n_alt = 2
  BB 13
   Insn 91: point = 5, n_alt = 3
   Insn 90: point = 6, n_alt = 0
   Insn 89: point = 6, n_alt = -2
   Insn 88: point = 7, n_alt = 3
   Insn 87: point = 8, n_alt = 8
   Insn 86: point = 9, n_alt = 0
   Insn 85: point = 11, n_alt = 3
   Insn 84: point = 13, n_alt = 0
   Insn 83: point = 15, n_alt = 3
  BB 12
   Insn 81: point = 16, n_alt = -1
   Insn 80: point = 16, n_alt = 0
  BB 7
   Insn 105: point = 16, n_alt = -1
   Insn 43: point = 16, n_alt = 1
  BB 6
   Insn 41: point = 16, n_alt = -1
   Insn 40: point = 16, n_alt = 0
  BB 4
   Insn 103: point = 16, n_alt = -1
   Insn 22: point = 16, n_alt = 1
   Insn 21: point = 16, n_alt = 5
   Insn 20: point = 17, n_alt = -2
   Insn 19: point = 18, n_alt = 0
   Insn 18: point = 18, n_alt = 2
  BB 2
   Insn 11: point = 18, n_alt = -1
   Insn 10: point = 18, n_alt = 1
   Insn 9: point = 18, n_alt = 5
   Insn 8: point = 19, n_alt = -2
   Insn 7: point = 20, n_alt = 0
   Insn 6: point = 20, n_alt = 4
   Insn 5: point = 20, n_alt = 4
  BB 5
   Insn 36: point = 20, n_alt = 1
   Insn 35: point = 20, n_alt = 5
   Insn 34: point = 21, n_alt = -2
   Insn 33: point = 23, n_alt = -2
   Insn 32: point = 24, n_alt = 0
   Insn 31: point = 24, n_alt = 2
   Insn 30: point = 24, n_alt = 3
   Insn 29: point = 26, n_alt = 3
   Insn 28: point = 27, n_alt = 1
   Insn 27: point = 29, n_alt = 0
   Insn 26: point = 31, n_alt = 0
  BB 11
   Insn 76: point = 32, n_alt = 1
   Insn 75: point = 32, n_alt = 0
   Insn 74: point = 32, n_alt = -2
   Insn 73: point = 33, n_alt = 3
  BB 10
   Insn 71: point = 34, n_alt = -1
   Insn 70: point = 34, n_alt = 0
  BB 8
   Insn 107: point = 34, n_alt = -1
   Insn 47: point = 34, n_alt = 1
  BB 9
   Insn 66: point = 34, n_alt = 1
   Insn 65: point = 34, n_alt = 8
   Insn 64: point = 35, n_alt = 0
   Insn 63: point = 37, n_alt = 0
   Insn 62: point = 39, n_alt = 0
   Insn 61: point = 41, n_alt = 0
   Insn 60: point = 42, n_alt = 3
   Insn 59: point = 44, n_alt = 0
   Insn 58: point = 46, n_alt = 3
   Insn 57: point = 47, n_alt = 1
   Insn 56: point = 49, n_alt = 0
   Insn 55: point = 51, n_alt = 0
   Insn 54: point = 52, n_alt = -2
   Insn 53: point = 53, n_alt = 0
   Insn 52: point = 53, n_alt = -2
   Insn 51: point = 54, n_alt = 3
 r87: [28..29]
 r88: [25..27]
 r89: [20..24]
 r90: [20..21]
 r91: [36..52]
 r92: [48..49]
 r93: [45..47]
 r94: [43..44]
 r95: [38..42]
 r96: [38..39]
 r97: [34..37]
 r98: [34..35]
 r99: [12..13]
 r100: [10..11]
 r101: [8..9]
 r102: [2..5]
 r103: [0..1]
 r104: [18..19]
 r105: [16..17]
 r106: [30..31]
 r107: [25..26]
 r108: [22..23]
 r109: [53..54]
 r110: [50..51]
 r111: [45..46]
 r112: [40..41]
 r113: [32..33]
 r114: [14..15]
 r115: [6..7]
Compressing live ranges: from 55 to 48 - 87%
Ranges after the compression:
 r87: [24..25]
 r88: [22..23]
 r89: [18..21]
 r90: [18..19]
 r91: [32..45]
 r92: [42..43]
 r93: [40..41]
 r94: [38..39]
 r95: [34..37]
 r96: [34..35]
 r97: [30..33]
 r98: [30..31]
 r99: [10..11]
 r100: [8..9]
 r101: [6..7]
 r102: [2..3]
 r103: [0..1]
 r104: [16..17]
 r105: [14..15]
 r106: [26..27]
 r107: [22..23]
 r108: [20..21]
 r109: [46..47]
 r110: [44..45]
 r111: [40..41]
 r112: [36..37]
 r113: [28..29]
 r114: [12..13]
 r115: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 30
changing reg in insn 30
changing reg in insn 35
changing reg in insn 34
changing reg in insn 35
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 13
changing reg in insn 94
changing reg in insn 94
changing reg in insn 98
changing reg in insn 8
changing reg in insn 9
changing reg in insn 20
changing reg in insn 21
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 51
changing reg in insn 52
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 61
changing reg in insn 62
changing reg in insn 73
changing reg in insn 74
changing reg in insn 83
changing reg in insn 84
changing reg in insn 88
changing reg in insn 89
deleting insn with uid = 8.
deleting insn with uid = 20.
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 94.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 90.


pobierz_plansze

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={27d,24u} r1={11d,4u,2e} r2={8d,1u} r3={1d,1u} r4={8d,1u} r5={13d,6u} r6={1d,39u} r7={1d,20u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={20d,4u} r18={6d} r19={6d} r20={1d,1u,3e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 603{497d,101u,5e} in 63{57 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f7cd0e9c900 *.LC0>)) "function.c":58 85 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f7cd0e9c990 *.LC1>)) "function.c":58 85 {*movdi_internal}
     (nil))
(call_insn 7 6 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f7cd131f700 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "function.c":58 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 9 7 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 fp+0 S8 A64])
        (reg:DI 0 ax [104])) "function.c":58 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [8 fp+0 S8 A64])
            (const_int 0 [0]))) "function.c":59 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "function.c":59 682 {*jcc}
     (nil)
 -> 16)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 102
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 101 3 (set (reg/f:DI 0 ax [orig:102 _19 ] [102])
        (const_int 0 [0])) "function.c":61 85 {*movdi_internal}
     (nil))
(jump_insn 101 13 102 3 (set (pc)
        (label_ref 92)) "function.c":61 683 {jump}
     (nil)
 -> 92)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102

(barrier 102 101 16)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105
(code_label 16 102 17 4 2 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:DI 5 di)
        (const_int 200 [0xc8])) "function.c":63 85 {*movdi_internal}
     (nil))
(call_insn 19 18 21 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7cd1261c00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "function.c":63 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 19 22 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [9 tab+0 S8 A64])
        (reg/f:DI 0 ax [105])) "function.c":63 85 {*movdi_internal}
     (nil))
(insn 22 21 103 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":64 86 {*movsi_internal}
     (nil))
(jump_insn 103 22 104 4 (set (pc)
        (label_ref 37)) "function.c":64 683 {jump}
     (nil)
 -> 37)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 104 103 39)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 106 107 108
(code_label 39 104 25 5 5 (nil) [1 uses])
(note 25 39 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 ax [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])) "function.c":66 86 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:DI 0 ax [orig:87 _1 ] [87])
        (sign_extend:DI (reg:SI 0 ax [106]))) "function.c":66 149 {*extendsidi2_rex64}
     (nil))
(insn 28 27 29 5 (parallel [
            (set (reg:DI 1 dx [orig:88 _2 ] [88])
                (ashift:DI (reg:DI 0 ax [orig:87 _1 ] [87])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":66 551 {*ashldi3_1}
     (nil))
(insn 29 28 30 5 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [9 tab+0 S8 A64])) "function.c":66 85 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg/f:DI 3 bx [orig:89 _3 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 _2 ] [88])
                    (reg/f:DI 0 ax [107])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":66 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:88 _2 ] [88]))
        (nil)))
(insn 31 30 32 5 (set (reg:DI 5 di)
        (const_int 35 [0x23])) "function.c":66 85 {*movdi_internal}
     (nil))
(call_insn 32 31 35 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7cd1261c00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "function.c":66 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 32 36 5 (set (mem/f:DI (reg/f:DI 3 bx [orig:89 _3 ] [89]) [10 *_3+0 S8 A64])
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "function.c":66 85 {*movdi_internal}
     (nil))
(insn 36 35 37 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":64 221 {*addsi_1}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 37 36 38 6 4 (nil) [1 uses])
(note 38 37 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 38 41 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
            (const_int 20 [0x14]))) "function.c":64 11 {*cmpsi_1}
     (nil))
(jump_insn 41 40 42 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "function.c":64 682 {*jcc}
     (nil)
 -> 39)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 105 7 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":68 86 {*movsi_internal}
     (nil))
(jump_insn 105 43 106 7 (set (pc)
        (label_ref 77)) "function.c":68 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 79)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 79 106 46 8 9 (nil) [1 uses])
(note 46 79 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 107 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":70 86 {*movsi_internal}
     (nil))
(jump_insn 107 47 108 8 (set (pc)
        (label_ref 67)) "function.c":70 683 {jump}
     (nil)
 -> 67)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 108 107 69)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 97 98 109 110 111 112
(code_label 69 108 50 9 8 (nil) [1 uses])
(note 50 69 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 9 (set (reg:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 fp+0 S8 A64])) "function.c":72 85 {*movdi_internal}
     (nil))
(insn 52 51 53 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) "function.c":72 85 {*movdi_internal}
     (nil))
(call_insn 53 52 54 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getc") [flags 0x41]  <function_decl 0x7f7cd1324200 getc>) [0 getc S1 A8])
            (const_int 0 [0]))) "function.c":72 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 54 53 55 9 (set (reg:SI 2 cx [orig:91 _5 ] [91])
        (reg:SI 0 ax)) "function.c":72 86 {*movsi_internal}
     (nil))
(insn 55 54 56 9 (set (reg:SI 0 ax [110])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])) "function.c":72 86 {*movsi_internal}
     (nil))
(insn 56 55 57 9 (set (reg:DI 0 ax [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 0 ax [110]))) "function.c":72 149 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 9 (parallel [
            (set (reg:DI 1 dx [orig:93 _7 ] [93])
                (ashift:DI (reg:DI 0 ax [orig:92 _6 ] [92])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":72 551 {*ashldi3_1}
     (nil))
(insn 58 57 59 9 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [9 tab+0 S8 A64])) "function.c":72 85 {*movdi_internal}
     (nil))
(insn 59 58 60 9 (parallel [
            (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (plus:DI (reg/f:DI 0 ax [111])
                    (reg:DI 1 dx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":72 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:93 _7 ] [93]))
        (nil)))
(insn 60 59 61 9 (set (reg/f:DI 1 dx [orig:95 _9 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [orig:94 _8 ] [94]) [10 *_8+0 S8 A64])) "function.c":72 85 {*movdi_internal}
     (nil))
(insn 61 60 62 9 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 j+0 S4 A32])) "function.c":72 86 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (set (reg:DI 0 ax [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 0 ax [112]))) "function.c":72 149 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 9 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 _10 ] [96])
                    (reg/f:DI 1 dx [orig:95 _9 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":72 222 {*adddi_1}
     (nil))
(insn 64 63 65 9 (set (reg:QI 1 dx [orig:98 _12 ] [98])
        (reg:QI 2 cx [orig:91 _5 ] [91])) "function.c":72 88 {*movqi_internal}
     (nil))
(insn 65 64 66 9 (set (mem:QI (reg/f:DI 0 ax [orig:97 _11 ] [97]) [0 *_11+0 S1 A8])
        (reg:QI 1 dx [orig:98 _12 ] [98])) "function.c":72 88 {*movqi_internal}
     (nil))
(insn 66 65 67 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":70 221 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 67 66 68 10 7 (nil) [1 uses])
(note 68 67 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 68 71 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [3 j+0 S4 A32])
            (const_int 30 [0x1e]))) "function.c":70 11 {*cmpsi_1}
     (nil))
(jump_insn 71 70 72 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "function.c":70 682 {*jcc}
     (nil)
 -> 69)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 11 (set (reg:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 fp+0 S8 A64])) "function.c":74 85 {*movdi_internal}
     (nil))
(insn 74 73 75 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) "function.c":74 85 {*movdi_internal}
     (nil))
(call_insn 75 74 76 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getc") [flags 0x41]  <function_decl 0x7f7cd1324200 getc>) [0 getc S1 A8])
            (const_int 0 [0]))) "function.c":74 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 76 75 77 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":68 221 {*addsi_1}
     (nil))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              7 [always] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 77 76 78 12 6 (nil) [1 uses])
(note 78 77 80 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 80 78 81 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
            (const_int 20 [0x14]))) "function.c":68 11 {*cmpsi_1}
     (nil))
(jump_insn 81 80 82 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "function.c":68 682 {*jcc}
     (nil)
 -> 79)
;;  succ:       8
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 101 102 114 115
(note 82 81 83 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 13 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [9 tab+0 S8 A64])) "function.c":76 85 {*movdi_internal}
     (nil))
(insn 84 83 85 13 (parallel [
            (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (plus:DI (reg/f:DI 0 ax [114])
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":76 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])
            (const_int 160 [0xa0]))
        (nil)))
(insn 85 84 86 13 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 _13 ] [99]) [10 *_13+0 S8 A64])) "function.c":76 85 {*movdi_internal}
     (nil))
(insn 86 85 87 13 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
                (plus:DI (reg/f:DI 0 ax [orig:100 _14 ] [100])
                    (const_int 30 [0x1e])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":76 222 {*adddi_1}
     (nil))
(insn 87 86 88 13 (set (mem:QI (reg/f:DI 0 ax [orig:101 _15 ] [101]) [0 *_15+0 S1 A8])
        (const_int 77 [0x4d])) "function.c":76 88 {*movqi_internal}
     (nil))
(insn 88 87 89 13 (set (reg:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [8 fp+0 S8 A64])) "function.c":77 85 {*movdi_internal}
     (nil))
(insn 89 88 90 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [115])) "function.c":77 85 {*movdi_internal}
     (nil))
(call_insn 90 89 91 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f7cd131f400 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "function.c":77 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 91 90 92 13 (set (reg/f:DI 0 ax [orig:102 _19 ] [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [9 tab+0 S8 A64])) "function.c":78 85 {*movdi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              3 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  def 	 0 [ax] 103
(code_label 92 91 93 14 3 (nil) [1 uses])
(note 93 92 98 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 98 93 99 14 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:103 <retval> ] [103])) "function.c":79 85 {*movdi_internal}
     (nil))
(insn 99 98 109 14 (use (reg/i:DI 0 ax)) "function.c":79 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 109 99 0 NOTE_INSN_DELETED)

;; Function drukuj_plansze (drukuj_plansze, funcdef_no=7, decl_uid=6216, cgraph_uid=7, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 42
	 Choosing alt 0 in insn 42:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 48:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 72
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 79:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 81
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 85
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 94
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 99:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 118:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 131:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 134:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 138:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 148:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 150
	 Choosing alt 0 in insn 150:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 154
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 160:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 168
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 172
	 Choosing alt 0 in insn 172:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 173:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 176:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 180:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 192
	 Choosing alt 0 in insn 192:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 196
	 Choosing alt 0 in insn 196:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 197:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 201:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 210:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 212
	 Choosing alt 0 in insn 212:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 213:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 216
	 Choosing alt 0 in insn 216:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 217:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 220:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 221:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 222:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 225:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 232:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6 7 8 9
EBB 10
EBB 11 12
EBB 13 14
EBB 15
EBB 16
EBB 17 18
EBB 19 20

********** Pseudo live ranges #1: **********

  BB 20
   Insn 243: point = 0, n_alt = -1
  BB 19
   Insn 237: point = 0, n_alt = -1
   Insn 236: point = 0, n_alt = 0
  BB 2
   Insn 244: point = 0, n_alt = -1
   Insn 19: point = 0, n_alt = 1
   Insn 18: point = 0, n_alt = 0
   Insn 17: point = 0, n_alt = 0
   Insn 16: point = 0, n_alt = 0
   Insn 15: point = 0, n_alt = 0
   Insn 14: point = 0, n_alt = 0
   Insn 13: point = 0, n_alt = 0
   Insn 12: point = 0, n_alt = 0
   Insn 11: point = 0, n_alt = 0
   Insn 10: point = 0, n_alt = 0
   Insn 9: point = 0, n_alt = 0
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = 0
   Insn 6: point = 0, n_alt = 0
   Insn 2: point = 0, n_alt = 5
  BB 18
   Insn 232: point = 0, n_alt = 1
  BB 17
   Insn 230: point = 0, n_alt = -1
   Insn 229: point = 0, n_alt = 0
  BB 3
   Insn 246: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = 1
  BB 16
   Insn 225: point = 0, n_alt = 1
  BB 14
   Insn 254: point = 0, n_alt = -1
   Insn 203: point = 0, n_alt = 0
   Insn 202: point = 0, n_alt = 3
   Insn 201: point = 0, n_alt = 4
  BB 12
   Insn 252: point = 0, n_alt = -1
   Insn 183: point = 0, n_alt = 0
   Insn 182: point = 0, n_alt = -2
   Insn 181: point = 1, n_alt = 0
   Insn 180: point = 1, n_alt = 2
   Insn 179: point = 1, n_alt = 3
   Insn 178: point = 2, n_alt = 0
   Insn 177: point = 2, n_alt = 3
   Insn 176: point = 2, n_alt = 4
   Insn 175: point = 2, n_alt = -2
   Insn 174: point = 3, n_alt = 0
   Insn 173: point = 5, n_alt = 4
   Insn 172: point = 7, n_alt = 0
   Insn 171: point = 9, n_alt = 0
   Insn 170: point = 11, n_alt = 0
   Insn 169: point = 12, n_alt = 3
   Insn 168: point = 14, n_alt = 0
   Insn 167: point = 16, n_alt = 3
   Insn 166: point = 17, n_alt = 1
   Insn 165: point = 19, n_alt = 0
   Insn 164: point = 21, n_alt = 0
   Insn 163: point = 22, n_alt = 0
   Insn 162: point = 22, n_alt = -2
   Insn 161: point = 23, n_alt = 0
   Insn 160: point = 23, n_alt = 2
   Insn 159: point = 23, n_alt = 3
  BB 10
   Insn 250: point = 24, n_alt = -1
   Insn 141: point = 24, n_alt = 0
   Insn 140: point = 24, n_alt = -2
   Insn 139: point = 25, n_alt = 0
   Insn 138: point = 25, n_alt = 2
   Insn 137: point = 25, n_alt = 3
   Insn 136: point = 26, n_alt = 0
   Insn 135: point = 26, n_alt = 3
   Insn 134: point = 26, n_alt = 4
   Insn 133: point = 26, n_alt = -2
   Insn 132: point = 27, n_alt = 0
   Insn 131: point = 29, n_alt = 4
   Insn 130: point = 31, n_alt = 0
   Insn 129: point = 33, n_alt = 0
   Insn 128: point = 35, n_alt = 0
   Insn 127: point = 36, n_alt = 3
   Insn 126: point = 38, n_alt = 0
   Insn 125: point = 40, n_alt = 3
   Insn 124: point = 41, n_alt = 1
   Insn 123: point = 43, n_alt = 0
   Insn 122: point = 45, n_alt = 0
   Insn 121: point = 46, n_alt = 0
   Insn 120: point = 46, n_alt = -2
   Insn 119: point = 47, n_alt = 0
   Insn 118: point = 47, n_alt = 2
   Insn 117: point = 47, n_alt = 3
  BB 5
   Insn 248: point = 48, n_alt = -1
   Insn 59: point = 48, n_alt = 0
   Insn 58: point = 48, n_alt = -2
   Insn 57: point = 49, n_alt = 0
   Insn 56: point = 49, n_alt = 2
   Insn 55: point = 49, n_alt = 3
   Insn 54: point = 50, n_alt = 0
   Insn 53: point = 50, n_alt = 3
   Insn 52: point = 50, n_alt = 4
   Insn 51: point = 50, n_alt = 0
   Insn 50: point = 50, n_alt = -2
   Insn 49: point = 51, n_alt = 0
   Insn 48: point = 51, n_alt = 2
   Insn 47: point = 51, n_alt = 3
  BB 15
   Insn 222: point = 52, n_alt = 0
   Insn 221: point = 52, n_alt = 3
   Insn 220: point = 52, n_alt = 4
   Insn 219: point = 52, n_alt = -2
   Insn 218: point = 53, n_alt = 0
   Insn 217: point = 55, n_alt = 4
   Insn 216: point = 57, n_alt = 0
   Insn 215: point = 59, n_alt = 0
   Insn 214: point = 61, n_alt = 0
   Insn 213: point = 62, n_alt = 3
   Insn 212: point = 64, n_alt = 0
   Insn 211: point = 66, n_alt = 3
   Insn 210: point = 67, n_alt = 1
   Insn 209: point = 69, n_alt = 0
   Insn 208: point = 71, n_alt = 0
  BB 13
   Insn 199: point = 72, n_alt = -1
   Insn 198: point = 72, n_alt = 0
   Insn 197: point = 73, n_alt = 4
   Insn 196: point = 75, n_alt = 0
   Insn 195: point = 77, n_alt = 0
   Insn 194: point = 79, n_alt = 0
   Insn 193: point = 80, n_alt = 3
   Insn 192: point = 82, n_alt = 0
   Insn 191: point = 84, n_alt = 3
   Insn 190: point = 85, n_alt = 1
   Insn 189: point = 87, n_alt = 0
   Insn 188: point = 89, n_alt = 0
  BB 11
   Insn 157: point = 90, n_alt = -1
   Insn 156: point = 90, n_alt = 0
   Insn 155: point = 91, n_alt = 4
   Insn 154: point = 93, n_alt = 0
   Insn 153: point = 95, n_alt = 0
   Insn 152: point = 97, n_alt = 0
   Insn 151: point = 98, n_alt = 3
   Insn 150: point = 100, n_alt = 0
   Insn 149: point = 102, n_alt = 3
   Insn 148: point = 103, n_alt = 1
   Insn 147: point = 105, n_alt = 0
   Insn 146: point = 107, n_alt = 0
  BB 9
   Insn 114: point = 108, n_alt = -1
   Insn 113: point = 108, n_alt = 0
   Insn 112: point = 109, n_alt = 4
   Insn 111: point = 111, n_alt = 0
   Insn 110: point = 113, n_alt = 0
   Insn 109: point = 115, n_alt = 0
   Insn 108: point = 116, n_alt = 3
   Insn 107: point = 118, n_alt = 0
   Insn 106: point = 120, n_alt = 3
   Insn 105: point = 121, n_alt = 1
   Insn 104: point = 123, n_alt = 0
   Insn 103: point = 125, n_alt = 0
  BB 8
   Insn 101: point = 126, n_alt = -1
   Insn 100: point = 126, n_alt = 0
   Insn 99: point = 127, n_alt = 4
   Insn 98: point = 129, n_alt = 0
   Insn 97: point = 131, n_alt = 0
   Insn 96: point = 133, n_alt = 0
   Insn 95: point = 134, n_alt = 3
   Insn 94: point = 136, n_alt = 0
   Insn 93: point = 138, n_alt = 3
   Insn 92: point = 139, n_alt = 1
   Insn 91: point = 141, n_alt = 0
   Insn 90: point = 143, n_alt = 0
  BB 7
   Insn 88: point = 144, n_alt = -1
   Insn 87: point = 144, n_alt = 0
   Insn 86: point = 145, n_alt = 4
   Insn 85: point = 147, n_alt = 0
   Insn 84: point = 149, n_alt = 0
   Insn 83: point = 151, n_alt = 0
   Insn 82: point = 152, n_alt = 3
   Insn 81: point = 154, n_alt = 0
   Insn 80: point = 156, n_alt = 3
   Insn 79: point = 157, n_alt = 1
   Insn 78: point = 159, n_alt = 0
   Insn 77: point = 161, n_alt = 0
  BB 6
   Insn 75: point = 162, n_alt = -1
   Insn 74: point = 162, n_alt = 0
   Insn 73: point = 163, n_alt = 4
   Insn 72: point = 165, n_alt = 0
   Insn 71: point = 167, n_alt = 0
   Insn 70: point = 169, n_alt = 0
   Insn 69: point = 170, n_alt = 3
   Insn 68: point = 172, n_alt = 0
   Insn 67: point = 174, n_alt = 3
   Insn 66: point = 175, n_alt = 1
   Insn 65: point = 177, n_alt = 0
   Insn 64: point = 179, n_alt = 0
  BB 4
   Insn 45: point = 180, n_alt = -1
   Insn 44: point = 180, n_alt = 0
   Insn 43: point = 181, n_alt = 4
   Insn 42: point = 183, n_alt = 0
   Insn 41: point = 185, n_alt = 0
   Insn 40: point = 187, n_alt = 0
   Insn 39: point = 188, n_alt = 3
   Insn 38: point = 190, n_alt = 0
   Insn 37: point = 192, n_alt = 3
   Insn 36: point = 193, n_alt = 1
   Insn 35: point = 195, n_alt = 0
   Insn 34: point = 197, n_alt = 0
   Insn 33: point = 198, n_alt = 0
   Insn 32: point = 198, n_alt = -2
   Insn 31: point = 199, n_alt = -2
   Insn 30: point = 200, n_alt = -2
   Insn 29: point = 201, n_alt = 0
   Insn 28: point = 202, n_alt = 0
   Insn 27: point = 203, n_alt = 3
 r87: [198..203]
 r88: [194..195]
 r89: [191..193]
 r90: [189..190]
 r91: [184..188]
 r92: [184..185]
 r93: [182..183]
 r94: [180..181]
 r95: [50..51]
 r96: [48..49]
 r97: [176..177]
 r98: [173..175]
 r99: [171..172]
 r100: [166..170]
 r101: [166..167]
 r102: [164..165]
 r103: [162..163]
 r104: [158..159]
 r105: [155..157]
 r106: [153..154]
 r107: [148..152]
 r108: [148..149]
 r109: [146..147]
 r110: [144..145]
 r111: [140..141]
 r112: [137..139]
 r113: [135..136]
 r114: [130..134]
 r115: [130..131]
 r116: [128..129]
 r117: [126..127]
 r118: [122..123]
 r119: [119..121]
 r120: [117..118]
 r121: [112..116]
 r122: [112..113]
 r123: [110..111]
 r124: [108..109]
 r125: [46..47]
 r126: [42..43]
 r127: [39..41]
 r128: [37..38]
 r129: [32..36]
 r130: [32..33]
 r131: [30..31]
 r132: [28..29]
 r133: [26..27]
 r134: [24..25]
 r135: [104..105]
 r136: [101..103]
 r137: [99..100]
 r138: [94..98]
 r139: [94..95]
 r140: [92..93]
 r141: [90..91]
 r142: [22..23]
 r143: [18..19]
 r144: [15..17]
 r145: [13..14]
 r146: [8..12]
 r147: [8..9]
 r148: [6..7]
 r149: [4..5]
 r150: [2..3]
 r151: [0..1]
 r152: [86..87]
 r153: [83..85]
 r154: [81..82]
 r155: [76..80]
 r156: [76..77]
 r157: [74..75]
 r158: [72..73]
 r159: [68..69]
 r160: [65..67]
 r161: [63..64]
 r162: [58..62]
 r163: [58..59]
 r164: [56..57]
 r165: [54..55]
 r166: [52..53]
 r167: [200..202]
 r168: [199..201]
 r169: [196..197]
 r170: [191..192]
 r171: [186..187]
 r172: [178..179]
 r173: [173..174]
 r174: [168..169]
 r175: [160..161]
 r176: [155..156]
 r177: [150..151]
 r178: [142..143]
 r179: [137..138]
 r180: [132..133]
 r181: [124..125]
 r182: [119..120]
 r183: [114..115]
 r184: [44..45]
 r185: [39..40]
 r186: [34..35]
 r187: [106..107]
 r188: [101..102]
 r189: [96..97]
 r190: [20..21]
 r191: [15..16]
 r192: [10..11]
 r193: [88..89]
 r194: [83..84]
 r195: [78..79]
 r196: [70..71]
 r197: [65..66]
 r198: [60..61]
Compressing live ranges: from 204 to 180 - 88%
Ranges after the compression:
 r87: [178..179]
 r88: [174..175]
 r89: [172..173]
 r90: [170..171]
 r91: [166..169]
 r92: [166..167]
 r93: [164..165]
 r94: [162..163]
 r95: [46..47]
 r96: [44..45]
 r97: [158..159]
 r98: [156..157]
 r99: [154..155]
 r100: [150..153]
 r101: [150..151]
 r102: [148..149]
 r103: [146..147]
 r104: [142..143]
 r105: [140..141]
 r106: [138..139]
 r107: [134..137]
 r108: [134..135]
 r109: [132..133]
 r110: [130..131]
 r111: [126..127]
 r112: [124..125]
 r113: [122..123]
 r114: [118..121]
 r115: [118..119]
 r116: [116..117]
 r117: [114..115]
 r118: [110..111]
 r119: [108..109]
 r120: [106..107]
 r121: [102..105]
 r122: [102..103]
 r123: [100..101]
 r124: [98..99]
 r125: [42..43]
 r126: [38..39]
 r127: [36..37]
 r128: [34..35]
 r129: [30..33]
 r130: [30..31]
 r131: [28..29]
 r132: [26..27]
 r133: [24..25]
 r134: [22..23]
 r135: [94..95]
 r136: [92..93]
 r137: [90..91]
 r138: [86..89]
 r139: [86..87]
 r140: [84..85]
 r141: [82..83]
 r142: [20..21]
 r143: [16..17]
 r144: [14..15]
 r145: [12..13]
 r146: [8..11]
 r147: [8..9]
 r148: [6..7]
 r149: [4..5]
 r150: [2..3]
 r151: [0..1]
 r152: [78..79]
 r153: [76..77]
 r154: [74..75]
 r155: [70..73]
 r156: [70..71]
 r157: [68..69]
 r158: [66..67]
 r159: [62..63]
 r160: [60..61]
 r161: [58..59]
 r162: [54..57]
 r163: [54..55]
 r164: [52..53]
 r165: [50..51]
 r166: [48..49]
 r167: [178..179]
 r168: [178..179]
 r169: [176..177]
 r170: [172..173]
 r171: [168..169]
 r172: [160..161]
 r173: [156..157]
 r174: [152..153]
 r175: [144..145]
 r176: [140..141]
 r177: [136..137]
 r178: [128..129]
 r179: [124..125]
 r180: [120..121]
 r181: [112..113]
 r182: [108..109]
 r183: [104..105]
 r184: [40..41]
 r185: [36..37]
 r186: [32..33]
 r187: [96..97]
 r188: [92..93]
 r189: [88..89]
 r190: [18..19]
 r191: [14..15]
 r192: [10..11]
 r193: [80..81]
 r194: [76..77]
 r195: [72..73]
 r196: [64..65]
 r197: [60..61]
 r198: [56..57]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 27
changing reg in insn 32
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 47
changing reg in insn 50
changing reg in insn 55
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 117
changing reg in insn 120
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 126
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 133
changing reg in insn 137
changing reg in insn 140
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 159
changing reg in insn 162
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 175
changing reg in insn 179
changing reg in insn 182
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 192
changing reg in insn 193
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 209
changing reg in insn 210
changing reg in insn 210
changing reg in insn 212
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 28
changing reg in insn 30
changing reg in insn 29
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 83
changing reg in insn 84
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 103
changing reg in insn 104
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 128
changing reg in insn 129
changing reg in insn 146
changing reg in insn 147
changing reg in insn 149
changing reg in insn 152
changing reg in insn 153
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 170
changing reg in insn 171
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 194
changing reg in insn 195
changing reg in insn 208
changing reg in insn 209
changing reg in insn 211
changing reg in insn 214
changing reg in insn 215
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 222.


drukuj_plansze

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={112d,95u} r1={47d,30u,10e} r2={18d,1u} r4={30d,13u} r5={32d,16u} r6={1d,61u} r7={1d,36u} r8={16d} r9={16d} r10={16d} r11={16d} r12={16d} r13={16d} r14={16d} r15={16d} r17={57d,9u} r18={16d} r19={16d} r20={1d,1u,10e} r21={17d} r22={17d} r23={17d} r24={17d} r25={17d} r26={17d} r27={17d} r28={17d} r29={16d} r30={16d} r31={16d} r32={16d} r33={16d} r34={16d} r35={16d} r36={16d} r37={17d} r38={17d} r39={16d} r40={16d} r45={16d} r46={16d} r47={16d} r48={16d} r49={16d} r50={16d} r51={16d} r52={16d} r53={16d} r54={16d} r55={16d} r56={16d} r57={16d} r58={16d} r59={16d} r60={16d} r61={16d} r62={16d} r63={16d} r64={16d} r65={16d} r66={16d} r67={16d} r68={16d} r69={16d} r70={16d} r71={16d} r72={16d} r73={16d} r74={16d} r75={16d} r76={16d} r77={16d} r78={16d} r79={16d} r80={16d} 
;;    total ref usage 1647{1365d,262u,20e} in 200{184 regular + 16 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
        (reg:DI 5 di [ tab ])) "function.c":82 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("start_color") [flags 0x41]  <function_decl 0x7f7cd10bd300 start_color>) [0 start_color S1 A8])
            (const_int 0 [0]))) "function.c":83 700 {*call_value}
     (nil)
    (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":85 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":85 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":85 86 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":85 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 11 10 12 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":86 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":86 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":86 86 {*movsi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":86 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "function.c":87 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":87 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 5 di)
        (const_int 11 [0xb])) "function.c":87 86 {*movsi_internal}
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":87 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 19 18 244 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":89 86 {*movsi_internal}
     (nil))
(jump_insn 244 19 245 2 (set (pc)
        (label_ref 233)) "function.c":89 683 {jump}
     (nil)
 -> 233)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 245 244 235)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       19
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 235 245 22 3 20 (nil) [1 uses])
(note 22 235 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 246 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":91 86 {*movsi_internal}
     (nil))
(jump_insn 246 23 247 3 (set (pc)
        (label_ref 226)) "function.c":91 683 {jump}
     (nil)
 -> 226)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 247 246 228)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 167 168 169 170 171
(code_label 228 247 26 4 19 (nil) [1 uses])
(note 26 228 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg/f:DI 0 ax [orig:87 stdscr.0_1 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":93 85 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:SI 1 dx [167])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":93 86 {*movsi_internal}
     (nil))
(insn 29 28 31 4 (set (reg:SI 2 cx [168])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":93 86 {*movsi_internal}
     (nil))
(insn 31 29 32 4 (set (reg:SI 4 si)
        (reg:SI 2 cx [168])) "function.c":93 86 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 stdscr.0_1 ] [87])) "function.c":93 85 {*movdi_internal}
     (nil))
(call_insn 33 32 34 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":93 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 34 33 35 4 (set (reg:SI 0 ax [169])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":94 86 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 0 ax [orig:88 _2 ] [88])
        (sign_extend:DI (reg:SI 0 ax [169]))) "function.c":94 149 {*extendsidi2_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:89 _3 ] [89])
                (ashift:DI (reg:DI 0 ax [orig:88 _2 ] [88])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":94 551 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":94 85 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (plus:DI (reg/f:DI 0 ax [170])
                    (reg:DI 1 dx [orig:89 _3 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":94 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:89 _3 ] [89]))
        (nil)))
(insn 39 38 40 4 (set (reg/f:DI 1 dx [orig:91 _5 ] [91])
        (mem/f:DI (reg/f:DI 0 ax [orig:90 _4 ] [90]) [10 *_4+0 S8 A64])) "function.c":94 85 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SI 0 ax [171])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":94 86 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 0 ax [orig:92 _6 ] [92])
        (sign_extend:DI (reg:SI 0 ax [171]))) "function.c":94 149 {*extendsidi2_rex64}
     (nil))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg:DI 0 ax [orig:92 _6 ] [92])
                    (reg/f:DI 1 dx [orig:91 _5 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":94 222 {*adddi_1}
     (nil))
(insn 43 42 44 4 (set (reg:QI 0 ax [orig:94 _8 ] [94])
        (mem:QI (reg/f:DI 0 ax [orig:93 _7 ] [93]) [0 *_7+0 S1 A8])) "function.c":94 88 {*movqi_internal}
     (nil))
(insn 44 43 45 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 _8 ] [94])
            (const_int 77 [0x4d]))) "function.c":94 9 {*cmpqi_1}
     (nil))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "function.c":94 682 {*jcc}
     (nil)
 -> 62)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 96
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:DI 0 ax [orig:95 stdscr.1_9 ] [95])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":96 85 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":96 85 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":96 86 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 stdscr.1_9 ] [95])) "function.c":96 85 {*movdi_internal}
     (nil))
(call_insn 51 50 52 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":96 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 52 51 53 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":97 85 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":97 88 {*movqi_internal}
     (nil))
(call_insn 54 53 55 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":97 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 55 54 56 5 (set (reg/f:DI 0 ax [orig:96 stdscr.2_10 ] [96])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":98 85 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":98 85 {*movdi_internal}
     (nil))
(insn 57 56 58 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":98 86 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 stdscr.2_10 ] [96])) "function.c":98 85 {*movdi_internal}
     (nil))
(call_insn 59 58 248 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":98 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 248 59 249 5 (set (pc)
        (label_ref 223)) 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 249 248 62)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 102 103 172 173 174
(code_label 62 249 63 6 13 (nil) [1 uses])
(note 63 62 64 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 6 (set (reg:SI 0 ax [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:DI 0 ax [orig:97 _11 ] [97])
        (sign_extend:DI (reg:SI 0 ax [172]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 66 65 67 6 (parallel [
            (set (reg:DI 1 dx [orig:98 _12 ] [98])
                (ashift:DI (reg:DI 0 ax [orig:97 _11 ] [97])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (nil))
(insn 67 66 68 6 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (plus:DI (reg/f:DI 0 ax [173])
                    (reg:DI 1 dx [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:98 _12 ] [98]))
        (nil)))
(insn 69 68 70 6 (set (reg/f:DI 1 dx [orig:100 _14 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [orig:99 _13 ] [99]) [10 *_13+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 70 69 71 6 (set (reg:SI 0 ax [174])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [174]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 72 71 73 6 (parallel [
            (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
                (plus:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (reg/f:DI 1 dx [orig:100 _14 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (nil))
(insn 73 72 74 6 (set (reg:QI 0 ax [orig:103 _17 ] [103])
        (mem:QI (reg/f:DI 0 ax [orig:102 _16 ] [102]) [0 *_16+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:103 _17 ] [103])
            (const_int 99 [0x63]))) "function.c":100 9 {*cmpqi_1}
     (nil))
(jump_insn 75 74 76 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":100 682 {*jcc}
     (nil)
 -> 115)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104 105 106 107 108 109 110 175 176 177
(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 7 (set (reg:SI 0 ax [175])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 78 77 79 7 (set (reg:DI 0 ax [orig:104 _18 ] [104])
        (sign_extend:DI (reg:SI 0 ax [175]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 79 78 80 7 (parallel [
            (set (reg:DI 1 dx [orig:105 _19 ] [105])
                (ashift:DI (reg:DI 0 ax [orig:104 _18 ] [104])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (nil))
(insn 80 79 81 7 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 81 80 82 7 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (plus:DI (reg/f:DI 0 ax [176])
                    (reg:DI 1 dx [orig:105 _19 ] [105])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:105 _19 ] [105]))
        (nil)))
(insn 82 81 83 7 (set (reg/f:DI 1 dx [orig:107 _21 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [orig:106 _20 ] [106]) [10 *_20+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 83 82 84 7 (set (reg:SI 0 ax [177])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 84 83 85 7 (set (reg:DI 0 ax [orig:108 _22 ] [108])
        (sign_extend:DI (reg:SI 0 ax [177]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 7 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (plus:DI (reg:DI 0 ax [orig:108 _22 ] [108])
                    (reg/f:DI 1 dx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (nil))
(insn 86 85 87 7 (set (reg:QI 0 ax [orig:110 _24 ] [110])
        (mem:QI (reg/f:DI 0 ax [orig:109 _23 ] [109]) [0 *_23+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:110 _24 ] [110])
            (const_int 116 [0x74]))) "function.c":100 9 {*cmpqi_1}
     (nil))
(jump_insn 88 87 89 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":100 682 {*jcc}
     (nil)
 -> 115)
;;  succ:       10
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 115 116 117 178 179 180
(note 89 88 90 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 8 (set (reg:SI 0 ax [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 91 90 92 8 (set (reg:DI 0 ax [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 0 ax [178]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (nil))
(insn 93 92 94 8 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg/f:DI 0 ax [179])
                    (reg:DI 1 dx [orig:112 _26 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:112 _26 ] [112]))
        (nil)))
(insn 95 94 96 8 (set (reg/f:DI 1 dx [orig:114 _28 ] [114])
        (mem/f:DI (reg/f:DI 0 ax [orig:113 _27 ] [113]) [10 *_27+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 96 95 97 8 (set (reg:SI 0 ax [180])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 97 96 98 8 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [180]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 8 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (reg/f:DI 1 dx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (nil))
(insn 99 98 100 8 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [orig:116 _30 ] [116]) [0 *_30+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (nil))
(insn 100 99 101 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 _31 ] [117])
            (const_int 84 [0x54]))) "function.c":100 9 {*cmpqi_1}
     (nil))
(jump_insn 101 100 102 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":100 682 {*jcc}
     (nil)
 -> 115)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 123 124 181 182 183
(note 102 101 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 9 (set (reg:SI 0 ax [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 104 103 105 9 (set (reg:DI 0 ax [orig:118 _32 ] [118])
        (sign_extend:DI (reg:SI 0 ax [181]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 105 104 106 9 (parallel [
            (set (reg:DI 1 dx [orig:119 _33 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:118 _32 ] [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (nil))
(insn 106 105 107 9 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg/f:DI 0 ax [182])
                    (reg:DI 1 dx [orig:119 _33 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:119 _33 ] [119]))
        (nil)))
(insn 108 107 109 9 (set (reg/f:DI 1 dx [orig:121 _35 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [10 *_34+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 109 108 110 9 (set (reg:SI 0 ax [183])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 110 109 111 9 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [183]))) "function.c":100 149 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 9 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _37 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (reg/f:DI 1 dx [orig:121 _35 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (nil))
(insn 112 111 113 9 (set (reg:QI 0 ax [orig:124 _38 ] [124])
        (mem:QI (reg/f:DI 0 ax [orig:123 _37 ] [123]) [0 *_37+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (nil))
(insn 113 112 114 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:124 _38 ] [124])
            (const_int 68 [0x44]))) "function.c":100 9 {*cmpqi_1}
     (nil))
(jump_insn 114 113 115 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) "function.c":100 682 {*jcc}
     (nil)
 -> 144)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7
;;              8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 125 126 127 128 129 130 131 132 133 134 184 185 186
(code_label 115 114 116 10 15 (nil) [3 uses])
(note 116 115 117 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 10 (set (reg/f:DI 0 ax [orig:125 stdscr.3_39 ] [125])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":102 85 {*movdi_internal}
     (nil))
(insn 118 117 119 10 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":102 85 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":102 86 {*movsi_internal}
     (nil))
(insn 120 119 121 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:125 stdscr.3_39 ] [125])) "function.c":102 85 {*movdi_internal}
     (nil))
(call_insn 121 120 122 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":102 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 122 121 123 10 (set (reg:SI 0 ax [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":103 86 {*movsi_internal}
     (nil))
(insn 123 122 124 10 (set (reg:DI 0 ax [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 0 ax [184]))) "function.c":103 149 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 10 (parallel [
            (set (reg:DI 1 dx [orig:127 _41 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 _40 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":103 551 {*ashldi3_1}
     (nil))
(insn 125 124 126 10 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":103 85 {*movdi_internal}
     (nil))
(insn 126 125 127 10 (parallel [
            (set (reg/f:DI 0 ax [orig:128 _42 ] [128])
                (plus:DI (reg/f:DI 0 ax [185])
                    (reg:DI 1 dx [orig:127 _41 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":103 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:127 _41 ] [127]))
        (nil)))
(insn 127 126 128 10 (set (reg/f:DI 1 dx [orig:129 _43 ] [129])
        (mem/f:DI (reg/f:DI 0 ax [orig:128 _42 ] [128]) [10 *_42+0 S8 A64])) "function.c":103 85 {*movdi_internal}
     (nil))
(insn 128 127 129 10 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":103 86 {*movsi_internal}
     (nil))
(insn 129 128 130 10 (set (reg:DI 0 ax [orig:130 _44 ] [130])
        (sign_extend:DI (reg:SI 0 ax [186]))) "function.c":103 149 {*extendsidi2_rex64}
     (nil))
(insn 130 129 131 10 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 _44 ] [130])
                    (reg/f:DI 1 dx [orig:129 _43 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":103 222 {*adddi_1}
     (nil))
(insn 131 130 132 10 (set (reg:QI 0 ax [orig:132 _46 ] [132])
        (mem:QI (reg/f:DI 0 ax [orig:131 _45 ] [131]) [0 *_45+0 S1 A8])) "function.c":103 88 {*movqi_internal}
     (nil))
(insn 132 131 133 10 (set (reg:SI 0 ax [orig:133 _47 ] [133])
        (sign_extend:SI (reg:QI 0 ax [orig:132 _46 ] [132]))) "function.c":103 155 {extendqisi2}
     (nil))
(insn 133 132 134 10 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:133 _47 ] [133])) "function.c":103 86 {*movsi_internal}
     (nil))
(insn 134 133 135 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":103 85 {*movdi_internal}
     (nil))
(insn 135 134 136 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":103 88 {*movqi_internal}
     (nil))
(call_insn 136 135 137 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":103 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 137 136 138 10 (set (reg/f:DI 0 ax [orig:134 stdscr.4_48 ] [134])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":104 85 {*movdi_internal}
     (nil))
(insn 138 137 139 10 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":104 85 {*movdi_internal}
     (nil))
(insn 139 138 140 10 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":104 86 {*movsi_internal}
     (nil))
(insn 140 139 141 10 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:134 stdscr.4_48 ] [134])) "function.c":104 85 {*movdi_internal}
     (nil))
(call_insn 141 140 250 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":104 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 250 141 251 10 (set (pc)
        (label_ref 223)) "function.c":104 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 251 250 144)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 135 136 137 138 139 140 141 187 188 189
(code_label 144 251 145 11 16 (nil) [1 uses])
(note 145 144 146 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 11 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":106 86 {*movsi_internal}
     (nil))
(insn 147 146 148 11 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [187]))) "function.c":106 149 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 11 (parallel [
            (set (reg:DI 1 dx [orig:136 _50 ] [136])
                (ashift:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":106 551 {*ashldi3_1}
     (nil))
(insn 149 148 150 11 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":106 85 {*movdi_internal}
     (nil))
(insn 150 149 151 11 (parallel [
            (set (reg/f:DI 0 ax [orig:137 _51 ] [137])
                (plus:DI (reg/f:DI 0 ax [188])
                    (reg:DI 1 dx [orig:136 _50 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":106 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:136 _50 ] [136]))
        (nil)))
(insn 151 150 152 11 (set (reg/f:DI 1 dx [orig:138 _52 ] [138])
        (mem/f:DI (reg/f:DI 0 ax [orig:137 _51 ] [137]) [10 *_51+0 S8 A64])) "function.c":106 85 {*movdi_internal}
     (nil))
(insn 152 151 153 11 (set (reg:SI 0 ax [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":106 86 {*movsi_internal}
     (nil))
(insn 153 152 154 11 (set (reg:DI 0 ax [orig:139 _53 ] [139])
        (sign_extend:DI (reg:SI 0 ax [189]))) "function.c":106 149 {*extendsidi2_rex64}
     (nil))
(insn 154 153 155 11 (parallel [
            (set (reg/f:DI 0 ax [orig:140 _54 ] [140])
                (plus:DI (reg:DI 0 ax [orig:139 _53 ] [139])
                    (reg/f:DI 1 dx [orig:138 _52 ] [138])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":106 222 {*adddi_1}
     (nil))
(insn 155 154 156 11 (set (reg:QI 0 ax [orig:141 _55 ] [141])
        (mem:QI (reg/f:DI 0 ax [orig:140 _54 ] [140]) [0 *_54+0 S1 A8])) "function.c":106 88 {*movqi_internal}
     (nil))
(insn 156 155 157 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:141 _55 ] [141])
            (const_int 65 [0x41]))) "function.c":106 9 {*cmpqi_1}
     (nil))
(jump_insn 157 156 158 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 186)
            (pc))) "function.c":106 682 {*jcc}
     (nil)
 -> 186)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 142 143 144 145 146 147 148 149 150 151 190 191 192
(note 158 157 159 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 12 (set (reg/f:DI 0 ax [orig:142 stdscr.5_56 ] [142])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":108 85 {*movdi_internal}
     (nil))
(insn 160 159 161 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":108 85 {*movdi_internal}
     (nil))
(insn 161 160 162 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":108 86 {*movsi_internal}
     (nil))
(insn 162 161 163 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:142 stdscr.5_56 ] [142])) "function.c":108 85 {*movdi_internal}
     (nil))
(call_insn 163 162 164 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":108 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 164 163 165 12 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":109 86 {*movsi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:DI 0 ax [orig:143 _57 ] [143])
        (sign_extend:DI (reg:SI 0 ax [190]))) "function.c":109 149 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 12 (parallel [
            (set (reg:DI 1 dx [orig:144 _58 ] [144])
                (ashift:DI (reg:DI 0 ax [orig:143 _57 ] [143])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":109 551 {*ashldi3_1}
     (nil))
(insn 167 166 168 12 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":109 85 {*movdi_internal}
     (nil))
(insn 168 167 169 12 (parallel [
            (set (reg/f:DI 0 ax [orig:145 _59 ] [145])
                (plus:DI (reg/f:DI 0 ax [191])
                    (reg:DI 1 dx [orig:144 _58 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":109 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:144 _58 ] [144]))
        (nil)))
(insn 169 168 170 12 (set (reg/f:DI 1 dx [orig:146 _60 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [orig:145 _59 ] [145]) [10 *_59+0 S8 A64])) "function.c":109 85 {*movdi_internal}
     (nil))
(insn 170 169 171 12 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":109 86 {*movsi_internal}
     (nil))
(insn 171 170 172 12 (set (reg:DI 0 ax [orig:147 _61 ] [147])
        (sign_extend:DI (reg:SI 0 ax [192]))) "function.c":109 149 {*extendsidi2_rex64}
     (nil))
(insn 172 171 173 12 (parallel [
            (set (reg/f:DI 0 ax [orig:148 _62 ] [148])
                (plus:DI (reg:DI 0 ax [orig:147 _61 ] [147])
                    (reg/f:DI 1 dx [orig:146 _60 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":109 222 {*adddi_1}
     (nil))
(insn 173 172 174 12 (set (reg:QI 0 ax [orig:149 _63 ] [149])
        (mem:QI (reg/f:DI 0 ax [orig:148 _62 ] [148]) [0 *_62+0 S1 A8])) "function.c":109 88 {*movqi_internal}
     (nil))
(insn 174 173 175 12 (set (reg:SI 0 ax [orig:150 _64 ] [150])
        (sign_extend:SI (reg:QI 0 ax [orig:149 _63 ] [149]))) "function.c":109 155 {extendqisi2}
     (nil))
(insn 175 174 176 12 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:150 _64 ] [150])) "function.c":109 86 {*movsi_internal}
     (nil))
(insn 176 175 177 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":109 85 {*movdi_internal}
     (nil))
(insn 177 176 178 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":109 88 {*movqi_internal}
     (nil))
(call_insn 178 177 179 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":109 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 179 178 180 12 (set (reg/f:DI 0 ax [orig:151 stdscr.6_65 ] [151])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":110 85 {*movdi_internal}
     (nil))
(insn 180 179 181 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":110 85 {*movdi_internal}
     (nil))
(insn 181 180 182 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":110 86 {*movsi_internal}
     (nil))
(insn 182 181 183 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:151 stdscr.6_65 ] [151])) "function.c":110 85 {*movdi_internal}
     (nil))
(call_insn 183 182 252 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":110 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 252 183 253 12 (set (pc)
        (label_ref 223)) 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 253 252 186)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 154 155 156 157 158 193 194 195
(code_label 186 253 187 13 17 (nil) [1 uses])
(note 187 186 188 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 13 (set (reg:SI 0 ax [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":112 86 {*movsi_internal}
     (nil))
(insn 189 188 190 13 (set (reg:DI 0 ax [orig:152 _66 ] [152])
        (sign_extend:DI (reg:SI 0 ax [193]))) "function.c":112 149 {*extendsidi2_rex64}
     (nil))
(insn 190 189 191 13 (parallel [
            (set (reg:DI 1 dx [orig:153 _67 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 _66 ] [152])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":112 551 {*ashldi3_1}
     (nil))
(insn 191 190 192 13 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":112 85 {*movdi_internal}
     (nil))
(insn 192 191 193 13 (parallel [
            (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (plus:DI (reg/f:DI 0 ax [194])
                    (reg:DI 1 dx [orig:153 _67 ] [153])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":112 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:153 _67 ] [153]))
        (nil)))
(insn 193 192 194 13 (set (reg/f:DI 1 dx [orig:155 _69 ] [155])
        (mem/f:DI (reg/f:DI 0 ax [orig:154 _68 ] [154]) [10 *_68+0 S8 A64])) "function.c":112 85 {*movdi_internal}
     (nil))
(insn 194 193 195 13 (set (reg:SI 0 ax [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":112 86 {*movsi_internal}
     (nil))
(insn 195 194 196 13 (set (reg:DI 0 ax [orig:156 _70 ] [156])
        (sign_extend:DI (reg:SI 0 ax [195]))) "function.c":112 149 {*extendsidi2_rex64}
     (nil))
(insn 196 195 197 13 (parallel [
            (set (reg/f:DI 0 ax [orig:157 _71 ] [157])
                (plus:DI (reg:DI 0 ax [orig:156 _70 ] [156])
                    (reg/f:DI 1 dx [orig:155 _69 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":112 222 {*adddi_1}
     (nil))
(insn 197 196 198 13 (set (reg:QI 0 ax [orig:158 _72 ] [158])
        (mem:QI (reg/f:DI 0 ax [orig:157 _71 ] [157]) [0 *_71+0 S1 A8])) "function.c":112 88 {*movqi_internal}
     (nil))
(insn 198 197 199 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:158 _72 ] [158])
            (const_int 46 [0x2e]))) "function.c":112 9 {*cmpqi_1}
     (nil))
(jump_insn 199 198 200 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) "function.c":112 682 {*jcc}
     (nil)
 -> 206)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 200 199 201 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":114 85 {*movdi_internal}
     (nil))
(insn 202 201 203 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":114 88 {*movqi_internal}
     (nil))
(call_insn 203 202 254 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":114 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 254 203 255 14 (set (pc)
        (label_ref 223)) 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 255 254 206)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 159 160 161 162 163 164 165 166 196 197 198
(code_label 206 255 207 15 18 (nil) [1 uses])
(note 207 206 208 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 15 (set (reg:SI 0 ax [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":118 86 {*movsi_internal}
     (nil))
(insn 209 208 210 15 (set (reg:DI 0 ax [orig:159 _73 ] [159])
        (sign_extend:DI (reg:SI 0 ax [196]))) "function.c":118 149 {*extendsidi2_rex64}
     (nil))
(insn 210 209 211 15 (parallel [
            (set (reg:DI 1 dx [orig:160 _74 ] [160])
                (ashift:DI (reg:DI 0 ax [orig:159 _73 ] [159])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":118 551 {*ashldi3_1}
     (nil))
(insn 211 210 212 15 (set (reg/f:DI 0 ax [197])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":118 85 {*movdi_internal}
     (nil))
(insn 212 211 213 15 (parallel [
            (set (reg/f:DI 0 ax [orig:161 _75 ] [161])
                (plus:DI (reg/f:DI 0 ax [197])
                    (reg:DI 1 dx [orig:160 _74 ] [160])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":118 222 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
            (reg:DI 1 dx [orig:160 _74 ] [160]))
        (nil)))
(insn 213 212 214 15 (set (reg/f:DI 1 dx [orig:162 _76 ] [162])
        (mem/f:DI (reg/f:DI 0 ax [orig:161 _75 ] [161]) [10 *_75+0 S8 A64])) "function.c":118 85 {*movdi_internal}
     (nil))
(insn 214 213 215 15 (set (reg:SI 0 ax [198])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":118 86 {*movsi_internal}
     (nil))
(insn 215 214 216 15 (set (reg:DI 0 ax [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 0 ax [198]))) "function.c":118 149 {*extendsidi2_rex64}
     (nil))
(insn 216 215 217 15 (parallel [
            (set (reg/f:DI 0 ax [orig:164 _78 ] [164])
                (plus:DI (reg:DI 0 ax [orig:163 _77 ] [163])
                    (reg/f:DI 1 dx [orig:162 _76 ] [162])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":118 222 {*adddi_1}
     (nil))
(insn 217 216 218 15 (set (reg:QI 0 ax [orig:165 _79 ] [165])
        (mem:QI (reg/f:DI 0 ax [orig:164 _78 ] [164]) [0 *_78+0 S1 A8])) "function.c":118 88 {*movqi_internal}
     (nil))
(insn 218 217 219 15 (set (reg:SI 0 ax [orig:166 _80 ] [166])
        (sign_extend:SI (reg:QI 0 ax [orig:165 _79 ] [165]))) "function.c":118 155 {extendqisi2}
     (nil))
(insn 219 218 220 15 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:166 _80 ] [166])) "function.c":118 86 {*movsi_internal}
     (nil))
(insn 220 219 221 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":118 85 {*movdi_internal}
     (nil))
(insn 221 220 222 15 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":118 88 {*movqi_internal}
     (nil))
(call_insn 222 221 223 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":118 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;;              5 [always] 
;;              10 [always] 
;;              12 [always] 
;;              14 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 223 222 224 16 14 (nil) [4 uses])
(note 224 223 225 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":91 221 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 226 225 227 17 12 (nil) [1 uses])
(note 227 226 229 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 229 227 230 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 30 [0x1e]))) "function.c":91 11 {*cmpsi_1}
     (nil))
(jump_insn 230 229 231 17 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 228)
            (pc))) "function.c":91 682 {*jcc}
     (nil)
 -> 228)
;;  succ:       4
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 231 230 232 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 233 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":89 221 {*addsi_1}
     (nil))
;;  succ:       19 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 233 232 234 19 11 (nil) [1 uses])
(note 234 233 236 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 236 234 237 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 20 [0x14]))) "function.c":89 11 {*cmpsi_1}
     (nil))
(jump_insn 237 236 238 19 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 235)
            (pc))) "function.c":89 682 {*jcc}
     (nil)
 -> 235)
;;  succ:       3
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 1, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 238 237 243 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 243 238 256 20 (const_int 0 [0]) "function.c":122 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 256 243 0 NOTE_INSN_DELETED)

;; Function druk_info_plansza_s (druk_info_plansza_s, funcdef_no=8, decl_uid=6218, cgraph_uid=8, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 124:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 148:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 164:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 180:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 188:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 189:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 196:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 197:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 201:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 204:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 205:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 208:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 209:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 211:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 214:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 217:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 218:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 222:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 223:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 225:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 226:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 230:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 234:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 235:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 238:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 239:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 242:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 247:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 248:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 251:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 255:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 265:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 268:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 269:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 270:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 272:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 273:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 277:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 278:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 281:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 285:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 289:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 293:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 296:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 297:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 298:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 301:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 302:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 306:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 310:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 314:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 315:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 323:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 327:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 331:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 335:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 344:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 348:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 349:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 350:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 352:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 356:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 363: point = 0, n_alt = -1
   Insn 358: point = 0, n_alt = 0
   Insn 357: point = 0, n_alt = 3
   Insn 356: point = 0, n_alt = 4
   Insn 355: point = 0, n_alt = 0
   Insn 354: point = 0, n_alt = -2
   Insn 353: point = 1, n_alt = 0
   Insn 352: point = 1, n_alt = 2
   Insn 351: point = 1, n_alt = 3
   Insn 350: point = 2, n_alt = 0
   Insn 349: point = 2, n_alt = 3
   Insn 348: point = 2, n_alt = 4
   Insn 347: point = 2, n_alt = 0
   Insn 346: point = 2, n_alt = -2
   Insn 345: point = 3, n_alt = 0
   Insn 344: point = 3, n_alt = 2
   Insn 343: point = 3, n_alt = 3
   Insn 342: point = 4, n_alt = 0
   Insn 341: point = 4, n_alt = -2
   Insn 340: point = 5, n_alt = 0
   Insn 339: point = 5, n_alt = 0
   Insn 338: point = 5, n_alt = 3
   Insn 337: point = 6, n_alt = 0
   Insn 336: point = 6, n_alt = 3
   Insn 335: point = 6, n_alt = 4
   Insn 334: point = 6, n_alt = 0
   Insn 333: point = 6, n_alt = -2
   Insn 332: point = 7, n_alt = 0
   Insn 331: point = 7, n_alt = 2
   Insn 330: point = 7, n_alt = 3
   Insn 329: point = 8, n_alt = 0
   Insn 328: point = 8, n_alt = 3
   Insn 327: point = 8, n_alt = 4
   Insn 326: point = 8, n_alt = 0
   Insn 325: point = 8, n_alt = -2
   Insn 324: point = 9, n_alt = 0
   Insn 323: point = 9, n_alt = 2
   Insn 322: point = 9, n_alt = 3
   Insn 321: point = 10, n_alt = 0
   Insn 320: point = 10, n_alt = -2
   Insn 319: point = 11, n_alt = 0
   Insn 318: point = 11, n_alt = 0
   Insn 317: point = 11, n_alt = 3
   Insn 316: point = 12, n_alt = 0
   Insn 315: point = 12, n_alt = 3
   Insn 314: point = 12, n_alt = 4
   Insn 313: point = 12, n_alt = 0
   Insn 312: point = 12, n_alt = -2
   Insn 311: point = 13, n_alt = 0
   Insn 310: point = 13, n_alt = 2
   Insn 309: point = 13, n_alt = 3
   Insn 308: point = 14, n_alt = 0
   Insn 307: point = 14, n_alt = 3
   Insn 306: point = 14, n_alt = 4
   Insn 305: point = 14, n_alt = 0
   Insn 304: point = 14, n_alt = -2
   Insn 303: point = 15, n_alt = 0
   Insn 302: point = 15, n_alt = 2
   Insn 301: point = 15, n_alt = 3
   Insn 300: point = 16, n_alt = 0
   Insn 299: point = 16, n_alt = -2
   Insn 298: point = 17, n_alt = 0
   Insn 297: point = 17, n_alt = 0
   Insn 296: point = 17, n_alt = 3
   Insn 295: point = 18, n_alt = 0
   Insn 294: point = 18, n_alt = 3
   Insn 293: point = 18, n_alt = 4
   Insn 292: point = 18, n_alt = 0
   Insn 291: point = 18, n_alt = -2
   Insn 290: point = 19, n_alt = 0
   Insn 289: point = 19, n_alt = 2
   Insn 288: point = 19, n_alt = 3
   Insn 287: point = 20, n_alt = 0
   Insn 286: point = 20, n_alt = 3
   Insn 285: point = 20, n_alt = 4
   Insn 284: point = 20, n_alt = 0
   Insn 283: point = 20, n_alt = -2
   Insn 282: point = 21, n_alt = 0
   Insn 281: point = 21, n_alt = 2
   Insn 280: point = 21, n_alt = 3
   Insn 279: point = 22, n_alt = 0
   Insn 278: point = 22, n_alt = 3
   Insn 277: point = 22, n_alt = 4
   Insn 276: point = 22, n_alt = 0
   Insn 275: point = 22, n_alt = -2
   Insn 274: point = 23, n_alt = 0
   Insn 273: point = 23, n_alt = 2
   Insn 272: point = 23, n_alt = 3
   Insn 271: point = 24, n_alt = 0
   Insn 270: point = 24, n_alt = 3
   Insn 269: point = 24, n_alt = 4
   Insn 268: point = 24, n_alt = 0
   Insn 267: point = 24, n_alt = -2
   Insn 266: point = 25, n_alt = 0
   Insn 265: point = 25, n_alt = 2
   Insn 264: point = 25, n_alt = 3
   Insn 263: point = 26, n_alt = 0
   Insn 262: point = 26, n_alt = -2
   Insn 261: point = 27, n_alt = 0
   Insn 260: point = 27, n_alt = 0
   Insn 259: point = 27, n_alt = 3
   Insn 258: point = 28, n_alt = 0
   Insn 257: point = 28, n_alt = -2
   Insn 256: point = 29, n_alt = 0
   Insn 255: point = 29, n_alt = 2
   Insn 254: point = 29, n_alt = 3
   Insn 253: point = 30, n_alt = 0
   Insn 252: point = 30, n_alt = 3
   Insn 251: point = 30, n_alt = 4
   Insn 250: point = 30, n_alt = 0
   Insn 249: point = 30, n_alt = -2
   Insn 248: point = 31, n_alt = 0
   Insn 247: point = 31, n_alt = 2
   Insn 246: point = 31, n_alt = 3
   Insn 245: point = 32, n_alt = 0
   Insn 244: point = 32, n_alt = -2
   Insn 243: point = 33, n_alt = 0
   Insn 242: point = 33, n_alt = 0
   Insn 241: point = 33, n_alt = 3
   Insn 240: point = 34, n_alt = 0
   Insn 239: point = 34, n_alt = 3
   Insn 238: point = 34, n_alt = 4
   Insn 237: point = 34, n_alt = 0
   Insn 236: point = 34, n_alt = -2
   Insn 235: point = 35, n_alt = 0
   Insn 234: point = 35, n_alt = 0
   Insn 233: point = 35, n_alt = 3
   Insn 232: point = 36, n_alt = 0
   Insn 231: point = 36, n_alt = 3
   Insn 230: point = 36, n_alt = 4
   Insn 229: point = 36, n_alt = 0
   Insn 228: point = 36, n_alt = -2
   Insn 227: point = 37, n_alt = 0
   Insn 226: point = 37, n_alt = 2
   Insn 225: point = 37, n_alt = 3
   Insn 224: point = 38, n_alt = 0
   Insn 223: point = 38, n_alt = 3
   Insn 222: point = 38, n_alt = 4
   Insn 221: point = 38, n_alt = 0
   Insn 220: point = 38, n_alt = -2
   Insn 219: point = 39, n_alt = 0
   Insn 218: point = 39, n_alt = 2
   Insn 217: point = 39, n_alt = 3
   Insn 216: point = 40, n_alt = 0
   Insn 215: point = 40, n_alt = -2
   Insn 214: point = 41, n_alt = 0
   Insn 213: point = 41, n_alt = 0
   Insn 212: point = 41, n_alt = 3
   Insn 211: point = 42, n_alt = 0
   Insn 210: point = 42, n_alt = 3
   Insn 209: point = 42, n_alt = 4
   Insn 208: point = 42, n_alt = 0
   Insn 207: point = 42, n_alt = -2
   Insn 206: point = 43, n_alt = 0
   Insn 205: point = 43, n_alt = 2
   Insn 204: point = 43, n_alt = 3
   Insn 203: point = 44, n_alt = 0
   Insn 202: point = 44, n_alt = 3
   Insn 201: point = 44, n_alt = 4
   Insn 200: point = 44, n_alt = 0
   Insn 199: point = 44, n_alt = -2
   Insn 198: point = 45, n_alt = 0
   Insn 197: point = 45, n_alt = 2
   Insn 196: point = 45, n_alt = 3
   Insn 195: point = 46, n_alt = 0
   Insn 194: point = 46, n_alt = -2
   Insn 193: point = 47, n_alt = 0
   Insn 192: point = 47, n_alt = 0
   Insn 191: point = 47, n_alt = 3
   Insn 190: point = 48, n_alt = 0
   Insn 189: point = 48, n_alt = 3
   Insn 188: point = 48, n_alt = 4
   Insn 187: point = 48, n_alt = 0
   Insn 186: point = 48, n_alt = -2
   Insn 185: point = 49, n_alt = 0
   Insn 184: point = 49, n_alt = 0
   Insn 183: point = 49, n_alt = 3
   Insn 182: point = 50, n_alt = 0
   Insn 181: point = 50, n_alt = 3
   Insn 180: point = 50, n_alt = 4
   Insn 179: point = 50, n_alt = -2
   Insn 178: point = 51, n_alt = -2
   Insn 177: point = 52, n_alt = 0
   Insn 176: point = 54, n_alt = 3
   Insn 175: point = 56, n_alt = 3
   Insn 174: point = 57, n_alt = 0
   Insn 173: point = 59, n_alt = 3
   Insn 172: point = 61, n_alt = 3
   Insn 171: point = 62, n_alt = 0
   Insn 170: point = 62, n_alt = -2
   Insn 169: point = 63, n_alt = 0
   Insn 168: point = 63, n_alt = 0
   Insn 167: point = 63, n_alt = 3
   Insn 166: point = 64, n_alt = 0
   Insn 165: point = 64, n_alt = 3
   Insn 164: point = 64, n_alt = 4
   Insn 163: point = 64, n_alt = -2
   Insn 162: point = 65, n_alt = -2
   Insn 161: point = 66, n_alt = 0
   Insn 160: point = 68, n_alt = 3
   Insn 159: point = 70, n_alt = 3
   Insn 158: point = 71, n_alt = 0
   Insn 157: point = 73, n_alt = 3
   Insn 156: point = 75, n_alt = 3
   Insn 155: point = 76, n_alt = 0
   Insn 154: point = 76, n_alt = -2
   Insn 153: point = 77, n_alt = 0
   Insn 152: point = 77, n_alt = 0
   Insn 151: point = 77, n_alt = 3
   Insn 150: point = 78, n_alt = 0
   Insn 149: point = 78, n_alt = 3
   Insn 148: point = 78, n_alt = 4
   Insn 147: point = 78, n_alt = 0
   Insn 146: point = 78, n_alt = -2
   Insn 145: point = 79, n_alt = 0
   Insn 144: point = 79, n_alt = 0
   Insn 143: point = 79, n_alt = 3
   Insn 142: point = 80, n_alt = 0
   Insn 141: point = 80, n_alt = 3
   Insn 140: point = 80, n_alt = 4
   Insn 139: point = 80, n_alt = -2
   Insn 138: point = 81, n_alt = -2
   Insn 137: point = 82, n_alt = 0
   Insn 136: point = 84, n_alt = 3
   Insn 135: point = 86, n_alt = 3
   Insn 134: point = 87, n_alt = 0
   Insn 133: point = 89, n_alt = 3
   Insn 132: point = 91, n_alt = 3
   Insn 131: point = 92, n_alt = 0
   Insn 130: point = 92, n_alt = -2
   Insn 129: point = 93, n_alt = 0
   Insn 128: point = 93, n_alt = 0
   Insn 127: point = 93, n_alt = 3
   Insn 126: point = 94, n_alt = 0
   Insn 125: point = 94, n_alt = 3
   Insn 124: point = 94, n_alt = 4
   Insn 123: point = 94, n_alt = -2
   Insn 122: point = 95, n_alt = -2
   Insn 121: point = 96, n_alt = -2
   Insn 120: point = 97, n_alt = -2
   Insn 119: point = 98, n_alt = 0
   Insn 118: point = 100, n_alt = 3
   Insn 117: point = 102, n_alt = 3
   Insn 116: point = 103, n_alt = 0
   Insn 115: point = 105, n_alt = 3
   Insn 114: point = 107, n_alt = 3
   Insn 113: point = 108, n_alt = 0
   Insn 112: point = 110, n_alt = 3
   Insn 111: point = 112, n_alt = 3
   Insn 110: point = 113, n_alt = 0
   Insn 109: point = 115, n_alt = 3
   Insn 108: point = 117, n_alt = 3
   Insn 107: point = 118, n_alt = 0
   Insn 106: point = 118, n_alt = -2
   Insn 105: point = 119, n_alt = 0
   Insn 104: point = 119, n_alt = 0
   Insn 103: point = 119, n_alt = 3
   Insn 102: point = 120, n_alt = 0
   Insn 101: point = 120, n_alt = 3
   Insn 100: point = 120, n_alt = 4
   Insn 99: point = 120, n_alt = -2
   Insn 98: point = 121, n_alt = -2
   Insn 97: point = 122, n_alt = 0
   Insn 96: point = 124, n_alt = 3
   Insn 95: point = 126, n_alt = 3
   Insn 94: point = 127, n_alt = 3
   Insn 93: point = 129, n_alt = 3
   Insn 92: point = 131, n_alt = 3
   Insn 91: point = 132, n_alt = 0
   Insn 90: point = 132, n_alt = -2
   Insn 89: point = 133, n_alt = 0
   Insn 88: point = 133, n_alt = 0
   Insn 87: point = 133, n_alt = 3
   Insn 86: point = 134, n_alt = 0
   Insn 85: point = 134, n_alt = 3
   Insn 84: point = 134, n_alt = 4
   Insn 83: point = 134, n_alt = -2
   Insn 82: point = 135, n_alt = -2
   Insn 81: point = 136, n_alt = 0
   Insn 80: point = 138, n_alt = 3
   Insn 79: point = 140, n_alt = 3
   Insn 78: point = 141, n_alt = 0
   Insn 77: point = 143, n_alt = 3
   Insn 76: point = 145, n_alt = 3
   Insn 75: point = 146, n_alt = 0
   Insn 74: point = 146, n_alt = -2
   Insn 73: point = 147, n_alt = 0
   Insn 72: point = 147, n_alt = 0
   Insn 71: point = 147, n_alt = 3
   Insn 70: point = 148, n_alt = 0
   Insn 69: point = 148, n_alt = 3
   Insn 68: point = 148, n_alt = 4
   Insn 67: point = 148, n_alt = 0
   Insn 66: point = 148, n_alt = -2
   Insn 65: point = 149, n_alt = 0
   Insn 64: point = 149, n_alt = 0
   Insn 63: point = 149, n_alt = 3
   Insn 62: point = 150, n_alt = 0
   Insn 61: point = 150, n_alt = 3
   Insn 60: point = 150, n_alt = 4
   Insn 59: point = 150, n_alt = -2
   Insn 58: point = 151, n_alt = 0
   Insn 57: point = 153, n_alt = 3
   Insn 56: point = 154, n_alt = 0
   Insn 55: point = 154, n_alt = -2
   Insn 54: point = 155, n_alt = 0
   Insn 53: point = 155, n_alt = 0
   Insn 52: point = 155, n_alt = 3
   Insn 51: point = 156, n_alt = 0
   Insn 50: point = 156, n_alt = 3
   Insn 49: point = 156, n_alt = 4
   Insn 48: point = 156, n_alt = -2
   Insn 47: point = 157, n_alt = -2
   Insn 46: point = 158, n_alt = 0
   Insn 45: point = 160, n_alt = 3
   Insn 44: point = 161, n_alt = 0
   Insn 43: point = 163, n_alt = 3
   Insn 42: point = 164, n_alt = 0
   Insn 41: point = 164, n_alt = -2
   Insn 40: point = 165, n_alt = 0
   Insn 39: point = 165, n_alt = 0
   Insn 38: point = 165, n_alt = 3
   Insn 37: point = 166, n_alt = 0
   Insn 36: point = 166, n_alt = 3
   Insn 35: point = 166, n_alt = 4
   Insn 34: point = 166, n_alt = -2
   Insn 33: point = 167, n_alt = -2
   Insn 32: point = 168, n_alt = 0
   Insn 31: point = 168, n_alt = 0
   Insn 30: point = 168, n_alt = -2
   Insn 29: point = 169, n_alt = 0
   Insn 28: point = 169, n_alt = 0
   Insn 27: point = 169, n_alt = 3
   Insn 26: point = 170, n_alt = 0
   Insn 25: point = 170, n_alt = 0
   Insn 24: point = 170, n_alt = 0
   Insn 23: point = 170, n_alt = 0
   Insn 22: point = 170, n_alt = 0
   Insn 21: point = 170, n_alt = 0
   Insn 20: point = 170, n_alt = 0
   Insn 19: point = 170, n_alt = 0
   Insn 18: point = 170, n_alt = 0
   Insn 17: point = 170, n_alt = 0
   Insn 16: point = 170, n_alt = 0
   Insn 15: point = 170, n_alt = 0
   Insn 14: point = 170, n_alt = 0
   Insn 13: point = 170, n_alt = 0
   Insn 12: point = 170, n_alt = 0
   Insn 11: point = 170, n_alt = 0
   Insn 10: point = 170, n_alt = 0
   Insn 9: point = 170, n_alt = 0
   Insn 8: point = 170, n_alt = 0
   Insn 7: point = 170, n_alt = 0
   Insn 6: point = 170, n_alt = 0
   Insn 2: point = 170, n_alt = 5
 r87: [168..169]
 r88: [166..167]
 r89: [164..165]
 r90: [157..161]
 r91: [156..158]
 r92: [154..155]
 r93: [150..151]
 r94: [148..149]
 r95: [146..147]
 r96: [142..143]
 r97: [135..141]
 r98: [137..138]
 r99: [134..136]
 r100: [132..133]
 r101: [128..129]
 r102: [121..127]
 r103: [123..124]
 r104: [120..122]
 r105: [118..119]
 r106: [114..115]
 r107: [97..113]
 r108: [109..110]
 r109: [96..108]
 r110: [104..105]
 r111: [95..103]
 r112: [99..100]
 r113: [94..98]
 r114: [92..93]
 r115: [88..89]
 r116: [81..87]
 r117: [83..84]
 r118: [80..82]
 r119: [78..79]
 r120: [76..77]
 r121: [72..73]
 r122: [65..71]
 r123: [67..68]
 r124: [64..66]
 r125: [62..63]
 r126: [58..59]
 r127: [51..57]
 r128: [53..54]
 r129: [50..52]
 r130: [48..49]
 r131: [46..47]
 r132: [44..45]
 r133: [42..43]
 r134: [40..41]
 r135: [38..39]
 r136: [36..37]
 r137: [34..35]
 r138: [32..33]
 r139: [30..31]
 r140: [28..29]
 r141: [26..27]
 r142: [24..25]
 r143: [22..23]
 r144: [20..21]
 r145: [18..19]
 r146: [16..17]
 r147: [14..15]
 r148: [12..13]
 r149: [10..11]
 r150: [8..9]
 r151: [6..7]
 r152: [4..5]
 r153: [2..3]
 r154: [0..1]
 r155: [162..163]
 r156: [159..160]
 r157: [152..153]
 r158: [144..145]
 r159: [139..140]
 r160: [130..131]
 r161: [125..126]
 r162: [116..117]
 r163: [111..112]
 r164: [106..107]
 r165: [101..102]
 r166: [90..91]
 r167: [85..86]
 r168: [74..75]
 r169: [69..70]
 r170: [60..61]
 r171: [55..56]
Compressing live ranges: from 170 to 152 - 89%
Ranges after the compression:
 r87: [150..151]
 r88: [148..149]
 r89: [146..147]
 r90: [140..143]
 r91: [140..141]
 r92: [138..139]
 r93: [134..135]
 r94: [132..133]
 r95: [130..131]
 r96: [126..127]
 r97: [120..125]
 r98: [122..123]
 r99: [120..121]
 r100: [118..119]
 r101: [114..115]
 r102: [108..113]
 r103: [110..111]
 r104: [108..109]
 r105: [106..107]
 r106: [102..103]
 r107: [88..101]
 r108: [98..99]
 r109: [88..97]
 r110: [94..95]
 r111: [88..93]
 r112: [90..91]
 r113: [88..89]
 r114: [86..87]
 r115: [82..83]
 r116: [76..81]
 r117: [78..79]
 r118: [76..77]
 r119: [74..75]
 r120: [72..73]
 r121: [68..69]
 r122: [62..67]
 r123: [64..65]
 r124: [62..63]
 r125: [60..61]
 r126: [56..57]
 r127: [50..55]
 r128: [52..53]
 r129: [50..51]
 r130: [48..49]
 r131: [46..47]
 r132: [44..45]
 r133: [42..43]
 r134: [40..41]
 r135: [38..39]
 r136: [36..37]
 r137: [34..35]
 r138: [32..33]
 r139: [30..31]
 r140: [28..29]
 r141: [26..27]
 r142: [24..25]
 r143: [22..23]
 r144: [20..21]
 r145: [18..19]
 r146: [16..17]
 r147: [14..15]
 r148: [12..13]
 r149: [10..11]
 r150: [8..9]
 r151: [6..7]
 r152: [4..5]
 r153: [2..3]
 r154: [0..1]
 r155: [144..145]
 r156: [142..143]
 r157: [136..137]
 r158: [128..129]
 r159: [124..125]
 r160: [116..117]
 r161: [112..113]
 r162: [104..105]
 r163: [100..101]
 r164: [96..97]
 r165: [92..93]
 r166: [84..85]
 r167: [80..81]
 r168: [70..71]
 r169: [66..67]
 r170: [58..59]
 r171: [54..55]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 27
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 41
changing reg in insn 44
changing reg in insn 47
changing reg in insn 46
changing reg in insn 48
changing reg in insn 52
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 66
changing reg in insn 71
changing reg in insn 74
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 82
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 87
changing reg in insn 90
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 98
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 99
changing reg in insn 103
changing reg in insn 106
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 120
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 121
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 122
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 123
changing reg in insn 127
changing reg in insn 130
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 138
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 143
changing reg in insn 146
changing reg in insn 151
changing reg in insn 154
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 162
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 167
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 178
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 179
changing reg in insn 183
changing reg in insn 186
changing reg in insn 191
changing reg in insn 194
changing reg in insn 196
changing reg in insn 199
changing reg in insn 204
changing reg in insn 207
changing reg in insn 212
changing reg in insn 215
changing reg in insn 217
changing reg in insn 220
changing reg in insn 225
changing reg in insn 228
changing reg in insn 233
changing reg in insn 236
changing reg in insn 241
changing reg in insn 244
changing reg in insn 246
changing reg in insn 249
changing reg in insn 254
changing reg in insn 257
changing reg in insn 259
changing reg in insn 262
changing reg in insn 264
changing reg in insn 267
changing reg in insn 272
changing reg in insn 275
changing reg in insn 280
changing reg in insn 283
changing reg in insn 288
changing reg in insn 291
changing reg in insn 296
changing reg in insn 299
changing reg in insn 301
changing reg in insn 304
changing reg in insn 309
changing reg in insn 312
changing reg in insn 317
changing reg in insn 320
changing reg in insn 322
changing reg in insn 325
changing reg in insn 330
changing reg in insn 333
changing reg in insn 338
changing reg in insn 341
changing reg in insn 343
changing reg in insn 346
changing reg in insn 351
changing reg in insn 354
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 57
changing reg in insn 58
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 108
changing reg in insn 109
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 176
deleting insn with uid = 33.
deleting insn with uid = 47.
deleting insn with uid = 82.
deleting insn with uid = 98.
deleting insn with uid = 121.
deleting insn with uid = 122.
deleting insn with uid = 138.
deleting insn with uid = 162.
deleting insn with uid = 178.
starting the processing of deferred insns
ending the processing of deferred insns


druk_info_plansza_s

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8]
;;  ref usage 	r0={175d,104u} r1={120d,48u} r2={73d,1u} r4={123d,51u} r5={141d,70u} r6={1d,20u} r7={1d,73u} r8={71d} r9={71d} r10={71d} r11={71d} r12={71d} r13={71d} r14={71d} r15={71d} r17={73d} r18={71d} r19={71d} r20={1d,1u} r21={72d} r22={72d} r23={72d} r24={72d} r25={72d} r26={72d} r27={72d} r28={72d} r29={71d} r30={71d} r31={71d} r32={71d} r33={71d} r34={71d} r35={71d} r36={71d} r37={73d,1u} r38={72d} r39={71d} r40={71d} r45={71d} r46={71d} r47={71d} r48={71d} r49={71d} r50={71d} r51={71d} r52={71d} r53={71d} r54={71d} r55={71d} r56={71d} r57={71d} r58={71d} r59={71d} r60={71d} r61={71d} r62={71d} r63={71d} r64={71d} r65={71d} r66={71d} r67={71d} r68={71d} r69={71d} r70={71d} r71={71d} r72={71d} r73={71d} r74={71d} r75={71d} r76={71d} r77={71d} r78={71d} r79={71d} r80={71d} 
;;    total ref usage 5774{5405d,369u,0e} in 346{275 regular + 71 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":126 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("start_color") [flags 0x41]  <function_decl 0x7f7cd10bd300 start_color>) [0 start_color S1 A8])
            (const_int 0 [0]))) "function.c":127 700 {*call_value}
     (nil)
    (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":128 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":128 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":128 86 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":128 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 11 10 12 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":129 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":129 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "function.c":129 86 {*movsi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":129 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (const_int 5 [0x5])) "function.c":130 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":130 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 5 di)
        (const_int 6 [0x6])) "function.c":130 86 {*movsi_internal}
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":130 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 19 18 20 2 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "function.c":131 86 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":131 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 5 di)
        (const_int 11 [0xb])) "function.c":131 86 {*movsi_internal}
     (nil))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":131 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 23 22 24 2 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "function.c":132 86 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":132 86 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 5 di)
        (const_int 12 [0xc])) "function.c":132 86 {*movsi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":132 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [orig:87 stdscr.7_1 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":134 85 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":134 86 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:SI 4 si)
        (const_int 2 [0x2])) "function.c":134 86 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 stdscr.7_1 ] [87])) "function.c":134 85 {*movdi_internal}
     (nil))
(call_insn 31 30 32 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":134 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(call_insn 32 31 34 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":135 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 34 32 35 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "function.c":135 86 {*movsi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f7cd0ee26c0 *.LC5>)) "function.c":135 85 {*movdi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":135 88 {*movqi_internal}
     (nil))
(call_insn 37 36 38 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":135 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 38 37 39 2 (set (reg/f:DI 0 ax [orig:89 stdscr.8_3 ] [89])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":137 85 {*movdi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":137 86 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:SI 4 si)
        (const_int 3 [0x3])) "function.c":137 86 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 stdscr.8_3 ] [89])) "function.c":137 85 {*movdi_internal}
     (nil))
(call_insn 42 41 43 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":137 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 43 42 44 2 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":138 85 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:SI 1 dx [orig:90 _4 ] [90])
        (mem:SI (plus:DI (reg/f:DI 0 ax [155])
                (const_int 8 [0x8])) [3 serwer_80(D)->y_camp+0 S4 A64])) "function.c":138 86 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":138 85 {*movdi_internal}
     (nil))
(insn 46 45 48 2 (set (reg:SI 0 ax [orig:91 _5 ] [91])
        (mem:SI (plus:DI (reg/f:DI 0 ax [156])
                (const_int 4 [0x4])) [3 serwer_80(D)->x_camp+0 S4 A32])) "function.c":138 86 {*movsi_internal}
     (nil))
(insn 48 46 49 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:91 _5 ] [91])) "function.c":138 86 {*movsi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f7cd0ee2750 *.LC6>)) "function.c":138 85 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":138 88 {*movqi_internal}
     (nil))
(call_insn 51 50 52 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":138 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 52 51 53 2 (set (reg/f:DI 0 ax [orig:92 stdscr.9_6 ] [92])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":140 85 {*movdi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":140 86 {*movsi_internal}
     (nil))
(insn 54 53 55 2 (set (reg:SI 4 si)
        (const_int 4 [0x4])) "function.c":140 86 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 stdscr.9_6 ] [92])) "function.c":140 85 {*movdi_internal}
     (nil))
(call_insn 56 55 57 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":140 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 57 56 58 2 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":141 85 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:SI 0 ax [orig:93 _7 ] [93])
        (mem:SI (plus:DI (reg/f:DI 0 ax [157])
                (const_int 12 [0xc])) [3 serwer_80(D)->runda+0 S4 A32])) "function.c":141 86 {*movsi_internal}
     (nil))
(insn 59 58 60 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:93 _7 ] [93])) "function.c":141 86 {*movsi_internal}
     (nil))
(insn 60 59 61 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f7cd0ee27e0 *.LC7>)) "function.c":141 85 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":141 88 {*movqi_internal}
     (nil))
(call_insn 62 61 63 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":141 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 63 62 64 2 (set (reg/f:DI 0 ax [orig:94 stdscr.10_8 ] [94])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":143 85 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":143 86 {*movsi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:SI 4 si)
        (const_int 5 [0x5])) "function.c":143 86 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:94 stdscr.10_8 ] [94])) "function.c":143 85 {*movdi_internal}
     (nil))
(call_insn 67 66 68 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":143 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 68 67 69 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f7cd0ee2870 *.LC8>)) "function.c":144 85 {*movdi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":144 88 {*movqi_internal}
     (nil))
(call_insn 70 69 71 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":144 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 71 70 72 2 (set (reg/f:DI 0 ax [orig:95 stdscr.11_9 ] [95])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":146 85 {*movdi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":146 86 {*movsi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:SI 4 si)
        (const_int 6 [0x6])) "function.c":146 86 {*movsi_internal}
     (nil))
(insn 74 73 75 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 stdscr.11_9 ] [95])) "function.c":146 85 {*movdi_internal}
     (nil))
(call_insn 75 74 76 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":146 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 76 75 77 2 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 77 76 78 2 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [158])
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 78 77 79 2 (set (reg:SI 1 dx [orig:97 _11 ] [97])
        (mem:SI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [3 _10->PID+0 S4 A64])) "function.c":147 86 {*movsi_internal}
     (nil))
(insn 79 78 80 2 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 80 79 81 2 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [159])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 81 80 83 2 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (reg/f:DI 0 ax [orig:98 _12 ] [98]) [3 _12->PID+0 S4 A64])) "function.c":147 86 {*movsi_internal}
     (nil))
(insn 83 81 84 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:99 _13 ] [99])) "function.c":147 86 {*movsi_internal}
     (nil))
(insn 84 83 85 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f7cd0e9c870 *.LC9>)) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 85 84 86 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":147 88 {*movqi_internal}
     (nil))
(call_insn 86 85 87 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":147 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 87 86 88 2 (set (reg/f:DI 0 ax [orig:100 stdscr.12_14 ] [100])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":149 85 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":149 86 {*movsi_internal}
     (nil))
(insn 89 88 90 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":149 86 {*movsi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:100 stdscr.12_14 ] [100])) "function.c":149 85 {*movdi_internal}
     (nil))
(call_insn 91 90 92 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":149 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 92 91 93 2 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 93 92 94 2 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 94 93 95 2 (parallel [
            (set (reg/f:DI 1 dx [orig:102 _16 ] [102])
                (plus:DI (reg/f:DI 0 ax [orig:101 _15 ] [101])
                    (const_int 41 [0x29])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":150 222 {*adddi_1}
     (nil))
(insn 95 94 96 2 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 96 95 97 2 (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 97 96 99 2 (parallel [
            (set (reg/f:DI 0 ax [orig:104 _18 ] [104])
                (plus:DI (reg/f:DI 0 ax [orig:103 _17 ] [103])
                    (const_int 41 [0x29])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":150 222 {*adddi_1}
     (nil))
(insn 99 97 100 2 (set (reg:DI 4 si)
        (reg/f:DI 0 ax [orig:104 _18 ] [104])) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 100 99 101 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f7cd0ee2900 *.LC10>)) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 101 100 102 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":150 88 {*movqi_internal}
     (nil))
(call_insn 102 101 103 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":150 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 103 102 104 2 (set (reg/f:DI 0 ax [orig:105 stdscr.13_19 ] [105])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":152 85 {*movdi_internal}
     (nil))
(insn 104 103 105 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":152 86 {*movsi_internal}
     (nil))
(insn 105 104 106 2 (set (reg:SI 4 si)
        (const_int 8 [0x8])) "function.c":152 86 {*movsi_internal}
     (nil))
(insn 106 105 107 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 stdscr.13_19 ] [105])) "function.c":152 85 {*movdi_internal}
     (nil))
(call_insn 107 106 108 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":152 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 108 107 109 2 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 109 108 110 2 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [162])
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 110 109 111 2 (set (reg:SI 4 si [orig:107 _21 ] [107])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (const_int 16 [0x10])) [3 _20->y_current+0 S4 A64])) "function.c":153 86 {*movsi_internal}
     (nil))
(insn 111 110 112 2 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 112 111 113 2 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [163])
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 113 112 114 2 (set (reg:SI 2 cx [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:108 _22 ] [108])
                (const_int 12 [0xc])) [3 _22->x_current+0 S4 A32])) "function.c":153 86 {*movsi_internal}
     (nil))
(insn 114 113 115 2 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 115 114 116 2 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [164])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 116 115 117 2 (set (reg:SI 1 dx [orig:111 _25 ] [111])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (const_int 16 [0x10])) [3 _24->y_current+0 S4 A64])) "function.c":153 86 {*movsi_internal}
     (nil))
(insn 117 116 118 2 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 118 117 119 2 (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [165])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 119 118 120 2 (set (reg:SI 0 ax [orig:113 _27 ] [113])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:112 _26 ] [112])
                (const_int 12 [0xc])) [3 _26->x_current+0 S4 A32])) "function.c":153 86 {*movsi_internal}
     (nil))
(insn 120 119 123 2 (set (reg:SI 37 r8)
        (reg:SI 4 si [orig:107 _21 ] [107])) "function.c":153 86 {*movsi_internal}
     (nil))
(insn 123 120 124 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:113 _27 ] [113])) "function.c":153 86 {*movsi_internal}
     (nil))
(insn 124 123 125 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f7cd0ee2990 *.LC11>)) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 125 124 126 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":153 88 {*movqi_internal}
     (nil))
(call_insn 126 125 127 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":153 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 37 r8))
                            (nil))))))))
(insn 127 126 128 2 (set (reg/f:DI 0 ax [orig:114 stdscr.14_28 ] [114])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":155 85 {*movdi_internal}
     (nil))
(insn 128 127 129 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":155 86 {*movsi_internal}
     (nil))
(insn 129 128 130 2 (set (reg:SI 4 si)
        (const_int 9 [0x9])) "function.c":155 86 {*movsi_internal}
     (nil))
(insn 130 129 131 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:114 stdscr.14_28 ] [114])) "function.c":155 85 {*movdi_internal}
     (nil))
(call_insn 131 130 132 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":155 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 132 131 133 2 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 133 132 134 2 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [166])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 134 133 135 2 (set (reg:SI 1 dx [orig:116 _30 ] [116])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:115 _29 ] [115])
                (const_int 28 [0x1c])) [3 _29->deaths+0 S4 A32])) "function.c":156 86 {*movsi_internal}
     (nil))
(insn 135 134 136 2 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 136 135 137 2 (set (reg/f:DI 0 ax [orig:117 _31 ] [117])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [167])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 137 136 139 2 (set (reg:SI 0 ax [orig:118 _32 ] [118])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:117 _31 ] [117])
                (const_int 28 [0x1c])) [3 _31->deaths+0 S4 A32])) "function.c":156 86 {*movsi_internal}
     (nil))
(insn 139 137 140 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:118 _32 ] [118])) "function.c":156 86 {*movsi_internal}
     (nil))
(insn 140 139 141 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f7cd0ee2a20 *.LC12>)) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 141 140 142 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":156 88 {*movqi_internal}
     (nil))
(call_insn 142 141 143 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":156 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 143 142 144 2 (set (reg/f:DI 0 ax [orig:119 stdscr.15_33 ] [119])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":158 85 {*movdi_internal}
     (nil))
(insn 144 143 145 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":158 86 {*movsi_internal}
     (nil))
(insn 145 144 146 2 (set (reg:SI 4 si)
        (const_int 11 [0xb])) "function.c":158 86 {*movsi_internal}
     (nil))
(insn 146 145 147 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:119 stdscr.15_33 ] [119])) "function.c":158 85 {*movdi_internal}
     (nil))
(call_insn 147 146 148 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":158 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 148 147 149 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f7cd0ee2ab0 *.LC13>)) "function.c":159 85 {*movdi_internal}
     (nil))
(insn 149 148 150 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":159 88 {*movqi_internal}
     (nil))
(call_insn 150 149 151 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":159 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 151 150 152 2 (set (reg/f:DI 0 ax [orig:120 stdscr.16_34 ] [120])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":161 85 {*movdi_internal}
     (nil))
(insn 152 151 153 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":161 86 {*movsi_internal}
     (nil))
(insn 153 152 154 2 (set (reg:SI 4 si)
        (const_int 12 [0xc])) "function.c":161 86 {*movsi_internal}
     (nil))
(insn 154 153 155 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:120 stdscr.16_34 ] [120])) "function.c":161 85 {*movdi_internal}
     (nil))
(call_insn 155 154 156 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":161 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 156 155 157 2 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 157 156 158 2 (set (reg/f:DI 0 ax [orig:121 _35 ] [121])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [168])
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 158 157 159 2 (set (reg:SI 1 dx [orig:122 _36 ] [122])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:121 _35 ] [121])
                (const_int 32 [0x20])) [3 _35->coins_carried+0 S4 A64])) "function.c":162 86 {*movsi_internal}
     (nil))
(insn 159 158 160 2 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 160 159 161 2 (set (reg/f:DI 0 ax [orig:123 _37 ] [123])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [169])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 161 160 163 2 (set (reg:SI 0 ax [orig:124 _38 ] [124])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:123 _37 ] [123])
                (const_int 32 [0x20])) [3 _37->coins_carried+0 S4 A64])) "function.c":162 86 {*movsi_internal}
     (nil))
(insn 163 161 164 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:124 _38 ] [124])) "function.c":162 86 {*movsi_internal}
     (nil))
(insn 164 163 165 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f7cd0ee2b40 *.LC14>)) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 165 164 166 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":162 88 {*movqi_internal}
     (nil))
(call_insn 166 165 167 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":162 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 167 166 168 2 (set (reg/f:DI 0 ax [orig:125 stdscr.17_39 ] [125])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":164 85 {*movdi_internal}
     (nil))
(insn 168 167 169 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":164 86 {*movsi_internal}
     (nil))
(insn 169 168 170 2 (set (reg:SI 4 si)
        (const_int 13 [0xd])) "function.c":164 86 {*movsi_internal}
     (nil))
(insn 170 169 171 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:125 stdscr.17_39 ] [125])) "function.c":164 85 {*movdi_internal}
     (nil))
(call_insn 171 170 172 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":164 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 172 171 173 2 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 173 172 174 2 (set (reg/f:DI 0 ax [orig:126 _40 ] [126])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [170])
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 174 173 175 2 (set (reg:SI 1 dx [orig:127 _41 ] [127])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:126 _40 ] [126])
                (const_int 36 [0x24])) [3 _40->coins_brought+0 S4 A32])) "function.c":165 86 {*movsi_internal}
     (nil))
(insn 175 174 176 2 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 176 175 177 2 (set (reg/f:DI 0 ax [orig:128 _42 ] [128])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [171])
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 177 176 179 2 (set (reg:SI 0 ax [orig:129 _43 ] [129])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:128 _42 ] [128])
                (const_int 36 [0x24])) [3 _42->coins_brought+0 S4 A32])) "function.c":165 86 {*movsi_internal}
     (nil))
(insn 179 177 180 2 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:129 _43 ] [129])) "function.c":165 86 {*movsi_internal}
     (nil))
(insn 180 179 181 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f7cd0ee2bd0 *.LC15>)) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 181 180 182 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":165 88 {*movqi_internal}
     (nil))
(call_insn 182 181 183 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":165 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 183 182 184 2 (set (reg/f:DI 0 ax [orig:130 stdscr.18_44 ] [130])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":167 85 {*movdi_internal}
     (nil))
(insn 184 183 185 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":167 86 {*movsi_internal}
     (nil))
(insn 185 184 186 2 (set (reg:SI 4 si)
        (const_int 14 [0xe])) "function.c":167 86 {*movsi_internal}
     (nil))
(insn 186 185 187 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:130 stdscr.18_44 ] [130])) "function.c":167 85 {*movdi_internal}
     (nil))
(call_insn 187 186 188 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":167 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 188 187 189 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f7cd0ee2c60 *.LC16>)) "function.c":168 85 {*movdi_internal}
     (nil))
(insn 189 188 190 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":168 88 {*movqi_internal}
     (nil))
(call_insn 190 189 191 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":168 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 191 190 192 2 (set (reg/f:DI 0 ax [orig:131 stdscr.19_45 ] [131])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":170 85 {*movdi_internal}
     (nil))
(insn 192 191 193 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":170 86 {*movsi_internal}
     (nil))
(insn 193 192 194 2 (set (reg:SI 4 si)
        (const_int 15 [0xf])) "function.c":170 86 {*movsi_internal}
     (nil))
(insn 194 193 195 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:131 stdscr.19_45 ] [131])) "function.c":170 85 {*movdi_internal}
     (nil))
(call_insn 195 194 196 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":170 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 196 195 197 2 (set (reg/f:DI 0 ax [orig:132 stdscr.20_46 ] [132])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":171 85 {*movdi_internal}
     (nil))
(insn 197 196 198 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":171 85 {*movdi_internal}
     (nil))
(insn 198 197 199 2 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":171 86 {*movsi_internal}
     (nil))
(insn 199 198 200 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:132 stdscr.20_46 ] [132])) "function.c":171 85 {*movdi_internal}
     (nil))
(call_insn 200 199 201 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":171 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 201 200 202 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f7cd0ee2cf0 *.LC17>)) "function.c":172 85 {*movdi_internal}
     (nil))
(insn 202 201 203 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":172 88 {*movqi_internal}
     (nil))
(call_insn 203 202 204 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":172 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 204 203 205 2 (set (reg/f:DI 0 ax [orig:133 stdscr.21_47 ] [133])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":173 85 {*movdi_internal}
     (nil))
(insn 205 204 206 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":173 85 {*movdi_internal}
     (nil))
(insn 206 205 207 2 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":173 86 {*movsi_internal}
     (nil))
(insn 207 206 208 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:133 stdscr.21_47 ] [133])) "function.c":173 85 {*movdi_internal}
     (nil))
(call_insn 208 207 209 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":173 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 209 208 210 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f7cd0ee2d80 *.LC18>)) "function.c":174 85 {*movdi_internal}
     (nil))
(insn 210 209 211 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":174 88 {*movqi_internal}
     (nil))
(call_insn 211 210 212 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":174 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 212 211 213 2 (set (reg/f:DI 0 ax [orig:134 stdscr.22_48 ] [134])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":176 85 {*movdi_internal}
     (nil))
(insn 213 212 214 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":176 86 {*movsi_internal}
     (nil))
(insn 214 213 215 2 (set (reg:SI 4 si)
        (const_int 16 [0x10])) "function.c":176 86 {*movsi_internal}
     (nil))
(insn 215 214 216 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:134 stdscr.22_48 ] [134])) "function.c":176 85 {*movdi_internal}
     (nil))
(call_insn 216 215 217 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":176 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 217 216 218 2 (set (reg/f:DI 0 ax [orig:135 stdscr.23_49 ] [135])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":177 85 {*movdi_internal}
     (nil))
(insn 218 217 219 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":177 85 {*movdi_internal}
     (nil))
(insn 219 218 220 2 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":177 86 {*movsi_internal}
     (nil))
(insn 220 219 221 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:135 stdscr.23_49 ] [135])) "function.c":177 85 {*movdi_internal}
     (nil))
(call_insn 221 220 222 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":177 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 222 221 223 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":178 85 {*movdi_internal}
     (nil))
(insn 223 222 224 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":178 88 {*movqi_internal}
     (nil))
(call_insn 224 223 225 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":178 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 225 224 226 2 (set (reg/f:DI 0 ax [orig:136 stdscr.24_50 ] [136])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":179 85 {*movdi_internal}
     (nil))
(insn 226 225 227 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":179 85 {*movdi_internal}
     (nil))
(insn 227 226 228 2 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":179 86 {*movsi_internal}
     (nil))
(insn 228 227 229 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:136 stdscr.24_50 ] [136])) "function.c":179 85 {*movdi_internal}
     (nil))
(call_insn 229 228 230 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":179 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 230 229 231 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f7cd0ee2e10 *.LC19>)) "function.c":180 85 {*movdi_internal}
     (nil))
(insn 231 230 232 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":180 88 {*movqi_internal}
     (nil))
(call_insn 232 231 233 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":180 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 233 232 234 2 (set (reg/f:DI 0 ax [orig:137 stdscr.25_51 ] [137])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":182 85 {*movdi_internal}
     (nil))
(insn 234 233 235 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":182 86 {*movsi_internal}
     (nil))
(insn 235 234 236 2 (set (reg:SI 4 si)
        (const_int 17 [0x11])) "function.c":182 86 {*movsi_internal}
     (nil))
(insn 236 235 237 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:137 stdscr.25_51 ] [137])) "function.c":182 85 {*movdi_internal}
     (nil))
(call_insn 237 236 238 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":182 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 238 237 239 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f7cd0ee2ea0 *.LC20>)) "function.c":183 85 {*movdi_internal}
     (nil))
(insn 239 238 240 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":183 88 {*movqi_internal}
     (nil))
(call_insn 240 239 241 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":183 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 241 240 242 2 (set (reg/f:DI 0 ax [orig:138 stdscr.26_52 ] [138])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":185 85 {*movdi_internal}
     (nil))
(insn 242 241 243 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":185 86 {*movsi_internal}
     (nil))
(insn 243 242 244 2 (set (reg:SI 4 si)
        (const_int 18 [0x12])) "function.c":185 86 {*movsi_internal}
     (nil))
(insn 244 243 245 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:138 stdscr.26_52 ] [138])) "function.c":185 85 {*movdi_internal}
     (nil))
(call_insn 245 244 246 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":185 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 246 245 247 2 (set (reg/f:DI 0 ax [orig:139 stdscr.27_53 ] [139])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":186 85 {*movdi_internal}
     (nil))
(insn 247 246 248 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":186 85 {*movdi_internal}
     (nil))
(insn 248 247 249 2 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":186 86 {*movsi_internal}
     (nil))
(insn 249 248 250 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:139 stdscr.27_53 ] [139])) "function.c":186 85 {*movdi_internal}
     (nil))
(call_insn 250 249 251 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":186 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 251 250 252 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f7cd0ee2f30 *.LC21>)) "function.c":187 85 {*movdi_internal}
     (nil))
(insn 252 251 253 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":187 88 {*movqi_internal}
     (nil))
(call_insn 253 252 254 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":187 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 254 253 255 2 (set (reg/f:DI 0 ax [orig:140 stdscr.28_54 ] [140])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":188 85 {*movdi_internal}
     (nil))
(insn 255 254 256 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":188 85 {*movdi_internal}
     (nil))
(insn 256 255 257 2 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":188 86 {*movsi_internal}
     (nil))
(insn 257 256 258 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:140 stdscr.28_54 ] [140])) "function.c":188 85 {*movdi_internal}
     (nil))
(call_insn 258 257 259 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":188 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 259 258 260 2 (set (reg/f:DI 0 ax [orig:141 stdscr.29_55 ] [141])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":191 85 {*movdi_internal}
     (nil))
(insn 260 259 261 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":191 86 {*movsi_internal}
     (nil))
(insn 261 260 262 2 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":191 86 {*movsi_internal}
     (nil))
(insn 262 261 263 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:141 stdscr.29_55 ] [141])) "function.c":191 85 {*movdi_internal}
     (nil))
(call_insn 263 262 264 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":191 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 264 263 265 2 (set (reg/f:DI 0 ax [orig:142 stdscr.30_56 ] [142])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":192 85 {*movdi_internal}
     (nil))
(insn 265 264 266 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":192 85 {*movdi_internal}
     (nil))
(insn 266 265 267 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":192 86 {*movsi_internal}
     (nil))
(insn 267 266 268 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:142 stdscr.30_56 ] [142])) "function.c":192 85 {*movdi_internal}
     (nil))
(call_insn 268 267 269 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":192 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 269 268 270 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f7cd0ef3000 *.LC22>)) "function.c":193 85 {*movdi_internal}
     (nil))
(insn 270 269 271 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":193 88 {*movqi_internal}
     (nil))
(call_insn 271 270 272 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":193 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 272 271 273 2 (set (reg/f:DI 0 ax [orig:143 stdscr.31_57 ] [143])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":194 85 {*movdi_internal}
     (nil))
(insn 273 272 274 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":194 85 {*movdi_internal}
     (nil))
(insn 274 273 275 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":194 86 {*movsi_internal}
     (nil))
(insn 275 274 276 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:143 stdscr.31_57 ] [143])) "function.c":194 85 {*movdi_internal}
     (nil))
(call_insn 276 275 277 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":194 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 277 276 278 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f7cd0ef3090 *.LC23>)) "function.c":195 85 {*movdi_internal}
     (nil))
(insn 278 277 279 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":195 88 {*movqi_internal}
     (nil))
(call_insn 279 278 280 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":195 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 280 279 281 2 (set (reg/f:DI 0 ax [orig:144 stdscr.32_58 ] [144])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":196 85 {*movdi_internal}
     (nil))
(insn 281 280 282 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":196 85 {*movdi_internal}
     (nil))
(insn 282 281 283 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":196 86 {*movsi_internal}
     (nil))
(insn 283 282 284 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:144 stdscr.32_58 ] [144])) "function.c":196 85 {*movdi_internal}
     (nil))
(call_insn 284 283 285 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":196 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 285 284 286 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f7cd0ef3120 *.LC24>)) "function.c":197 85 {*movdi_internal}
     (nil))
(insn 286 285 287 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":197 88 {*movqi_internal}
     (nil))
(call_insn 287 286 288 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":197 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 288 287 289 2 (set (reg/f:DI 0 ax [orig:145 stdscr.33_59 ] [145])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":198 85 {*movdi_internal}
     (nil))
(insn 289 288 290 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":198 85 {*movdi_internal}
     (nil))
(insn 290 289 291 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":198 86 {*movsi_internal}
     (nil))
(insn 291 290 292 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:145 stdscr.33_59 ] [145])) "function.c":198 85 {*movdi_internal}
     (nil))
(call_insn 292 291 293 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":198 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 293 292 294 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f7cd0ef31b0 *.LC25>)) "function.c":199 85 {*movdi_internal}
     (nil))
(insn 294 293 295 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":199 88 {*movqi_internal}
     (nil))
(call_insn 295 294 296 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":199 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 296 295 297 2 (set (reg/f:DI 0 ax [orig:146 stdscr.34_60 ] [146])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":201 85 {*movdi_internal}
     (nil))
(insn 297 296 298 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":201 86 {*movsi_internal}
     (nil))
(insn 298 297 299 2 (set (reg:SI 4 si)
        (const_int 20 [0x14])) "function.c":201 86 {*movsi_internal}
     (nil))
(insn 299 298 300 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:146 stdscr.34_60 ] [146])) "function.c":201 85 {*movdi_internal}
     (nil))
(call_insn 300 299 301 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":201 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 301 300 302 2 (set (reg/f:DI 0 ax [orig:147 stdscr.35_61 ] [147])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":202 85 {*movdi_internal}
     (nil))
(insn 302 301 303 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":202 85 {*movdi_internal}
     (nil))
(insn 303 302 304 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":202 86 {*movsi_internal}
     (nil))
(insn 304 303 305 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:147 stdscr.35_61 ] [147])) "function.c":202 85 {*movdi_internal}
     (nil))
(call_insn 305 304 306 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":202 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 306 305 307 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f7cd0ef3240 *.LC26>)) "function.c":203 85 {*movdi_internal}
     (nil))
(insn 307 306 308 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":203 88 {*movqi_internal}
     (nil))
(call_insn 308 307 309 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":203 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 309 308 310 2 (set (reg/f:DI 0 ax [orig:148 stdscr.36_62 ] [148])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":204 85 {*movdi_internal}
     (nil))
(insn 310 309 311 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":204 85 {*movdi_internal}
     (nil))
(insn 311 310 312 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":204 86 {*movsi_internal}
     (nil))
(insn 312 311 313 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:148 stdscr.36_62 ] [148])) "function.c":204 85 {*movdi_internal}
     (nil))
(call_insn 313 312 314 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":204 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 314 313 315 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f7cd0ef32d0 *.LC27>)) "function.c":205 85 {*movdi_internal}
     (nil))
(insn 315 314 316 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":205 88 {*movqi_internal}
     (nil))
(call_insn 316 315 317 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":205 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 317 316 318 2 (set (reg/f:DI 0 ax [orig:149 stdscr.37_63 ] [149])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":207 85 {*movdi_internal}
     (nil))
(insn 318 317 319 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":207 86 {*movsi_internal}
     (nil))
(insn 319 318 320 2 (set (reg:SI 4 si)
        (const_int 21 [0x15])) "function.c":207 86 {*movsi_internal}
     (nil))
(insn 320 319 321 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:149 stdscr.37_63 ] [149])) "function.c":207 85 {*movdi_internal}
     (nil))
(call_insn 321 320 322 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":207 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 322 321 323 2 (set (reg/f:DI 0 ax [orig:150 stdscr.38_64 ] [150])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":208 85 {*movdi_internal}
     (nil))
(insn 323 322 324 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":208 85 {*movdi_internal}
     (nil))
(insn 324 323 325 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":208 86 {*movsi_internal}
     (nil))
(insn 325 324 326 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:150 stdscr.38_64 ] [150])) "function.c":208 85 {*movdi_internal}
     (nil))
(call_insn 326 325 327 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":208 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 327 326 328 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f7cd0ef3360 *.LC28>)) "function.c":209 85 {*movdi_internal}
     (nil))
(insn 328 327 329 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":209 88 {*movqi_internal}
     (nil))
(call_insn 329 328 330 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":209 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 330 329 331 2 (set (reg/f:DI 0 ax [orig:151 stdscr.39_65 ] [151])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":210 85 {*movdi_internal}
     (nil))
(insn 331 330 332 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":210 85 {*movdi_internal}
     (nil))
(insn 332 331 333 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":210 86 {*movsi_internal}
     (nil))
(insn 333 332 334 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:151 stdscr.39_65 ] [151])) "function.c":210 85 {*movdi_internal}
     (nil))
(call_insn 334 333 335 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":210 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 335 334 336 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f7cd0ef33f0 *.LC29>)) "function.c":211 85 {*movdi_internal}
     (nil))
(insn 336 335 337 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":211 88 {*movqi_internal}
     (nil))
(call_insn 337 336 338 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":211 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 338 337 339 2 (set (reg/f:DI 0 ax [orig:152 stdscr.40_66 ] [152])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":213 85 {*movdi_internal}
     (nil))
(insn 339 338 340 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":213 86 {*movsi_internal}
     (nil))
(insn 340 339 341 2 (set (reg:SI 4 si)
        (const_int 22 [0x16])) "function.c":213 86 {*movsi_internal}
     (nil))
(insn 341 340 342 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:152 stdscr.40_66 ] [152])) "function.c":213 85 {*movdi_internal}
     (nil))
(call_insn 342 341 343 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":213 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 343 342 344 2 (set (reg/f:DI 0 ax [orig:153 stdscr.41_67 ] [153])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":214 85 {*movdi_internal}
     (nil))
(insn 344 343 345 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":214 85 {*movdi_internal}
     (nil))
(insn 345 344 346 2 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":214 86 {*movsi_internal}
     (nil))
(insn 346 345 347 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:153 stdscr.41_67 ] [153])) "function.c":214 85 {*movdi_internal}
     (nil))
(call_insn 347 346 348 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":214 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 348 347 349 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":215 85 {*movdi_internal}
     (nil))
(insn 349 348 350 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":215 88 {*movqi_internal}
     (nil))
(call_insn 350 349 351 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":215 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 351 350 352 2 (set (reg/f:DI 0 ax [orig:154 stdscr.42_68 ] [154])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":216 85 {*movdi_internal}
     (nil))
(insn 352 351 353 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":216 85 {*movdi_internal}
     (nil))
(insn 353 352 354 2 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":216 86 {*movsi_internal}
     (nil))
(insn 354 353 355 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:154 stdscr.42_68 ] [154])) "function.c":216 85 {*movdi_internal}
     (nil))
(call_insn 355 354 356 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":216 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 356 355 357 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f7cd0ef3510 *.LC31>)) "function.c":217 85 {*movdi_internal}
     (nil))
(insn 357 356 358 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":217 88 {*movqi_internal}
     (nil))
(call_insn 358 357 363 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":217 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 363 358 364 2 (const_int 0 [0]) "function.c":222 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 364 363 0 NOTE_INSN_DELETED)

;; Function bestia (bestia, funcdef_no=9, decl_uid=6221, cgraph_uid=9, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 44:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 82:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) ?mr {*cmpsi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 141:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 144:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 7 8
EBB 9
EBB 10 11 12 13 14
EBB 15 16 17
EBB 18
EBB 19
EBB 20
EBB 21 26
EBB 22 23
EBB 24
EBB 25

********** Pseudo live ranges #1: **********

  BB 25
   Insn 169: point = 0, n_alt = -1
  BB 24
   Insn 147: point = 0, n_alt = 1
  BB 23
   Insn 144: point = 0, n_alt = 1
  BB 22
   Insn 142: point = 0, n_alt = -1
   Insn 141: point = 0, n_alt = 1
  BB 20
   Insn 167: point = 0, n_alt = -1
   Insn 130: point = 0, n_alt = 0
   Insn 129: point = 0, n_alt = -2
   Insn 128: point = 1, n_alt = 0
   Insn 127: point = 1, n_alt = 3
  BB 26
   Insn 172: point = 2, n_alt = -1
  BB 21
   Insn 138: point = 2, n_alt = 0
   Insn 137: point = 2, n_alt = -2
   Insn 136: point = 3, n_alt = 0
   Insn 135: point = 3, n_alt = 3
  BB 19
   Insn 165: point = 4, n_alt = -1
   Insn 122: point = 4, n_alt = 0
   Insn 121: point = 4, n_alt = -2
   Insn 120: point = 5, n_alt = 0
   Insn 119: point = 5, n_alt = 3
  BB 18
   Insn 163: point = 6, n_alt = -1
   Insn 114: point = 6, n_alt = 0
   Insn 113: point = 6, n_alt = -2
   Insn 112: point = 7, n_alt = 0
   Insn 111: point = 7, n_alt = 3
  BB 17
   Insn 161: point = 8, n_alt = -1
  BB 16
   Insn 105: point = 8, n_alt = -1
   Insn 104: point = 8, n_alt = 0
  BB 15
   Insn 102: point = 8, n_alt = -1
   Insn 101: point = 8, n_alt = 0
  BB 14
   Insn 158: point = 8, n_alt = -1
  BB 13
   Insn 95: point = 8, n_alt = -1
   Insn 94: point = 8, n_alt = 0
  BB 12
   Insn 92: point = 8, n_alt = -1
   Insn 91: point = 8, n_alt = 0
  BB 11
   Insn 89: point = 8, n_alt = -1
   Insn 88: point = 8, n_alt = 0
  BB 10
   Insn 86: point = 8, n_alt = -1
   Insn 85: point = 8, n_alt = 1
  BB 9
   Insn 82: point = 8, n_alt = 1
   Insn 81: point = 8, n_alt = 1
  BB 8
   Insn 78: point = 8, n_alt = -1
   Insn 77: point = 8, n_alt = 0
   Insn 76: point = 9, n_alt = 0
   Insn 75: point = 11, n_alt = 3
   Insn 74: point = 13, n_alt = 3
   Insn 73: point = 14, n_alt = 0
   Insn 72: point = 16, n_alt = 3
  BB 7
   Insn 70: point = 17, n_alt = -1
   Insn 69: point = 17, n_alt = 0
   Insn 68: point = 18, n_alt = 0
   Insn 67: point = 20, n_alt = 3
   Insn 66: point = 22, n_alt = 3
   Insn 65: point = 23, n_alt = 0
   Insn 64: point = 25, n_alt = 3
  BB 6
   Insn 61: point = 26, n_alt = -1
   Insn 60: point = 26, n_alt = 0
   Insn 59: point = 27, n_alt = 0
   Insn 58: point = 29, n_alt = 3
   Insn 57: point = 31, n_alt = 3
   Insn 56: point = 32, n_alt = 0
   Insn 55: point = 34, n_alt = 3
  BB 5
   Insn 53: point = 35, n_alt = -1
   Insn 52: point = 35, n_alt = 0
   Insn 51: point = 36, n_alt = 0
   Insn 50: point = 38, n_alt = 3
   Insn 49: point = 40, n_alt = 3
   Insn 48: point = 41, n_alt = 0
   Insn 47: point = 43, n_alt = 3
  BB 4
   Insn 44: point = 44, n_alt = 1
  BB 3
   Insn 42: point = 44, n_alt = -1
   Insn 41: point = 44, n_alt = 1
   Insn 40: point = 44, n_alt = 1
   Insn 39: point = 45, n_alt = 0
   Insn 38: point = 47, n_alt = 3
   Insn 37: point = 48, n_alt = 1
   Insn 36: point = 49, n_alt = 0
   Insn 35: point = 51, n_alt = 3
   Insn 34: point = 52, n_alt = 0
   Insn 33: point = 52, n_alt = -2
   Insn 32: point = 53, n_alt = 3
  BB 2
   Insn 30: point = 54, n_alt = 5
   Insn 29: point = 55, n_alt = -2
   Insn 28: point = 56, n_alt = 0
   Insn 27: point = 56, n_alt = 3
   Insn 26: point = 56, n_alt = 4
   Insn 25: point = 56, n_alt = 0
   Insn 24: point = 56, n_alt = 0
   Insn 23: point = 56, n_alt = 0
   Insn 22: point = 56, n_alt = 5
   Insn 21: point = 57, n_alt = -2
   Insn 20: point = 58, n_alt = 0
   Insn 19: point = 58, n_alt = 3
   Insn 18: point = 58, n_alt = 4
   Insn 17: point = 58, n_alt = 0
   Insn 16: point = 58, n_alt = 0
   Insn 15: point = 58, n_alt = 0
   Insn 14: point = 58, n_alt = 0
   Insn 13: point = 58, n_alt = -2
   Insn 12: point = 59, n_alt = 3
   Insn 11: point = 60, n_alt = 5
   Insn 10: point = 61, n_alt = 3
   Insn 9: point = 62, n_alt = 1
   Insn 8: point = 62, n_alt = 1
   Insn 7: point = 62, n_alt = 1
   Insn 6: point = 62, n_alt = 1
   Insn 2: point = 62, n_alt = 5
 r87: [35..41]
 r88: [37..38]
 r89: [35..36]
 r90: [26..32]
 r91: [28..29]
 r92: [26..27]
 r93: [17..23]
 r94: [19..20]
 r95: [17..18]
 r96: [8..14]
 r97: [10..11]
 r98: [8..9]
 r100: [60..61]
 r101: [58..59]
 r102: [56..57]
 r103: [54..55]
 r104: [52..53]
 r105: [50..51]
 r106: [48..49]
 r107: [46..47]
 r108: [44..45]
 r109: [42..43]
 r110: [39..40]
 r111: [33..34]
 r112: [30..31]
 r113: [24..25]
 r114: [21..22]
 r115: [15..16]
 r116: [12..13]
 r117: [6..7]
 r118: [4..5]
 r119: [0..1]
 r120: [2..3]
Compressing live ranges: from 62 to 58 - 93%
Ranges after the compression:
 r87: [32..37]
 r88: [34..35]
 r89: [32..33]
 r90: [24..29]
 r91: [26..27]
 r92: [24..25]
 r93: [16..21]
 r94: [18..19]
 r95: [16..17]
 r96: [8..13]
 r97: [10..11]
 r98: [8..9]
 r100: [56..57]
 r101: [54..55]
 r102: [52..53]
 r103: [50..51]
 r104: [48..49]
 r105: [46..47]
 r106: [44..45]
 r107: [42..43]
 r108: [40..41]
 r109: [38..39]
 r110: [36..37]
 r111: [30..31]
 r112: [28..29]
 r113: [22..23]
 r114: [20..21]
 r115: [14..15]
 r116: [12..13]
 r117: [6..7]
 r118: [4..5]
 r119: [0..1]
 r120: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 48
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 60
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 65
changing reg in insn 69
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 73
changing reg in insn 77
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 21
changing reg in insn 22
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 111
changing reg in insn 113
changing reg in insn 119
changing reg in insn 121
changing reg in insn 127
changing reg in insn 129
changing reg in insn 135
changing reg in insn 137
deleting insn with uid = 21.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns


bestia

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={38d,32u} r1={15d,6u} r2={11d,2u} r4={15d,6u} r5={17d,9u} r6={1d,67u} r7={1d,34u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={21d,12u} r18={8d} r19={8d} r20={1d,1u} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 827{658d,169u,0e} in 105{97 regular + 8 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 100 101 102 103
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":228 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":229 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":230 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
        (const_int 0 [0])) "function.c":231 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
        (const_int 0 [0])) "function.c":232 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])) "function.c":234 85 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg/f:DI 0 ax [100])) "function.c":234 85 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":235 85 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) "function.c":235 85 {*movdi_internal}
     (nil))
(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("bestia_move_random") [flags 0x3]  <function_decl 0x7f7cd1178400 bestia_move_random>) [0 bestia_move_random S1 A8])
        (const_int 0 [0])) "function.c":235 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":236 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":236 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":236 86 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f7cd0ef3870 *.LC32>)) "function.c":236 85 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":236 88 {*movqi_internal}
     (nil))
(call_insn 20 19 22 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":236 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 22 20 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [18 sem_bestia1+0 S8 A64])
        (reg:DI 0 ax [102])) "function.c":236 85 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":237 86 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":237 86 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":237 86 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f7cd0ef3900 *.LC33>)) "function.c":237 85 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":237 88 {*movqi_internal}
     (nil))
(call_insn 28 27 30 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":237 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 30 28 150 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_bestia2+0 S8 A64])
        (reg:DI 0 ax [103])) "function.c":237 85 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              25 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 105 106 107 108
(code_label 150 30 31 3 37 (nil) [1 uses])
(note 31 150 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 3 (set (reg:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [18 sem_bestia1+0 S8 A64])) "function.c":241 85 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [104])) "function.c":241 85 {*movdi_internal}
     (nil))
(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":241 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 3 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":242 85 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:SI 0 ax [106])
        (mem:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 36064 [0x8ce0])) [3 serwer_29->bestia.x+0 S4 A64])) "function.c":242 86 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_pom+0 S4 A32])
        (reg:SI 0 ax [106])) "function.c":242 86 {*movsi_internal}
     (nil))
(insn 38 37 39 3 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":243 85 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (reg:SI 0 ax [108])
        (mem:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 36068 [0x8ce4])) [3 serwer_29->bestia.y+0 S4 A32])) "function.c":243 86 {*movsi_internal}
     (nil))
(insn 40 39 41 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y_pom+0 S4 A32])
        (reg:SI 0 ax [108])) "function.c":243 86 {*movsi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
            (const_int 0 [0]))) "function.c":245 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 42 41 43 3 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "function.c":245 682 {*jcc}
     (nil)
 -> 45)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":247 221 {*addsi_1}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 109 110
(code_label 45 44 46 5 25 (nil) [1 uses])
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:SI 1 dx [orig:87 _1 ] [87])
        (mem:SI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 36064 [0x8ce0])) [3 serwer_29->bestia.x+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 49 48 50 5 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 50 49 51 5 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [110])
                (const_int 32 [0x20])) [14 serwer_29->player1+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:87 _1 ] [87])
            (reg:SI 0 ax [orig:89 _3 ] [89]))) "function.c":250 11 {*cmpsi_1}
     (nil))
(jump_insn 53 52 54 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "function.c":250 682 {*jcc}
     (nil)
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 111 112
(note 54 53 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 6 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (set (reg:SI 1 dx [orig:90 _4 ] [90])
        (mem:SI (plus:DI (reg/f:DI 0 ax [111])
                (const_int 36068 [0x8ce4])) [3 serwer_29->bestia.y+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 57 56 58 6 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 58 57 59 6 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [112])
                (const_int 32 [0x20])) [14 serwer_29->player1+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:SI 0 ax [orig:92 _6 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:90 _4 ] [90])
            (reg:SI 0 ax [orig:92 _6 ] [92]))) "function.c":250 11 {*cmpsi_1}
     (nil))
(jump_insn 61 60 62 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "function.c":250 682 {*jcc}
     (nil)
 -> 79)
;;  succ:       9
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 113 114
(code_label 62 61 63 7 26 (nil) [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 65 64 66 7 (set (reg:SI 1 dx [orig:93 _7 ] [93])
        (mem:SI (plus:DI (reg/f:DI 0 ax [113])
                (const_int 36064 [0x8ce0])) [3 serwer_29->bestia.x+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 66 65 67 7 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 67 66 68 7 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 40 [0x28])) [14 serwer_29->player2+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 68 67 69 7 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (const_int 12 [0xc])) [3 _8->x_current+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 69 68 70 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:93 _7 ] [93])
            (reg:SI 0 ax [orig:95 _9 ] [95]))) "function.c":250 11 {*cmpsi_1}
     (nil))
(jump_insn 70 69 71 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "function.c":250 682 {*jcc}
     (nil)
 -> 83)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 115 116
(note 71 70 72 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 8 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 73 72 74 8 (set (reg:SI 1 dx [orig:96 _10 ] [96])
        (mem:SI (plus:DI (reg/f:DI 0 ax [115])
                (const_int 36068 [0x8ce4])) [3 serwer_29->bestia.y+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 74 73 75 8 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 75 74 76 8 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [116])
                (const_int 40 [0x28])) [14 serwer_29->player2+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 76 75 77 8 (set (reg:SI 0 ax [orig:98 _12 ] [98])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (const_int 16 [0x10])) [3 _11->y_current+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (nil))
(insn 77 76 78 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:96 _10 ] [96])
            (reg:SI 0 ax [orig:98 _12 ] [98]))) "function.c":250 11 {*cmpsi_1}
     (nil))
(jump_insn 78 77 79 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "function.c":250 682 {*jcc}
     (nil)
 -> 83)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       6
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 79 78 80 9 27 (nil) [1 uses])
(note 80 79 81 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
        (const_int 1 [0x1])) "function.c":252 86 {*movsi_internal}
     (nil))
(insn 82 81 83 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
        (const_int 0 [0])) "function.c":253 86 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 83 82 84 10 28 (nil) [2 uses])
(note 84 83 85 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
            (const_int 0 [0]))) "function.c":261 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 86 85 87 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) "function.c":261 682 {*jcc}
     (nil)
 -> 148)
;;  succ:       11 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 2 [0x2]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 89 88 90 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) "function.c":263 682 {*jcc}
     (nil)
 -> 117)
;;  succ:       12 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 2 [0x2]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 92 91 93 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "function.c":263 682 {*jcc}
     (nil)
 -> 99)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 93 92 94 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 1 [0x1]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 95 94 157 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "function.c":263 682 {*jcc}
     (nil)
 -> 109)
;;  succ:       14 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 157 95 158 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 158 157 159 14 (set (pc)
        (label_ref 139)) "function.c":263 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 159 158 99)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 99 159 100 15 31 (nil) [1 uses])
(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 3 [0x3]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 102 101 103 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) "function.c":263 682 {*jcc}
     (nil)
 -> 125)
;;  succ:       16 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 103 102 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 105 104 160 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 133)
            (pc))) "function.c":263 682 {*jcc}
     (nil)
 -> 133)
;;  succ:       17 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 160 105 161 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(jump_insn 161 160 162 17 (set (pc)
        (label_ref 139)) "function.c":263 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 109)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117
(code_label 109 162 110 18 32 (nil) [1 uses])
(note 110 109 111 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 18 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":266 85 {*movdi_internal}
     (nil))
(insn 112 111 113 18 (set (reg:SI 4 si)
        (const_int 100 [0x64])) "function.c":266 86 {*movsi_internal}
     (nil))
(insn 113 112 114 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) "function.c":266 85 {*movdi_internal}
     (nil))
(call_insn 114 113 163 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":266 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 163 114 164 18 (set (pc)
        (label_ref 139)) "function.c":267 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 164 163 117)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118
(code_label 117 164 118 19 30 (nil) [1 uses])
(note 118 117 119 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 19 (set (reg:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":269 85 {*movdi_internal}
     (nil))
(insn 120 119 121 19 (set (reg:SI 4 si)
        (const_int 97 [0x61])) "function.c":269 86 {*movsi_internal}
     (nil))
(insn 121 120 122 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [118])) "function.c":269 85 {*movdi_internal}
     (nil))
(call_insn 122 121 165 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":269 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 165 122 166 19 (set (pc)
        (label_ref 139)) "function.c":270 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 166 165 125)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 119
(code_label 125 166 126 20 34 (nil) [1 uses])
(note 126 125 127 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 20 (set (reg:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":272 85 {*movdi_internal}
     (nil))
(insn 128 127 129 20 (set (reg:SI 4 si)
        (const_int 119 [0x77])) "function.c":272 86 {*movsi_internal}
     (nil))
(insn 129 128 130 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [119])) "function.c":272 85 {*movdi_internal}
     (nil))
(call_insn 130 129 167 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":272 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 167 130 168 20 (set (pc)
        (label_ref 139)) "function.c":273 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 168 167 133)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 26, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 120
(code_label 133 168 134 21 35 (nil) [1 uses])
(note 134 133 135 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 136 21 (set (reg:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":275 85 {*movdi_internal}
     (nil))
(insn 136 135 137 21 (set (reg:SI 4 si)
        (const_int 115 [0x73])) "function.c":275 86 {*movsi_internal}
     (nil))
(insn 137 136 138 21 (set (reg:DI 5 di)
        (reg:DI 0 ax [120])) "function.c":275 85 {*movdi_internal}
     (nil))
(call_insn 138 137 171 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":275 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 21, next block 22, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 171 138 172 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 139 26 (const_int 0 [0]) "function.c":276 718 {nop}
     (nil))
;;  succ:       22 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 26, next block 23, flags: (RTL, MODIFIED)
;;  pred:       14 [always] 
;;              17 [always] 
;;              18 [always] 
;;              19 [always] 
;;              26 [always]  (FALLTHRU)
;;              20 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 139 172 140 22 33 (nil) [5 uses])
(note 140 139 141 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 0 [0]))) "function.c":278 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 142 141 143 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) "function.c":278 682 {*jcc}
     (nil)
 -> 145)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 143 142 144 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
        (const_int 1 [0x1])) "function.c":280 86 {*movsi_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 145 144 146 24 36 (nil) [1 uses])
(note 146 145 147 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
        (const_int 0 [0])) "function.c":282 86 {*movsi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 148 147 149 25 29 (nil) [1 uses])
(note 149 148 169 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 169 149 170 25 (set (pc)
        (label_ref 150)) "function.c":241 683 {jump}
     (nil)
 -> 150)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 170 169 173)
(note 173 170 0 NOTE_INSN_DELETED)

;; Function quit_quit (quit_quit, funcdef_no=10, decl_uid=6223, cgraph_uid=10, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 31:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) q  (1) m {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 34:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) qm  (1) qn {*cmpqi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) Z {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) qm  (1) qn {*cmpqi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 53:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6
EBB 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 66: point = 0, n_alt = -1
   Insn 65: point = 0, n_alt = -2
   Insn 61: point = 1, n_alt = -2
  BB 4
   Insn 69: point = 4, n_alt = -1
   Insn 39: point = 4, n_alt = 2
  BB 3
   Insn 37: point = 5, n_alt = -1
   Insn 36: point = 5, n_alt = 0
   Insn 35: point = 6, n_alt = 4
   Insn 34: point = 7, n_alt = 8
   Insn 33: point = 8, n_alt = 3
   Insn 32: point = 9, n_alt = 4
   Insn 31: point = 10, n_alt = 8
   Insn 30: point = 11, n_alt = 0
   Insn 29: point = 13, n_alt = -2
   Insn 28: point = 14, n_alt = 0
   Insn 27: point = 14, n_alt = -2
   Insn 26: point = 15, n_alt = 3
  BB 8
   Insn 71: point = 16, n_alt = -1
  BB 7
   Insn 53: point = 16, n_alt = 8
  BB 6
   Insn 50: point = 16, n_alt = -1
   Insn 49: point = 16, n_alt = 0
   Insn 48: point = 17, n_alt = 4
  BB 5
   Insn 46: point = 18, n_alt = -1
   Insn 45: point = 18, n_alt = 0
   Insn 44: point = 19, n_alt = 4
  BB 2
   Insn 24: point = 20, n_alt = 5
   Insn 23: point = 21, n_alt = -2
   Insn 22: point = 22, n_alt = 0
   Insn 21: point = 22, n_alt = 2
   Insn 20: point = 22, n_alt = 2
   Insn 19: point = 22, n_alt = 0
   Insn 18: point = 22, n_alt = 0
   Insn 17: point = 22, n_alt = -2
   Insn 16: point = 23, n_alt = 2
   Insn 15: point = 23, n_alt = 0
   Insn 14: point = 24, n_alt = 1
   Insn 13: point = 25, n_alt = -2
   Insn 12: point = 26, n_alt = 0
   Insn 11: point = 26, n_alt = -2
   Insn 10: point = 27, n_alt = 0
   Insn 9: point = 27, n_alt = 0
   Insn 8: point = 27, n_alt = 3
   Insn 7: point = 28, n_alt = 5
   Insn 6: point = 29, n_alt = 3
   Insn 2: point = 30, n_alt = 5
 r87: [14..15]
 r88: [12..13]
 r89: [10..11]
 r90: [7..9]
 r91: [5..6]
 r92: [18..19]
 r93: [16..17]
 r94: [2..4]
 r95: [0..1]
 r96: [28..29]
 r97: [26..27]
 r98: [24..25]
 r99: [22..23]
 r100: [20..21]
 r101: [7..8]
Compressing live ranges: from 30 to 28 - 93%
Ranges after the compression:
 r87: [12..13]
 r88: [10..11]
 r89: [8..9]
 r90: [6..7]
 r91: [4..5]
 r92: [16..17]
 r93: [14..15]
 r94: [2..3]
 r95: [0..1]
 r96: [26..27]
 r97: [24..25]
 r98: [22..23]
 r99: [20..21]
 r100: [18..19]
 r101: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 49
changing reg in insn 39
changing reg in insn 61
changing reg in insn 61
changing reg in insn 65
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 23
changing reg in insn 24
changing reg in insn 33
changing reg in insn 34
deleting insn with uid = 13.
deleting insn with uid = 23.
deleting insn with uid = 29.
deleting insn with uid = 61.
starting the processing of deferred insns
ending the processing of deferred insns


quit_quit

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={15d,15u} r1={7d,3u} r2={5d,1u} r4={6d,2u} r5={7d,4u} r6={1d,17u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={6d,3u} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={5d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 319{259d,60u,0e} in 41{38 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 99 100
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":291 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [19 pom+0 S8 A64])) "function.c":292 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 q+0 S8 A64])
        (reg/f:DI 0 ax [96])) "function.c":292 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [10 q+0 S8 A64])) "function.c":293 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":293 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (const_int 66 [0x42])) "function.c":293 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "function.c":293 85 {*movdi_internal}
     (nil))
(call_insn 12 11 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_open") [flags 0x41]  <function_decl 0x7f7cd133cb00 shm_open>) [0 shm_open S1 A8])
            (const_int 0 [0]))) "function.c":293 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 14 12 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 fd+0 S4 A32])
        (reg:SI 0 ax [98])) "function.c":293 86 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 ax [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 fd+0 S4 A32])) "function.c":294 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 38 r9)
        (const_int 0 [0])) "function.c":294 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 37 r8)
        (reg:SI 0 ax [99])) "function.c":294 86 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "function.c":294 86 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":294 86 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":294 85 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":294 85 {*movdi_internal}
     (nil))
(call_insn 22 21 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("mmap") [flags 0x41]  <function_decl 0x7f7cd133c000 mmap>) [0 mmap S1 A8])
            (const_int 0 [0]))) "function.c":294 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 24 22 56 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [14 playerinfo+0 S8 A64])
        (reg:DI 0 ax [100])) "function.c":294 85 {*movdi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              8 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 101
(code_label 56 24 25 3 43 (nil) [1 uses])
(note 25 56 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg/f:DI 0 ax [orig:87 stdscr.43_1 ] [87])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":298 85 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 stdscr.43_1 ] [87])) "function.c":298 85 {*movdi_internal}
     (nil))
(call_insn 28 27 30 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wgetch") [flags 0x41]  <function_decl 0x7f7cd10c9100 wgetch>) [0 wgetch S1 A8])
            (const_int 0 [0]))) "function.c":298 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 28 31 3 (set (reg:QI 0 ax [orig:89 _3 ] [89])
        (reg:QI 0 ax [orig:88 _2 ] [88])) "function.c":298 88 {*movqi_internal}
     (nil))
(insn 31 30 32 3 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (reg:QI 0 ax [orig:89 _3 ] [89])) "function.c":298 88 {*movqi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:QI 1 dx [orig:90 END.44_4 ] [90])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":299 88 {*movqi_internal}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [14 playerinfo+0 S8 A64])) "function.c":299 85 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (mem:QI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 40 [0x28])) [0 playerinfo_16->request+0 S1 A64])
        (reg:QI 1 dx [orig:90 END.44_4 ] [90])) "function.c":299 88 {*movqi_internal}
     (nil))
(insn 35 34 36 3 (set (reg:QI 0 ax [orig:91 END.45_5 ] [91])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":301 88 {*movqi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 END.45_5 ] [91])
            (const_int 113 [0x71]))) "function.c":301 9 {*cmpqi_1}
     (nil))
(jump_insn 37 36 38 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "function.c":301 682 {*jcc}
     (nil)
 -> 42)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(note 38 37 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 69 4 (set (reg/f:DI 0 ax [orig:94 _20 ] [94])
        (const_int 0 [0])) "function.c":303 85 {*movdi_internal}
     (nil))
(jump_insn 69 39 70 4 (set (pc)
        (label_ref 68)) "function.c":303 683 {jump}
     (nil)
 -> 68)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

(barrier 70 69 42)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92
(code_label 42 70 43 5 39 (nil) [1 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:QI 0 ax [orig:92 END.46_6 ] [92])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":305 88 {*movqi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 END.46_6 ] [92])
            (const_int 98 [0x62]))) "function.c":305 9 {*cmpqi_1}
     (nil))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "function.c":305 682 {*jcc}
     (nil)
 -> 51)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (reg:QI 0 ax [orig:93 END.47_7 ] [93])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":305 88 {*movqi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:93 END.47_7 ] [93])
            (const_int 66 [0x42]))) "function.c":305 9 {*cmpqi_1}
     (nil))
(jump_insn 50 49 51 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "function.c":305 682 {*jcc}
     (nil)
 -> 54)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 51 50 52 7 41 (nil) [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])
        (const_int 1 [0x1])) "function.c":307 88 {*movqi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 54 53 55 8 42 (nil) [1 uses])
(note 55 54 71 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 71 55 72 8 (set (pc)
        (label_ref 56)) "function.c":298 683 {jump}
     (nil)
 -> 56)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 72 71 68)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 0 [ax] 95
(code_label 68 72 60 9 44 (nil) [1 uses])
(note 60 68 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 60 66 9 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:95 <retval> ] [95])) "function.c":310 85 {*movdi_internal}
     (nil))
(insn 66 65 73 9 (use (reg/i:DI 0 ax)) "function.c":310 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 73 66 0 NOTE_INSN_DELETED)

;; Function serwer_serwer (serwer_serwer, funcdef_no=11, decl_uid=6225, cgraph_uid=11, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=36256, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=36224, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 51:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 55:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 65:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) r {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 80:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 89:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 93:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 94:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 103:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 107:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 116:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 120:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 148:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 160:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) rm  (1) re {*cmpsi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 168:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 181:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 185:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 193:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 196:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 199:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 202:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 204:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) ?mr {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 211:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 214:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 218:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 227:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 229:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 231:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 234
	 Choosing alt 0 in insn 234:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 235:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 239:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 240:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 249:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 254
	 Choosing alt 0 in insn 254:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 255:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 259:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 260:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 264:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 266:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 268:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 281:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 284
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 285:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 288:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 293:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 295:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 297:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 301:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 303:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 307:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 309:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 311:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 315:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 318:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 320:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 323:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 326:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 329:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 338:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 339:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 342:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 348:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 352:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 353:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 355:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 356:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 357:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 363:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 364:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 366:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 371:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 374:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 377:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 381:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 387:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 390:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 391:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 393:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 394:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 397:  (0) ?mr {*cmpsi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 400:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 403:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 407:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 414:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 417:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 419:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 422:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 423
	 Choosing alt 0 in insn 423:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 424:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 425:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 428:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 430:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 437:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 440:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 443
	 Choosing alt 0 in insn 443:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 444:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 449:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 452:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 453:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 455:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 456:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 457:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 465:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 466:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 467:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 470:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 471:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 473
	 Choosing alt 0 in insn 473:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 474:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 477:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 478:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 484:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 491:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 492:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 496:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 499:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 500:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 504:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 507:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 509:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 512:  (0) ?mr {*cmpsi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 515:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 518:  (0) ?mr {*cmpsi_ccno_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 521:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) q {*cmpqi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 525:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 526:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 527:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 529:  (0) r  (1) i {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 530:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 533:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 536:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 540:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 543:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 548:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 553:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 554:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 557:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 558:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 560:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 561:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 562:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 566:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 571:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 574:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 577:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 580:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 585:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 592:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 594:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 595:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 600:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 606:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 609:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 611:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 614:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 619:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 620:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 621:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 622:  (0) m  (1) re {*movsi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 625:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 627:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 628:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 630:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 631:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (1) rBwBz {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 634:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 635:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 638:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 640:  (1) rBwBz {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 641:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 642:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 645:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 646:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 648:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 651:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 652:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 654:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 655:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 656:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 659:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 661:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 662:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 663:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 664:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 665:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 667:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 668:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 669:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 670:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 671:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 676:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 678:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 679:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 680:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 681:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 682:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 683:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7 8
EBB 9
EBB 10 11 12 13 14
EBB 15 16
EBB 17
EBB 18
EBB 19 20
EBB 21 22
EBB 23 24 25 26 27
EBB 28 29
EBB 30
EBB 31
EBB 32 33
EBB 34 35 36
EBB 37 38
EBB 39 40
EBB 41 42
EBB 43
EBB 44 45 46
EBB 47
EBB 48
EBB 49

********** Pseudo live ranges #1: **********

  BB 49
   Insn 694: point = 0, n_alt = -1
   Insn 693: point = 0, n_alt = -2
   Insn 689: point = 1, n_alt = -2
  BB 47
   Insn 711: point = 4, n_alt = -1
   Insn 671: point = 4, n_alt = 2
   Insn 670: point = 5, n_alt = 0
   Insn 669: point = 5, n_alt = 4
   Insn 668: point = 5, n_alt = 0
   Insn 667: point = 5, n_alt = 4
   Insn 666: point = 5, n_alt = 0
   Insn 665: point = 5, n_alt = 4
   Insn 664: point = 5, n_alt = 0
   Insn 663: point = 5, n_alt = 4
   Insn 662: point = 5, n_alt = 0
   Insn 661: point = 5, n_alt = 4
   Insn 660: point = 5, n_alt = 0
   Insn 659: point = 5, n_alt = 4
   Insn 658: point = 5, n_alt = 0
   Insn 657: point = 5, n_alt = -2
   Insn 656: point = 6, n_alt = 2
   Insn 655: point = 6, n_alt = 3
   Insn 654: point = 7, n_alt = 0
   Insn 653: point = 7, n_alt = -2
   Insn 652: point = 8, n_alt = 2
   Insn 651: point = 8, n_alt = 3
  BB 46
   Insn 648: point = 9, n_alt = 0
   Insn 647: point = 9, n_alt = -2
   Insn 646: point = 10, n_alt = 2
   Insn 645: point = 10, n_alt = 3
  BB 45
   Insn 643: point = 11, n_alt = -1
   Insn 642: point = 11, n_alt = 0
   Insn 641: point = 12, n_alt = 4
   Insn 640: point = 13, n_alt = 0
   Insn 639: point = 13, n_alt = -2
   Insn 638: point = 14, n_alt = 3
  BB 44
   Insn 636: point = 15, n_alt = -1
   Insn 635: point = 15, n_alt = 0
   Insn 634: point = 16, n_alt = 4
   Insn 633: point = 17, n_alt = 0
   Insn 632: point = 17, n_alt = -2
   Insn 631: point = 18, n_alt = 3
   Insn 630: point = 19, n_alt = 0
   Insn 629: point = 19, n_alt = -2
   Insn 628: point = 20, n_alt = 3
   Insn 627: point = 21, n_alt = 0
   Insn 626: point = 21, n_alt = -2
   Insn 625: point = 22, n_alt = 3
  BB 42
   Insn 708: point = 23, n_alt = -1
   Insn 614: point = 23, n_alt = 0
   Insn 613: point = 23, n_alt = -2
   Insn 612: point = 24, n_alt = 3
   Insn 611: point = 25, n_alt = 0
   Insn 610: point = 25, n_alt = -2
   Insn 609: point = 26, n_alt = 3
  BB 43
   Insn 622: point = 27, n_alt = 1
   Insn 621: point = 28, n_alt = 3
   Insn 620: point = 29, n_alt = 1
   Insn 619: point = 30, n_alt = 3
  BB 41
   Insn 607: point = 31, n_alt = -1
   Insn 606: point = 31, n_alt = 0
   Insn 605: point = 32, n_alt = -2
   Insn 604: point = 33, n_alt = 0
   Insn 603: point = 33, n_alt = -2
   Insn 602: point = 34, n_alt = 0
   Insn 601: point = 34, n_alt = 0
   Insn 600: point = 36, n_alt = 3
  BB 40
   Insn 597: point = 37, n_alt = 0
   Insn 596: point = 37, n_alt = -2
   Insn 595: point = 38, n_alt = 3
   Insn 594: point = 39, n_alt = 0
   Insn 593: point = 39, n_alt = -2
   Insn 592: point = 40, n_alt = 3
  BB 39
   Insn 590: point = 41, n_alt = -1
   Insn 589: point = 41, n_alt = 0
   Insn 588: point = 42, n_alt = -2
   Insn 587: point = 43, n_alt = 0
   Insn 586: point = 43, n_alt = -2
   Insn 585: point = 44, n_alt = 0
   Insn 584: point = 44, n_alt = 0
   Insn 583: point = 46, n_alt = 3
   Insn 582: point = 47, n_alt = 0
   Insn 581: point = 47, n_alt = -2
   Insn 580: point = 48, n_alt = 3
   Insn 579: point = 49, n_alt = 0
   Insn 578: point = 49, n_alt = -2
   Insn 577: point = 50, n_alt = 3
   Insn 576: point = 51, n_alt = 0
   Insn 575: point = 51, n_alt = -2
   Insn 574: point = 52, n_alt = 3
   Insn 573: point = 53, n_alt = 0
   Insn 572: point = 53, n_alt = -2
   Insn 571: point = 54, n_alt = 3
  BB 38
   Insn 568: point = 55, n_alt = 0
   Insn 567: point = 55, n_alt = -2
   Insn 566: point = 56, n_alt = 3
   Insn 565: point = 57, n_alt = 0
   Insn 564: point = 57, n_alt = -2
   Insn 563: point = 58, n_alt = 0
   Insn 562: point = 58, n_alt = 2
   Insn 561: point = 58, n_alt = 3
   Insn 560: point = 59, n_alt = 0
   Insn 559: point = 59, n_alt = 3
   Insn 558: point = 59, n_alt = 4
   Insn 557: point = 59, n_alt = 0
   Insn 556: point = 59, n_alt = -2
   Insn 555: point = 60, n_alt = 0
   Insn 554: point = 60, n_alt = 2
   Insn 553: point = 60, n_alt = 3
   Insn 552: point = 61, n_alt = 0
   Insn 551: point = 61, n_alt = -2
   Insn 550: point = 62, n_alt = -2
   Insn 549: point = 63, n_alt = -2
   Insn 548: point = 64, n_alt = 3
   Insn 547: point = 65, n_alt = 0
   Insn 546: point = 66, n_alt = 0
   Insn 545: point = 67, n_alt = 0
   Insn 544: point = 67, n_alt = -2
   Insn 543: point = 68, n_alt = 3
   Insn 542: point = 69, n_alt = 0
   Insn 541: point = 69, n_alt = -2
   Insn 540: point = 70, n_alt = 3
  BB 37
   Insn 538: point = 71, n_alt = -1
   Insn 537: point = 71, n_alt = 0
   Insn 536: point = 72, n_alt = 4
  BB 36
   Insn 533: point = 73, n_alt = 1
   Insn 532: point = 73, n_alt = 0
   Insn 531: point = 73, n_alt = -2
   Insn 530: point = 74, n_alt = 2
   Insn 529: point = 74, n_alt = 4
   Insn 528: point = 74, n_alt = -2
   Insn 527: point = 75, n_alt = 3
   Insn 526: point = 76, n_alt = 3
   Insn 525: point = 77, n_alt = 1
  BB 35
   Insn 523: point = 77, n_alt = -1
   Insn 522: point = 77, n_alt = 0
   Insn 521: point = 78, n_alt = 4
  BB 34
   Insn 519: point = 79, n_alt = -1
   Insn 518: point = 79, n_alt = 1
  BB 33
   Insn 515: point = 79, n_alt = 1
  BB 32
   Insn 513: point = 79, n_alt = -1
   Insn 512: point = 79, n_alt = 1
  BB 31
   Insn 509: point = 79, n_alt = 0
   Insn 508: point = 79, n_alt = -2
   Insn 507: point = 80, n_alt = 3
   Insn 506: point = 81, n_alt = 0
   Insn 505: point = 81, n_alt = -2
   Insn 504: point = 82, n_alt = 3
   Insn 503: point = 83, n_alt = 0
   Insn 502: point = 83, n_alt = -2
   Insn 501: point = 84, n_alt = 0
   Insn 500: point = 84, n_alt = 2
   Insn 499: point = 84, n_alt = 3
   Insn 498: point = 85, n_alt = 0
   Insn 497: point = 85, n_alt = 3
   Insn 496: point = 85, n_alt = 4
   Insn 495: point = 85, n_alt = 0
   Insn 494: point = 85, n_alt = -2
   Insn 493: point = 86, n_alt = 0
   Insn 492: point = 86, n_alt = 2
   Insn 491: point = 86, n_alt = 3
   Insn 490: point = 87, n_alt = 0
   Insn 489: point = 87, n_alt = -2
   Insn 488: point = 88, n_alt = -2
   Insn 487: point = 89, n_alt = -2
   Insn 486: point = 90, n_alt = 3
   Insn 485: point = 91, n_alt = 0
   Insn 484: point = 93, n_alt = 3
   Insn 483: point = 94, n_alt = 0
   Insn 482: point = 96, n_alt = 3
  BB 29
   Insn 706: point = 97, n_alt = -1
   Insn 460: point = 97, n_alt = 0
   Insn 459: point = 97, n_alt = -2
   Insn 458: point = 98, n_alt = 0
   Insn 457: point = 98, n_alt = 2
   Insn 456: point = 98, n_alt = 3
   Insn 455: point = 99, n_alt = 0
   Insn 454: point = 99, n_alt = 3
   Insn 453: point = 99, n_alt = 4
   Insn 452: point = 99, n_alt = 0
   Insn 451: point = 99, n_alt = -2
   Insn 450: point = 100, n_alt = 0
   Insn 449: point = 100, n_alt = 2
   Insn 448: point = 100, n_alt = 3
  BB 27
   Insn 704: point = 101, n_alt = -1
   Insn 430: point = 101, n_alt = 0
   Insn 429: point = 101, n_alt = 3
   Insn 428: point = 101, n_alt = 4
  BB 30
   Insn 479: point = 101, n_alt = 0
   Insn 478: point = 101, n_alt = 3
   Insn 477: point = 101, n_alt = 4
   Insn 476: point = 101, n_alt = -2
   Insn 475: point = 102, n_alt = 0
   Insn 474: point = 104, n_alt = 4
   Insn 473: point = 106, n_alt = 0
   Insn 472: point = 108, n_alt = 0
   Insn 471: point = 110, n_alt = 0
   Insn 470: point = 111, n_alt = 3
   Insn 469: point = 113, n_alt = 0
   Insn 468: point = 115, n_alt = 0
   Insn 467: point = 117, n_alt = 1
   Insn 466: point = 119, n_alt = 0
   Insn 465: point = 120, n_alt = 3
  BB 28
   Insn 446: point = 121, n_alt = -1
   Insn 445: point = 121, n_alt = 0
   Insn 444: point = 122, n_alt = 4
   Insn 443: point = 124, n_alt = 0
   Insn 442: point = 126, n_alt = 0
   Insn 441: point = 128, n_alt = 0
   Insn 440: point = 129, n_alt = 3
   Insn 439: point = 131, n_alt = 0
   Insn 438: point = 133, n_alt = 0
   Insn 437: point = 135, n_alt = 1
   Insn 436: point = 137, n_alt = 0
   Insn 435: point = 138, n_alt = 3
  BB 26
   Insn 426: point = 139, n_alt = -1
   Insn 425: point = 139, n_alt = 0
   Insn 424: point = 140, n_alt = 4
   Insn 423: point = 142, n_alt = 0
   Insn 422: point = 144, n_alt = 0
   Insn 421: point = 146, n_alt = 0
   Insn 420: point = 147, n_alt = 3
   Insn 419: point = 149, n_alt = 0
   Insn 418: point = 151, n_alt = 0
   Insn 417: point = 153, n_alt = 1
   Insn 416: point = 155, n_alt = 0
   Insn 415: point = 156, n_alt = 3
   Insn 414: point = 157, n_alt = 0
   Insn 413: point = 157, n_alt = -2
   Insn 412: point = 158, n_alt = -2
   Insn 411: point = 159, n_alt = -2
   Insn 410: point = 160, n_alt = 0
   Insn 409: point = 161, n_alt = 0
   Insn 408: point = 162, n_alt = 3
   Insn 407: point = 163, n_alt = 1
   Insn 406: point = 164, n_alt = -2
   Insn 405: point = 165, n_alt = 0
   Insn 404: point = 165, n_alt = -2
   Insn 403: point = 166, n_alt = 3
   Insn 402: point = 167, n_alt = 0
   Insn 401: point = 167, n_alt = -2
   Insn 400: point = 168, n_alt = 3
  BB 25
   Insn 398: point = 169, n_alt = -1
   Insn 397: point = 169, n_alt = 1
   Insn 396: point = 169, n_alt = 0
   Insn 395: point = 169, n_alt = -2
   Insn 394: point = 170, n_alt = 3
   Insn 393: point = 171, n_alt = 0
   Insn 392: point = 171, n_alt = -2
   Insn 391: point = 172, n_alt = 3
   Insn 390: point = 173, n_alt = 1
   Insn 389: point = 174, n_alt = 0
   Insn 388: point = 176, n_alt = 3
   Insn 387: point = 177, n_alt = 1
   Insn 386: point = 178, n_alt = 0
   Insn 385: point = 180, n_alt = 3
  BB 24
   Insn 383: point = 181, n_alt = -1
   Insn 382: point = 181, n_alt = 0
   Insn 381: point = 182, n_alt = 0
   Insn 380: point = 184, n_alt = 3
  BB 23
   Insn 378: point = 185, n_alt = -1
   Insn 377: point = 185, n_alt = 1
   Insn 376: point = 185, n_alt = 0
   Insn 375: point = 185, n_alt = -2
   Insn 374: point = 186, n_alt = 3
   Insn 373: point = 187, n_alt = 0
   Insn 372: point = 187, n_alt = -2
   Insn 371: point = 188, n_alt = 3
   Insn 370: point = 189, n_alt = 0
   Insn 369: point = 189, n_alt = -2
   Insn 368: point = 190, n_alt = -2
   Insn 367: point = 191, n_alt = -2
   Insn 366: point = 192, n_alt = 3
   Insn 365: point = 193, n_alt = 0
   Insn 364: point = 195, n_alt = 3
   Insn 363: point = 196, n_alt = 0
   Insn 362: point = 198, n_alt = 3
  BB 22
   Insn 359: point = 199, n_alt = 0
   Insn 358: point = 199, n_alt = -2
   Insn 357: point = 200, n_alt = 0
   Insn 356: point = 200, n_alt = 2
   Insn 355: point = 200, n_alt = 3
   Insn 354: point = 201, n_alt = 0
   Insn 353: point = 201, n_alt = 3
   Insn 352: point = 201, n_alt = 4
   Insn 351: point = 201, n_alt = 0
   Insn 350: point = 201, n_alt = -2
   Insn 349: point = 202, n_alt = 0
   Insn 348: point = 202, n_alt = 2
   Insn 347: point = 202, n_alt = 3
   Insn 346: point = 203, n_alt = 0
   Insn 345: point = 203, n_alt = -2
   Insn 344: point = 204, n_alt = -2
   Insn 343: point = 205, n_alt = -2
   Insn 342: point = 206, n_alt = 3
   Insn 341: point = 207, n_alt = 0
   Insn 340: point = 209, n_alt = 3
   Insn 339: point = 210, n_alt = 0
   Insn 338: point = 212, n_alt = 3
  BB 21
   Insn 336: point = 213, n_alt = -1
   Insn 335: point = 213, n_alt = 0
   Insn 334: point = 214, n_alt = -2
   Insn 333: point = 215, n_alt = 0
   Insn 332: point = 215, n_alt = -2
   Insn 331: point = 216, n_alt = 0
   Insn 330: point = 216, n_alt = 0
   Insn 329: point = 218, n_alt = 3
  BB 20
   Insn 326: point = 219, n_alt = 1
  BB 19
   Insn 324: point = 219, n_alt = -1
   Insn 323: point = 219, n_alt = 1
  BB 18
   Insn 320: point = 219, n_alt = 0
   Insn 319: point = 219, n_alt = -2
   Insn 318: point = 220, n_alt = 3
   Insn 317: point = 221, n_alt = 0
   Insn 316: point = 221, n_alt = -2
   Insn 315: point = 222, n_alt = 3
   Insn 314: point = 223, n_alt = 0
   Insn 313: point = 223, n_alt = -2
   Insn 312: point = 224, n_alt = 0
   Insn 311: point = 224, n_alt = 2
   Insn 310: point = 224, n_alt = 3
   Insn 309: point = 225, n_alt = 0
   Insn 308: point = 225, n_alt = 3
   Insn 307: point = 225, n_alt = 4
   Insn 306: point = 225, n_alt = 0
   Insn 305: point = 225, n_alt = -2
   Insn 304: point = 226, n_alt = 0
   Insn 303: point = 226, n_alt = 2
   Insn 302: point = 226, n_alt = 3
   Insn 301: point = 227, n_alt = 0
   Insn 300: point = 227, n_alt = -2
   Insn 299: point = 228, n_alt = -2
   Insn 298: point = 229, n_alt = -2
   Insn 297: point = 230, n_alt = 3
   Insn 296: point = 231, n_alt = 0
   Insn 295: point = 233, n_alt = 3
   Insn 294: point = 234, n_alt = 0
   Insn 293: point = 236, n_alt = 3
  BB 16
   Insn 702: point = 237, n_alt = -1
   Insn 271: point = 237, n_alt = 0
   Insn 270: point = 237, n_alt = -2
   Insn 269: point = 238, n_alt = 0
   Insn 268: point = 238, n_alt = 2
   Insn 267: point = 238, n_alt = 3
   Insn 266: point = 239, n_alt = 0
   Insn 265: point = 239, n_alt = 3
   Insn 264: point = 239, n_alt = 4
   Insn 263: point = 239, n_alt = 0
   Insn 262: point = 239, n_alt = -2
   Insn 261: point = 240, n_alt = 0
   Insn 260: point = 240, n_alt = 2
   Insn 259: point = 240, n_alt = 3
  BB 14
   Insn 700: point = 241, n_alt = -1
   Insn 241: point = 241, n_alt = 0
   Insn 240: point = 241, n_alt = 3
   Insn 239: point = 241, n_alt = 4
  BB 17
   Insn 290: point = 241, n_alt = 0
   Insn 289: point = 241, n_alt = 3
   Insn 288: point = 241, n_alt = 4
   Insn 287: point = 241, n_alt = -2
   Insn 286: point = 242, n_alt = 0
   Insn 285: point = 244, n_alt = 4
   Insn 284: point = 246, n_alt = 0
   Insn 283: point = 248, n_alt = 0
   Insn 282: point = 250, n_alt = 0
   Insn 281: point = 251, n_alt = 3
   Insn 280: point = 253, n_alt = 0
   Insn 279: point = 255, n_alt = 0
   Insn 278: point = 257, n_alt = 1
   Insn 277: point = 259, n_alt = 0
   Insn 276: point = 260, n_alt = 3
  BB 15
   Insn 257: point = 261, n_alt = -1
   Insn 256: point = 261, n_alt = 0
   Insn 255: point = 262, n_alt = 4
   Insn 254: point = 264, n_alt = 0
   Insn 253: point = 266, n_alt = 0
   Insn 252: point = 268, n_alt = 0
   Insn 251: point = 269, n_alt = 3
   Insn 250: point = 271, n_alt = 0
   Insn 249: point = 273, n_alt = 0
   Insn 248: point = 275, n_alt = 1
   Insn 247: point = 277, n_alt = 0
   Insn 246: point = 278, n_alt = 3
  BB 13
   Insn 237: point = 279, n_alt = -1
   Insn 236: point = 279, n_alt = 0
   Insn 235: point = 280, n_alt = 4
   Insn 234: point = 282, n_alt = 0
   Insn 233: point = 284, n_alt = 0
   Insn 232: point = 286, n_alt = 0
   Insn 231: point = 287, n_alt = 3
   Insn 230: point = 289, n_alt = 0
   Insn 229: point = 291, n_alt = 0
   Insn 228: point = 293, n_alt = 1
   Insn 227: point = 295, n_alt = 0
   Insn 226: point = 296, n_alt = 3
   Insn 225: point = 297, n_alt = 0
   Insn 224: point = 297, n_alt = -2
   Insn 223: point = 298, n_alt = -2
   Insn 222: point = 299, n_alt = -2
   Insn 221: point = 300, n_alt = 0
   Insn 220: point = 301, n_alt = 0
   Insn 219: point = 302, n_alt = 3
   Insn 218: point = 303, n_alt = 1
   Insn 217: point = 304, n_alt = -2
   Insn 216: point = 305, n_alt = 0
   Insn 215: point = 305, n_alt = -2
   Insn 214: point = 306, n_alt = 3
   Insn 213: point = 307, n_alt = 0
   Insn 212: point = 307, n_alt = -2
   Insn 211: point = 308, n_alt = 3
  BB 12
   Insn 209: point = 309, n_alt = -1
   Insn 208: point = 309, n_alt = 1
   Insn 207: point = 309, n_alt = 1
   Insn 206: point = 310, n_alt = 0
   Insn 205: point = 312, n_alt = 3
   Insn 204: point = 313, n_alt = 1
   Insn 203: point = 314, n_alt = 0
   Insn 202: point = 316, n_alt = 3
  BB 11
   Insn 200: point = 317, n_alt = -1
   Insn 199: point = 317, n_alt = 1
   Insn 198: point = 317, n_alt = 0
   Insn 197: point = 317, n_alt = -2
   Insn 196: point = 318, n_alt = 3
   Insn 195: point = 319, n_alt = 0
   Insn 194: point = 319, n_alt = -2
   Insn 193: point = 320, n_alt = 3
   Insn 192: point = 321, n_alt = 0
   Insn 191: point = 321, n_alt = -2
   Insn 190: point = 322, n_alt = 0
   Insn 189: point = 322, n_alt = 2
   Insn 188: point = 322, n_alt = 3
   Insn 187: point = 323, n_alt = 0
   Insn 186: point = 323, n_alt = 3
   Insn 185: point = 323, n_alt = 4
   Insn 184: point = 323, n_alt = 0
   Insn 183: point = 323, n_alt = -2
   Insn 182: point = 324, n_alt = 0
   Insn 181: point = 324, n_alt = 2
   Insn 180: point = 324, n_alt = 3
   Insn 179: point = 325, n_alt = 0
   Insn 178: point = 325, n_alt = -2
   Insn 177: point = 326, n_alt = -2
   Insn 176: point = 327, n_alt = -2
   Insn 175: point = 328, n_alt = 3
   Insn 174: point = 329, n_alt = 0
   Insn 173: point = 331, n_alt = 3
   Insn 172: point = 332, n_alt = 0
   Insn 171: point = 334, n_alt = 3
   Insn 170: point = 335, n_alt = 0
   Insn 169: point = 335, n_alt = -2
   Insn 168: point = 336, n_alt = 3
  BB 10
   Insn 166: point = 337, n_alt = -1
   Insn 165: point = 337, n_alt = 0
   Insn 163: point = 338, n_alt = 0
  BB 6
   Insn 698: point = 339, n_alt = -1
   Insn 132: point = 339, n_alt = 1
   Insn 131: point = 339, n_alt = 0
   Insn 130: point = 339, n_alt = -2
   Insn 129: point = 340, n_alt = 3
   Insn 128: point = 341, n_alt = 1
   Insn 127: point = 341, n_alt = 1
   Insn 126: point = 342, n_alt = 0
   Insn 125: point = 343, n_alt = 3
   Insn 124: point = 344, n_alt = 1
   Insn 123: point = 345, n_alt = 0
   Insn 122: point = 346, n_alt = 3
  BB 48
   Insn 713: point = 347, n_alt = -1
   Insn 683: point = 347, n_alt = 1
   Insn 682: point = 348, n_alt = 0
   Insn 681: point = 350, n_alt = 0
   Insn 680: point = 351, n_alt = 0
   Insn 679: point = 351, n_alt = 0
   Insn 678: point = 351, n_alt = 0
   Insn 677: point = 351, n_alt = -2
   Insn 676: point = 352, n_alt = 3
  BB 5
   Insn 120: point = 353, n_alt = 5
   Insn 119: point = 354, n_alt = 3
   Insn 118: point = 355, n_alt = 0
   Insn 117: point = 355, n_alt = -2
   Insn 116: point = 356, n_alt = 3
   Insn 115: point = 357, n_alt = 1
   Insn 114: point = 358, n_alt = -2
   Insn 113: point = 359, n_alt = 0
   Insn 112: point = 359, n_alt = 3
   Insn 111: point = 360, n_alt = 1
   Insn 110: point = 361, n_alt = -2
   Insn 109: point = 362, n_alt = 0
   Insn 108: point = 362, n_alt = 3
   Insn 107: point = 363, n_alt = 5
   Insn 106: point = 364, n_alt = -2
   Insn 105: point = 365, n_alt = 0
   Insn 104: point = 365, n_alt = 4
   Insn 103: point = 365, n_alt = 5
   Insn 102: point = 366, n_alt = -2
   Insn 101: point = 367, n_alt = 0
   Insn 100: point = 367, n_alt = 4
   Insn 99: point = 367, n_alt = 0
   Insn 98: point = 367, n_alt = -2
   Insn 97: point = 368, n_alt = 3
   Insn 96: point = 369, n_alt = 0
   Insn 95: point = 369, n_alt = -2
   Insn 94: point = 370, n_alt = 3
   Insn 93: point = 371, n_alt = 5
   Insn 92: point = 372, n_alt = -2
   Insn 91: point = 373, n_alt = 0
   Insn 90: point = 373, n_alt = 3
   Insn 89: point = 373, n_alt = 1
   Insn 88: point = 373, n_alt = 1
   Insn 87: point = 373, n_alt = 1
   Insn 86: point = 373, n_alt = 1
   Insn 85: point = 373, n_alt = 1
   Insn 84: point = 374, n_alt = -2
   Insn 83: point = 375, n_alt = 0
  BB 3
   Insn 696: point = 375, n_alt = -1
   Insn 75: point = 375, n_alt = 1
  BB 4
   Insn 80: point = 375, n_alt = 1
  BB 2
   Insn 73: point = 375, n_alt = -1
   Insn 72: point = 375, n_alt = 0
   Insn 71: point = 376, n_alt = -2
   Insn 70: point = 377, n_alt = 0
   Insn 69: point = 377, n_alt = -2
   Insn 68: point = 378, n_alt = 4
   Insn 67: point = 378, n_alt = 2
   Insn 66: point = 378, n_alt = 3
   Insn 65: point = 379, n_alt = 5
   Insn 64: point = 380, n_alt = 3
   Insn 63: point = 381, n_alt = 0
   Insn 62: point = 381, n_alt = 0
   Insn 61: point = 381, n_alt = 0
   Insn 60: point = 381, n_alt = 0
   Insn 59: point = 381, n_alt = 5
   Insn 58: point = 382, n_alt = -2
   Insn 57: point = 383, n_alt = 0
   Insn 56: point = 383, n_alt = 3
   Insn 55: point = 383, n_alt = 4
   Insn 54: point = 383, n_alt = 0
   Insn 53: point = 383, n_alt = 0
   Insn 52: point = 383, n_alt = 0
   Insn 51: point = 383, n_alt = 5
   Insn 50: point = 384, n_alt = -2
   Insn 49: point = 385, n_alt = 0
   Insn 48: point = 385, n_alt = 3
   Insn 47: point = 385, n_alt = 4
   Insn 46: point = 385, n_alt = 0
   Insn 45: point = 385, n_alt = 0
   Insn 44: point = 385, n_alt = 0
   Insn 43: point = 385, n_alt = 5
   Insn 42: point = 386, n_alt = -2
   Insn 41: point = 387, n_alt = 0
   Insn 40: point = 387, n_alt = 3
   Insn 39: point = 387, n_alt = 4
   Insn 38: point = 387, n_alt = 0
   Insn 37: point = 387, n_alt = 0
   Insn 36: point = 387, n_alt = 0
   Insn 35: point = 387, n_alt = 5
   Insn 34: point = 388, n_alt = -2
   Insn 33: point = 389, n_alt = 0
   Insn 32: point = 389, n_alt = 3
   Insn 31: point = 389, n_alt = 4
   Insn 30: point = 389, n_alt = 0
   Insn 29: point = 389, n_alt = 0
   Insn 28: point = 389, n_alt = 0
   Insn 27: point = 389, n_alt = 5
   Insn 26: point = 390, n_alt = -2
   Insn 25: point = 391, n_alt = 0
   Insn 24: point = 391, n_alt = 3
   Insn 23: point = 391, n_alt = 4
   Insn 22: point = 391, n_alt = 0
   Insn 21: point = 391, n_alt = 0
   Insn 20: point = 391, n_alt = 0
   Insn 19: point = 391, n_alt = 5
   Insn 18: point = 392, n_alt = -2
   Insn 17: point = 393, n_alt = 0
   Insn 16: point = 393, n_alt = 3
   Insn 15: point = 393, n_alt = 4
   Insn 14: point = 393, n_alt = 0
   Insn 13: point = 393, n_alt = 0
   Insn 12: point = 393, n_alt = 0
   Insn 11: point = 393, n_alt = 1
   Insn 10: point = 393, n_alt = 1
   Insn 9: point = 393, n_alt = 1
   Insn 8: point = 393, n_alt = 1
   Insn 7: point = 393, n_alt = 1
   Insn 6: point = 393, n_alt = 1
   Insn 2: point = 393, n_alt = 5
  BB 9
   Insn 160: point = 393, n_alt = 1
  BB 8
   Insn 157: point = 393, n_alt = 0
   Insn 156: point = 393, n_alt = 3
   Insn 155: point = 393, n_alt = 4
   Insn 154: point = 393, n_alt = 0
   Insn 153: point = 393, n_alt = -2
   Insn 152: point = 394, n_alt = -2
   Insn 151: point = 395, n_alt = -2
   Insn 150: point = 396, n_alt = 3
   Insn 149: point = 397, n_alt = 0
   Insn 148: point = 399, n_alt = 0
   Insn 147: point = 401, n_alt = 0
   Insn 146: point = 403, n_alt = 0
   Insn 145: point = 404, n_alt = 0
   Insn 144: point = 406, n_alt = 0
   Insn 143: point = 408, n_alt = 0
  BB 7
   Insn 141: point = 409, n_alt = -1
   Insn 140: point = 409, n_alt = 0
   Insn 139: point = 410, n_alt = 0
   Insn 138: point = 412, n_alt = 0
   Insn 137: point = 414, n_alt = 0
   Insn 136: point = 416, n_alt = 0
 r87: [375..376]
 r88: [373..374]
 r89: [371..372]
 r90: [367..368]
 r91: [365..366]
 r92: [363..364]
 r93: [360..362]
 r94: [360..361]
 r95: [357..359]
 r96: [357..358]
 r97: [344..346]
 r98: [344..345]
 r99: [341..343]
 r100: [341..342]
 r101: [339..340]
 r102: [409..410]
 r103: [395..404]
 r104: [394..397]
 r105: [393..396]
 r106: [337..338]
 r107: [333..334]
 r108: [327..332]
 r109: [330..331]
 r110: [326..329]
 r111: [325..328]
 r112: [323..324]
 r113: [321..322]
 r114: [315..316]
 r115: [311..312]
 r116: [297..302]
 r117: [290..296]
 r118: [292..293]
 r119: [290..291]
 r120: [288..289]
 r121: [283..287]
 r122: [283..284]
 r123: [281..282]
 r124: [279..280]
 r125: [272..278]
 r126: [274..275]
 r127: [272..273]
 r128: [270..271]
 r129: [265..269]
 r130: [265..266]
 r131: [263..264]
 r132: [261..262]
 r133: [239..240]
 r134: [237..238]
 r135: [254..260]
 r136: [256..257]
 r137: [254..255]
 r138: [252..253]
 r139: [247..251]
 r140: [247..248]
 r141: [245..246]
 r142: [243..244]
 r143: [241..242]
 r144: [235..236]
 r145: [229..234]
 r146: [232..233]
 r147: [228..231]
 r148: [227..230]
 r149: [225..226]
 r150: [223..224]
 r151: [217..218]
 r152: [215..216]
 r153: [213..214]
 r154: [211..212]
 r155: [205..210]
 r156: [208..209]
 r157: [204..207]
 r158: [203..206]
 r159: [201..202]
 r160: [199..200]
 r161: [197..198]
 r162: [191..196]
 r163: [194..195]
 r164: [190..193]
 r165: [189..192]
 r166: [183..184]
 r167: [181..182]
 r168: [179..180]
 r169: [175..176]
 r170: [157..162]
 r171: [150..156]
 r172: [152..153]
 r173: [150..151]
 r174: [148..149]
 r175: [143..147]
 r176: [143..144]
 r177: [141..142]
 r178: [139..140]
 r179: [132..138]
 r180: [134..135]
 r181: [132..133]
 r182: [130..131]
 r183: [125..129]
 r184: [125..126]
 r185: [123..124]
 r186: [121..122]
 r187: [99..100]
 r188: [97..98]
 r189: [114..120]
 r190: [116..117]
 r191: [114..115]
 r192: [112..113]
 r193: [107..111]
 r194: [107..108]
 r195: [105..106]
 r196: [103..104]
 r197: [101..102]
 r198: [95..96]
 r199: [89..94]
 r200: [92..93]
 r201: [88..91]
 r202: [87..90]
 r203: [85..86]
 r204: [83..84]
 r205: [77..78]
 r206: [71..72]
 r207: [63..66]
 r208: [62..65]
 r209: [61..64]
 r210: [59..60]
 r211: [57..58]
 r212: [45..46]
 r213: [43..44]
 r214: [41..42]
 r215: [35..36]
 r216: [33..34]
 r217: [31..32]
 r218: [29..30]
 r219: [27..28]
 r220: [17..18]
 r221: [15..16]
 r222: [11..12]
 r223: [9..10]
 r224: [7..8]
 r225: [5..6]
 r226: [351..352]
 r227: [349..350]
 r228: [347..348]
 r229: [2..4]
 r230: [0..1]
 r231: [391..392]
 r232: [389..390]
 r233: [387..388]
 r234: [385..386]
 r235: [383..384]
 r236: [381..382]
 r237: [379..380]
 r238: [377..378]
 r239: [369..370]
 r240: [355..356]
 r241: [353..354]
 r242: [413..414]
 r243: [415..416]
 r244: [411..412]
 r245: [405..406]
 r246: [407..408]
 r247: [400..401]
 r248: [402..403]
 r249: [398..399]
 r250: [335..336]
 r251: [319..320]
 r252: [317..318]
 r253: [313..314]
 r254: [309..310]
 r255: [307..308]
 r256: [305..306]
 r257: [303..304]
 r258: [299..301]
 r259: [298..300]
 r260: [294..295]
 r261: [285..286]
 r262: [276..277]
 r263: [267..268]
 r264: [258..259]
 r265: [249..250]
 r266: [221..222]
 r267: [219..220]
 r268: [187..188]
 r269: [185..186]
 r270: [177..178]
 r271: [173..174]
 r272: [171..172]
 r273: [169..170]
 r274: [167..168]
 r275: [165..166]
 r276: [163..164]
 r277: [159..161]
 r278: [158..160]
 r279: [154..155]
 r280: [145..146]
 r281: [136..137]
 r282: [127..128]
 r283: [118..119]
 r284: [109..110]
 r285: [81..82]
 r286: [79..80]
 r287: [74..76]
 r288: [73..75]
 r289: [69..70]
 r290: [67..68]
 r291: [55..56]
 r292: [53..54]
 r293: [51..52]
 r294: [49..50]
 r295: [47..48]
 r296: [39..40]
 r297: [37..38]
 r298: [25..26]
 r299: [23..24]
 r300: [21..22]
 r301: [19..20]
 r302: [13..14]
Compressing live ranges: from 417 to 362 - 86%
Ranges after the compression:
 r87: [324..325]
 r88: [322..323]
 r89: [320..321]
 r90: [316..317]
 r91: [314..315]
 r92: [312..313]
 r93: [310..311]
 r94: [310..311]
 r95: [308..309]
 r96: [308..309]
 r97: [296..297]
 r98: [296..297]
 r99: [294..295]
 r100: [294..295]
 r101: [292..293]
 r102: [354..355]
 r103: [342..349]
 r104: [342..343]
 r105: [342..343]
 r106: [290..291]
 r107: [286..287]
 r108: [282..285]
 r109: [284..285]
 r110: [282..283]
 r111: [282..283]
 r112: [280..281]
 r113: [278..279]
 r114: [272..273]
 r115: [268..269]
 r116: [258..259]
 r117: [252..257]
 r118: [254..255]
 r119: [252..253]
 r120: [250..251]
 r121: [246..249]
 r122: [246..247]
 r123: [244..245]
 r124: [242..243]
 r125: [236..241]
 r126: [238..239]
 r127: [236..237]
 r128: [234..235]
 r129: [230..233]
 r130: [230..231]
 r131: [228..229]
 r132: [226..227]
 r133: [206..207]
 r134: [204..205]
 r135: [220..225]
 r136: [222..223]
 r137: [220..221]
 r138: [218..219]
 r139: [214..217]
 r140: [214..215]
 r141: [212..213]
 r142: [210..211]
 r143: [208..209]
 r144: [202..203]
 r145: [198..201]
 r146: [200..201]
 r147: [198..199]
 r148: [198..199]
 r149: [196..197]
 r150: [194..195]
 r151: [188..189]
 r152: [186..187]
 r153: [184..185]
 r154: [182..183]
 r155: [178..181]
 r156: [180..181]
 r157: [178..179]
 r158: [178..179]
 r159: [176..177]
 r160: [174..175]
 r161: [172..173]
 r162: [168..171]
 r163: [170..171]
 r164: [168..169]
 r165: [168..169]
 r166: [162..163]
 r167: [160..161]
 r168: [158..159]
 r169: [154..155]
 r170: [140..141]
 r171: [134..139]
 r172: [136..137]
 r173: [134..135]
 r174: [132..133]
 r175: [128..131]
 r176: [128..129]
 r177: [126..127]
 r178: [124..125]
 r179: [118..123]
 r180: [120..121]
 r181: [118..119]
 r182: [116..117]
 r183: [112..115]
 r184: [112..113]
 r185: [110..111]
 r186: [108..109]
 r187: [88..89]
 r188: [86..87]
 r189: [102..107]
 r190: [104..105]
 r191: [102..103]
 r192: [100..101]
 r193: [96..99]
 r194: [96..97]
 r195: [94..95]
 r196: [92..93]
 r197: [90..91]
 r198: [84..85]
 r199: [80..83]
 r200: [82..83]
 r201: [80..81]
 r202: [80..81]
 r203: [78..79]
 r204: [76..77]
 r205: [70..71]
 r206: [66..67]
 r207: [60..61]
 r208: [60..61]
 r209: [60..61]
 r210: [58..59]
 r211: [56..57]
 r212: [44..45]
 r213: [42..43]
 r214: [40..41]
 r215: [34..35]
 r216: [32..33]
 r217: [30..31]
 r218: [28..29]
 r219: [26..27]
 r220: [16..17]
 r221: [14..15]
 r222: [10..11]
 r223: [8..9]
 r224: [6..7]
 r225: [4..5]
 r226: [302..303]
 r227: [300..301]
 r228: [298..299]
 r229: [2..3]
 r230: [0..1]
 r231: [340..341]
 r232: [338..339]
 r233: [336..337]
 r234: [334..335]
 r235: [332..333]
 r236: [330..331]
 r237: [328..329]
 r238: [326..327]
 r239: [318..319]
 r240: [306..307]
 r241: [304..305]
 r242: [358..359]
 r243: [360..361]
 r244: [356..357]
 r245: [350..351]
 r246: [352..353]
 r247: [346..347]
 r248: [348..349]
 r249: [344..345]
 r250: [288..289]
 r251: [276..277]
 r252: [274..275]
 r253: [270..271]
 r254: [266..267]
 r255: [264..265]
 r256: [262..263]
 r257: [260..261]
 r258: [258..259]
 r259: [258..259]
 r260: [256..257]
 r261: [248..249]
 r262: [240..241]
 r263: [232..233]
 r264: [224..225]
 r265: [216..217]
 r266: [192..193]
 r267: [190..191]
 r268: [166..167]
 r269: [164..165]
 r270: [156..157]
 r271: [152..153]
 r272: [150..151]
 r273: [148..149]
 r274: [146..147]
 r275: [144..145]
 r276: [142..143]
 r277: [140..141]
 r278: [140..141]
 r279: [138..139]
 r280: [130..131]
 r281: [122..123]
 r282: [114..115]
 r283: [106..107]
 r284: [98..99]
 r285: [74..75]
 r286: [72..73]
 r287: [68..69]
 r288: [68..69]
 r289: [64..65]
 r290: [62..63]
 r291: [54..55]
 r292: [52..53]
 r293: [50..51]
 r294: [48..49]
 r295: [46..47]
 r296: [38..39]
 r297: [36..37]
 r298: [24..25]
 r299: [22..23]
 r300: [20..21]
 r301: [18..19]
 r302: [12..13]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=36256, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=36224, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 71
changing reg in insn 72
changing reg in insn 84
changing reg in insn 85
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 102
changing reg in insn 103
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 111
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 114
changing reg in insn 115
changing reg in insn 122
changing reg in insn 124
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 127
changing reg in insn 126
changing reg in insn 127
changing reg in insn 129
changing reg in insn 130
changing reg in insn 139
changing reg in insn 140
changing reg in insn 145
changing reg in insn 151
changing reg in insn 149
changing reg in insn 152
changing reg in insn 150
changing reg in insn 153
changing reg in insn 163
changing reg in insn 165
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 176
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 177
changing reg in insn 175
changing reg in insn 178
changing reg in insn 180
changing reg in insn 183
changing reg in insn 188
changing reg in insn 191
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 219
changing reg in insn 224
changing reg in insn 226
changing reg in insn 230
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 246
changing reg in insn 250
changing reg in insn 248
changing reg in insn 249
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 251
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 259
changing reg in insn 262
changing reg in insn 267
changing reg in insn 270
changing reg in insn 276
changing reg in insn 280
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 280
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 283
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 286
changing reg in insn 287
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 298
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 299
changing reg in insn 297
changing reg in insn 300
changing reg in insn 302
changing reg in insn 305
changing reg in insn 310
changing reg in insn 313
changing reg in insn 329
changing reg in insn 330
changing reg in insn 330
changing reg in insn 332
changing reg in insn 334
changing reg in insn 335
changing reg in insn 338
changing reg in insn 339
changing reg in insn 339
changing reg in insn 343
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 344
changing reg in insn 342
changing reg in insn 345
changing reg in insn 347
changing reg in insn 350
changing reg in insn 355
changing reg in insn 358
changing reg in insn 362
changing reg in insn 363
changing reg in insn 363
changing reg in insn 367
changing reg in insn 364
changing reg in insn 365
changing reg in insn 365
changing reg in insn 368
changing reg in insn 366
changing reg in insn 369
changing reg in insn 380
changing reg in insn 381
changing reg in insn 381
changing reg in insn 382
changing reg in insn 385
changing reg in insn 386
changing reg in insn 388
changing reg in insn 389
changing reg in insn 408
changing reg in insn 413
changing reg in insn 415
changing reg in insn 419
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 424
changing reg in insn 425
changing reg in insn 435
changing reg in insn 439
changing reg in insn 437
changing reg in insn 438
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 440
changing reg in insn 440
changing reg in insn 442
changing reg in insn 443
changing reg in insn 444
changing reg in insn 444
changing reg in insn 445
changing reg in insn 448
changing reg in insn 451
changing reg in insn 456
changing reg in insn 459
changing reg in insn 465
changing reg in insn 469
changing reg in insn 467
changing reg in insn 468
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 470
changing reg in insn 470
changing reg in insn 472
changing reg in insn 473
changing reg in insn 474
changing reg in insn 474
changing reg in insn 475
changing reg in insn 475
changing reg in insn 476
changing reg in insn 482
changing reg in insn 483
changing reg in insn 483
changing reg in insn 487
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 488
changing reg in insn 486
changing reg in insn 489
changing reg in insn 491
changing reg in insn 494
changing reg in insn 499
changing reg in insn 502
changing reg in insn 521
changing reg in insn 522
changing reg in insn 536
changing reg in insn 537
changing reg in insn 546
changing reg in insn 549
changing reg in insn 547
changing reg in insn 550
changing reg in insn 548
changing reg in insn 551
changing reg in insn 553
changing reg in insn 556
changing reg in insn 561
changing reg in insn 564
changing reg in insn 583
changing reg in insn 584
changing reg in insn 584
changing reg in insn 586
changing reg in insn 588
changing reg in insn 589
changing reg in insn 600
changing reg in insn 601
changing reg in insn 601
changing reg in insn 603
changing reg in insn 605
changing reg in insn 606
changing reg in insn 619
changing reg in insn 620
changing reg in insn 621
changing reg in insn 622
changing reg in insn 631
changing reg in insn 632
changing reg in insn 634
changing reg in insn 635
changing reg in insn 641
changing reg in insn 642
changing reg in insn 645
changing reg in insn 647
changing reg in insn 651
changing reg in insn 653
changing reg in insn 655
changing reg in insn 657
changing reg in insn 676
changing reg in insn 677
changing reg in insn 681
changing reg in insn 682
changing reg in insn 682
changing reg in insn 683
changing reg in insn 671
changing reg in insn 689
changing reg in insn 689
changing reg in insn 693
changing reg in insn 18
changing reg in insn 19
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 42
changing reg in insn 43
changing reg in insn 50
changing reg in insn 51
changing reg in insn 58
changing reg in insn 59
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 94
changing reg in insn 95
changing reg in insn 116
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 137
changing reg in insn 138
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 144
changing reg in insn 145
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 168
changing reg in insn 169
changing reg in insn 193
changing reg in insn 194
changing reg in insn 196
changing reg in insn 197
changing reg in insn 203
changing reg in insn 204
changing reg in insn 206
changing reg in insn 207
changing reg in insn 211
changing reg in insn 212
changing reg in insn 214
changing reg in insn 215
changing reg in insn 217
changing reg in insn 218
changing reg in insn 220
changing reg in insn 222
changing reg in insn 221
changing reg in insn 223
changing reg in insn 227
changing reg in insn 228
changing reg in insn 232
changing reg in insn 233
changing reg in insn 247
changing reg in insn 248
changing reg in insn 252
changing reg in insn 253
changing reg in insn 277
changing reg in insn 278
changing reg in insn 282
changing reg in insn 283
changing reg in insn 315
changing reg in insn 316
changing reg in insn 318
changing reg in insn 319
changing reg in insn 371
changing reg in insn 372
changing reg in insn 374
changing reg in insn 375
changing reg in insn 386
changing reg in insn 387
changing reg in insn 389
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 394
changing reg in insn 395
changing reg in insn 400
changing reg in insn 401
changing reg in insn 403
changing reg in insn 404
changing reg in insn 406
changing reg in insn 407
changing reg in insn 409
changing reg in insn 411
changing reg in insn 410
changing reg in insn 412
changing reg in insn 416
changing reg in insn 417
changing reg in insn 421
changing reg in insn 422
changing reg in insn 436
changing reg in insn 437
changing reg in insn 441
changing reg in insn 442
changing reg in insn 466
changing reg in insn 467
changing reg in insn 471
changing reg in insn 472
changing reg in insn 504
changing reg in insn 505
changing reg in insn 507
changing reg in insn 508
changing reg in insn 526
changing reg in insn 528
changing reg in insn 527
changing reg in insn 531
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 566
changing reg in insn 567
changing reg in insn 571
changing reg in insn 572
changing reg in insn 574
changing reg in insn 575
changing reg in insn 577
changing reg in insn 578
changing reg in insn 580
changing reg in insn 581
changing reg in insn 592
changing reg in insn 593
changing reg in insn 595
changing reg in insn 596
changing reg in insn 609
changing reg in insn 610
changing reg in insn 612
changing reg in insn 613
changing reg in insn 625
changing reg in insn 626
changing reg in insn 628
changing reg in insn 629
changing reg in insn 638
changing reg in insn 639
deleting insn with uid = 18.
deleting insn with uid = 26.
deleting insn with uid = 34.
deleting insn with uid = 42.
deleting insn with uid = 50.
deleting insn with uid = 58.
deleting insn with uid = 71.
deleting insn with uid = 84.
deleting insn with uid = 92.
deleting insn with uid = 102.
deleting insn with uid = 106.
deleting insn with uid = 110.
deleting insn with uid = 114.
deleting insn with uid = 151.
deleting insn with uid = 176.
deleting insn with uid = 217.
deleting insn with uid = 222.
deleting insn with uid = 298.
deleting insn with uid = 334.
deleting insn with uid = 343.
deleting insn with uid = 367.
deleting insn with uid = 406.
deleting insn with uid = 411.
deleting insn with uid = 487.
deleting insn with uid = 549.
deleting insn with uid = 588.
deleting insn with uid = 605.
deleting insn with uid = 689.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 157.
verify found no changes in insn with uid = 170.
verify found no changes in insn with uid = 179.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 192.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 241.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 266.
verify found no changes in insn with uid = 271.
verify found no changes in insn with uid = 290.
verify found no changes in insn with uid = 301.
verify found no changes in insn with uid = 306.
verify found no changes in insn with uid = 309.
verify found no changes in insn with uid = 314.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 320.
verify found no changes in insn with uid = 333.
verify found no changes in insn with uid = 346.
verify found no changes in insn with uid = 351.
verify found no changes in insn with uid = 354.
verify found no changes in insn with uid = 359.
verify found no changes in insn with uid = 370.
verify found no changes in insn with uid = 373.
verify found no changes in insn with uid = 376.
verify found no changes in insn with uid = 393.
verify found no changes in insn with uid = 396.
verify found no changes in insn with uid = 402.
verify found no changes in insn with uid = 405.
verify found no changes in insn with uid = 414.
verify found no changes in insn with uid = 430.
verify found no changes in insn with uid = 452.
verify found no changes in insn with uid = 455.
verify found no changes in insn with uid = 460.
verify found no changes in insn with uid = 479.
verify found no changes in insn with uid = 490.
verify found no changes in insn with uid = 495.
verify found no changes in insn with uid = 498.
verify found no changes in insn with uid = 503.
verify found no changes in insn with uid = 506.
verify found no changes in insn with uid = 509.
verify found no changes in insn with uid = 532.
verify found no changes in insn with uid = 542.
verify found no changes in insn with uid = 545.
verify found no changes in insn with uid = 552.
verify found no changes in insn with uid = 557.
verify found no changes in insn with uid = 560.
verify found no changes in insn with uid = 565.
verify found no changes in insn with uid = 568.
verify found no changes in insn with uid = 573.
verify found no changes in insn with uid = 576.
verify found no changes in insn with uid = 579.
verify found no changes in insn with uid = 582.
verify found no changes in insn with uid = 587.
verify found no changes in insn with uid = 594.
verify found no changes in insn with uid = 597.
verify found no changes in insn with uid = 604.
verify found no changes in insn with uid = 611.
verify found no changes in insn with uid = 614.
verify found no changes in insn with uid = 627.
verify found no changes in insn with uid = 630.
verify found no changes in insn with uid = 633.
verify found no changes in insn with uid = 640.
verify found no changes in insn with uid = 648.
verify found no changes in insn with uid = 654.
verify found no changes in insn with uid = 658.
verify found no changes in insn with uid = 660.
verify found no changes in insn with uid = 662.
verify found no changes in insn with uid = 664.
verify found no changes in insn with uid = 666.
verify found no changes in insn with uid = 668.
verify found no changes in insn with uid = 670.
verify found no changes in insn with uid = 678.
verify found no changes in insn with uid = 680.


serwer_serwer

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={269d,189u} r1={158d,59u} r2={115d,16u} r3={2d,2u} r4={139d,40u} r5={193d,95u} r6={1d,198u} r7={1d,147u} r8={98d} r9={98d} r10={98d} r11={98d} r12={98d} r13={98d} r14={98d} r15={98d} r17={171d,22u} r18={98d} r19={98d} r20={1d,1u} r21={99d} r22={99d} r23={99d} r24={99d} r25={99d} r26={99d} r27={99d} r28={99d} r29={98d} r30={98d} r31={98d} r32={98d} r33={98d} r34={98d} r35={98d} r36={98d} r37={99d} r38={99d} r39={98d} r40={98d} r45={98d} r46={98d} r47={98d} r48={98d} r49={98d} r50={98d} r51={98d} r52={98d} r53={98d} r54={98d} r55={98d} r56={98d} r57={98d} r58={98d} r59={98d} r60={98d} r61={98d} r62={98d} r63={98d} r64={98d} r65={98d} r66={98d} r67={98d} r68={98d} r69={98d} r70={98d} r71={98d} r72={98d} r73={98d} r74={98d} r75={98d} r76={98d} r77={98d} r78={98d} r79={98d} r80={98d} 
;;    total ref usage 8297{7528d,769u,0e} in 578{480 regular + 98 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 231 232 233 234 235 236 237 238
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36232 [0xffffffffffff7278])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":313 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 bestia_licznik+0 S4 A32])
        (const_int 0 [0])) "function.c":314 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 b1+0 S4 A32])
        (const_int 0 [0])) "function.c":315 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 b2+0 S4 A32])
        (const_int 0 [0])) "function.c":316 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":317 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":318 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 licznik+0 S4 A32])
        (const_int 0 [0])) "function.c":319 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":324 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":324 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":324 86 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f7cd0f0d1b0 *.LC34>)) "function.c":324 85 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":324 88 {*movqi_internal}
     (nil))
(call_insn 17 16 19 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":324 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 19 17 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [18 sem_p1+0 S8 A64])
        (reg:DI 0 ax [231])) "function.c":324 85 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":325 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":325 86 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":325 86 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f7cd0f0d240 *.LC35>)) "function.c":325 85 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":325 88 {*movqi_internal}
     (nil))
(call_insn 25 24 27 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":325 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 27 25 28 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [18 sem_p1_pom+0 S8 A64])
        (reg:DI 0 ax [232])) "function.c":325 85 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":327 86 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":327 86 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":327 86 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":327 85 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":327 88 {*movqi_internal}
     (nil))
(call_insn 33 32 35 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":327 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 35 33 36 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [18 sem_p2+0 S8 A64])
        (reg:DI 0 ax [233])) "function.c":327 85 {*movdi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":328 86 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":328 86 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":328 86 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f7cd0f0d360 *.LC37>)) "function.c":328 85 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":328 88 {*movqi_internal}
     (nil))
(call_insn 41 40 43 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":328 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 43 41 44 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [18 sem_p2_pom+0 S8 A64])
        (reg:DI 0 ax [234])) "function.c":328 85 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":330 86 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":330 86 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":330 86 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f7cd0ef3870 *.LC32>)) "function.c":330 85 {*movdi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":330 88 {*movqi_internal}
     (nil))
(call_insn 49 48 51 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":330 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 51 49 52 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [18 sem_bestia1+0 S8 A64])
        (reg:DI 0 ax [235])) "function.c":330 85 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":331 86 {*movsi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":331 86 {*movsi_internal}
     (nil))
(insn 54 53 55 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":331 86 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f7cd0ef3900 *.LC33>)) "function.c":331 85 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":331 88 {*movqi_internal}
     (nil))
(call_insn 57 56 59 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":331 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 59 57 60 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [18 sem_bestia2+0 S8 A64])
        (reg:DI 0 ax [236])) "function.c":331 85 {*movdi_internal}
     (nil))
(insn 60 59 61 2 (set (reg:SI 1 dx)
        (const_int 5 [0x5])) "function.c":334 86 {*movsi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":334 86 {*movsi_internal}
     (nil))
(insn 62 61 63 2 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "function.c":334 86 {*movsi_internal}
     (nil))
(call_insn 63 62 64 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":334 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 64 63 65 2 (set (reg/f:DI 0 ax [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36232 [0xffffffffffff7278])) [19 pom+0 S8 A64])) "function.c":338 85 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [10 q+0 S8 A64])
        (reg/f:DI 0 ax [237])) "function.c":338 85 {*movdi_internal}
     (nil))
(insn 66 65 67 2 (set (reg:DI 0 ax [238])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [10 q+0 S8 A64])) "function.c":340 85 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) "function.c":340 85 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":340 85 {*movdi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [238])) "function.c":340 85 {*movdi_internal}
     (nil))
(call_insn/i 70 69 72 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcmp") [flags 0x41]  <function_decl 0x7f7cd1238000 memcmp>) [0 __builtin_memcmp S1 A8])
            (const_int 0 [0]))) "function.c":340 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 72 70 73 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 0 [0]))) "function.c":340 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 73 72 74 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "function.c":340 682 {*jcc}
     (nil)
 -> 78)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 74 73 75 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 696 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36184 [0xffffffffffff72a8])) [3 serwerinfo.pom+0 S4 A64])
        (const_int 1 [0x1])) "function.c":342 86 {*movsi_internal}
     (nil))
(jump_insn 696 75 697 3 (set (pc)
        (label_ref 81)) 683 {jump}
     (nil)
 -> 81)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 697 696 78)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 78 697 79 4 46 (nil) [1 uses])
(note 79 78 80 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36184 [0xffffffffffff72a8])) [3 serwerinfo.pom+0 S4 A64])
        (const_int 2 [0x2])) "function.c":346 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 239 240 241
(code_label 81 80 82 5 47 (nil) [1 uses])
(note 82 81 83 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 83 82 85 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":349 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 85 83 86 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36208 [0xffffffffffff7290])) [3 serwerinfo.PID+0 S4 A64])
        (reg:SI 0 ax [orig:88 _2 ] [88])) "function.c":349 86 {*movsi_internal}
     (nil))
(insn 86 85 87 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36196 [0xffffffffffff729c])) [3 serwerinfo.runda+0 S4 A32])
        (const_int 0 [0])) "function.c":350 86 {*movsi_internal}
     (nil))
(insn 87 86 88 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28160 [0xffffffffffff9200])) [3 serwerinfo.skarb.count_one_coin+0 S4 A64])
        (const_int 0 [0])) "function.c":352 86 {*movsi_internal}
     (nil))
(insn 88 87 89 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20156 [0xffffffffffffb144])) [3 serwerinfo.skarb.count_treasure_coin+0 S4 A32])
        (const_int 0 [0])) "function.c":353 86 {*movsi_internal}
     (nil))
(insn 89 88 90 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12152 [0xffffffffffffd088])) [3 serwerinfo.skarb.count_large_treasure_coin+0 S4 A64])
        (const_int 0 [0])) "function.c":354 86 {*movsi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":356 88 {*movqi_internal}
     (nil))
(call_insn 91 90 93 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pobierz_plansze") [flags 0x3]  <function_decl 0x7f7cd1169600 pobierz_plansze>) [0 pobierz_plansze S1 A8])
            (const_int 0 [0]))) "function.c":356 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 93 91 94 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "function.c":356 85 {*movdi_internal}
     (nil))
(insn 94 93 95 5 (parallel [
            (set (reg:DI 0 ax [239])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":358 222 {*adddi_1}
     (nil))
(insn 95 94 96 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [239])) "function.c":358 85 {*movdi_internal}
     (nil))
(call_insn 96 95 97 5 (call (mem:QI (symbol_ref:DI ("oboz_random") [flags 0x3]  <function_decl 0x7f7cd1178b00 oboz_random>) [0 oboz_random S1 A8])
        (const_int 0 [0])) "function.c":358 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 97 96 98 5 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":360 85 {*movdi_internal}
     (nil))
(insn 98 97 99 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "function.c":360 85 {*movdi_internal}
     (nil))
(call_insn 99 98 100 5 (call (mem:QI (symbol_ref:DI ("drukuj_plansze") [flags 0x3]  <function_decl 0x7f7cd1169700 drukuj_plansze>) [0 drukuj_plansze S1 A8])
        (const_int 0 [0])) "function.c":360 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f7cd0f0d1b0 *.LC34>)) "function.c":362 85 {*movdi_internal}
     (nil))
(call_insn 101 100 103 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("player_set") [flags 0x3]  <function_decl 0x7f7cd1169f00 player_set>) [0 player_set S1 A8])
            (const_int 0 [0]))) "function.c":362 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 103 101 104 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])
        (reg/f:DI 0 ax [orig:91 _5 ] [91])) "function.c":362 85 {*movdi_internal}
     (nil))
(insn 104 103 105 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":363 85 {*movdi_internal}
     (nil))
(call_insn 105 104 107 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("player_set") [flags 0x3]  <function_decl 0x7f7cd1169f00 player_set>) [0 player_set S1 A8])
            (const_int 0 [0]))) "function.c":363 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 107 105 108 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])
        (reg/f:DI 0 ax [orig:92 _6 ] [92])) "function.c":363 85 {*movdi_internal}
     (nil))
(insn 108 107 109 5 (set (reg/f:DI 3 bx [orig:93 _7 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":365 85 {*movdi_internal}
     (nil))
(call_insn 109 108 111 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":365 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 111 109 112 5 (set (mem:SI (plus:DI (reg/f:DI 3 bx [orig:93 _7 ] [93])
                (const_int 4 [0x4])) [3 _7->PID_serwer+0 S4 A32])
        (reg:SI 0 ax [orig:94 _8 ] [94])) "function.c":365 86 {*movsi_internal}
     (nil))
(insn 112 111 113 5 (set (reg/f:DI 3 bx [orig:95 _9 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":366 85 {*movdi_internal}
     (nil))
(call_insn 113 112 115 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":366 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 115 113 116 5 (set (mem:SI (plus:DI (reg/f:DI 3 bx [orig:95 _9 ] [95])
                (const_int 4 [0x4])) [3 _9->PID_serwer+0 S4 A32])
        (reg:SI 0 ax [orig:96 _10 ] [96])) "function.c":366 86 {*movsi_internal}
     (nil))
(insn 116 115 117 5 (parallel [
            (set (reg:DI 0 ax [240])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":368 222 {*adddi_1}
     (nil))
(insn 117 116 118 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [240])) "function.c":368 85 {*movdi_internal}
     (nil))
(call_insn 118 117 119 5 (call (mem:QI (symbol_ref:DI ("player_position_random") [flags 0x3]  <function_decl 0x7f7cd1178d00 player_position_random>) [0 player_position_random S1 A8])
        (const_int 0 [0])) "function.c":368 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 5 (parallel [
            (set (reg:DI 0 ax [241])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":373 222 {*adddi_1}
     (nil))
(insn 120 119 684 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36224 [0xffffffffffff7280])) [12 userinfo.serwer+0 S8 A64])
        (reg:DI 0 ax [241])) "function.c":373 85 {*movdi_internal}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              48 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 99 100 101
(code_label 684 120 121 6 70 (nil) [1 uses])
(note 121 684 122 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 6 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":377 85 {*movdi_internal}
     (nil))
(insn 123 122 124 6 (set (reg:SI 1 dx [orig:98 _12 ] [98])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36196 [0xffffffffffff729c])) [3 serwerinfo.runda+0 S4 A32])) "function.c":377 86 {*movsi_internal}
     (nil))
(insn 124 123 125 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (const_int 22552 [0x5818])) [3 _11->runda+0 S4 A64])
        (reg:SI 1 dx [orig:98 _12 ] [98])) "function.c":377 86 {*movsi_internal}
     (nil))
(insn 125 124 126 6 (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":378 85 {*movdi_internal}
     (nil))
(insn 126 125 127 6 (set (reg:SI 1 dx [orig:100 _14 ] [100])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36196 [0xffffffffffff729c])) [3 serwerinfo.runda+0 S4 A32])) "function.c":378 86 {*movsi_internal}
     (nil))
(insn 127 126 128 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (const_int 22552 [0x5818])) [3 _13->runda+0 S4 A64])
        (reg:SI 1 dx [orig:100 _14 ] [100])) "function.c":378 86 {*movsi_internal}
     (nil))
(insn 128 127 129 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36216 [0xffffffffffff7288])) [3 userinfo.user+0 S4 A64])
        (const_int 1 [0x1])) "function.c":387 86 {*movsi_internal}
     (nil))
(insn 129 128 130 6 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":389 85 {*movdi_internal}
     (nil))
(insn 130 129 131 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:101 _15 ] [101])) "function.c":389 85 {*movdi_internal}
     (nil))
(call_insn 131 130 132 6 (call (mem:QI (symbol_ref:DI ("drukuj_plansze") [flags 0x3]  <function_decl 0x7f7cd1169700 drukuj_plansze>) [0 drukuj_plansze S1 A8])
        (const_int 0 [0])) "function.c":389 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 132 131 698 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":393 86 {*movsi_internal}
     (nil))
(jump_insn 698 132 699 6 (set (pc)
        (label_ref 161)) "function.c":393 683 {jump}
     (nil)
 -> 161)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 699 698 164)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 242 243 244
(code_label 164 699 135 7 50 (nil) [1 uses])
(note 135 164 136 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 7 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":395 86 {*movsi_internal}
     (nil))
(insn 137 136 138 7 (set (reg:DI 0 ax [242])
        (sign_extend:DI (reg:SI 0 ax [243]))) "function.c":395 149 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 7 (parallel [
            (set (reg:DI 0 ax [244])
                (plus:DI (reg:DI 0 ax [242])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":395 222 {*adddi_1}
     (nil))
(insn 139 138 140 7 (set (reg:SI 0 ax [orig:102 _16 ] [102])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [244])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -36208 [0xffffffffffff7290])) [3 serwerinfo.skarb.value_all_dropped_coin S4 A32])) "function.c":395 86 {*movsi_internal}
     (nil))
(insn 140 139 141 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:102 _16 ] [102])
            (const_int -1 [0xffffffffffffffff]))) "function.c":395 11 {*cmpsi_1}
     (nil))
(jump_insn 141 140 142 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) "function.c":395 682 {*jcc}
     (nil)
 -> 158)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 104 105 245 246 247 248 249
(note 142 141 143 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 8 (set (reg:SI 0 ax [246])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":397 86 {*movsi_internal}
     (nil))
(insn 144 143 145 8 (set (reg:DI 0 ax [245])
        (sign_extend:DI (reg:SI 0 ax [246]))) "function.c":397 149 {*extendsidi2_rex64}
     (nil))
(insn 145 144 146 8 (set (reg:SI 1 dx [orig:103 _17 ] [103])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [245])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -12140 [0xffffffffffffd094])) [3 serwerinfo.skarb.dropped_coin S4 A32])) "function.c":397 86 {*movsi_internal}
     (nil))
(insn 146 145 147 8 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":397 86 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 0 ax [247])
        (sign_extend:DI (reg:SI 0 ax [248]))) "function.c":397 149 {*extendsidi2_rex64}
     (nil))
(insn 148 147 149 8 (parallel [
            (set (reg:DI 0 ax [249])
                (plus:DI (reg:DI 0 ax [247])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":397 222 {*adddi_1}
     (nil))
(insn 149 148 150 8 (set (reg:SI 2 cx [orig:104 _18 ] [104])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [249])
                        (const_int 8 [0x8]))
                    (reg/f:DI 6 bp))
                (const_int -36208 [0xffffffffffff7290])) [3 serwerinfo.skarb.dropped_coin S4 A64])) "function.c":397 86 {*movsi_internal}
     (nil))
(insn 150 149 152 8 (set (reg/f:DI 0 ax [orig:105 stdscr.48_19 ] [105])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":397 85 {*movdi_internal}
     (nil))
(insn 152 150 153 8 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:104 _18 ] [104])) "function.c":397 86 {*movsi_internal}
     (nil))
(insn 153 152 154 8 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:105 stdscr.48_19 ] [105])) "function.c":397 85 {*movdi_internal}
     (nil))
(call_insn 154 153 155 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":397 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 155 154 156 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f7cd0ef3120 *.LC24>)) "function.c":398 85 {*movdi_internal}
     (nil))
(insn 156 155 157 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":398 88 {*movqi_internal}
     (nil))
(call_insn 157 156 158 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":398 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 158 157 159 9 49 (nil) [1 uses])
(note 159 158 160 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":393 221 {*addsi_1}
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              6 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106
(code_label 161 160 162 10 48 (nil) [1 uses])
(note 162 161 163 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 165 10 (set (reg:SI 0 ax [orig:106 _20 ] [106])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12148 [0xffffffffffffd08c])) [3 serwerinfo.skarb.count_drop_coin+0 S4 A32])) "function.c":393 86 {*movsi_internal}
     (nil))
(insn 165 163 166 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:106 _20 ] [106]))) "function.c":393 11 {*cmpsi_1}
     (nil))
(jump_insn 166 165 167 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 164)
            (pc))) "function.c":393 682 {*jcc}
     (nil)
 -> 164)
;;  succ:       7
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 108 109 110 111 112 113 250 251 252
(note 167 166 168 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 11 (parallel [
            (set (reg:DI 0 ax [250])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":409 222 {*adddi_1}
     (nil))
(insn 169 168 170 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [250])) "function.c":409 85 {*movdi_internal}
     (nil))
(call_insn 170 169 171 11 (call (mem:QI (symbol_ref:DI ("skarbunio") [flags 0x3]  <function_decl 0x7f7cd0d1b000 skarbunio>) [0 skarbunio S1 A8])
        (const_int 0 [0])) "function.c":409 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 171 170 172 11 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":411 85 {*movdi_internal}
     (nil))
(insn 172 171 173 11 (set (reg:SI 1 dx [orig:108 _22 ] [108])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (const_int 12 [0xc])) [3 _21->x_current+0 S4 A32])) "function.c":411 86 {*movsi_internal}
     (nil))
(insn 173 172 174 11 (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":411 85 {*movdi_internal}
     (nil))
(insn 174 173 175 11 (set (reg:SI 2 cx [orig:110 _24 ] [110])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (const_int 16 [0x10])) [3 _23->y_current+0 S4 A64])) "function.c":411 86 {*movsi_internal}
     (nil))
(insn 175 174 177 11 (set (reg/f:DI 0 ax [orig:111 stdscr.49_25 ] [111])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":411 85 {*movdi_internal}
     (nil))
(insn 177 175 178 11 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:110 _24 ] [110])) "function.c":411 86 {*movsi_internal}
     (nil))
(insn 178 177 179 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:111 stdscr.49_25 ] [111])) "function.c":411 85 {*movdi_internal}
     (nil))
(call_insn 179 178 180 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":411 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 180 179 181 11 (set (reg/f:DI 0 ax [orig:112 stdscr.50_26 ] [112])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":413 85 {*movdi_internal}
     (nil))
(insn 181 180 182 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":413 85 {*movdi_internal}
     (nil))
(insn 182 181 183 11 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":413 86 {*movsi_internal}
     (nil))
(insn 183 182 184 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:112 stdscr.50_26 ] [112])) "function.c":413 85 {*movdi_internal}
     (nil))
(call_insn 184 183 185 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":413 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 185 184 186 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f7cd0f0d3f0 *.LC38>)) "function.c":414 85 {*movdi_internal}
     (nil))
(insn 186 185 187 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":414 88 {*movqi_internal}
     (nil))
(call_insn 187 186 188 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":414 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 188 187 189 11 (set (reg/f:DI 0 ax [orig:113 stdscr.51_27 ] [113])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":415 85 {*movdi_internal}
     (nil))
(insn 189 188 190 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":415 85 {*movdi_internal}
     (nil))
(insn 190 189 191 11 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":415 86 {*movsi_internal}
     (nil))
(insn 191 190 192 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:113 stdscr.51_27 ] [113])) "function.c":415 85 {*movdi_internal}
     (nil))
(call_insn 192 191 193 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":415 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 193 192 194 11 (parallel [
            (set (reg:DI 0 ax [251])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":417 222 {*adddi_1}
     (nil))
(insn 194 193 195 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [251])) "function.c":417 85 {*movdi_internal}
     (nil))
(call_insn 195 194 196 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":417 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 196 195 197 11 (parallel [
            (set (reg:DI 0 ax [252])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":418 222 {*adddi_1}
     (nil))
(insn 197 196 198 11 (set (reg:DI 5 di)
        (reg:DI 0 ax [252])) "function.c":418 85 {*movdi_internal}
     (nil))
(call_insn 198 197 199 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":418 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 199 198 200 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 b1+0 S4 A32])
            (const_int 0 [0]))) "function.c":419 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 200 199 201 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 321)
            (pc))) "function.c":419 682 {*jcc}
     (nil)
 -> 321)
;;  succ:       12 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 253 254
(note 201 200 202 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 12 (set (reg/f:DI 0 ax [orig:114 _28 ] [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":426 85 {*movdi_internal}
     (nil))
(insn 203 202 204 12 (set (reg:SI 0 ax [253])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:114 _28 ] [114])
                (const_int 12 [0xc])) [3 _28->x_current+0 S4 A32])) "function.c":426 86 {*movsi_internal}
     (nil))
(insn 204 203 205 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])
        (reg:SI 0 ax [253])) "function.c":426 86 {*movsi_internal}
     (nil))
(insn 205 204 206 12 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":427 85 {*movdi_internal}
     (nil))
(insn 206 205 207 12 (set (reg:SI 0 ax [254])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:115 _29 ] [115])
                (const_int 16 [0x10])) [3 _29->y_current+0 S4 A64])) "function.c":427 86 {*movsi_internal}
     (nil))
(insn 207 206 208 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])
        (reg:SI 0 ax [254])) "function.c":427 86 {*movsi_internal}
     (nil))
(insn 208 207 209 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 b1+0 S4 A32])
            (const_int 0 [0]))) "function.c":430 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 209 208 210 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 321)
            (pc))) "function.c":430 682 {*jcc}
     (nil)
 -> 321)
;;  succ:       13 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 116 117 118 119 120 121 122 123 124 255 256 257 258 259 260 261
(note 210 209 211 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 13 (parallel [
            (set (reg:DI 0 ax [255])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":432 222 {*adddi_1}
     (nil))
(insn 212 211 213 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [255])) "function.c":432 85 {*movdi_internal}
     (nil))
(call_insn 213 212 214 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step1_krzak") [flags 0x3]  <function_decl 0x7f7cd1178000 step1_krzak>) [0 step1_krzak S1 A8])
            (const_int 0 [0]))) "function.c":432 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 214 213 215 13 (parallel [
            (set (reg:DI 0 ax [256])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":433 222 {*adddi_1}
     (nil))
(insn 215 214 216 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [256])) "function.c":433 85 {*movdi_internal}
     (nil))
(call_insn 216 215 218 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step1") [flags 0x3]  <function_decl 0x7f7cd1178200 step1>) [0 step1 S1 A8])
            (const_int 0 [0]))) "function.c":433 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 218 216 219 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 b1+0 S4 A32])
        (reg:SI 0 ax [257])) "function.c":433 86 {*movsi_internal}
     (nil))
(insn 219 218 220 13 (set (reg/f:DI 0 ax [orig:116 stdscr.52_30 ] [116])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":434 85 {*movdi_internal}
     (nil))
(insn 220 219 221 13 (set (reg:SI 1 dx [258])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":434 86 {*movsi_internal}
     (nil))
(insn 221 220 223 13 (set (reg:SI 2 cx [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":434 86 {*movsi_internal}
     (nil))
(insn 223 221 224 13 (set (reg:SI 4 si)
        (reg:SI 2 cx [259])) "function.c":434 86 {*movsi_internal}
     (nil))
(insn 224 223 225 13 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:116 stdscr.52_30 ] [116])) "function.c":434 85 {*movdi_internal}
     (nil))
(call_insn 225 224 226 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":434 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 226 225 227 13 (set (reg/f:DI 0 ax [orig:117 _31 ] [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":435 85 {*movdi_internal}
     (nil))
(insn 227 226 228 13 (set (reg:SI 1 dx [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":435 86 {*movsi_internal}
     (nil))
(insn 228 227 229 13 (set (reg:DI 1 dx [orig:118 _32 ] [118])
        (sign_extend:DI (reg:SI 1 dx [260]))) "function.c":435 149 {*extendsidi2_rex64}
     (nil))
(insn 229 228 230 13 (parallel [
            (set (reg:DI 1 dx [orig:119 _33 ] [119])
                (ashift:DI (reg:DI 1 dx [orig:118 _32 ] [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":435 551 {*ashldi3_1}
     (nil))
(insn 230 229 231 13 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg/f:DI 0 ax [orig:117 _31 ] [117])
                    (reg:DI 1 dx [orig:119 _33 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":435 222 {*adddi_1}
     (nil))
(insn 231 230 232 13 (set (reg/f:DI 1 dx [orig:121 _35 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [10 *_34+0 S8 A64])) "function.c":435 85 {*movdi_internal}
     (nil))
(insn 232 231 233 13 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":435 86 {*movsi_internal}
     (nil))
(insn 233 232 234 13 (set (reg:DI 0 ax [orig:122 _36 ] [122])
        (sign_extend:DI (reg:SI 0 ax [261]))) "function.c":435 149 {*extendsidi2_rex64}
     (nil))
(insn 234 233 235 13 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _37 ] [123])
                (plus:DI (reg:DI 0 ax [orig:122 _36 ] [122])
                    (reg/f:DI 1 dx [orig:121 _35 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":435 222 {*adddi_1}
     (nil))
(insn 235 234 236 13 (set (reg:QI 0 ax [orig:124 _38 ] [124])
        (mem:QI (reg/f:DI 0 ax [orig:123 _37 ] [123]) [0 *_37+0 S1 A8])) "function.c":435 88 {*movqi_internal}
     (nil))
(insn 236 235 237 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:124 _38 ] [124])
            (const_int 77 [0x4d]))) "function.c":435 9 {*cmpqi_1}
     (nil))
(jump_insn 237 236 238 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "function.c":435 682 {*jcc}
     (nil)
 -> 244)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 238 237 239 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":437 85 {*movdi_internal}
     (nil))
(insn 240 239 241 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":437 88 {*movqi_internal}
     (nil))
(call_insn 241 240 700 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":437 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 700 241 701 14 (set (pc)
        (label_ref 291)) 683 {jump}
     (nil)
 -> 291)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 701 700 244)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125 126 127 128 129 130 131 132 262 263
(code_label 244 701 245 15 52 (nil) [1 uses])
(note 245 244 246 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 15 (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":439 85 {*movdi_internal}
     (nil))
(insn 247 246 248 15 (set (reg:SI 1 dx [262])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":439 86 {*movsi_internal}
     (nil))
(insn 248 247 249 15 (set (reg:DI 1 dx [orig:126 _40 ] [126])
        (sign_extend:DI (reg:SI 1 dx [262]))) "function.c":439 149 {*extendsidi2_rex64}
     (nil))
(insn 249 248 250 15 (parallel [
            (set (reg:DI 1 dx [orig:127 _41 ] [127])
                (ashift:DI (reg:DI 1 dx [orig:126 _40 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":439 551 {*ashldi3_1}
     (nil))
(insn 250 249 251 15 (parallel [
            (set (reg/f:DI 0 ax [orig:128 _42 ] [128])
                (plus:DI (reg/f:DI 0 ax [orig:125 _39 ] [125])
                    (reg:DI 1 dx [orig:127 _41 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":439 222 {*adddi_1}
     (nil))
(insn 251 250 252 15 (set (reg/f:DI 1 dx [orig:129 _43 ] [129])
        (mem/f:DI (reg/f:DI 0 ax [orig:128 _42 ] [128]) [10 *_42+0 S8 A64])) "function.c":439 85 {*movdi_internal}
     (nil))
(insn 252 251 253 15 (set (reg:SI 0 ax [263])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":439 86 {*movsi_internal}
     (nil))
(insn 253 252 254 15 (set (reg:DI 0 ax [orig:130 _44 ] [130])
        (sign_extend:DI (reg:SI 0 ax [263]))) "function.c":439 149 {*extendsidi2_rex64}
     (nil))
(insn 254 253 255 15 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 _44 ] [130])
                    (reg/f:DI 1 dx [orig:129 _43 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":439 222 {*adddi_1}
     (nil))
(insn 255 254 256 15 (set (reg:QI 0 ax [orig:132 _46 ] [132])
        (mem:QI (reg/f:DI 0 ax [orig:131 _45 ] [131]) [0 *_45+0 S1 A8])) "function.c":439 88 {*movqi_internal}
     (nil))
(insn 256 255 257 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:132 _46 ] [132])
            (const_int 65 [0x41]))) "function.c":439 9 {*cmpqi_1}
     (nil))
(jump_insn 257 256 258 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) "function.c":439 682 {*jcc}
     (nil)
 -> 274)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 133 134
(note 258 257 259 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 16 (set (reg/f:DI 0 ax [orig:133 stdscr.53_47 ] [133])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":441 85 {*movdi_internal}
     (nil))
(insn 260 259 261 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":441 85 {*movdi_internal}
     (nil))
(insn 261 260 262 16 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":441 86 {*movsi_internal}
     (nil))
(insn 262 261 263 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:133 stdscr.53_47 ] [133])) "function.c":441 85 {*movdi_internal}
     (nil))
(call_insn 263 262 264 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":441 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 264 263 265 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":442 85 {*movdi_internal}
     (nil))
(insn 265 264 266 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":442 88 {*movqi_internal}
     (nil))
(call_insn 266 265 267 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":442 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 267 266 268 16 (set (reg/f:DI 0 ax [orig:134 stdscr.54_48 ] [134])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":443 85 {*movdi_internal}
     (nil))
(insn 268 267 269 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":443 85 {*movdi_internal}
     (nil))
(insn 269 268 270 16 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":443 86 {*movsi_internal}
     (nil))
(insn 270 269 271 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:134 stdscr.54_48 ] [134])) "function.c":443 85 {*movdi_internal}
     (nil))
(call_insn 271 270 702 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":443 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 702 271 703 16 (set (pc)
        (label_ref 291)) 683 {jump}
     (nil)
 -> 291)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 703 702 274)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 135 136 137 138 139 140 141 142 143 264 265
(code_label 274 703 275 17 54 (nil) [1 uses])
(note 275 274 276 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 17 (set (reg/f:DI 0 ax [orig:135 _49 ] [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":447 85 {*movdi_internal}
     (nil))
(insn 277 276 278 17 (set (reg:SI 1 dx [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":447 86 {*movsi_internal}
     (nil))
(insn 278 277 279 17 (set (reg:DI 1 dx [orig:136 _50 ] [136])
        (sign_extend:DI (reg:SI 1 dx [264]))) "function.c":447 149 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 17 (parallel [
            (set (reg:DI 1 dx [orig:137 _51 ] [137])
                (ashift:DI (reg:DI 1 dx [orig:136 _50 ] [136])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":447 551 {*ashldi3_1}
     (nil))
(insn 280 279 281 17 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (plus:DI (reg/f:DI 0 ax [orig:135 _49 ] [135])
                    (reg:DI 1 dx [orig:137 _51 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":447 222 {*adddi_1}
     (nil))
(insn 281 280 282 17 (set (reg/f:DI 1 dx [orig:139 _53 ] [139])
        (mem/f:DI (reg/f:DI 0 ax [orig:138 _52 ] [138]) [10 *_52+0 S8 A64])) "function.c":447 85 {*movdi_internal}
     (nil))
(insn 282 281 283 17 (set (reg:SI 0 ax [265])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":447 86 {*movsi_internal}
     (nil))
(insn 283 282 284 17 (set (reg:DI 0 ax [orig:140 _54 ] [140])
        (sign_extend:DI (reg:SI 0 ax [265]))) "function.c":447 149 {*extendsidi2_rex64}
     (nil))
(insn 284 283 285 17 (parallel [
            (set (reg/f:DI 0 ax [orig:141 _55 ] [141])
                (plus:DI (reg:DI 0 ax [orig:140 _54 ] [140])
                    (reg/f:DI 1 dx [orig:139 _53 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":447 222 {*adddi_1}
     (nil))
(insn 285 284 286 17 (set (reg:QI 0 ax [orig:142 _56 ] [142])
        (mem:QI (reg/f:DI 0 ax [orig:141 _55 ] [141]) [0 *_55+0 S1 A8])) "function.c":447 88 {*movqi_internal}
     (nil))
(insn 286 285 287 17 (set (reg:SI 0 ax [orig:143 _57 ] [143])
        (sign_extend:SI (reg:QI 0 ax [orig:142 _56 ] [142]))) "function.c":447 155 {extendqisi2}
     (nil))
(insn 287 286 288 17 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:143 _57 ] [143])) "function.c":447 86 {*movsi_internal}
     (nil))
(insn 288 287 289 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":447 85 {*movdi_internal}
     (nil))
(insn 289 288 290 17 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":447 88 {*movqi_internal}
     (nil))
(call_insn 290 289 291 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":447 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;;              14 [always] 
;;              16 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144 145 146 147 148 149 150 266 267
(code_label 291 290 292 18 53 (nil) [2 uses])
(note 292 291 293 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 18 (set (reg/f:DI 0 ax [orig:144 _58 ] [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":450 85 {*movdi_internal}
     (nil))
(insn 294 293 295 18 (set (reg:SI 1 dx [orig:145 _59 ] [145])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:144 _58 ] [144])
                (const_int 12 [0xc])) [3 _58->x_current+0 S4 A32])) "function.c":450 86 {*movsi_internal}
     (nil))
(insn 295 294 296 18 (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":450 85 {*movdi_internal}
     (nil))
(insn 296 295 297 18 (set (reg:SI 2 cx [orig:147 _61 ] [147])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:146 _60 ] [146])
                (const_int 16 [0x10])) [3 _60->y_current+0 S4 A64])) "function.c":450 86 {*movsi_internal}
     (nil))
(insn 297 296 299 18 (set (reg/f:DI 0 ax [orig:148 stdscr.55_62 ] [148])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":450 85 {*movdi_internal}
     (nil))
(insn 299 297 300 18 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:147 _61 ] [147])) "function.c":450 86 {*movsi_internal}
     (nil))
(insn 300 299 301 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:148 stdscr.55_62 ] [148])) "function.c":450 85 {*movdi_internal}
     (nil))
(call_insn 301 300 302 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":450 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 302 301 303 18 (set (reg/f:DI 0 ax [orig:149 stdscr.56_63 ] [149])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":451 85 {*movdi_internal}
     (nil))
(insn 303 302 304 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":451 85 {*movdi_internal}
     (nil))
(insn 304 303 305 18 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":451 86 {*movsi_internal}
     (nil))
(insn 305 304 306 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:149 stdscr.56_63 ] [149])) "function.c":451 85 {*movdi_internal}
     (nil))
(call_insn 306 305 307 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":451 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 307 306 308 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f7cd0f0d3f0 *.LC38>)) "function.c":452 85 {*movdi_internal}
     (nil))
(insn 308 307 309 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":452 88 {*movqi_internal}
     (nil))
(call_insn 309 308 310 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":452 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 310 309 311 18 (set (reg/f:DI 0 ax [orig:150 stdscr.57_64 ] [150])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":453 85 {*movdi_internal}
     (nil))
(insn 311 310 312 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":453 85 {*movdi_internal}
     (nil))
(insn 312 311 313 18 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":453 86 {*movsi_internal}
     (nil))
(insn 313 312 314 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:150 stdscr.57_64 ] [150])) "function.c":453 85 {*movdi_internal}
     (nil))
(call_insn 314 313 315 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":453 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 315 314 316 18 (parallel [
            (set (reg:DI 0 ax [266])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":455 222 {*adddi_1}
     (nil))
(insn 316 315 317 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [266])) "function.c":455 85 {*movdi_internal}
     (nil))
(call_insn 317 316 318 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":455 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 318 317 319 18 (parallel [
            (set (reg:DI 0 ax [267])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":456 222 {*adddi_1}
     (nil))
(insn 319 318 320 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [267])) "function.c":456 85 {*movdi_internal}
     (nil))
(call_insn 320 319 321 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":456 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       11
;;              12
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 321 320 322 19 51 (nil) [2 uses])
(note 322 321 323 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 323 322 324 19 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 b1+0 S4 A32])
            (const_int 0 [0]))) "function.c":459 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 324 323 325 19 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 327)
            (pc))) "function.c":459 682 {*jcc}
     (nil)
 -> 327)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 325 324 326 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [3 b1+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [3 b1+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":461 221 {*addsi_1}
     (nil))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 151 152 153
(code_label 327 326 328 21 55 (nil) [1 uses])
(note 328 327 329 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 330 21 (set (reg/f:DI 0 ax [orig:151 _65 ] [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":464 85 {*movdi_internal}
     (nil))
(insn 330 329 331 21 (set (reg:SI 0 ax [orig:152 _66 ] [152])
        (mem:SI (reg/f:DI 0 ax [orig:151 _65 ] [151]) [3 _65->PID+0 S4 A64])) "function.c":464 86 {*movsi_internal}
     (nil))
(insn 331 330 332 21 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":464 86 {*movsi_internal}
     (nil))
(insn 332 331 333 21 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:152 _66 ] [152])) "function.c":464 86 {*movsi_internal}
     (nil))
(call_insn 333 332 335 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("kill") [flags 0x41]  <function_decl 0x7f7cd1125500 kill>) [0 kill S1 A8])
            (const_int 0 [0]))) "function.c":464 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 335 333 336 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:153 _67 ] [153])
            (const_int 0 [0]))) "function.c":464 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 336 335 337 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 360)
            (pc))) "function.c":464 682 {*jcc}
     (nil)
 -> 360)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 154 155 156 157 158 159 160
(note 337 336 338 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 338 337 339 22 (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":466 85 {*movdi_internal}
     (nil))
(insn 339 338 340 22 (set (reg:SI 1 dx [orig:155 _69 ] [155])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])) "function.c":466 86 {*movsi_internal}
     (nil))
(insn 340 339 341 22 (set (reg/f:DI 0 ax [orig:156 _70 ] [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":466 85 {*movdi_internal}
     (nil))
(insn 341 340 342 22 (set (reg:SI 2 cx [orig:157 _71 ] [157])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:156 _70 ] [156])
                (const_int 16 [0x10])) [3 _70->y_current+0 S4 A64])) "function.c":466 86 {*movsi_internal}
     (nil))
(insn 342 341 344 22 (set (reg/f:DI 0 ax [orig:158 stdscr.58_72 ] [158])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":466 85 {*movdi_internal}
     (nil))
(insn 344 342 345 22 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:157 _71 ] [157])) "function.c":466 86 {*movsi_internal}
     (nil))
(insn 345 344 346 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:158 stdscr.58_72 ] [158])) "function.c":466 85 {*movdi_internal}
     (nil))
(call_insn 346 345 347 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":466 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 347 346 348 22 (set (reg/f:DI 0 ax [orig:159 stdscr.59_73 ] [159])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":467 85 {*movdi_internal}
     (nil))
(insn 348 347 349 22 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":467 85 {*movdi_internal}
     (nil))
(insn 349 348 350 22 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":467 86 {*movsi_internal}
     (nil))
(insn 350 349 351 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:159 stdscr.59_73 ] [159])) "function.c":467 85 {*movdi_internal}
     (nil))
(call_insn 351 350 352 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":467 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 352 351 353 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f7cd0f0d480 *.LC39>)) "function.c":468 85 {*movdi_internal}
     (nil))
(insn 353 352 354 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":468 88 {*movqi_internal}
     (nil))
(call_insn 354 353 355 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":468 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 355 354 356 22 (set (reg/f:DI 0 ax [orig:160 stdscr.60_74 ] [160])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":469 85 {*movdi_internal}
     (nil))
(insn 356 355 357 22 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":469 85 {*movdi_internal}
     (nil))
(insn 357 356 358 22 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":469 86 {*movsi_internal}
     (nil))
(insn 358 357 359 22 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:160 stdscr.60_74 ] [160])) "function.c":469 85 {*movdi_internal}
     (nil))
(call_insn 359 358 360 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":469 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 161 162 163 164 165 268 269
(code_label 360 359 361 23 56 (nil) [1 uses])
(note 361 360 362 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 23 (set (reg/f:DI 0 ax [orig:161 _75 ] [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":472 85 {*movdi_internal}
     (nil))
(insn 363 362 364 23 (set (reg:SI 1 dx [orig:162 _76 ] [162])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:161 _75 ] [161])
                (const_int 12 [0xc])) [3 _75->x_current+0 S4 A32])) "function.c":472 86 {*movsi_internal}
     (nil))
(insn 364 363 365 23 (set (reg/f:DI 0 ax [orig:163 _77 ] [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":472 85 {*movdi_internal}
     (nil))
(insn 365 364 366 23 (set (reg:SI 2 cx [orig:164 _78 ] [164])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:163 _77 ] [163])
                (const_int 16 [0x10])) [3 _77->y_current+0 S4 A64])) "function.c":472 86 {*movsi_internal}
     (nil))
(insn 366 365 368 23 (set (reg/f:DI 0 ax [orig:165 stdscr.61_79 ] [165])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":472 85 {*movdi_internal}
     (nil))
(insn 368 366 369 23 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:164 _78 ] [164])) "function.c":472 86 {*movsi_internal}
     (nil))
(insn 369 368 370 23 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:165 stdscr.61_79 ] [165])) "function.c":472 85 {*movdi_internal}
     (nil))
(call_insn 370 369 371 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":472 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 371 370 372 23 (parallel [
            (set (reg:DI 0 ax [268])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":474 222 {*adddi_1}
     (nil))
(insn 372 371 373 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [268])) "function.c":474 85 {*movdi_internal}
     (nil))
(call_insn 373 372 374 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":474 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 374 373 375 23 (parallel [
            (set (reg:DI 0 ax [269])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":475 222 {*adddi_1}
     (nil))
(insn 375 374 376 23 (set (reg:DI 5 di)
        (reg:DI 0 ax [269])) "function.c":475 85 {*movdi_internal}
     (nil))
(call_insn 376 375 377 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":475 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 377 376 378 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [3 b2+0 S4 A32])
            (const_int 0 [0]))) "function.c":477 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 378 377 379 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "function.c":477 682 {*jcc}
     (nil)
 -> 510)
;;  succ:       24 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167
(note 379 378 380 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 381 24 (set (reg/f:DI 0 ax [orig:166 _80 ] [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":477 85 {*movdi_internal}
     (nil))
(insn 381 380 382 24 (set (reg:SI 0 ax [orig:167 _81 ] [167])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:166 _80 ] [166])
                (const_int 16 [0x10])) [3 _80->y_current+0 S4 A64])) "function.c":477 86 {*movsi_internal}
     (nil))
(insn 382 381 383 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:167 _81 ] [167])
            (const_int 0 [0]))) "function.c":477 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 383 382 384 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "function.c":477 682 {*jcc}
     (nil)
 -> 510)
;;  succ:       25 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 168 169 270 271 272 273
(note 384 383 385 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 385 384 386 25 (set (reg/f:DI 0 ax [orig:168 _82 ] [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":479 85 {*movdi_internal}
     (nil))
(insn 386 385 387 25 (set (reg:SI 0 ax [270])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:168 _82 ] [168])
                (const_int 12 [0xc])) [3 _82->x_current+0 S4 A32])) "function.c":479 86 {*movsi_internal}
     (nil))
(insn 387 386 388 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])
        (reg:SI 0 ax [270])) "function.c":479 86 {*movsi_internal}
     (nil))
(insn 388 387 389 25 (set (reg/f:DI 0 ax [orig:169 _83 ] [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":480 85 {*movdi_internal}
     (nil))
(insn 389 388 390 25 (set (reg:SI 0 ax [271])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:169 _83 ] [169])
                (const_int 16 [0x10])) [3 _83->y_current+0 S4 A64])) "function.c":480 86 {*movsi_internal}
     (nil))
(insn 390 389 391 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])
        (reg:SI 0 ax [271])) "function.c":480 86 {*movsi_internal}
     (nil))
(insn 391 390 392 25 (parallel [
            (set (reg:DI 0 ax [272])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":482 222 {*adddi_1}
     (nil))
(insn 392 391 393 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [272])) "function.c":482 85 {*movdi_internal}
     (nil))
(call_insn 393 392 394 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":482 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 394 393 395 25 (parallel [
            (set (reg:DI 0 ax [273])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":483 222 {*adddi_1}
     (nil))
(insn 395 394 396 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [273])) "function.c":483 85 {*movdi_internal}
     (nil))
(call_insn 396 395 397 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":483 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 397 396 398 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [3 b2+0 S4 A32])
            (const_int 0 [0]))) "function.c":485 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 398 397 399 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "function.c":485 682 {*jcc}
     (nil)
 -> 510)
;;  succ:       26 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 170 171 172 173 174 175 176 177 178 274 275 276 277 278 279 280
(note 399 398 400 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 401 26 (parallel [
            (set (reg:DI 0 ax [274])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":487 222 {*adddi_1}
     (nil))
(insn 401 400 402 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [274])) "function.c":487 85 {*movdi_internal}
     (nil))
(call_insn 402 401 403 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step2_krzak") [flags 0x3]  <function_decl 0x7f7cd1178100 step2_krzak>) [0 step2_krzak S1 A8])
            (const_int 0 [0]))) "function.c":487 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 403 402 404 26 (parallel [
            (set (reg:DI 0 ax [275])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":488 222 {*adddi_1}
     (nil))
(insn 404 403 405 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [275])) "function.c":488 85 {*movdi_internal}
     (nil))
(call_insn 405 404 407 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step2") [flags 0x3]  <function_decl 0x7f7cd1178300 step2>) [0 step2 S1 A8])
            (const_int 0 [0]))) "function.c":488 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 407 405 408 26 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 b2+0 S4 A32])
        (reg:SI 0 ax [276])) "function.c":488 86 {*movsi_internal}
     (nil))
(insn 408 407 409 26 (set (reg/f:DI 0 ax [orig:170 stdscr.62_84 ] [170])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":489 85 {*movdi_internal}
     (nil))
(insn 409 408 410 26 (set (reg:SI 1 dx [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":489 86 {*movsi_internal}
     (nil))
(insn 410 409 412 26 (set (reg:SI 2 cx [278])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":489 86 {*movsi_internal}
     (nil))
(insn 412 410 413 26 (set (reg:SI 4 si)
        (reg:SI 2 cx [278])) "function.c":489 86 {*movsi_internal}
     (nil))
(insn 413 412 414 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:170 stdscr.62_84 ] [170])) "function.c":489 85 {*movdi_internal}
     (nil))
(call_insn 414 413 415 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":489 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 415 414 416 26 (set (reg/f:DI 0 ax [orig:171 _85 ] [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":490 85 {*movdi_internal}
     (nil))
(insn 416 415 417 26 (set (reg:SI 1 dx [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":490 86 {*movsi_internal}
     (nil))
(insn 417 416 418 26 (set (reg:DI 1 dx [orig:172 _86 ] [172])
        (sign_extend:DI (reg:SI 1 dx [279]))) "function.c":490 149 {*extendsidi2_rex64}
     (nil))
(insn 418 417 419 26 (parallel [
            (set (reg:DI 1 dx [orig:173 _87 ] [173])
                (ashift:DI (reg:DI 1 dx [orig:172 _86 ] [172])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":490 551 {*ashldi3_1}
     (nil))
(insn 419 418 420 26 (parallel [
            (set (reg/f:DI 0 ax [orig:174 _88 ] [174])
                (plus:DI (reg/f:DI 0 ax [orig:171 _85 ] [171])
                    (reg:DI 1 dx [orig:173 _87 ] [173])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":490 222 {*adddi_1}
     (nil))
(insn 420 419 421 26 (set (reg/f:DI 1 dx [orig:175 _89 ] [175])
        (mem/f:DI (reg/f:DI 0 ax [orig:174 _88 ] [174]) [10 *_88+0 S8 A64])) "function.c":490 85 {*movdi_internal}
     (nil))
(insn 421 420 422 26 (set (reg:SI 0 ax [280])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":490 86 {*movsi_internal}
     (nil))
(insn 422 421 423 26 (set (reg:DI 0 ax [orig:176 _90 ] [176])
        (sign_extend:DI (reg:SI 0 ax [280]))) "function.c":490 149 {*extendsidi2_rex64}
     (nil))
(insn 423 422 424 26 (parallel [
            (set (reg/f:DI 0 ax [orig:177 _91 ] [177])
                (plus:DI (reg:DI 0 ax [orig:176 _90 ] [176])
                    (reg/f:DI 1 dx [orig:175 _89 ] [175])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":490 222 {*adddi_1}
     (nil))
(insn 424 423 425 26 (set (reg:QI 0 ax [orig:178 _92 ] [178])
        (mem:QI (reg/f:DI 0 ax [orig:177 _91 ] [177]) [0 *_91+0 S1 A8])) "function.c":490 88 {*movqi_internal}
     (nil))
(insn 425 424 426 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:178 _92 ] [178])
            (const_int 77 [0x4d]))) "function.c":490 9 {*cmpqi_1}
     (nil))
(jump_insn 426 425 427 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 433)
            (pc))) "function.c":490 682 {*jcc}
     (nil)
 -> 433)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 427 426 428 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 428 427 429 27 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":492 85 {*movdi_internal}
     (nil))
(insn 429 428 430 27 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":492 88 {*movqi_internal}
     (nil))
(call_insn 430 429 704 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":492 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 704 430 705 27 (set (pc)
        (label_ref 480)) 683 {jump}
     (nil)
 -> 480)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 705 704 433)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 179 180 181 182 183 184 185 186 281 282
(code_label 433 705 434 28 58 (nil) [1 uses])
(note 434 433 435 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 435 434 436 28 (set (reg/f:DI 0 ax [orig:179 _93 ] [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":494 85 {*movdi_internal}
     (nil))
(insn 436 435 437 28 (set (reg:SI 1 dx [281])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":494 86 {*movsi_internal}
     (nil))
(insn 437 436 438 28 (set (reg:DI 1 dx [orig:180 _94 ] [180])
        (sign_extend:DI (reg:SI 1 dx [281]))) "function.c":494 149 {*extendsidi2_rex64}
     (nil))
(insn 438 437 439 28 (parallel [
            (set (reg:DI 1 dx [orig:181 _95 ] [181])
                (ashift:DI (reg:DI 1 dx [orig:180 _94 ] [180])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":494 551 {*ashldi3_1}
     (nil))
(insn 439 438 440 28 (parallel [
            (set (reg/f:DI 0 ax [orig:182 _96 ] [182])
                (plus:DI (reg/f:DI 0 ax [orig:179 _93 ] [179])
                    (reg:DI 1 dx [orig:181 _95 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":494 222 {*adddi_1}
     (nil))
(insn 440 439 441 28 (set (reg/f:DI 1 dx [orig:183 _97 ] [183])
        (mem/f:DI (reg/f:DI 0 ax [orig:182 _96 ] [182]) [10 *_96+0 S8 A64])) "function.c":494 85 {*movdi_internal}
     (nil))
(insn 441 440 442 28 (set (reg:SI 0 ax [282])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":494 86 {*movsi_internal}
     (nil))
(insn 442 441 443 28 (set (reg:DI 0 ax [orig:184 _98 ] [184])
        (sign_extend:DI (reg:SI 0 ax [282]))) "function.c":494 149 {*extendsidi2_rex64}
     (nil))
(insn 443 442 444 28 (parallel [
            (set (reg/f:DI 0 ax [orig:185 _99 ] [185])
                (plus:DI (reg:DI 0 ax [orig:184 _98 ] [184])
                    (reg/f:DI 1 dx [orig:183 _97 ] [183])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":494 222 {*adddi_1}
     (nil))
(insn 444 443 445 28 (set (reg:QI 0 ax [orig:186 _100 ] [186])
        (mem:QI (reg/f:DI 0 ax [orig:185 _99 ] [185]) [0 *_99+0 S1 A8])) "function.c":494 88 {*movqi_internal}
     (nil))
(insn 445 444 446 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:186 _100 ] [186])
            (const_int 65 [0x41]))) "function.c":494 9 {*cmpqi_1}
     (nil))
(jump_insn 446 445 447 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 463)
            (pc))) "function.c":494 682 {*jcc}
     (nil)
 -> 463)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 187 188
(note 447 446 448 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 448 447 449 29 (set (reg/f:DI 0 ax [orig:187 stdscr.63_101 ] [187])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":496 85 {*movdi_internal}
     (nil))
(insn 449 448 450 29 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":496 85 {*movdi_internal}
     (nil))
(insn 450 449 451 29 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":496 86 {*movsi_internal}
     (nil))
(insn 451 450 452 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:187 stdscr.63_101 ] [187])) "function.c":496 85 {*movdi_internal}
     (nil))
(call_insn 452 451 453 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":496 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 453 452 454 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":497 85 {*movdi_internal}
     (nil))
(insn 454 453 455 29 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":497 88 {*movqi_internal}
     (nil))
(call_insn 455 454 456 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":497 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 456 455 457 29 (set (reg/f:DI 0 ax [orig:188 stdscr.64_102 ] [188])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":498 85 {*movdi_internal}
     (nil))
(insn 457 456 458 29 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":498 85 {*movdi_internal}
     (nil))
(insn 458 457 459 29 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":498 86 {*movsi_internal}
     (nil))
(insn 459 458 460 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:188 stdscr.64_102 ] [188])) "function.c":498 85 {*movdi_internal}
     (nil))
(call_insn 460 459 706 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":498 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 706 460 707 29 (set (pc)
        (label_ref 480)) 683 {jump}
     (nil)
 -> 480)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 707 706 463)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 189 190 191 192 193 194 195 196 197 283 284
(code_label 463 707 464 30 60 (nil) [1 uses])
(note 464 463 465 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 465 464 466 30 (set (reg/f:DI 0 ax [orig:189 _103 ] [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36192 [0xffffffffffff72a0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":502 85 {*movdi_internal}
     (nil))
(insn 466 465 467 30 (set (reg:SI 1 dx [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 y_pom+0 S4 A32])) "function.c":502 86 {*movsi_internal}
     (nil))
(insn 467 466 468 30 (set (reg:DI 1 dx [orig:190 _104 ] [190])
        (sign_extend:DI (reg:SI 1 dx [283]))) "function.c":502 149 {*extendsidi2_rex64}
     (nil))
(insn 468 467 469 30 (parallel [
            (set (reg:DI 1 dx [orig:191 _105 ] [191])
                (ashift:DI (reg:DI 1 dx [orig:190 _104 ] [190])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":502 551 {*ashldi3_1}
     (nil))
(insn 469 468 470 30 (parallel [
            (set (reg/f:DI 0 ax [orig:192 _106 ] [192])
                (plus:DI (reg/f:DI 0 ax [orig:189 _103 ] [189])
                    (reg:DI 1 dx [orig:191 _105 ] [191])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":502 222 {*adddi_1}
     (nil))
(insn 470 469 471 30 (set (reg/f:DI 1 dx [orig:193 _107 ] [193])
        (mem/f:DI (reg/f:DI 0 ax [orig:192 _106 ] [192]) [10 *_106+0 S8 A64])) "function.c":502 85 {*movdi_internal}
     (nil))
(insn 471 470 472 30 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 x_pom+0 S4 A32])) "function.c":502 86 {*movsi_internal}
     (nil))
(insn 472 471 473 30 (set (reg:DI 0 ax [orig:194 _108 ] [194])
        (sign_extend:DI (reg:SI 0 ax [284]))) "function.c":502 149 {*extendsidi2_rex64}
     (nil))
(insn 473 472 474 30 (parallel [
            (set (reg/f:DI 0 ax [orig:195 _109 ] [195])
                (plus:DI (reg:DI 0 ax [orig:194 _108 ] [194])
                    (reg/f:DI 1 dx [orig:193 _107 ] [193])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":502 222 {*adddi_1}
     (nil))
(insn 474 473 475 30 (set (reg:QI 0 ax [orig:196 _110 ] [196])
        (mem:QI (reg/f:DI 0 ax [orig:195 _109 ] [195]) [0 *_109+0 S1 A8])) "function.c":502 88 {*movqi_internal}
     (nil))
(insn 475 474 476 30 (set (reg:SI 0 ax [orig:197 _111 ] [197])
        (sign_extend:SI (reg:QI 0 ax [orig:196 _110 ] [196]))) "function.c":502 155 {extendqisi2}
     (nil))
(insn 476 475 477 30 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:197 _111 ] [197])) "function.c":502 86 {*movsi_internal}
     (nil))
(insn 477 476 478 30 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":502 85 {*movdi_internal}
     (nil))
(insn 478 477 479 30 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":502 88 {*movqi_internal}
     (nil))
(call_insn 479 478 480 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":502 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;;              27 [always] 
;;              29 [always] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 198 199 200 201 202 203 204 285 286
(code_label 480 479 481 31 59 (nil) [2 uses])
(note 481 480 482 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 482 481 483 31 (set (reg/f:DI 0 ax [orig:198 _112 ] [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":505 85 {*movdi_internal}
     (nil))
(insn 483 482 484 31 (set (reg:SI 1 dx [orig:199 _113 ] [199])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:198 _112 ] [198])
                (const_int 12 [0xc])) [3 _112->x_current+0 S4 A32])) "function.c":505 86 {*movsi_internal}
     (nil))
(insn 484 483 485 31 (set (reg/f:DI 0 ax [orig:200 _114 ] [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":505 85 {*movdi_internal}
     (nil))
(insn 485 484 486 31 (set (reg:SI 2 cx [orig:201 _115 ] [201])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:200 _114 ] [200])
                (const_int 16 [0x10])) [3 _114->y_current+0 S4 A64])) "function.c":505 86 {*movsi_internal}
     (nil))
(insn 486 485 488 31 (set (reg/f:DI 0 ax [orig:202 stdscr.65_116 ] [202])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":505 85 {*movdi_internal}
     (nil))
(insn 488 486 489 31 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:201 _115 ] [201])) "function.c":505 86 {*movsi_internal}
     (nil))
(insn 489 488 490 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:202 stdscr.65_116 ] [202])) "function.c":505 85 {*movdi_internal}
     (nil))
(call_insn 490 489 491 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":505 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 491 490 492 31 (set (reg/f:DI 0 ax [orig:203 stdscr.66_117 ] [203])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":506 85 {*movdi_internal}
     (nil))
(insn 492 491 493 31 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":506 85 {*movdi_internal}
     (nil))
(insn 493 492 494 31 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":506 86 {*movsi_internal}
     (nil))
(insn 494 493 495 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:203 stdscr.66_117 ] [203])) "function.c":506 85 {*movdi_internal}
     (nil))
(call_insn 495 494 496 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":506 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 496 495 497 31 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f7cd0f0d480 *.LC39>)) "function.c":507 85 {*movdi_internal}
     (nil))
(insn 497 496 498 31 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":507 88 {*movqi_internal}
     (nil))
(call_insn 498 497 499 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":507 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 499 498 500 31 (set (reg/f:DI 0 ax [orig:204 stdscr.67_118 ] [204])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":508 85 {*movdi_internal}
     (nil))
(insn 500 499 501 31 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":508 85 {*movdi_internal}
     (nil))
(insn 501 500 502 31 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":508 86 {*movsi_internal}
     (nil))
(insn 502 501 503 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:204 stdscr.67_118 ] [204])) "function.c":508 85 {*movdi_internal}
     (nil))
(call_insn 503 502 504 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":508 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 504 503 505 31 (parallel [
            (set (reg:DI 0 ax [285])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":510 222 {*adddi_1}
     (nil))
(insn 505 504 506 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [285])) "function.c":510 85 {*movdi_internal}
     (nil))
(call_insn 506 505 507 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":510 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 507 506 508 31 (parallel [
            (set (reg:DI 0 ax [286])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":511 222 {*adddi_1}
     (nil))
(insn 508 507 509 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [286])) "function.c":511 85 {*movdi_internal}
     (nil))
(call_insn 509 508 510 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":511 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       23
;;              24
;;              25
;;              31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 510 509 511 32 57 (nil) [3 uses])
(note 511 510 512 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 512 511 513 32 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [3 b2+0 S4 A32])
            (const_int 0 [0]))) "function.c":514 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 513 512 514 32 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 516)
            (pc))) "function.c":514 682 {*jcc}
     (nil)
 -> 516)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 514 513 515 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 515 514 516 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [3 b2+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [3 b2+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":516 221 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       32
;;              33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 516 515 517 34 61 (nil) [1 uses])
(note 517 516 518 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 518 517 519 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [3 bestia_licznik+0 S4 A32])
            (const_int 0 [0]))) "function.c":519 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 519 518 520 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) "function.c":519 682 {*jcc}
     (nil)
 -> 534)
;;  succ:       35 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 205
(note 520 519 521 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 521 520 522 35 (set (reg:QI 0 ax [orig:205 BESTIA_ON.68_119 ] [205])
        (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])) "function.c":519 88 {*movqi_internal}
     (nil))
(insn 522 521 523 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:205 BESTIA_ON.68_119 ] [205])
            (const_int 0 [0]))) "function.c":519 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 523 522 524 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) "function.c":519 682 {*jcc}
     (nil)
 -> 534)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 287 288
(note 524 523 525 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 525 524 526 36 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -116 [0xffffffffffffff8c])) [3 serwerinfo.bestia.alive+0 S4 A32])
        (const_int 1 [0x1])) "function.c":521 86 {*movsi_internal}
     (nil))
(insn 526 525 527 36 (parallel [
            (set (reg:DI 1 dx [287])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":522 222 {*adddi_1}
     (nil))
(insn 527 526 528 36 (parallel [
            (set (reg:DI 0 ax [288])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":522 222 {*adddi_1}
     (nil))
(insn 528 527 529 36 (set (reg:DI 2 cx)
        (reg:DI 1 dx [287])) "function.c":522 85 {*movdi_internal}
     (nil))
(insn 529 528 530 36 (set (reg:DI 1 dx)
        (symbol_ref:DI ("bestia") [flags 0x3]  <function_decl 0x7f7cd1169a00 bestia>)) "function.c":522 85 {*movdi_internal}
     (nil))
(insn 530 529 531 36 (set (reg:DI 4 si)
        (const_int 0 [0])) "function.c":522 85 {*movdi_internal}
     (nil))
(insn 531 530 532 36 (set (reg:DI 5 di)
        (reg:DI 0 ax [288])) "function.c":522 85 {*movdi_internal}
     (nil))
(call_insn 532 531 533 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pthread_create") [flags 0x41]  <function_decl 0x7f7cd1033700 pthread_create>) [0 pthread_create S1 A8])
            (const_int 0 [0]))) "function.c":522 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 533 532 534 36 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 bestia_licznik+0 S4 A32])
        (const_int 1 [0x1])) "function.c":523 86 {*movsi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       34
;;              35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 206
(code_label 534 533 535 37 62 (nil) [2 uses])
(note 535 534 536 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 536 535 537 37 (set (reg:QI 0 ax [orig:206 BESTIA_ON.69_120 ] [206])
        (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])) "function.c":526 88 {*movqi_internal}
     (nil))
(insn 537 536 538 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:206 BESTIA_ON.69_120 ] [206])
            (const_int 0 [0]))) "function.c":526 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 538 537 539 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 569)
            (pc))) "function.c":526 682 {*jcc}
     (nil)
 -> 569)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 207 208 209 210 211 289 290 291
(note 539 538 540 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 38 (set (reg:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [18 sem_bestia1+0 S8 A64])) "function.c":528 85 {*movdi_internal}
     (nil))
(insn 541 540 542 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [289])) "function.c":528 85 {*movdi_internal}
     (nil))
(call_insn 542 541 543 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":528 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 543 542 544 38 (set (reg:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [18 sem_bestia2+0 S8 A64])) "function.c":529 85 {*movdi_internal}
     (nil))
(insn 544 543 545 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [290])) "function.c":529 85 {*movdi_internal}
     (nil))
(call_insn 545 544 546 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":529 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 546 545 547 38 (set (reg:SI 1 dx [orig:207 _121 ] [207])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [3 serwerinfo.bestia.x+0 S4 A64])) "function.c":530 86 {*movsi_internal}
     (nil))
(insn 547 546 548 38 (set (reg:SI 2 cx [orig:208 _122 ] [208])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -140 [0xffffffffffffff74])) [3 serwerinfo.bestia.y+0 S4 A32])) "function.c":530 86 {*movsi_internal}
     (nil))
(insn 548 547 550 38 (set (reg/f:DI 0 ax [orig:209 stdscr.70_123 ] [209])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":530 85 {*movdi_internal}
     (nil))
(insn 550 548 551 38 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:208 _122 ] [208])) "function.c":530 86 {*movsi_internal}
     (nil))
(insn 551 550 552 38 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:209 stdscr.70_123 ] [209])) "function.c":530 85 {*movdi_internal}
     (nil))
(call_insn 552 551 553 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":530 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 553 552 554 38 (set (reg/f:DI 0 ax [orig:210 stdscr.71_124 ] [210])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":531 85 {*movdi_internal}
     (nil))
(insn 554 553 555 38 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":531 85 {*movdi_internal}
     (nil))
(insn 555 554 556 38 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":531 86 {*movsi_internal}
     (nil))
(insn 556 555 557 38 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:210 stdscr.71_124 ] [210])) "function.c":531 85 {*movdi_internal}
     (nil))
(call_insn 557 556 558 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":531 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 558 557 559 38 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7f7cd0f0d510 *.LC40>)) "function.c":532 85 {*movdi_internal}
     (nil))
(insn 559 558 560 38 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":532 88 {*movqi_internal}
     (nil))
(call_insn 560 559 561 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":532 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 561 560 562 38 (set (reg/f:DI 0 ax [orig:211 stdscr.72_125 ] [211])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":533 85 {*movdi_internal}
     (nil))
(insn 562 561 563 38 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":533 85 {*movdi_internal}
     (nil))
(insn 563 562 564 38 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":533 86 {*movsi_internal}
     (nil))
(insn 564 563 565 38 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:211 stdscr.72_125 ] [211])) "function.c":533 85 {*movdi_internal}
     (nil))
(call_insn 565 564 566 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":533 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 566 565 567 38 (parallel [
            (set (reg:DI 0 ax [291])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":534 222 {*adddi_1}
     (nil))
(insn 567 566 568 38 (set (reg:DI 5 di)
        (reg:DI 0 ax [291])) "function.c":534 85 {*movdi_internal}
     (nil))
(call_insn 568 567 569 38 (call (mem:QI (symbol_ref:DI ("bestia_kolizja") [flags 0x3]  <function_decl 0x7f7cd1178e00 bestia_kolizja>) [0 bestia_kolizja S1 A8])
        (const_int 0 [0])) "function.c":534 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       37
;;              38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 212 213 214 292 293 294 295
(code_label 569 568 570 39 63 (nil) [1 uses])
(note 570 569 571 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 571 570 572 39 (parallel [
            (set (reg:DI 0 ax [292])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":537 222 {*adddi_1}
     (nil))
(insn 572 571 573 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [292])) "function.c":537 85 {*movdi_internal}
     (nil))
(call_insn 573 572 574 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":537 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 574 573 575 39 (parallel [
            (set (reg:DI 0 ax [293])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36224 [0xffffffffffff7280])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":538 222 {*adddi_1}
     (nil))
(insn 575 574 576 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [293])) "function.c":538 85 {*movdi_internal}
     (nil))
(call_insn 576 575 577 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":538 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 577 576 578 39 (parallel [
            (set (reg:DI 0 ax [294])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":540 222 {*adddi_1}
     (nil))
(insn 578 577 579 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [294])) "function.c":540 85 {*movdi_internal}
     (nil))
(call_insn 579 578 580 39 (call (mem:QI (symbol_ref:DI ("player_kolizja") [flags 0x3]  <function_decl 0x7f7cd1178f00 player_kolizja>) [0 player_kolizja S1 A8])
        (const_int 0 [0])) "function.c":540 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 580 579 581 39 (parallel [
            (set (reg:DI 0 ax [295])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":542 222 {*adddi_1}
     (nil))
(insn 581 580 582 39 (set (reg:DI 5 di)
        (reg:DI 0 ax [295])) "function.c":542 85 {*movdi_internal}
     (nil))
(call_insn 582 581 583 39 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("collect_skarb") [flags 0x3]  <function_decl 0x7f7cd1178a00 collect_skarb>) [0 collect_skarb S1 A8])
            (const_int 0 [0]))) "function.c":542 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 583 582 584 39 (set (reg/f:DI 0 ax [orig:212 _126 ] [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":544 85 {*movdi_internal}
     (nil))
(insn 584 583 585 39 (set (reg:SI 0 ax [orig:213 _127 ] [213])
        (mem:SI (reg/f:DI 0 ax [orig:212 _126 ] [212]) [3 _126->PID+0 S4 A64])) "function.c":544 86 {*movsi_internal}
     (nil))
(insn 585 584 586 39 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":544 86 {*movsi_internal}
     (nil))
(insn 586 585 587 39 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:213 _127 ] [213])) "function.c":544 86 {*movsi_internal}
     (nil))
(call_insn 587 586 589 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("kill") [flags 0x41]  <function_decl 0x7f7cd1125500 kill>) [0 kill S1 A8])
            (const_int 0 [0]))) "function.c":544 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 589 587 590 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:214 _128 ] [214])
            (const_int 0 [0]))) "function.c":544 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 590 589 591 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 598)
            (pc))) "function.c":544 682 {*jcc}
     (nil)
 -> 598)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 296 297
(note 591 590 592 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 592 591 593 40 (set (reg:DI 0 ax [296])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [18 sem_p1+0 S8 A64])) "function.c":546 85 {*movdi_internal}
     (nil))
(insn 593 592 594 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [296])) "function.c":546 85 {*movdi_internal}
     (nil))
(call_insn 594 593 595 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":546 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 595 594 596 40 (set (reg:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [18 sem_p1_pom+0 S8 A64])) "function.c":547 85 {*movdi_internal}
     (nil))
(insn 596 595 597 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [297])) "function.c":547 85 {*movdi_internal}
     (nil))
(call_insn 597 596 598 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":547 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL, MODIFIED)
;;  pred:       39
;;              40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 215 216 217
(code_label 598 597 599 41 64 (nil) [1 uses])
(note 599 598 600 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 600 599 601 41 (set (reg/f:DI 0 ax [orig:215 _129 ] [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":550 85 {*movdi_internal}
     (nil))
(insn 601 600 602 41 (set (reg:SI 0 ax [orig:216 _130 ] [216])
        (mem:SI (reg/f:DI 0 ax [orig:215 _129 ] [215]) [3 _129->PID+0 S4 A64])) "function.c":550 86 {*movsi_internal}
     (nil))
(insn 602 601 603 41 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":550 86 {*movsi_internal}
     (nil))
(insn 603 602 604 41 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:216 _130 ] [216])) "function.c":550 86 {*movsi_internal}
     (nil))
(call_insn 604 603 606 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("kill") [flags 0x41]  <function_decl 0x7f7cd1125500 kill>) [0 kill S1 A8])
            (const_int 0 [0]))) "function.c":550 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 606 604 607 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:217 _131 ] [217])
            (const_int 0 [0]))) "function.c":550 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 607 606 608 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 617)
            (pc))) "function.c":550 682 {*jcc}
     (nil)
 -> 617)
;;  succ:       42 (FALLTHRU)
;;              43
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 298 299
(note 608 607 609 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 609 608 610 42 (set (reg:DI 0 ax [298])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [18 sem_p2+0 S8 A64])) "function.c":552 85 {*movdi_internal}
     (nil))
(insn 610 609 611 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [298])) "function.c":552 85 {*movdi_internal}
     (nil))
(call_insn 611 610 612 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":552 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 612 611 613 42 (set (reg:DI 0 ax [299])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [18 sem_p2_pom+0 S8 A64])) "function.c":553 85 {*movdi_internal}
     (nil))
(insn 613 612 614 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [299])) "function.c":553 85 {*movdi_internal}
     (nil))
(call_insn 614 613 708 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":553 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 708 614 709 42 (set (pc)
        (label_ref 623)) 683 {jump}
     (nil)
 -> 623)
;;  succ:       44 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 709 708 617)
;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       41
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 218 219
(code_label 617 709 618 43 65 (nil) [1 uses])
(note 618 617 619 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 43 (set (reg/f:DI 0 ax [orig:218 _132 ] [218])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":557 85 {*movdi_internal}
     (nil))
(insn 620 619 621 43 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:218 _132 ] [218])
                (const_int 16 [0x10])) [3 _132->y_current+0 S4 A64])
        (const_int 0 [0])) "function.c":557 86 {*movsi_internal}
     (nil))
(insn 621 620 622 43 (set (reg/f:DI 0 ax [orig:219 _133 ] [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":558 85 {*movdi_internal}
     (nil))
(insn 622 621 623 43 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:219 _133 ] [219])
                (const_int 12 [0xc])) [3 _133->x_current+0 S4 A32])
        (const_int 0 [0])) "function.c":558 86 {*movsi_internal}
     (nil))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;;              42 [always] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 220 221 300 301
(code_label 623 622 624 44 66 (nil) [1 uses])
(note 624 623 625 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 625 624 626 44 (parallel [
            (set (reg:DI 0 ax [300])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":561 222 {*adddi_1}
     (nil))
(insn 626 625 627 44 (set (reg:DI 5 di)
        (reg:DI 0 ax [300])) "function.c":561 85 {*movdi_internal}
     (nil))
(call_insn 627 626 628 44 (call (mem:QI (symbol_ref:DI ("oboz_coins") [flags 0x3]  <function_decl 0x7f7cd1178c00 oboz_coins>) [0 oboz_coins S1 A8])
        (const_int 0 [0])) "function.c":561 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 628 627 629 44 (parallel [
            (set (reg:DI 0 ax [301])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":563 222 {*adddi_1}
     (nil))
(insn 629 628 630 44 (set (reg:DI 5 di)
        (reg:DI 0 ax [301])) "function.c":563 85 {*movdi_internal}
     (nil))
(call_insn 630 629 631 44 (call (mem:QI (symbol_ref:DI ("druk_info_plansza_s") [flags 0x3]  <function_decl 0x7f7cd1169800 druk_info_plansza_s>) [0 druk_info_plansza_s S1 A8])
        (const_int 0 [0])) "function.c":563 689 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 631 630 632 44 (set (reg/f:DI 0 ax [orig:220 stdscr.73_134 ] [220])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":565 85 {*movdi_internal}
     (nil))
(insn 632 631 633 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:220 stdscr.73_134 ] [220])) "function.c":565 85 {*movdi_internal}
     (nil))
(call_insn 633 632 634 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wrefresh") [flags 0x41]  <function_decl 0x7f7cd10cd300 wrefresh>) [0 wrefresh S1 A8])
            (const_int 0 [0]))) "function.c":565 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 634 633 635 44 (set (reg:QI 0 ax [orig:221 END.74_135 ] [221])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":567 88 {*movqi_internal}
     (nil))
(insn 635 634 636 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:221 END.74_135 ] [221])
            (const_int 113 [0x71]))) "function.c":567 9 {*cmpqi_1}
     (nil))
(jump_insn 636 635 637 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 674)
            (pc))) "function.c":567 682 {*jcc}
     (nil)
 -> 674)
;;  succ:       45 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 222 302
(note 637 636 638 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 638 637 639 45 (set (reg:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [18 sem_bestia1+0 S8 A64])) "function.c":569 85 {*movdi_internal}
     (nil))
(insn 639 638 640 45 (set (reg:DI 5 di)
        (reg:DI 0 ax [302])) "function.c":569 85 {*movdi_internal}
     (nil))
(call_insn 640 639 641 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":569 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 641 640 642 45 (set (reg:QI 0 ax [orig:222 BESTIA_ON.75_136 ] [222])
        (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])) "function.c":571 88 {*movqi_internal}
     (nil))
(insn 642 641 643 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:222 BESTIA_ON.75_136 ] [222])
            (const_int 0 [0]))) "function.c":571 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 643 642 644 45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 649)
            (pc))) "function.c":571 682 {*jcc}
     (nil)
 -> 649)
;;  succ:       46 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 223
(note 644 643 645 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 645 644 646 46 (set (reg:DI 0 ax [orig:223 bestia1.76_137 ] [223])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [7 bestia1+0 S8 A64])) "function.c":573 85 {*movdi_internal}
     (nil))
(insn 646 645 647 46 (set (reg:DI 4 si)
        (const_int 0 [0])) "function.c":573 85 {*movdi_internal}
     (nil))
(insn 647 646 648 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:223 bestia1.76_137 ] [223])) "function.c":573 85 {*movdi_internal}
     (nil))
(call_insn 648 647 649 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pthread_join") [flags 0x41]  <function_decl 0x7f7cd1033900 pthread_join>) [0 pthread_join S1 A8])
            (const_int 0 [0]))) "function.c":573 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       45
;;              46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 224 225 229
(code_label 649 648 650 47 68 (nil) [1 uses])
(note 650 649 651 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 651 650 652 47 (set (reg/f:DI 0 ax [orig:224 _138 ] [224])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36176 [0xffffffffffff72b0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":576 85 {*movdi_internal}
     (nil))
(insn 652 651 653 47 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":576 85 {*movdi_internal}
     (nil))
(insn 653 652 654 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:224 _138 ] [224])) "function.c":576 85 {*movdi_internal}
     (nil))
(call_insn 654 653 655 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("munmap") [flags 0x41]  <function_decl 0x7f7cd133c100 munmap>) [0 munmap S1 A8])
            (const_int 0 [0]))) "function.c":576 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 655 654 656 47 (set (reg/f:DI 0 ax [orig:225 _139 ] [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -36168 [0xffffffffffff72b8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":577 85 {*movdi_internal}
     (nil))
(insn 656 655 657 47 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":577 85 {*movdi_internal}
     (nil))
(insn 657 656 658 47 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:225 _139 ] [225])) "function.c":577 85 {*movdi_internal}
     (nil))
(call_insn 658 657 659 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("munmap") [flags 0x41]  <function_decl 0x7f7cd133c100 munmap>) [0 munmap S1 A8])
            (const_int 0 [0]))) "function.c":577 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 659 658 660 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f7cd0f0d1b0 *.LC34>)) "function.c":578 85 {*movdi_internal}
     (nil))
(call_insn 660 659 661 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":578 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 661 660 662 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f7cd0f0d240 *.LC35>)) "function.c":579 85 {*movdi_internal}
     (nil))
(call_insn 662 661 663 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":579 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 663 662 664 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":580 85 {*movdi_internal}
     (nil))
(call_insn 664 663 665 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":580 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 665 664 666 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f7cd0f0d360 *.LC37>)) "function.c":581 85 {*movdi_internal}
     (nil))
(call_insn 666 665 667 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":581 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 667 666 668 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f7cd0ef3870 *.LC32>)) "function.c":582 85 {*movdi_internal}
     (nil))
(call_insn 668 667 669 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":582 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 669 668 670 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f7cd0ef3900 *.LC33>)) "function.c":583 85 {*movdi_internal}
     (nil))
(call_insn 670 669 671 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":583 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 671 670 711 47 (set (reg/f:DI 0 ax [orig:229 _306 ] [229])
        (const_int 0 [0])) "function.c":585 85 {*movdi_internal}
     (nil))
(jump_insn 711 671 712 47 (set (pc)
        (label_ref 710)) 683 {jump}
     (nil)
 -> 710)
;;  succ:       49 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229

(barrier 712 711 674)
;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       44
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 226 227 228
(code_label 674 712 675 48 67 (nil) [1 uses])
(note 675 674 676 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 676 675 677 48 (set (reg/f:DI 0 ax [orig:226 stdscr.77_140 ] [226])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":589 85 {*movdi_internal}
     (nil))
(insn 677 676 678 48 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:226 stdscr.77_140 ] [226])) "function.c":589 85 {*movdi_internal}
     (nil))
(call_insn 678 677 679 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wclear") [flags 0x41]  <function_decl 0x7f7cd10c4800 wclear>) [0 wclear S1 A8])
            (const_int 0 [0]))) "function.c":589 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 679 678 680 48 (set (reg:SI 5 di)
        (const_int 1000000 [0xf4240])) "function.c":590 86 {*movsi_internal}
     (nil))
(call_insn 680 679 681 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("usleep") [flags 0x41]  <function_decl 0x7f7cd1368000 usleep>) [0 usleep S1 A8])
            (const_int 0 [0]))) "function.c":590 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 681 680 682 48 (set (reg:SI 0 ax [orig:227 _141 ] [227])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36196 [0xffffffffffff729c])) [3 serwerinfo.runda+0 S4 A32])) "function.c":592 86 {*movsi_internal}
     (nil))
(insn 682 681 683 48 (parallel [
            (set (reg:SI 0 ax [orig:228 _142 ] [228])
                (plus:SI (reg:SI 0 ax [orig:227 _141 ] [227])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":592 221 {*addsi_1}
     (nil))
(insn 683 682 713 48 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36196 [0xffffffffffff729c])) [3 serwerinfo.runda+0 S4 A32])
        (reg:SI 0 ax [orig:228 _142 ] [228])) "function.c":592 86 {*movsi_internal}
     (nil))
(jump_insn 713 683 714 48 (set (pc)
        (label_ref 684)) "function.c":377 683 {jump}
     (nil)
 -> 684)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 714 713 710)
;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL, MODIFIED)
;;  pred:       47 [always] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  def 	 0 [ax] 230
(code_label 710 714 688 49 71 (nil) [1 uses])
(note 688 710 693 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 693 688 694 49 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:230 <retval> ] [230])) "function.c":595 85 {*movdi_internal}
     (nil))
(insn 694 693 715 49 (use (reg/i:DI 0 ax)) "function.c":595 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 715 694 0 NOTE_INSN_DELETED)

;; Function gracz_fun (gracz_fun, funcdef_no=12, decl_uid=6227, cgraph_uid=12, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) q  (1) m {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 28:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 78:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 83:  (0) r  (1) r  (2) le {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 85:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 96:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 97
	 Choosing alt 0 in insn 97:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 98
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 109:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 113:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 126:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 127
	 Choosing alt 0 in insn 127:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 128
	 Choosing alt 0 in insn 128:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 129:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 130:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 139:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 140
	 Choosing alt 0 in insn 140:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 141
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 142:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 143:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 152:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 153
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 154
	 Choosing alt 0 in insn 154:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 164:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 165:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 166
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 167
	 Choosing alt 0 in insn 167:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 168:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 169:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 170:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 174:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 178:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 184:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 186
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 188:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 191:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 195:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 203:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 205:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 208:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 209
	 Choosing alt 0 in insn 209:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 210
	 Choosing alt 0 in insn 210:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 212:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 216:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 217:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 218:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 219:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 220:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 221:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 222
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 223
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 224:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 225:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 234:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 235
	 Choosing alt 0 in insn 235:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 236
	 Choosing alt 0 in insn 236:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 237:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 238:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 243:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 244:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 247:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 248
	 Choosing alt 0 in insn 248:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 249
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 250:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 251:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 252:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 256:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 257:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 260:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 265:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 266:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 267
	 Choosing alt 0 in insn 267:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 268
	 Choosing alt 0 in insn 268:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 269:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 270:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 273:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 277:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 286:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 287:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 289:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 290:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 291
	 Choosing alt 0 in insn 291:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 292
	 Choosing alt 0 in insn 292:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 294:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 298:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 299:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 300:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 302:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 303:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 304:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 305:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 306:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 307:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 315:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 316:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 317:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 319:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 320:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 321
	 Choosing alt 0 in insn 321:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 0 in insn 322:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 323:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 324:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 325:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 329:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 333:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 334:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 335:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 336:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 337:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 338:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 345:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 346:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 348:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 349:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 350:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 351
	 Choosing alt 0 in insn 351:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 352
	 Choosing alt 0 in insn 352:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 353:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 354:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 357:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 358:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 362:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 369:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 376:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 378:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 381:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 384:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 385:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 386:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 387:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 392:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 395:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 397:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 399:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 400:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 401:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 403:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 404:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 405:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 408:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 411:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 412:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 413:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 414:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 416:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 419:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 420:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 427:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 428:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 430:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 431:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 433:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 438:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 439:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 440:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 441:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 445:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 452:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 455:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 460:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 461:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 463:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 464:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 466:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 468:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 474:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 475:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 477:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 479:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 482:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 483:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 485:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 486:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 488:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 489:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 493:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 494:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 495:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 496:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 501:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 502:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 503:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 505:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 506:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 507:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 509:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 510:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 513:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 514:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 515:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 517:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 518:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 521:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 522:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 523:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 524:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 527:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 528:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 530:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 531:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 532:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 534:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 535:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 536:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 537:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 538:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 540:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 543:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 544:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 545:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 546:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 548:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 550:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 551:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 552:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 555:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 556:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 557:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 559:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 560:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 561:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 564:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 568:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 569:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 570:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 571:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 574:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 575:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 577:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 578:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 579:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 581:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 582:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 583:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 585:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 586:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 589:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 590:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 591:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 592:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 593:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 594:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 595:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 597:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 598:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 599:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 601:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 602:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 603:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 605:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 606:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 607:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 610:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 611:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 612:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 613:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 614:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 615:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 616:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 618:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 619:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 620:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 621:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 622:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 623:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 624:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 626:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 627:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 628:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 629:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 632:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 633:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 634:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 635:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 636:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 637:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 639:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 640:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 641:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 642:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 643:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 644:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 645:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 647:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 648:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 649:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 650:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 652:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 653:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 654:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 655:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 656:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 657:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 658:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 660:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 661:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 662:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 663:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 664:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 666:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 667:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 669:  (1) rBwBz {*call_value}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 670:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 671:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 674:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 675:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 677:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 678:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5 6
EBB 7 8 9 10
EBB 11
EBB 12 13 14 15
EBB 16
EBB 17 18
EBB 19 20
EBB 21
EBB 22
EBB 23 24
EBB 25 26 27
EBB 28
EBB 29

********** Pseudo live ranges #1: **********

  BB 29
   Insn 693: point = 0, n_alt = -1
   Insn 692: point = 0, n_alt = -2
   Insn 688: point = 1, n_alt = -2
  BB 27
   Insn 710: point = 4, n_alt = -1
   Insn 678: point = 4, n_alt = 2
   Insn 677: point = 5, n_alt = 0
   Insn 676: point = 5, n_alt = -2
   Insn 675: point = 6, n_alt = 3
   Insn 674: point = 8, n_alt = 3
  BB 26
   Insn 672: point = 9, n_alt = -1
   Insn 671: point = 9, n_alt = 0
   Insn 670: point = 10, n_alt = 4
   Insn 669: point = 11, n_alt = 0
   Insn 668: point = 11, n_alt = -2
   Insn 667: point = 12, n_alt = 3
   Insn 666: point = 13, n_alt = 0
   Insn 665: point = 13, n_alt = -2
   Insn 664: point = 14, n_alt = 3
   Insn 663: point = 15, n_alt = 0
   Insn 662: point = 15, n_alt = 3
   Insn 661: point = 15, n_alt = 4
   Insn 660: point = 15, n_alt = 0
   Insn 659: point = 15, n_alt = -2
   Insn 658: point = 16, n_alt = 0
   Insn 657: point = 16, n_alt = 2
   Insn 656: point = 16, n_alt = 3
   Insn 655: point = 17, n_alt = 0
   Insn 654: point = 17, n_alt = 3
   Insn 653: point = 17, n_alt = 4
   Insn 652: point = 17, n_alt = 0
   Insn 651: point = 17, n_alt = -2
   Insn 650: point = 18, n_alt = 0
   Insn 649: point = 18, n_alt = 2
   Insn 648: point = 18, n_alt = 3
   Insn 647: point = 19, n_alt = 0
   Insn 646: point = 19, n_alt = -2
   Insn 645: point = 20, n_alt = 0
   Insn 644: point = 20, n_alt = 0
   Insn 643: point = 20, n_alt = 3
   Insn 642: point = 21, n_alt = 0
   Insn 641: point = 21, n_alt = 3
   Insn 640: point = 21, n_alt = 4
   Insn 639: point = 21, n_alt = 0
   Insn 638: point = 21, n_alt = -2
   Insn 637: point = 22, n_alt = 0
   Insn 636: point = 22, n_alt = 2
   Insn 635: point = 22, n_alt = 3
   Insn 634: point = 23, n_alt = 0
   Insn 633: point = 23, n_alt = 3
   Insn 632: point = 23, n_alt = 4
   Insn 631: point = 23, n_alt = 0
   Insn 630: point = 23, n_alt = -2
   Insn 629: point = 24, n_alt = 0
   Insn 628: point = 24, n_alt = 2
   Insn 627: point = 24, n_alt = 3
   Insn 626: point = 25, n_alt = 0
   Insn 625: point = 25, n_alt = -2
   Insn 624: point = 26, n_alt = 0
   Insn 623: point = 26, n_alt = 0
   Insn 622: point = 26, n_alt = 3
   Insn 621: point = 27, n_alt = 0
   Insn 620: point = 27, n_alt = 3
   Insn 619: point = 27, n_alt = 4
   Insn 618: point = 27, n_alt = 0
   Insn 617: point = 27, n_alt = -2
   Insn 616: point = 28, n_alt = 0
   Insn 615: point = 28, n_alt = 2
   Insn 614: point = 28, n_alt = 3
   Insn 613: point = 29, n_alt = 0
   Insn 612: point = 29, n_alt = 3
   Insn 611: point = 29, n_alt = 4
   Insn 610: point = 29, n_alt = 0
   Insn 609: point = 29, n_alt = -2
   Insn 608: point = 30, n_alt = 0
   Insn 607: point = 30, n_alt = 2
   Insn 606: point = 30, n_alt = 3
   Insn 605: point = 31, n_alt = 0
   Insn 604: point = 31, n_alt = -2
   Insn 603: point = 32, n_alt = 0
   Insn 602: point = 32, n_alt = 0
   Insn 601: point = 32, n_alt = 3
   Insn 600: point = 33, n_alt = 0
   Insn 599: point = 33, n_alt = 3
   Insn 598: point = 33, n_alt = 4
   Insn 597: point = 33, n_alt = 0
   Insn 596: point = 33, n_alt = -2
   Insn 595: point = 34, n_alt = 0
   Insn 594: point = 34, n_alt = 2
   Insn 593: point = 34, n_alt = 3
   Insn 592: point = 35, n_alt = 0
   Insn 591: point = 35, n_alt = 3
   Insn 590: point = 35, n_alt = 4
   Insn 589: point = 35, n_alt = 0
   Insn 588: point = 35, n_alt = -2
   Insn 587: point = 36, n_alt = 0
   Insn 586: point = 36, n_alt = 2
   Insn 585: point = 36, n_alt = 3
   Insn 584: point = 37, n_alt = 0
   Insn 583: point = 37, n_alt = 3
   Insn 582: point = 37, n_alt = 4
   Insn 581: point = 37, n_alt = 0
   Insn 580: point = 37, n_alt = -2
   Insn 579: point = 38, n_alt = 0
   Insn 578: point = 38, n_alt = 2
   Insn 577: point = 38, n_alt = 3
   Insn 576: point = 39, n_alt = 0
   Insn 575: point = 39, n_alt = 3
   Insn 574: point = 39, n_alt = 4
   Insn 573: point = 39, n_alt = 0
   Insn 572: point = 39, n_alt = -2
   Insn 571: point = 40, n_alt = 0
   Insn 570: point = 40, n_alt = 2
   Insn 569: point = 40, n_alt = 3
   Insn 568: point = 41, n_alt = 0
   Insn 567: point = 41, n_alt = -2
   Insn 566: point = 42, n_alt = 0
   Insn 565: point = 42, n_alt = 0
   Insn 564: point = 42, n_alt = 3
   Insn 563: point = 43, n_alt = 0
   Insn 562: point = 43, n_alt = -2
   Insn 561: point = 44, n_alt = 0
   Insn 560: point = 44, n_alt = 2
   Insn 559: point = 44, n_alt = 3
   Insn 558: point = 45, n_alt = 0
   Insn 557: point = 45, n_alt = 3
   Insn 556: point = 45, n_alt = 4
   Insn 555: point = 45, n_alt = 0
   Insn 554: point = 45, n_alt = -2
   Insn 553: point = 46, n_alt = 0
   Insn 552: point = 46, n_alt = 2
   Insn 551: point = 46, n_alt = 3
   Insn 550: point = 47, n_alt = 0
   Insn 549: point = 47, n_alt = -2
   Insn 548: point = 48, n_alt = 0
   Insn 547: point = 48, n_alt = 0
   Insn 546: point = 48, n_alt = 3
   Insn 545: point = 49, n_alt = 0
   Insn 544: point = 49, n_alt = 3
   Insn 543: point = 49, n_alt = 4
   Insn 542: point = 49, n_alt = 0
   Insn 541: point = 49, n_alt = -2
   Insn 540: point = 50, n_alt = 0
   Insn 539: point = 50, n_alt = 0
   Insn 538: point = 50, n_alt = 3
   Insn 537: point = 51, n_alt = 0
   Insn 536: point = 51, n_alt = 3
   Insn 535: point = 51, n_alt = 4
   Insn 534: point = 51, n_alt = 0
   Insn 533: point = 51, n_alt = -2
   Insn 532: point = 52, n_alt = 0
   Insn 531: point = 52, n_alt = 2
   Insn 530: point = 52, n_alt = 3
   Insn 529: point = 53, n_alt = 0
   Insn 528: point = 53, n_alt = 3
   Insn 527: point = 53, n_alt = 4
   Insn 526: point = 53, n_alt = 0
   Insn 525: point = 53, n_alt = -2
   Insn 524: point = 54, n_alt = 0
   Insn 523: point = 54, n_alt = 2
   Insn 522: point = 54, n_alt = 3
   Insn 521: point = 55, n_alt = 0
   Insn 520: point = 55, n_alt = -2
   Insn 519: point = 56, n_alt = 0
   Insn 518: point = 56, n_alt = 0
   Insn 517: point = 56, n_alt = 3
   Insn 516: point = 57, n_alt = 0
   Insn 515: point = 57, n_alt = 3
   Insn 514: point = 57, n_alt = 4
   Insn 513: point = 57, n_alt = 0
   Insn 512: point = 57, n_alt = -2
   Insn 511: point = 58, n_alt = 0
   Insn 510: point = 58, n_alt = 2
   Insn 509: point = 58, n_alt = 3
   Insn 508: point = 59, n_alt = 0
   Insn 507: point = 59, n_alt = 3
   Insn 506: point = 59, n_alt = 4
   Insn 505: point = 59, n_alt = 0
   Insn 504: point = 59, n_alt = -2
   Insn 503: point = 60, n_alt = 0
   Insn 502: point = 60, n_alt = 2
   Insn 501: point = 60, n_alt = 3
   Insn 500: point = 61, n_alt = 0
   Insn 499: point = 61, n_alt = -2
   Insn 498: point = 62, n_alt = 0
   Insn 497: point = 62, n_alt = 0
   Insn 496: point = 62, n_alt = 3
   Insn 495: point = 63, n_alt = 0
   Insn 494: point = 63, n_alt = 3
   Insn 493: point = 63, n_alt = 4
   Insn 492: point = 63, n_alt = 0
   Insn 491: point = 63, n_alt = -2
   Insn 490: point = 64, n_alt = 0
   Insn 489: point = 64, n_alt = 0
   Insn 488: point = 64, n_alt = 3
   Insn 487: point = 65, n_alt = 0
   Insn 486: point = 65, n_alt = 3
   Insn 485: point = 65, n_alt = 4
   Insn 484: point = 65, n_alt = -2
   Insn 483: point = 66, n_alt = 0
   Insn 482: point = 68, n_alt = 3
   Insn 481: point = 69, n_alt = 0
   Insn 480: point = 69, n_alt = -2
   Insn 479: point = 70, n_alt = 0
   Insn 478: point = 70, n_alt = 0
   Insn 477: point = 70, n_alt = 3
   Insn 476: point = 71, n_alt = 0
   Insn 475: point = 71, n_alt = 3
   Insn 474: point = 71, n_alt = 4
   Insn 473: point = 71, n_alt = -2
   Insn 472: point = 72, n_alt = 0
   Insn 471: point = 74, n_alt = 3
   Insn 470: point = 75, n_alt = 0
   Insn 469: point = 75, n_alt = -2
   Insn 468: point = 76, n_alt = 0
   Insn 467: point = 76, n_alt = 0
   Insn 466: point = 76, n_alt = 3
   Insn 465: point = 77, n_alt = 0
   Insn 464: point = 77, n_alt = 3
   Insn 463: point = 77, n_alt = 4
   Insn 462: point = 77, n_alt = -2
   Insn 461: point = 78, n_alt = 0
   Insn 460: point = 80, n_alt = 3
   Insn 459: point = 81, n_alt = 0
   Insn 458: point = 81, n_alt = -2
   Insn 457: point = 82, n_alt = 0
   Insn 456: point = 82, n_alt = 0
   Insn 455: point = 82, n_alt = 3
   Insn 454: point = 83, n_alt = 0
   Insn 453: point = 83, n_alt = 3
   Insn 452: point = 83, n_alt = 4
   Insn 451: point = 83, n_alt = -2
   Insn 450: point = 84, n_alt = -2
   Insn 449: point = 85, n_alt = 0
   Insn 448: point = 87, n_alt = 3
   Insn 447: point = 88, n_alt = 0
   Insn 446: point = 90, n_alt = 3
   Insn 445: point = 91, n_alt = 0
   Insn 444: point = 91, n_alt = -2
   Insn 443: point = 92, n_alt = 0
   Insn 442: point = 92, n_alt = 0
   Insn 441: point = 92, n_alt = 3
   Insn 440: point = 93, n_alt = 0
   Insn 439: point = 93, n_alt = 3
   Insn 438: point = 93, n_alt = 4
   Insn 437: point = 93, n_alt = 0
   Insn 436: point = 93, n_alt = -2
   Insn 435: point = 94, n_alt = 0
   Insn 434: point = 94, n_alt = 0
   Insn 433: point = 94, n_alt = 3
   Insn 432: point = 95, n_alt = 0
   Insn 431: point = 95, n_alt = 3
   Insn 430: point = 95, n_alt = 4
   Insn 429: point = 95, n_alt = -2
   Insn 428: point = 96, n_alt = 0
   Insn 427: point = 98, n_alt = 3
   Insn 426: point = 99, n_alt = 0
   Insn 425: point = 99, n_alt = -2
   Insn 424: point = 100, n_alt = 0
   Insn 423: point = 100, n_alt = 0
   Insn 422: point = 100, n_alt = 3
   Insn 421: point = 101, n_alt = 0
   Insn 420: point = 101, n_alt = 3
   Insn 419: point = 101, n_alt = 4
   Insn 418: point = 101, n_alt = 0
   Insn 417: point = 101, n_alt = -2
   Insn 416: point = 102, n_alt = 0
   Insn 415: point = 102, n_alt = 0
   Insn 414: point = 102, n_alt = 3
   Insn 413: point = 103, n_alt = 0
   Insn 412: point = 103, n_alt = 3
   Insn 411: point = 103, n_alt = 4
   Insn 410: point = 103, n_alt = -2
   Insn 409: point = 104, n_alt = 0
   Insn 408: point = 106, n_alt = 3
   Insn 407: point = 107, n_alt = 0
   Insn 406: point = 107, n_alt = -2
   Insn 405: point = 108, n_alt = 0
   Insn 404: point = 108, n_alt = 0
   Insn 403: point = 108, n_alt = 3
   Insn 402: point = 109, n_alt = 0
   Insn 401: point = 109, n_alt = 3
   Insn 400: point = 109, n_alt = 4
   Insn 399: point = 109, n_alt = 0
   Insn 398: point = 109, n_alt = -2
   Insn 397: point = 110, n_alt = 0
   Insn 396: point = 110, n_alt = 0
   Insn 395: point = 110, n_alt = 3
   Insn 394: point = 111, n_alt = 0
   Insn 393: point = 111, n_alt = 3
   Insn 392: point = 111, n_alt = 4
   Insn 391: point = 111, n_alt = 0
   Insn 390: point = 111, n_alt = -2
   Insn 389: point = 112, n_alt = 0
   Insn 388: point = 112, n_alt = 0
   Insn 387: point = 112, n_alt = 3
   Insn 386: point = 113, n_alt = 0
   Insn 385: point = 113, n_alt = 3
   Insn 384: point = 113, n_alt = 4
   Insn 383: point = 113, n_alt = -2
   Insn 382: point = 114, n_alt = 0
   Insn 381: point = 116, n_alt = 3
   Insn 380: point = 117, n_alt = 0
   Insn 379: point = 117, n_alt = -2
   Insn 378: point = 118, n_alt = 0
   Insn 377: point = 118, n_alt = 0
   Insn 376: point = 118, n_alt = 3
  BB 25
   Insn 374: point = 119, n_alt = -1
   Insn 373: point = 119, n_alt = 0
  BB 3
   Insn 695: point = 119, n_alt = -1
   Insn 74: point = 119, n_alt = 1
   Insn 73: point = 119, n_alt = 0
   Insn 72: point = 119, n_alt = -2
   Insn 71: point = 120, n_alt = 3
  BB 28
   Insn 712: point = 121, n_alt = -1
  BB 2
   Insn 69: point = 121, n_alt = 0
   Insn 68: point = 121, n_alt = 0
   Insn 67: point = 121, n_alt = 0
   Insn 66: point = 121, n_alt = 0
   Insn 65: point = 121, n_alt = 0
   Insn 64: point = 121, n_alt = 0
   Insn 63: point = 121, n_alt = 0
   Insn 62: point = 121, n_alt = 0
   Insn 61: point = 121, n_alt = 0
   Insn 60: point = 121, n_alt = 0
   Insn 59: point = 121, n_alt = 0
   Insn 58: point = 121, n_alt = 0
   Insn 57: point = 121, n_alt = 0
   Insn 56: point = 121, n_alt = 0
   Insn 55: point = 121, n_alt = 0
   Insn 54: point = 121, n_alt = 0
   Insn 53: point = 121, n_alt = 0
   Insn 52: point = 121, n_alt = 0
   Insn 51: point = 121, n_alt = 0
   Insn 50: point = 121, n_alt = 0
   Insn 49: point = 121, n_alt = 0
   Insn 48: point = 121, n_alt = 5
   Insn 47: point = 122, n_alt = -2
   Insn 46: point = 123, n_alt = 0
   Insn 45: point = 123, n_alt = 3
   Insn 44: point = 123, n_alt = -2
   Insn 43: point = 124, n_alt = 0
   Insn 42: point = 124, n_alt = 0
   Insn 41: point = 124, n_alt = 0
   Insn 40: point = 124, n_alt = 3
   Insn 39: point = 126, n_alt = 3
   Insn 38: point = 127, n_alt = 5
   Insn 37: point = 128, n_alt = -2
   Insn 36: point = 129, n_alt = 0
   Insn 35: point = 129, n_alt = 3
   Insn 34: point = 129, n_alt = -2
   Insn 33: point = 130, n_alt = 0
   Insn 32: point = 130, n_alt = 0
   Insn 31: point = 130, n_alt = 0
   Insn 30: point = 130, n_alt = 3
   Insn 29: point = 132, n_alt = 3
   Insn 28: point = 133, n_alt = 8
   Insn 27: point = 134, n_alt = 3
   Insn 26: point = 135, n_alt = 4
   Insn 25: point = 136, n_alt = 5
   Insn 24: point = 137, n_alt = -2
   Insn 23: point = 138, n_alt = 0
   Insn 22: point = 138, n_alt = 2
   Insn 21: point = 138, n_alt = 2
   Insn 20: point = 138, n_alt = 0
   Insn 19: point = 138, n_alt = 0
   Insn 18: point = 138, n_alt = -2
   Insn 17: point = 139, n_alt = 2
   Insn 16: point = 139, n_alt = 0
   Insn 15: point = 140, n_alt = 1
   Insn 14: point = 141, n_alt = -2
   Insn 13: point = 142, n_alt = 0
   Insn 12: point = 142, n_alt = -2
   Insn 11: point = 143, n_alt = 0
   Insn 10: point = 143, n_alt = 0
   Insn 9: point = 143, n_alt = 3
   Insn 8: point = 145, n_alt = 3
   Insn 7: point = 146, n_alt = 5
   Insn 6: point = 147, n_alt = 3
   Insn 2: point = 148, n_alt = 5
  BB 24
   Insn 369: point = 148, n_alt = 1
  BB 23
   Insn 367: point = 148, n_alt = -1
   Insn 366: point = 148, n_alt = 0
  BB 4
   Insn 697: point = 148, n_alt = -1
   Insn 78: point = 148, n_alt = 1
  BB 22
   Insn 362: point = 148, n_alt = 1
  BB 20
   Insn 707: point = 148, n_alt = -1
   Insn 340: point = 148, n_alt = 0
   Insn 339: point = 148, n_alt = -2
   Insn 338: point = 149, n_alt = 0
   Insn 337: point = 149, n_alt = 2
   Insn 336: point = 149, n_alt = 3
   Insn 335: point = 150, n_alt = 0
   Insn 334: point = 150, n_alt = 3
   Insn 333: point = 150, n_alt = 4
   Insn 332: point = 150, n_alt = 0
   Insn 331: point = 150, n_alt = -2
   Insn 330: point = 151, n_alt = 0
   Insn 329: point = 151, n_alt = 2
   Insn 328: point = 151, n_alt = 3
  BB 18
   Insn 705: point = 152, n_alt = -1
   Insn 310: point = 152, n_alt = 0
   Insn 309: point = 152, n_alt = -2
   Insn 308: point = 153, n_alt = 0
   Insn 307: point = 153, n_alt = 2
   Insn 306: point = 153, n_alt = 3
   Insn 305: point = 154, n_alt = 0
   Insn 304: point = 154, n_alt = 3
   Insn 303: point = 154, n_alt = 4
   Insn 302: point = 154, n_alt = 0
   Insn 301: point = 154, n_alt = -2
   Insn 300: point = 155, n_alt = 0
   Insn 299: point = 155, n_alt = 2
   Insn 298: point = 155, n_alt = 3
  BB 16
   Insn 703: point = 156, n_alt = -1
   Insn 280: point = 156, n_alt = 0
   Insn 279: point = 156, n_alt = -2
   Insn 278: point = 157, n_alt = 0
   Insn 277: point = 157, n_alt = 2
   Insn 276: point = 157, n_alt = 3
   Insn 275: point = 158, n_alt = 0
   Insn 274: point = 158, n_alt = 3
   Insn 273: point = 158, n_alt = 4
   Insn 272: point = 158, n_alt = -2
   Insn 271: point = 159, n_alt = 0
   Insn 270: point = 161, n_alt = 4
   Insn 269: point = 163, n_alt = 0
   Insn 268: point = 165, n_alt = 0
   Insn 267: point = 167, n_alt = 0
   Insn 266: point = 169, n_alt = 1
   Insn 265: point = 171, n_alt = 1
   Insn 264: point = 173, n_alt = 0
   Insn 263: point = 174, n_alt = 0
   Insn 262: point = 176, n_alt = 0
   Insn 261: point = 177, n_alt = 3
   Insn 260: point = 178, n_alt = 0
   Insn 259: point = 178, n_alt = -2
   Insn 258: point = 179, n_alt = 0
   Insn 257: point = 179, n_alt = 2
   Insn 256: point = 179, n_alt = 3
  BB 11
   Insn 701: point = 180, n_alt = -1
   Insn 198: point = 180, n_alt = 0
   Insn 197: point = 180, n_alt = -2
   Insn 196: point = 181, n_alt = 0
   Insn 195: point = 181, n_alt = 2
   Insn 194: point = 181, n_alt = 3
   Insn 193: point = 182, n_alt = 0
   Insn 192: point = 182, n_alt = 3
   Insn 191: point = 182, n_alt = 4
   Insn 190: point = 182, n_alt = -2
   Insn 189: point = 183, n_alt = 0
   Insn 188: point = 185, n_alt = 4
   Insn 187: point = 187, n_alt = 0
   Insn 186: point = 189, n_alt = 0
   Insn 185: point = 191, n_alt = 0
   Insn 184: point = 193, n_alt = 1
   Insn 183: point = 195, n_alt = 1
   Insn 182: point = 197, n_alt = 0
   Insn 181: point = 198, n_alt = 0
   Insn 180: point = 200, n_alt = 0
   Insn 179: point = 201, n_alt = 3
   Insn 178: point = 202, n_alt = 0
   Insn 177: point = 202, n_alt = -2
   Insn 176: point = 203, n_alt = 0
   Insn 175: point = 203, n_alt = 2
   Insn 174: point = 203, n_alt = 3
  BB 6
   Insn 699: point = 204, n_alt = -1
   Insn 116: point = 204, n_alt = 0
   Insn 115: point = 204, n_alt = -2
   Insn 114: point = 205, n_alt = 0
   Insn 113: point = 205, n_alt = 2
   Insn 112: point = 205, n_alt = 3
   Insn 111: point = 206, n_alt = 0
   Insn 110: point = 206, n_alt = 3
   Insn 109: point = 206, n_alt = 4
   Insn 108: point = 206, n_alt = 0
   Insn 107: point = 206, n_alt = -2
   Insn 106: point = 207, n_alt = 0
   Insn 105: point = 207, n_alt = 2
   Insn 104: point = 207, n_alt = 3
  BB 21
   Insn 359: point = 208, n_alt = 0
   Insn 358: point = 208, n_alt = 3
   Insn 357: point = 208, n_alt = 4
   Insn 356: point = 208, n_alt = -2
   Insn 355: point = 209, n_alt = 0
   Insn 354: point = 211, n_alt = 4
   Insn 353: point = 213, n_alt = 0
   Insn 352: point = 215, n_alt = 0
   Insn 351: point = 217, n_alt = 0
   Insn 350: point = 219, n_alt = 1
   Insn 349: point = 221, n_alt = 1
   Insn 348: point = 223, n_alt = 0
   Insn 347: point = 224, n_alt = 0
   Insn 346: point = 226, n_alt = 0
   Insn 345: point = 227, n_alt = 3
  BB 19
   Insn 326: point = 228, n_alt = -1
   Insn 325: point = 228, n_alt = 0
   Insn 324: point = 229, n_alt = 4
   Insn 323: point = 231, n_alt = 0
   Insn 322: point = 233, n_alt = 0
   Insn 321: point = 235, n_alt = 0
   Insn 320: point = 237, n_alt = 1
   Insn 319: point = 239, n_alt = 1
   Insn 318: point = 241, n_alt = 0
   Insn 317: point = 242, n_alt = 0
   Insn 316: point = 244, n_alt = 0
   Insn 315: point = 245, n_alt = 3
  BB 17
   Insn 296: point = 246, n_alt = -1
   Insn 295: point = 246, n_alt = 0
   Insn 294: point = 247, n_alt = 4
   Insn 293: point = 249, n_alt = 0
   Insn 292: point = 251, n_alt = 0
   Insn 291: point = 253, n_alt = 0
   Insn 290: point = 255, n_alt = 1
   Insn 289: point = 257, n_alt = 1
   Insn 288: point = 259, n_alt = 0
   Insn 287: point = 260, n_alt = 0
   Insn 286: point = 262, n_alt = 0
   Insn 285: point = 263, n_alt = 3
  BB 15
   Insn 253: point = 264, n_alt = -1
   Insn 252: point = 264, n_alt = 0
   Insn 251: point = 265, n_alt = 4
   Insn 250: point = 267, n_alt = 0
   Insn 249: point = 269, n_alt = 0
   Insn 248: point = 271, n_alt = 0
   Insn 247: point = 273, n_alt = 1
   Insn 246: point = 275, n_alt = 1
   Insn 245: point = 277, n_alt = 0
   Insn 244: point = 278, n_alt = 0
   Insn 243: point = 280, n_alt = 0
   Insn 242: point = 281, n_alt = 3
  BB 14
   Insn 240: point = 282, n_alt = -1
   Insn 239: point = 282, n_alt = 0
   Insn 238: point = 283, n_alt = 4
   Insn 237: point = 285, n_alt = 0
   Insn 236: point = 287, n_alt = 0
   Insn 235: point = 289, n_alt = 0
   Insn 234: point = 291, n_alt = 1
   Insn 233: point = 293, n_alt = 1
   Insn 232: point = 295, n_alt = 0
   Insn 231: point = 296, n_alt = 0
   Insn 230: point = 298, n_alt = 0
   Insn 229: point = 299, n_alt = 3
  BB 13
   Insn 227: point = 300, n_alt = -1
   Insn 226: point = 300, n_alt = 0
   Insn 225: point = 301, n_alt = 4
   Insn 224: point = 303, n_alt = 0
   Insn 223: point = 305, n_alt = 0
   Insn 222: point = 307, n_alt = 0
   Insn 221: point = 309, n_alt = 1
   Insn 220: point = 311, n_alt = 1
   Insn 219: point = 313, n_alt = 0
   Insn 218: point = 314, n_alt = 0
   Insn 217: point = 316, n_alt = 0
   Insn 216: point = 317, n_alt = 3
  BB 12
   Insn 214: point = 318, n_alt = -1
   Insn 213: point = 318, n_alt = 0
   Insn 212: point = 319, n_alt = 4
   Insn 211: point = 321, n_alt = 0
   Insn 210: point = 323, n_alt = 0
   Insn 209: point = 325, n_alt = 0
   Insn 208: point = 327, n_alt = 1
   Insn 207: point = 329, n_alt = 1
   Insn 206: point = 331, n_alt = 0
   Insn 205: point = 332, n_alt = 0
   Insn 204: point = 334, n_alt = 0
   Insn 203: point = 335, n_alt = 3
  BB 10
   Insn 171: point = 336, n_alt = -1
   Insn 170: point = 336, n_alt = 0
   Insn 169: point = 337, n_alt = 4
   Insn 168: point = 339, n_alt = 0
   Insn 167: point = 341, n_alt = 0
   Insn 166: point = 343, n_alt = 0
   Insn 165: point = 345, n_alt = 1
   Insn 164: point = 347, n_alt = 1
   Insn 163: point = 349, n_alt = 0
   Insn 162: point = 350, n_alt = 0
   Insn 161: point = 352, n_alt = 0
   Insn 160: point = 353, n_alt = 3
  BB 9
   Insn 158: point = 354, n_alt = -1
   Insn 157: point = 354, n_alt = 0
   Insn 156: point = 355, n_alt = 4
   Insn 155: point = 357, n_alt = 0
   Insn 154: point = 359, n_alt = 0
   Insn 153: point = 361, n_alt = 0
   Insn 152: point = 363, n_alt = 1
   Insn 151: point = 365, n_alt = 1
   Insn 150: point = 367, n_alt = 0
   Insn 149: point = 368, n_alt = 0
   Insn 148: point = 370, n_alt = 0
   Insn 147: point = 371, n_alt = 3
  BB 8
   Insn 145: point = 372, n_alt = -1
   Insn 144: point = 372, n_alt = 0
   Insn 143: point = 373, n_alt = 4
   Insn 142: point = 375, n_alt = 0
   Insn 141: point = 377, n_alt = 0
   Insn 140: point = 379, n_alt = 0
   Insn 139: point = 381, n_alt = 1
   Insn 138: point = 383, n_alt = 1
   Insn 137: point = 385, n_alt = 0
   Insn 136: point = 386, n_alt = 0
   Insn 135: point = 388, n_alt = 0
   Insn 134: point = 389, n_alt = 3
  BB 7
   Insn 132: point = 390, n_alt = -1
   Insn 131: point = 390, n_alt = 0
   Insn 130: point = 391, n_alt = 4
   Insn 129: point = 393, n_alt = 0
   Insn 128: point = 395, n_alt = 0
   Insn 127: point = 397, n_alt = 0
   Insn 126: point = 399, n_alt = 1
   Insn 125: point = 401, n_alt = 1
   Insn 124: point = 403, n_alt = 0
   Insn 123: point = 404, n_alt = 0
   Insn 122: point = 406, n_alt = 0
   Insn 121: point = 407, n_alt = 3
  BB 5
   Insn 102: point = 408, n_alt = -1
   Insn 101: point = 408, n_alt = 0
   Insn 100: point = 409, n_alt = 4
   Insn 99: point = 411, n_alt = 0
   Insn 98: point = 413, n_alt = 0
   Insn 97: point = 415, n_alt = 0
   Insn 96: point = 417, n_alt = 1
   Insn 95: point = 419, n_alt = 1
   Insn 94: point = 421, n_alt = 0
   Insn 93: point = 422, n_alt = 0
   Insn 92: point = 424, n_alt = 0
   Insn 91: point = 425, n_alt = 3
   Insn 90: point = 426, n_alt = 0
   Insn 89: point = 426, n_alt = -2
   Insn 88: point = 427, n_alt = -2
   Insn 87: point = 428, n_alt = -2
   Insn 86: point = 429, n_alt = 3
   Insn 85: point = 430, n_alt = 3
   Insn 84: point = 432, n_alt = 0
   Insn 83: point = 433, n_alt = 3
   Insn 82: point = 435, n_alt = 0
 r87: [142..143]
 r88: [133..135]
 r89: [129..130]
 r90: [123..124]
 r91: [428..433]
 r92: [427..430]
 r93: [426..429]
 r94: [408..409]
 r95: [206..207]
 r96: [204..205]
 r97: [390..391]
 r98: [372..373]
 r99: [354..355]
 r100: [336..337]
 r101: [202..203]
 r102: [184..185]
 r103: [182..183]
 r104: [180..181]
 r105: [318..319]
 r106: [300..301]
 r107: [282..283]
 r108: [264..265]
 r109: [178..179]
 r110: [160..161]
 r111: [158..159]
 r112: [156..157]
 r113: [246..247]
 r114: [154..155]
 r115: [152..153]
 r116: [228..229]
 r117: [150..151]
 r118: [148..149]
 r119: [210..211]
 r120: [208..209]
 r121: [117..118]
 r122: [113..114]
 r123: [111..112]
 r124: [109..110]
 r125: [107..108]
 r126: [103..104]
 r127: [101..102]
 r128: [99..100]
 r129: [95..96]
 r130: [93..94]
 r131: [91..92]
 r132: [84..88]
 r133: [83..85]
 r134: [81..82]
 r135: [77..78]
 r136: [75..76]
 r137: [71..72]
 r138: [69..70]
 r139: [65..66]
 r140: [63..64]
 r141: [61..62]
 r142: [59..60]
 r143: [57..58]
 r144: [55..56]
 r145: [53..54]
 r146: [51..52]
 r147: [49..50]
 r148: [47..48]
 r149: [45..46]
 r150: [43..44]
 r151: [41..42]
 r152: [39..40]
 r153: [37..38]
 r154: [35..36]
 r155: [33..34]
 r156: [31..32]
 r157: [29..30]
 r158: [27..28]
 r159: [25..26]
 r160: [23..24]
 r161: [21..22]
 r162: [19..20]
 r163: [17..18]
 r164: [15..16]
 r165: [13..14]
 r166: [9..10]
 r167: [5..6]
 r168: [2..4]
 r169: [0..1]
 r170: [146..147]
 r171: [144..145]
 r172: [140..141]
 r173: [138..139]
 r174: [136..137]
 r175: [133..134]
 r176: [131..132]
 r177: [127..128]
 r178: [125..126]
 r179: [121..122]
 r180: [119..120]
 r181: [434..435]
 r182: [431..432]
 r183: [416..425]
 r184: [414..422]
 r185: [423..424]
 r186: [418..419]
 r187: [420..421]
 r188: [416..417]
 r189: [414..415]
 r190: [412..413]
 r191: [410..411]
 r192: [398..407]
 r193: [396..404]
 r194: [405..406]
 r195: [400..401]
 r196: [402..403]
 r197: [398..399]
 r198: [396..397]
 r199: [394..395]
 r200: [392..393]
 r201: [380..389]
 r202: [378..386]
 r203: [387..388]
 r204: [382..383]
 r205: [384..385]
 r206: [380..381]
 r207: [378..379]
 r208: [376..377]
 r209: [374..375]
 r210: [362..371]
 r211: [360..368]
 r212: [369..370]
 r213: [364..365]
 r214: [366..367]
 r215: [362..363]
 r216: [360..361]
 r217: [358..359]
 r218: [356..357]
 r219: [344..353]
 r220: [342..350]
 r221: [351..352]
 r222: [346..347]
 r223: [348..349]
 r224: [344..345]
 r225: [342..343]
 r226: [340..341]
 r227: [338..339]
 r228: [192..201]
 r229: [190..198]
 r230: [199..200]
 r231: [194..195]
 r232: [196..197]
 r233: [192..193]
 r234: [190..191]
 r235: [188..189]
 r236: [186..187]
 r237: [326..335]
 r238: [324..332]
 r239: [333..334]
 r240: [328..329]
 r241: [330..331]
 r242: [326..327]
 r243: [324..325]
 r244: [322..323]
 r245: [320..321]
 r246: [308..317]
 r247: [306..314]
 r248: [315..316]
 r249: [310..311]
 r250: [312..313]
 r251: [308..309]
 r252: [306..307]
 r253: [304..305]
 r254: [302..303]
 r255: [290..299]
 r256: [288..296]
 r257: [297..298]
 r258: [292..293]
 r259: [294..295]
 r260: [290..291]
 r261: [288..289]
 r262: [286..287]
 r263: [284..285]
 r264: [272..281]
 r265: [270..278]
 r266: [279..280]
 r267: [274..275]
 r268: [276..277]
 r269: [272..273]
 r270: [270..271]
 r271: [268..269]
 r272: [266..267]
 r273: [168..177]
 r274: [166..174]
 r275: [175..176]
 r276: [170..171]
 r277: [172..173]
 r278: [168..169]
 r279: [166..167]
 r280: [164..165]
 r281: [162..163]
 r282: [254..263]
 r283: [252..260]
 r284: [261..262]
 r285: [256..257]
 r286: [258..259]
 r287: [254..255]
 r288: [252..253]
 r289: [250..251]
 r290: [248..249]
 r291: [236..245]
 r292: [234..242]
 r293: [243..244]
 r294: [238..239]
 r295: [240..241]
 r296: [236..237]
 r297: [234..235]
 r298: [232..233]
 r299: [230..231]
 r300: [218..227]
 r301: [216..224]
 r302: [225..226]
 r303: [220..221]
 r304: [222..223]
 r305: [218..219]
 r306: [216..217]
 r307: [214..215]
 r308: [212..213]
 r309: [115..116]
 r310: [105..106]
 r311: [97..98]
 r312: [89..90]
 r313: [86..87]
 r314: [79..80]
 r315: [73..74]
 r316: [67..68]
 r317: [11..12]
 r318: [7..8]
Compressing live ranges: from 436 to 400 - 91%
Ranges after the compression:
 r87: [138..139]
 r88: [130..131]
 r89: [126..127]
 r90: [120..121]
 r91: [394..397]
 r92: [394..395]
 r93: [394..395]
 r94: [378..379]
 r95: [198..199]
 r96: [196..197]
 r97: [362..363]
 r98: [346..347]
 r99: [330..331]
 r100: [314..315]
 r101: [194..195]
 r102: [178..179]
 r103: [176..177]
 r104: [174..175]
 r105: [298..299]
 r106: [282..283]
 r107: [266..267]
 r108: [250..251]
 r109: [172..173]
 r110: [156..157]
 r111: [154..155]
 r112: [152..153]
 r113: [234..235]
 r114: [150..151]
 r115: [148..149]
 r116: [218..219]
 r117: [146..147]
 r118: [144..145]
 r119: [202..203]
 r120: [200..201]
 r121: [114..115]
 r122: [110..111]
 r123: [108..109]
 r124: [106..107]
 r125: [104..105]
 r126: [100..101]
 r127: [98..99]
 r128: [96..97]
 r129: [92..93]
 r130: [90..91]
 r131: [88..89]
 r132: [82..85]
 r133: [82..83]
 r134: [80..81]
 r135: [76..77]
 r136: [74..75]
 r137: [70..71]
 r138: [68..69]
 r139: [64..65]
 r140: [62..63]
 r141: [60..61]
 r142: [58..59]
 r143: [56..57]
 r144: [54..55]
 r145: [52..53]
 r146: [50..51]
 r147: [48..49]
 r148: [46..47]
 r149: [44..45]
 r150: [42..43]
 r151: [40..41]
 r152: [38..39]
 r153: [36..37]
 r154: [34..35]
 r155: [32..33]
 r156: [30..31]
 r157: [28..29]
 r158: [26..27]
 r159: [24..25]
 r160: [22..23]
 r161: [20..21]
 r162: [18..19]
 r163: [16..17]
 r164: [14..15]
 r165: [12..13]
 r166: [8..9]
 r167: [4..5]
 r168: [2..3]
 r169: [0..1]
 r170: [142..143]
 r171: [140..141]
 r172: [136..137]
 r173: [134..135]
 r174: [132..133]
 r175: [130..131]
 r176: [128..129]
 r177: [124..125]
 r178: [122..123]
 r179: [118..119]
 r180: [116..117]
 r181: [398..399]
 r182: [396..397]
 r183: [386..393]
 r184: [384..391]
 r185: [392..393]
 r186: [388..389]
 r187: [390..391]
 r188: [386..387]
 r189: [384..385]
 r190: [382..383]
 r191: [380..381]
 r192: [370..377]
 r193: [368..375]
 r194: [376..377]
 r195: [372..373]
 r196: [374..375]
 r197: [370..371]
 r198: [368..369]
 r199: [366..367]
 r200: [364..365]
 r201: [354..361]
 r202: [352..359]
 r203: [360..361]
 r204: [356..357]
 r205: [358..359]
 r206: [354..355]
 r207: [352..353]
 r208: [350..351]
 r209: [348..349]
 r210: [338..345]
 r211: [336..343]
 r212: [344..345]
 r213: [340..341]
 r214: [342..343]
 r215: [338..339]
 r216: [336..337]
 r217: [334..335]
 r218: [332..333]
 r219: [322..329]
 r220: [320..327]
 r221: [328..329]
 r222: [324..325]
 r223: [326..327]
 r224: [322..323]
 r225: [320..321]
 r226: [318..319]
 r227: [316..317]
 r228: [186..193]
 r229: [184..191]
 r230: [192..193]
 r231: [188..189]
 r232: [190..191]
 r233: [186..187]
 r234: [184..185]
 r235: [182..183]
 r236: [180..181]
 r237: [306..313]
 r238: [304..311]
 r239: [312..313]
 r240: [308..309]
 r241: [310..311]
 r242: [306..307]
 r243: [304..305]
 r244: [302..303]
 r245: [300..301]
 r246: [290..297]
 r247: [288..295]
 r248: [296..297]
 r249: [292..293]
 r250: [294..295]
 r251: [290..291]
 r252: [288..289]
 r253: [286..287]
 r254: [284..285]
 r255: [274..281]
 r256: [272..279]
 r257: [280..281]
 r258: [276..277]
 r259: [278..279]
 r260: [274..275]
 r261: [272..273]
 r262: [270..271]
 r263: [268..269]
 r264: [258..265]
 r265: [256..263]
 r266: [264..265]
 r267: [260..261]
 r268: [262..263]
 r269: [258..259]
 r270: [256..257]
 r271: [254..255]
 r272: [252..253]
 r273: [164..171]
 r274: [162..169]
 r275: [170..171]
 r276: [166..167]
 r277: [168..169]
 r278: [164..165]
 r279: [162..163]
 r280: [160..161]
 r281: [158..159]
 r282: [242..249]
 r283: [240..247]
 r284: [248..249]
 r285: [244..245]
 r286: [246..247]
 r287: [242..243]
 r288: [240..241]
 r289: [238..239]
 r290: [236..237]
 r291: [226..233]
 r292: [224..231]
 r293: [232..233]
 r294: [228..229]
 r295: [230..231]
 r296: [226..227]
 r297: [224..225]
 r298: [222..223]
 r299: [220..221]
 r300: [210..217]
 r301: [208..215]
 r302: [216..217]
 r303: [212..213]
 r304: [214..215]
 r305: [210..211]
 r306: [208..209]
 r307: [206..207]
 r308: [204..205]
 r309: [112..113]
 r310: [102..103]
 r311: [94..95]
 r312: [86..87]
 r313: [84..85]
 r314: [78..79]
 r315: [72..73]
 r316: [66..67]
 r317: [10..11]
 r318: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 12
changing reg in insn 26
changing reg in insn 28
changing reg in insn 30
changing reg in insn 34
changing reg in insn 40
changing reg in insn 44
changing reg in insn 83
changing reg in insn 87
changing reg in insn 85
changing reg in insn 88
changing reg in insn 86
changing reg in insn 89
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 107
changing reg in insn 112
changing reg in insn 115
changing reg in insn 130
changing reg in insn 131
changing reg in insn 143
changing reg in insn 144
changing reg in insn 156
changing reg in insn 157
changing reg in insn 169
changing reg in insn 170
changing reg in insn 174
changing reg in insn 177
changing reg in insn 188
changing reg in insn 189
changing reg in insn 189
changing reg in insn 190
changing reg in insn 194
changing reg in insn 197
changing reg in insn 212
changing reg in insn 213
changing reg in insn 225
changing reg in insn 226
changing reg in insn 238
changing reg in insn 239
changing reg in insn 251
changing reg in insn 252
changing reg in insn 256
changing reg in insn 259
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 276
changing reg in insn 279
changing reg in insn 294
changing reg in insn 295
changing reg in insn 298
changing reg in insn 301
changing reg in insn 306
changing reg in insn 309
changing reg in insn 324
changing reg in insn 325
changing reg in insn 328
changing reg in insn 331
changing reg in insn 336
changing reg in insn 339
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 376
changing reg in insn 379
changing reg in insn 382
changing reg in insn 383
changing reg in insn 387
changing reg in insn 390
changing reg in insn 395
changing reg in insn 398
changing reg in insn 403
changing reg in insn 406
changing reg in insn 409
changing reg in insn 410
changing reg in insn 414
changing reg in insn 417
changing reg in insn 422
changing reg in insn 425
changing reg in insn 428
changing reg in insn 429
changing reg in insn 433
changing reg in insn 436
changing reg in insn 441
changing reg in insn 444
changing reg in insn 447
changing reg in insn 450
changing reg in insn 449
changing reg in insn 451
changing reg in insn 455
changing reg in insn 458
changing reg in insn 461
changing reg in insn 462
changing reg in insn 466
changing reg in insn 469
changing reg in insn 472
changing reg in insn 473
changing reg in insn 477
changing reg in insn 480
changing reg in insn 483
changing reg in insn 484
changing reg in insn 488
changing reg in insn 491
changing reg in insn 496
changing reg in insn 499
changing reg in insn 501
changing reg in insn 504
changing reg in insn 509
changing reg in insn 512
changing reg in insn 517
changing reg in insn 520
changing reg in insn 522
changing reg in insn 525
changing reg in insn 530
changing reg in insn 533
changing reg in insn 538
changing reg in insn 541
changing reg in insn 546
changing reg in insn 549
changing reg in insn 551
changing reg in insn 554
changing reg in insn 559
changing reg in insn 562
changing reg in insn 564
changing reg in insn 567
changing reg in insn 569
changing reg in insn 572
changing reg in insn 577
changing reg in insn 580
changing reg in insn 585
changing reg in insn 588
changing reg in insn 593
changing reg in insn 596
changing reg in insn 601
changing reg in insn 604
changing reg in insn 606
changing reg in insn 609
changing reg in insn 614
changing reg in insn 617
changing reg in insn 622
changing reg in insn 625
changing reg in insn 627
changing reg in insn 630
changing reg in insn 635
changing reg in insn 638
changing reg in insn 643
changing reg in insn 646
changing reg in insn 648
changing reg in insn 651
changing reg in insn 656
changing reg in insn 659
changing reg in insn 664
changing reg in insn 665
changing reg in insn 670
changing reg in insn 671
changing reg in insn 675
changing reg in insn 676
changing reg in insn 678
changing reg in insn 688
changing reg in insn 688
changing reg in insn 692
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 47
changing reg in insn 48
changing reg in insn 71
changing reg in insn 72
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 121
changing reg in insn 123
changing reg in insn 122
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 136
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 147
changing reg in insn 149
changing reg in insn 148
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 155
changing reg in insn 156
changing reg in insn 160
changing reg in insn 162
changing reg in insn 161
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 179
changing reg in insn 181
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 184
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 203
changing reg in insn 205
changing reg in insn 204
changing reg in insn 205
changing reg in insn 207
changing reg in insn 208
changing reg in insn 206
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 216
changing reg in insn 218
changing reg in insn 217
changing reg in insn 218
changing reg in insn 220
changing reg in insn 221
changing reg in insn 219
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 231
changing reg in insn 230
changing reg in insn 231
changing reg in insn 233
changing reg in insn 234
changing reg in insn 232
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 242
changing reg in insn 244
changing reg in insn 243
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 245
changing reg in insn 246
changing reg in insn 247
changing reg in insn 248
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 251
changing reg in insn 261
changing reg in insn 263
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 266
changing reg in insn 264
changing reg in insn 265
changing reg in insn 266
changing reg in insn 267
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 285
changing reg in insn 287
changing reg in insn 286
changing reg in insn 287
changing reg in insn 289
changing reg in insn 290
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 294
changing reg in insn 315
changing reg in insn 317
changing reg in insn 316
changing reg in insn 317
changing reg in insn 319
changing reg in insn 320
changing reg in insn 318
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 324
changing reg in insn 345
changing reg in insn 347
changing reg in insn 346
changing reg in insn 347
changing reg in insn 349
changing reg in insn 350
changing reg in insn 348
changing reg in insn 349
changing reg in insn 350
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 353
changing reg in insn 354
changing reg in insn 381
changing reg in insn 382
changing reg in insn 408
changing reg in insn 409
changing reg in insn 427
changing reg in insn 428
changing reg in insn 446
changing reg in insn 447
changing reg in insn 448
changing reg in insn 449
changing reg in insn 460
changing reg in insn 461
changing reg in insn 471
changing reg in insn 472
changing reg in insn 482
changing reg in insn 483
changing reg in insn 667
changing reg in insn 668
changing reg in insn 674
changing reg in insn 675
deleting insn with uid = 14.
deleting insn with uid = 24.
deleting insn with uid = 37.
deleting insn with uid = 47.
deleting insn with uid = 87.
deleting insn with uid = 450.
deleting insn with uid = 688.
starting the processing of deferred insns
ending the processing of deferred insns


gracz_fun

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={286d,195u} r1={210d,114u} r2={114d,18u} r4={162d,66u} r5={190d,95u} r6={1d,104u} r7={1d,124u} r8={95d} r9={95d} r10={95d} r11={95d} r12={95d} r13={95d} r14={95d} r15={95d} r17={169d,14u} r18={95d} r19={95d} r20={1d,1u,2e} r21={96d} r22={96d} r23={96d} r24={96d} r25={96d} r26={96d} r27={96d} r28={96d} r29={95d} r30={95d} r31={95d} r32={95d} r33={95d} r34={95d} r35={95d} r36={95d} r37={97d,1u} r38={97d,1u} r39={95d} r40={95d} r45={95d} r46={95d} r47={95d} r48={95d} r49={95d} r50={95d} r51={95d} r52={95d} r53={95d} r54={95d} r55={95d} r56={95d} r57={95d} r58={95d} r59={95d} r60={95d} r61={95d} r62={95d} r63={95d} r64={95d} r65={95d} r66={95d} r67={95d} r68={95d} r69={95d} r70={95d} r71={95d} r72={95d} r73={95d} r74={95d} r75={95d} r76={95d} r77={95d} r78={95d} r79={95d} r80={95d} 
;;    total ref usage 8151{7416d,733u,2e} in 628{533 regular + 95 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 170 171 172 173 174 175 176 177 178 179
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":598 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])) "function.c":599 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])
        (reg/f:DI 0 ax [170])) "function.c":599 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":600 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [171]) [10 createplayer_89->name1+0 S8 A64])) "function.c":600 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":600 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 66 [0x42])) "function.c":600 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 _1 ] [87])) "function.c":600 85 {*movdi_internal}
     (nil))
(call_insn 13 12 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_open") [flags 0x41]  <function_decl 0x7f7cd133cb00 shm_open>) [0 shm_open S1 A8])
            (const_int 0 [0]))) "function.c":600 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 15 13 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 fd+0 S4 A32])
        (reg:SI 0 ax [172])) "function.c":600 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 0 ax [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 fd+0 S4 A32])) "function.c":602 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 38 r9)
        (const_int 0 [0])) "function.c":602 85 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 37 r8)
        (reg:SI 0 ax [173])) "function.c":602 86 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "function.c":602 86 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":602 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":602 85 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":602 85 {*movdi_internal}
     (nil))
(call_insn 23 22 25 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("mmap") [flags 0x41]  <function_decl 0x7f7cd133c000 mmap>) [0 mmap S1 A8])
            (const_int 0 [0]))) "function.c":602 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 25 23 26 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])
        (reg:DI 0 ax [174])) "function.c":602 85 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:QI 1 dx [orig:88 END.78_2 ] [88])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":605 88 {*movqi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":605 85 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (mem:QI (plus:DI (reg/f:DI 0 ax [175])
                (const_int 40 [0x28])) [0 playerinfo_94->request+0 S1 A64])
        (reg:QI 1 dx [orig:88 END.78_2 ] [88])) "function.c":605 88 {*movqi_internal}
     (nil))
(insn 29 28 30 2 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":607 85 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [176]) [10 createplayer_89->name1+0 S8 A64])) "function.c":607 85 {*movdi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":607 86 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":607 86 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":607 86 {*movsi_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _3 ] [89])) "function.c":607 85 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":607 88 {*movqi_internal}
     (nil))
(call_insn 36 35 38 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":607 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 38 36 39 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_p1+0 S8 A64])
        (reg:DI 0 ax [177])) "function.c":607 85 {*movdi_internal}
     (nil))
(insn 39 38 40 2 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":608 85 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [178])
                (const_int 8 [0x8])) [10 createplayer_89->name2+0 S8 A64])) "function.c":608 85 {*movdi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":608 86 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":608 86 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":608 86 {*movsi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 _4 ] [90])) "function.c":608 85 {*movdi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":608 88 {*movqi_internal}
     (nil))
(call_insn 46 45 48 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":608 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 48 46 49 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [18 sem_p1_pom+0 S8 A64])
        (reg:DI 0 ax [179])) "function.c":608 85 {*movdi_internal}
     (nil))
(call_insn 49 48 50 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("start_color") [flags 0x41]  <function_decl 0x7f7cd10bd300 start_color>) [0 start_color S1 A8])
            (const_int 0 [0]))) "function.c":610 700 {*call_value}
     (nil)
    (nil))
(insn 50 49 51 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":611 86 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":611 86 {*movsi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":611 86 {*movsi_internal}
     (nil))
(call_insn 53 52 54 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":611 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 54 53 55 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":612 86 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":612 86 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "function.c":612 86 {*movsi_internal}
     (nil))
(call_insn 57 56 58 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":612 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 58 57 59 2 (set (reg:SI 1 dx)
        (const_int 5 [0x5])) "function.c":613 86 {*movsi_internal}
     (nil))
(insn 59 58 60 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":613 86 {*movsi_internal}
     (nil))
(insn 60 59 61 2 (set (reg:SI 5 di)
        (const_int 6 [0x6])) "function.c":613 86 {*movsi_internal}
     (nil))
(call_insn 61 60 62 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":613 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 62 61 63 2 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "function.c":614 86 {*movsi_internal}
     (nil))
(insn 63 62 64 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":614 86 {*movsi_internal}
     (nil))
(insn 64 63 65 2 (set (reg:SI 5 di)
        (const_int 11 [0xb])) "function.c":614 86 {*movsi_internal}
     (nil))
(call_insn 65 64 66 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":614 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 66 65 67 2 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "function.c":615 86 {*movsi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":615 86 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:SI 5 di)
        (const_int 12 [0xc])) "function.c":615 86 {*movsi_internal}
     (nil))
(call_insn 69 68 683 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":615 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              28 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 180
(code_label 683 69 70 3 87 (nil) [1 uses])
(note 70 683 71 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 3 (set (reg:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_p1+0 S8 A64])) "function.c":620 85 {*movdi_internal}
     (nil))
(insn 72 71 73 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [180])) "function.c":620 85 {*movdi_internal}
     (nil))
(call_insn 73 72 74 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":620 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 74 73 695 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":622 86 {*movsi_internal}
     (nil))
(jump_insn 695 74 696 3 (set (pc)
        (label_ref 370)) "function.c":622 683 {jump}
     (nil)
 -> 370)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 696 695 372)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       25
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 372 696 77 4 84 (nil) [1 uses])
(note 77 372 78 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 697 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":624 86 {*movsi_internal}
     (nil))
(jump_insn 697 78 698 4 (set (pc)
        (label_ref 363)) "function.c":624 683 {jump}
     (nil)
 -> 363)
;;  succ:       23 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 698 697 365)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       23
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 181 182 183 184 185 186 187 188 189 190 191
(code_label 365 698 81 5 83 (nil) [1 uses])
(note 81 365 82 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 5 (set (reg:SI 0 ax [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":626 86 {*movsi_internal}
     (nil))
(insn 83 82 84 5 (parallel [
            (set (reg:SI 1 dx [orig:91 _5 ] [91])
                (plus:SI (reg:SI 0 ax [181])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":626 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 5 [0x5]))
        (nil)))
(insn 84 83 85 5 (set (reg:SI 0 ax [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":626 86 {*movsi_internal}
     (nil))
(insn 85 84 86 5 (parallel [
            (set (reg:SI 2 cx [orig:92 _6 ] [92])
                (plus:SI (reg:SI 0 ax [182])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":626 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 25 [0x19]))
        (nil)))
(insn 86 85 88 5 (set (reg/f:DI 0 ax [orig:93 stdscr.79_7 ] [93])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":626 85 {*movdi_internal}
     (nil))
(insn 88 86 89 5 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:92 _6 ] [92])) "function.c":626 86 {*movsi_internal}
     (nil))
(insn 89 88 90 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:93 stdscr.79_7 ] [93])) "function.c":626 85 {*movdi_internal}
     (nil))
(call_insn 90 89 91 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":626 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 91 90 92 5 (set (reg/f:DI 2 cx [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":627 85 {*movdi_internal}
     (nil))
(insn 92 91 93 5 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":627 86 {*movsi_internal}
     (nil))
(insn 93 92 94 5 (set (reg:DI 0 ax [184])
        (sign_extend:DI (reg:SI 0 ax [185]))) "function.c":627 149 {*extendsidi2_rex64}
     (nil))
(insn 94 93 95 5 (set (reg:SI 1 dx [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":627 86 {*movsi_internal}
     (nil))
(insn 95 94 96 5 (set (reg:DI 1 dx [186])
        (sign_extend:DI (reg:SI 1 dx [187]))) "function.c":627 149 {*extendsidi2_rex64}
     (nil))
(insn 96 95 97 5 (parallel [
            (set (reg:DI 1 dx [188])
                (mult:DI (reg:DI 1 dx [186])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 349 {*muldi3_1}
     (nil))
(insn 97 96 98 5 (parallel [
            (set (reg:DI 1 dx [189])
                (plus:DI (reg:DI 1 dx [188])
                    (reg/f:DI 2 cx [183])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 222 {*adddi_1}
     (nil))
(insn 98 97 99 5 (parallel [
            (set (reg:DI 0 ax [190])
                (plus:DI (reg:DI 0 ax [184])
                    (reg:DI 1 dx [189])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 222 {*adddi_1}
     (nil))
(insn 99 98 100 5 (parallel [
            (set (reg/f:DI 0 ax [191])
                (plus:DI (reg:DI 0 ax [190])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 222 {*adddi_1}
     (nil))
(insn 100 99 101 5 (set (reg:QI 0 ax [orig:94 _8 ] [94])
        (mem/j:QI (reg/f:DI 0 ax [191]) [0 playerinfo_94->area S1 A8])) "function.c":627 88 {*movqi_internal}
     (nil))
(insn 101 100 102 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 _8 ] [94])
            (const_int 77 [0x4d]))) "function.c":627 9 {*cmpqi_1}
     (nil))
(jump_insn 102 101 103 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "function.c":627 682 {*jcc}
     (nil)
 -> 119)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 96
(note 103 102 104 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 6 (set (reg/f:DI 0 ax [orig:95 stdscr.80_9 ] [95])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":629 85 {*movdi_internal}
     (nil))
(insn 105 104 106 6 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":629 85 {*movdi_internal}
     (nil))
(insn 106 105 107 6 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":629 86 {*movsi_internal}
     (nil))
(insn 107 106 108 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:95 stdscr.80_9 ] [95])) "function.c":629 85 {*movdi_internal}
     (nil))
(call_insn 108 107 109 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":629 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 109 108 110 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":630 85 {*movdi_internal}
     (nil))
(insn 110 109 111 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":630 88 {*movqi_internal}
     (nil))
(call_insn 111 110 112 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":630 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 112 111 113 6 (set (reg/f:DI 0 ax [orig:96 stdscr.81_10 ] [96])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":631 85 {*movdi_internal}
     (nil))
(insn 113 112 114 6 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":631 85 {*movdi_internal}
     (nil))
(insn 114 113 115 6 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":631 86 {*movsi_internal}
     (nil))
(insn 115 114 116 6 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:96 stdscr.81_10 ] [96])) "function.c":631 85 {*movdi_internal}
     (nil))
(call_insn 116 115 699 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":631 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 699 116 700 6 (set (pc)
        (label_ref 360)) 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 700 699 119)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 192 193 194 195 196 197 198 199 200
(code_label 119 700 120 7 75 (nil) [1 uses])
(note 120 119 121 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 7 (set (reg/f:DI 2 cx [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 122 121 123 7 (set (reg:SI 0 ax [194])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 123 122 124 7 (set (reg:DI 0 ax [193])
        (sign_extend:DI (reg:SI 0 ax [194]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 124 123 125 7 (set (reg:SI 1 dx [196])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 125 124 126 7 (set (reg:DI 1 dx [195])
        (sign_extend:DI (reg:SI 1 dx [196]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 7 (parallel [
            (set (reg:DI 1 dx [197])
                (mult:DI (reg:DI 1 dx [195])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (nil))
(insn 127 126 128 7 (parallel [
            (set (reg:DI 1 dx [198])
                (plus:DI (reg:DI 1 dx [197])
                    (reg/f:DI 2 cx [192])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 128 127 129 7 (parallel [
            (set (reg:DI 0 ax [199])
                (plus:DI (reg:DI 0 ax [193])
                    (reg:DI 1 dx [198])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 129 128 130 7 (parallel [
            (set (reg/f:DI 0 ax [200])
                (plus:DI (reg:DI 0 ax [199])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 130 129 131 7 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (mem/j:QI (reg/f:DI 0 ax [200]) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (nil))
(insn 131 130 132 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _11 ] [97])
            (const_int 49 [0x31]))) "function.c":633 9 {*cmpqi_1}
     (nil))
(jump_insn 132 131 133 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "function.c":633 682 {*jcc}
     (nil)
 -> 172)
;;  succ:       11
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 201 202 203 204 205 206 207 208 209
(note 133 132 134 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 8 (set (reg/f:DI 2 cx [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 135 134 136 8 (set (reg:SI 0 ax [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:DI 0 ax [202])
        (sign_extend:DI (reg:SI 0 ax [203]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 137 136 138 8 (set (reg:SI 1 dx [205])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 138 137 139 8 (set (reg:DI 1 dx [204])
        (sign_extend:DI (reg:SI 1 dx [205]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 139 138 140 8 (parallel [
            (set (reg:DI 1 dx [206])
                (mult:DI (reg:DI 1 dx [204])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (nil))
(insn 140 139 141 8 (parallel [
            (set (reg:DI 1 dx [207])
                (plus:DI (reg:DI 1 dx [206])
                    (reg/f:DI 2 cx [201])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 0 ax [208])
                (plus:DI (reg:DI 0 ax [202])
                    (reg:DI 1 dx [207])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 142 141 143 8 (parallel [
            (set (reg/f:DI 0 ax [209])
                (plus:DI (reg:DI 0 ax [208])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 143 142 144 8 (set (reg:QI 0 ax [orig:98 _12 ] [98])
        (mem/j:QI (reg/f:DI 0 ax [209]) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (nil))
(insn 144 143 145 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 _12 ] [98])
            (const_int 50 [0x32]))) "function.c":633 9 {*cmpqi_1}
     (nil))
(jump_insn 145 144 146 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "function.c":633 682 {*jcc}
     (nil)
 -> 172)
;;  succ:       11
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 210 211 212 213 214 215 216 217 218
(note 146 145 147 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 9 (set (reg/f:DI 2 cx [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 148 147 149 9 (set (reg:SI 0 ax [212])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 149 148 150 9 (set (reg:DI 0 ax [211])
        (sign_extend:DI (reg:SI 0 ax [212]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 150 149 151 9 (set (reg:SI 1 dx [214])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 151 150 152 9 (set (reg:DI 1 dx [213])
        (sign_extend:DI (reg:SI 1 dx [214]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 152 151 153 9 (parallel [
            (set (reg:DI 1 dx [215])
                (mult:DI (reg:DI 1 dx [213])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (nil))
(insn 153 152 154 9 (parallel [
            (set (reg:DI 1 dx [216])
                (plus:DI (reg:DI 1 dx [215])
                    (reg/f:DI 2 cx [210])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 154 153 155 9 (parallel [
            (set (reg:DI 0 ax [217])
                (plus:DI (reg:DI 0 ax [211])
                    (reg:DI 1 dx [216])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 155 154 156 9 (parallel [
            (set (reg/f:DI 0 ax [218])
                (plus:DI (reg:DI 0 ax [217])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 156 155 157 9 (set (reg:QI 0 ax [orig:99 _13 ] [99])
        (mem/j:QI (reg/f:DI 0 ax [218]) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (nil))
(insn 157 156 158 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 _13 ] [99])
            (const_int 51 [0x33]))) "function.c":633 9 {*cmpqi_1}
     (nil))
(jump_insn 158 157 159 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "function.c":633 682 {*jcc}
     (nil)
 -> 172)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 219 220 221 222 223 224 225 226 227
(note 159 158 160 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 10 (set (reg/f:DI 2 cx [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 161 160 162 10 (set (reg:SI 0 ax [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 162 161 163 10 (set (reg:DI 0 ax [220])
        (sign_extend:DI (reg:SI 0 ax [221]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 10 (set (reg:SI 1 dx [223])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 164 163 165 10 (set (reg:DI 1 dx [222])
        (sign_extend:DI (reg:SI 1 dx [223]))) "function.c":633 149 {*extendsidi2_rex64}
     (nil))
(insn 165 164 166 10 (parallel [
            (set (reg:DI 1 dx [224])
                (mult:DI (reg:DI 1 dx [222])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (nil))
(insn 166 165 167 10 (parallel [
            (set (reg:DI 1 dx [225])
                (plus:DI (reg:DI 1 dx [224])
                    (reg/f:DI 2 cx [219])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 167 166 168 10 (parallel [
            (set (reg:DI 0 ax [226])
                (plus:DI (reg:DI 0 ax [220])
                    (reg:DI 1 dx [225])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 168 167 169 10 (parallel [
            (set (reg/f:DI 0 ax [227])
                (plus:DI (reg:DI 0 ax [226])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (nil))
(insn 169 168 170 10 (set (reg:QI 0 ax [orig:100 _14 ] [100])
        (mem/j:QI (reg/f:DI 0 ax [227]) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (nil))
(insn 170 169 171 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:100 _14 ] [100])
            (const_int 52 [0x34]))) "function.c":633 9 {*cmpqi_1}
     (nil))
(jump_insn 171 170 172 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 201)
            (pc))) "function.c":633 682 {*jcc}
     (nil)
 -> 201)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       7
;;              8
;;              9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 102 103 104 228 229 230 231 232 233 234 235 236
(code_label 172 171 173 11 77 (nil) [3 uses])
(note 173 172 174 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 11 (set (reg/f:DI 0 ax [orig:101 stdscr.82_15 ] [101])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":635 85 {*movdi_internal}
     (nil))
(insn 175 174 176 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":635 85 {*movdi_internal}
     (nil))
(insn 176 175 177 11 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":635 86 {*movsi_internal}
     (nil))
(insn 177 176 178 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:101 stdscr.82_15 ] [101])) "function.c":635 85 {*movdi_internal}
     (nil))
(call_insn 178 177 179 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":635 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 179 178 180 11 (set (reg/f:DI 2 cx [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":636 85 {*movdi_internal}
     (nil))
(insn 180 179 181 11 (set (reg:SI 0 ax [230])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":636 86 {*movsi_internal}
     (nil))
(insn 181 180 182 11 (set (reg:DI 0 ax [229])
        (sign_extend:DI (reg:SI 0 ax [230]))) "function.c":636 149 {*extendsidi2_rex64}
     (nil))
(insn 182 181 183 11 (set (reg:SI 1 dx [232])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":636 86 {*movsi_internal}
     (nil))
(insn 183 182 184 11 (set (reg:DI 1 dx [231])
        (sign_extend:DI (reg:SI 1 dx [232]))) "function.c":636 149 {*extendsidi2_rex64}
     (nil))
(insn 184 183 185 11 (parallel [
            (set (reg:DI 1 dx [233])
                (mult:DI (reg:DI 1 dx [231])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 349 {*muldi3_1}
     (nil))
(insn 185 184 186 11 (parallel [
            (set (reg:DI 1 dx [234])
                (plus:DI (reg:DI 1 dx [233])
                    (reg/f:DI 2 cx [228])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 222 {*adddi_1}
     (nil))
(insn 186 185 187 11 (parallel [
            (set (reg:DI 0 ax [235])
                (plus:DI (reg:DI 0 ax [229])
                    (reg:DI 1 dx [234])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 222 {*adddi_1}
     (nil))
(insn 187 186 188 11 (parallel [
            (set (reg/f:DI 0 ax [236])
                (plus:DI (reg:DI 0 ax [235])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 222 {*adddi_1}
     (nil))
(insn 188 187 189 11 (set (reg:QI 0 ax [orig:102 _16 ] [102])
        (mem/j:QI (reg/f:DI 0 ax [236]) [0 playerinfo_94->area S1 A8])) "function.c":636 88 {*movqi_internal}
     (nil))
(insn 189 188 190 11 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (sign_extend:SI (reg:QI 0 ax [orig:102 _16 ] [102]))) "function.c":636 155 {extendqisi2}
     (nil))
(insn 190 189 191 11 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:103 _17 ] [103])) "function.c":636 86 {*movsi_internal}
     (nil))
(insn 191 190 192 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":636 85 {*movdi_internal}
     (nil))
(insn 192 191 193 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":636 88 {*movqi_internal}
     (nil))
(call_insn 193 192 194 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":636 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 194 193 195 11 (set (reg/f:DI 0 ax [orig:104 stdscr.83_18 ] [104])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":637 85 {*movdi_internal}
     (nil))
(insn 195 194 196 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":637 85 {*movdi_internal}
     (nil))
(insn 196 195 197 11 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":637 86 {*movsi_internal}
     (nil))
(insn 197 196 198 11 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:104 stdscr.83_18 ] [104])) "function.c":637 85 {*movdi_internal}
     (nil))
(call_insn 198 197 701 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":637 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 701 198 702 11 (set (pc)
        (label_ref 360)) "function.c":637 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 702 701 201)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 237 238 239 240 241 242 243 244 245
(code_label 201 702 202 12 78 (nil) [1 uses])
(note 202 201 203 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 12 (set (reg/f:DI 2 cx [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 204 203 205 12 (set (reg:SI 0 ax [239])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 205 204 206 12 (set (reg:DI 0 ax [238])
        (sign_extend:DI (reg:SI 0 ax [239]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 206 205 207 12 (set (reg:SI 1 dx [241])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 207 206 208 12 (set (reg:DI 1 dx [240])
        (sign_extend:DI (reg:SI 1 dx [241]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 208 207 209 12 (parallel [
            (set (reg:DI 1 dx [242])
                (mult:DI (reg:DI 1 dx [240])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (nil))
(insn 209 208 210 12 (parallel [
            (set (reg:DI 1 dx [243])
                (plus:DI (reg:DI 1 dx [242])
                    (reg/f:DI 2 cx [237])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 210 209 211 12 (parallel [
            (set (reg:DI 0 ax [244])
                (plus:DI (reg:DI 0 ax [238])
                    (reg:DI 1 dx [243])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 211 210 212 12 (parallel [
            (set (reg/f:DI 0 ax [245])
                (plus:DI (reg:DI 0 ax [244])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 212 211 213 12 (set (reg:QI 0 ax [orig:105 _19 ] [105])
        (mem/j:QI (reg/f:DI 0 ax [245]) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (nil))
(insn 213 212 214 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:105 _19 ] [105])
            (const_int 99 [0x63]))) "function.c":639 9 {*cmpqi_1}
     (nil))
(jump_insn 214 213 215 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "function.c":639 682 {*jcc}
     (nil)
 -> 254)
;;  succ:       16
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 246 247 248 249 250 251 252 253 254
(note 215 214 216 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 13 (set (reg/f:DI 2 cx [246])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 217 216 218 13 (set (reg:SI 0 ax [248])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 218 217 219 13 (set (reg:DI 0 ax [247])
        (sign_extend:DI (reg:SI 0 ax [248]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 219 218 220 13 (set (reg:SI 1 dx [250])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 220 219 221 13 (set (reg:DI 1 dx [249])
        (sign_extend:DI (reg:SI 1 dx [250]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 221 220 222 13 (parallel [
            (set (reg:DI 1 dx [251])
                (mult:DI (reg:DI 1 dx [249])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (nil))
(insn 222 221 223 13 (parallel [
            (set (reg:DI 1 dx [252])
                (plus:DI (reg:DI 1 dx [251])
                    (reg/f:DI 2 cx [246])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 223 222 224 13 (parallel [
            (set (reg:DI 0 ax [253])
                (plus:DI (reg:DI 0 ax [247])
                    (reg:DI 1 dx [252])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 224 223 225 13 (parallel [
            (set (reg/f:DI 0 ax [254])
                (plus:DI (reg:DI 0 ax [253])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 225 224 226 13 (set (reg:QI 0 ax [orig:106 _20 ] [106])
        (mem/j:QI (reg/f:DI 0 ax [254]) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (nil))
(insn 226 225 227 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:106 _20 ] [106])
            (const_int 116 [0x74]))) "function.c":639 9 {*cmpqi_1}
     (nil))
(jump_insn 227 226 228 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "function.c":639 682 {*jcc}
     (nil)
 -> 254)
;;  succ:       16
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 255 256 257 258 259 260 261 262 263
(note 228 227 229 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 14 (set (reg/f:DI 2 cx [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 230 229 231 14 (set (reg:SI 0 ax [257])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 231 230 232 14 (set (reg:DI 0 ax [256])
        (sign_extend:DI (reg:SI 0 ax [257]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 14 (set (reg:SI 1 dx [259])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 233 232 234 14 (set (reg:DI 1 dx [258])
        (sign_extend:DI (reg:SI 1 dx [259]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 234 233 235 14 (parallel [
            (set (reg:DI 1 dx [260])
                (mult:DI (reg:DI 1 dx [258])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (nil))
(insn 235 234 236 14 (parallel [
            (set (reg:DI 1 dx [261])
                (plus:DI (reg:DI 1 dx [260])
                    (reg/f:DI 2 cx [255])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 236 235 237 14 (parallel [
            (set (reg:DI 0 ax [262])
                (plus:DI (reg:DI 0 ax [256])
                    (reg:DI 1 dx [261])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 237 236 238 14 (parallel [
            (set (reg/f:DI 0 ax [263])
                (plus:DI (reg:DI 0 ax [262])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 238 237 239 14 (set (reg:QI 0 ax [orig:107 _21 ] [107])
        (mem/j:QI (reg/f:DI 0 ax [263]) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (nil))
(insn 239 238 240 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:107 _21 ] [107])
            (const_int 84 [0x54]))) "function.c":639 9 {*cmpqi_1}
     (nil))
(jump_insn 240 239 241 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "function.c":639 682 {*jcc}
     (nil)
 -> 254)
;;  succ:       16
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 264 265 266 267 268 269 270 271 272
(note 241 240 242 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 15 (set (reg/f:DI 2 cx [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 243 242 244 15 (set (reg:SI 0 ax [266])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 244 243 245 15 (set (reg:DI 0 ax [265])
        (sign_extend:DI (reg:SI 0 ax [266]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 245 244 246 15 (set (reg:SI 1 dx [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 246 245 247 15 (set (reg:DI 1 dx [267])
        (sign_extend:DI (reg:SI 1 dx [268]))) "function.c":639 149 {*extendsidi2_rex64}
     (nil))
(insn 247 246 248 15 (parallel [
            (set (reg:DI 1 dx [269])
                (mult:DI (reg:DI 1 dx [267])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (nil))
(insn 248 247 249 15 (parallel [
            (set (reg:DI 1 dx [270])
                (plus:DI (reg:DI 1 dx [269])
                    (reg/f:DI 2 cx [264])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 249 248 250 15 (parallel [
            (set (reg:DI 0 ax [271])
                (plus:DI (reg:DI 0 ax [265])
                    (reg:DI 1 dx [270])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 250 249 251 15 (parallel [
            (set (reg/f:DI 0 ax [272])
                (plus:DI (reg:DI 0 ax [271])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (nil))
(insn 251 250 252 15 (set (reg:QI 0 ax [orig:108 _22 ] [108])
        (mem/j:QI (reg/f:DI 0 ax [272]) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (nil))
(insn 252 251 253 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:108 _22 ] [108])
            (const_int 68 [0x44]))) "function.c":639 9 {*cmpqi_1}
     (nil))
(jump_insn 253 252 254 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "function.c":639 682 {*jcc}
     (nil)
 -> 283)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       12
;;              13
;;              14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 110 111 112 273 274 275 276 277 278 279 280 281
(code_label 254 253 255 16 79 (nil) [3 uses])
(note 255 254 256 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 16 (set (reg/f:DI 0 ax [orig:109 stdscr.84_23 ] [109])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":641 85 {*movdi_internal}
     (nil))
(insn 257 256 258 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":641 85 {*movdi_internal}
     (nil))
(insn 258 257 259 16 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":641 86 {*movsi_internal}
     (nil))
(insn 259 258 260 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:109 stdscr.84_23 ] [109])) "function.c":641 85 {*movdi_internal}
     (nil))
(call_insn 260 259 261 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":641 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 261 260 262 16 (set (reg/f:DI 2 cx [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":642 85 {*movdi_internal}
     (nil))
(insn 262 261 263 16 (set (reg:SI 0 ax [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":642 86 {*movsi_internal}
     (nil))
(insn 263 262 264 16 (set (reg:DI 0 ax [274])
        (sign_extend:DI (reg:SI 0 ax [275]))) "function.c":642 149 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 16 (set (reg:SI 1 dx [277])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":642 86 {*movsi_internal}
     (nil))
(insn 265 264 266 16 (set (reg:DI 1 dx [276])
        (sign_extend:DI (reg:SI 1 dx [277]))) "function.c":642 149 {*extendsidi2_rex64}
     (nil))
(insn 266 265 267 16 (parallel [
            (set (reg:DI 1 dx [278])
                (mult:DI (reg:DI 1 dx [276])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 349 {*muldi3_1}
     (nil))
(insn 267 266 268 16 (parallel [
            (set (reg:DI 1 dx [279])
                (plus:DI (reg:DI 1 dx [278])
                    (reg/f:DI 2 cx [273])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 222 {*adddi_1}
     (nil))
(insn 268 267 269 16 (parallel [
            (set (reg:DI 0 ax [280])
                (plus:DI (reg:DI 0 ax [274])
                    (reg:DI 1 dx [279])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 222 {*adddi_1}
     (nil))
(insn 269 268 270 16 (parallel [
            (set (reg/f:DI 0 ax [281])
                (plus:DI (reg:DI 0 ax [280])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 222 {*adddi_1}
     (nil))
(insn 270 269 271 16 (set (reg:QI 0 ax [orig:110 _24 ] [110])
        (mem/j:QI (reg/f:DI 0 ax [281]) [0 playerinfo_94->area S1 A8])) "function.c":642 88 {*movqi_internal}
     (nil))
(insn 271 270 272 16 (set (reg:SI 0 ax [orig:111 _25 ] [111])
        (sign_extend:SI (reg:QI 0 ax [orig:110 _24 ] [110]))) "function.c":642 155 {extendqisi2}
     (nil))
(insn 272 271 273 16 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:111 _25 ] [111])) "function.c":642 86 {*movsi_internal}
     (nil))
(insn 273 272 274 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":642 85 {*movdi_internal}
     (nil))
(insn 274 273 275 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":642 88 {*movqi_internal}
     (nil))
(call_insn 275 274 276 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":642 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 276 275 277 16 (set (reg/f:DI 0 ax [orig:112 stdscr.85_26 ] [112])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":643 85 {*movdi_internal}
     (nil))
(insn 277 276 278 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":643 85 {*movdi_internal}
     (nil))
(insn 278 277 279 16 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":643 86 {*movsi_internal}
     (nil))
(insn 279 278 280 16 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:112 stdscr.85_26 ] [112])) "function.c":643 85 {*movdi_internal}
     (nil))
(call_insn 280 279 703 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":643 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 703 280 704 16 (set (pc)
        (label_ref 360)) "function.c":643 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 704 703 283)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 282 283 284 285 286 287 288 289 290
(code_label 283 704 284 17 80 (nil) [1 uses])
(note 284 283 285 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 17 (set (reg/f:DI 2 cx [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":645 85 {*movdi_internal}
     (nil))
(insn 286 285 287 17 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":645 86 {*movsi_internal}
     (nil))
(insn 287 286 288 17 (set (reg:DI 0 ax [283])
        (sign_extend:DI (reg:SI 0 ax [284]))) "function.c":645 149 {*extendsidi2_rex64}
     (nil))
(insn 288 287 289 17 (set (reg:SI 1 dx [286])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":645 86 {*movsi_internal}
     (nil))
(insn 289 288 290 17 (set (reg:DI 1 dx [285])
        (sign_extend:DI (reg:SI 1 dx [286]))) "function.c":645 149 {*extendsidi2_rex64}
     (nil))
(insn 290 289 291 17 (parallel [
            (set (reg:DI 1 dx [287])
                (mult:DI (reg:DI 1 dx [285])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 349 {*muldi3_1}
     (nil))
(insn 291 290 292 17 (parallel [
            (set (reg:DI 1 dx [288])
                (plus:DI (reg:DI 1 dx [287])
                    (reg/f:DI 2 cx [282])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 222 {*adddi_1}
     (nil))
(insn 292 291 293 17 (parallel [
            (set (reg:DI 0 ax [289])
                (plus:DI (reg:DI 0 ax [283])
                    (reg:DI 1 dx [288])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 222 {*adddi_1}
     (nil))
(insn 293 292 294 17 (parallel [
            (set (reg/f:DI 0 ax [290])
                (plus:DI (reg:DI 0 ax [289])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 222 {*adddi_1}
     (nil))
(insn 294 293 295 17 (set (reg:QI 0 ax [orig:113 _27 ] [113])
        (mem/j:QI (reg/f:DI 0 ax [290]) [0 playerinfo_94->area S1 A8])) "function.c":645 88 {*movqi_internal}
     (nil))
(insn 295 294 296 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:113 _27 ] [113])
            (const_int 42 [0x2a]))) "function.c":645 9 {*cmpqi_1}
     (nil))
(jump_insn 296 295 297 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 313)
            (pc))) "function.c":645 682 {*jcc}
     (nil)
 -> 313)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 114 115
(note 297 296 298 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 18 (set (reg/f:DI 0 ax [orig:114 stdscr.86_28 ] [114])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":647 85 {*movdi_internal}
     (nil))
(insn 299 298 300 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":647 85 {*movdi_internal}
     (nil))
(insn 300 299 301 18 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":647 86 {*movsi_internal}
     (nil))
(insn 301 300 302 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:114 stdscr.86_28 ] [114])) "function.c":647 85 {*movdi_internal}
     (nil))
(call_insn 302 301 303 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":647 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 303 302 304 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7f7cd0f0d510 *.LC40>)) "function.c":648 85 {*movdi_internal}
     (nil))
(insn 304 303 305 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":648 88 {*movqi_internal}
     (nil))
(call_insn 305 304 306 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":648 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 306 305 307 18 (set (reg/f:DI 0 ax [orig:115 stdscr.87_29 ] [115])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":649 85 {*movdi_internal}
     (nil))
(insn 307 306 308 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":649 85 {*movdi_internal}
     (nil))
(insn 308 307 309 18 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":649 86 {*movsi_internal}
     (nil))
(insn 309 308 310 18 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:115 stdscr.87_29 ] [115])) "function.c":649 85 {*movdi_internal}
     (nil))
(call_insn 310 309 705 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":649 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 705 310 706 18 (set (pc)
        (label_ref 360)) 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 706 705 313)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 291 292 293 294 295 296 297 298 299
(code_label 313 706 314 19 81 (nil) [1 uses])
(note 314 313 315 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 315 314 316 19 (set (reg/f:DI 2 cx [291])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":651 85 {*movdi_internal}
     (nil))
(insn 316 315 317 19 (set (reg:SI 0 ax [293])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":651 86 {*movsi_internal}
     (nil))
(insn 317 316 318 19 (set (reg:DI 0 ax [292])
        (sign_extend:DI (reg:SI 0 ax [293]))) "function.c":651 149 {*extendsidi2_rex64}
     (nil))
(insn 318 317 319 19 (set (reg:SI 1 dx [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":651 86 {*movsi_internal}
     (nil))
(insn 319 318 320 19 (set (reg:DI 1 dx [294])
        (sign_extend:DI (reg:SI 1 dx [295]))) "function.c":651 149 {*extendsidi2_rex64}
     (nil))
(insn 320 319 321 19 (parallel [
            (set (reg:DI 1 dx [296])
                (mult:DI (reg:DI 1 dx [294])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 349 {*muldi3_1}
     (nil))
(insn 321 320 322 19 (parallel [
            (set (reg:DI 1 dx [297])
                (plus:DI (reg:DI 1 dx [296])
                    (reg/f:DI 2 cx [291])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 222 {*adddi_1}
     (nil))
(insn 322 321 323 19 (parallel [
            (set (reg:DI 0 ax [298])
                (plus:DI (reg:DI 0 ax [292])
                    (reg:DI 1 dx [297])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 222 {*adddi_1}
     (nil))
(insn 323 322 324 19 (parallel [
            (set (reg/f:DI 0 ax [299])
                (plus:DI (reg:DI 0 ax [298])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 222 {*adddi_1}
     (nil))
(insn 324 323 325 19 (set (reg:QI 0 ax [orig:116 _30 ] [116])
        (mem/j:QI (reg/f:DI 0 ax [299]) [0 playerinfo_94->area S1 A8])) "function.c":651 88 {*movqi_internal}
     (nil))
(insn 325 324 326 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:116 _30 ] [116])
            (const_int 65 [0x41]))) "function.c":651 9 {*cmpqi_1}
     (nil))
(jump_insn 326 325 327 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) "function.c":651 682 {*jcc}
     (nil)
 -> 343)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 118
(note 327 326 328 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 20 (set (reg/f:DI 0 ax [orig:117 stdscr.88_31 ] [117])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":653 85 {*movdi_internal}
     (nil))
(insn 329 328 330 20 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":653 85 {*movdi_internal}
     (nil))
(insn 330 329 331 20 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":653 86 {*movsi_internal}
     (nil))
(insn 331 330 332 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:117 stdscr.88_31 ] [117])) "function.c":653 85 {*movdi_internal}
     (nil))
(call_insn 332 331 333 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":653 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 333 332 334 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":654 85 {*movdi_internal}
     (nil))
(insn 334 333 335 20 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":654 88 {*movqi_internal}
     (nil))
(call_insn 335 334 336 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":654 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 336 335 337 20 (set (reg/f:DI 0 ax [orig:118 stdscr.89_32 ] [118])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":655 85 {*movdi_internal}
     (nil))
(insn 337 336 338 20 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":655 85 {*movdi_internal}
     (nil))
(insn 338 337 339 20 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":655 86 {*movsi_internal}
     (nil))
(insn 339 338 340 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:118 stdscr.89_32 ] [118])) "function.c":655 85 {*movdi_internal}
     (nil))
(call_insn 340 339 707 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":655 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 707 340 708 20 (set (pc)
        (label_ref 360)) 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 708 707 343)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 119 120 300 301 302 303 304 305 306 307 308
(code_label 343 708 344 21 82 (nil) [1 uses])
(note 344 343 345 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 345 344 346 21 (set (reg/f:DI 2 cx [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":659 85 {*movdi_internal}
     (nil))
(insn 346 345 347 21 (set (reg:SI 0 ax [302])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":659 86 {*movsi_internal}
     (nil))
(insn 347 346 348 21 (set (reg:DI 0 ax [301])
        (sign_extend:DI (reg:SI 0 ax [302]))) "function.c":659 149 {*extendsidi2_rex64}
     (nil))
(insn 348 347 349 21 (set (reg:SI 1 dx [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":659 86 {*movsi_internal}
     (nil))
(insn 349 348 350 21 (set (reg:DI 1 dx [303])
        (sign_extend:DI (reg:SI 1 dx [304]))) "function.c":659 149 {*extendsidi2_rex64}
     (nil))
(insn 350 349 351 21 (parallel [
            (set (reg:DI 1 dx [305])
                (mult:DI (reg:DI 1 dx [303])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 349 {*muldi3_1}
     (nil))
(insn 351 350 352 21 (parallel [
            (set (reg:DI 1 dx [306])
                (plus:DI (reg:DI 1 dx [305])
                    (reg/f:DI 2 cx [300])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 222 {*adddi_1}
     (nil))
(insn 352 351 353 21 (parallel [
            (set (reg:DI 0 ax [307])
                (plus:DI (reg:DI 0 ax [301])
                    (reg:DI 1 dx [306])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 222 {*adddi_1}
     (nil))
(insn 353 352 354 21 (parallel [
            (set (reg/f:DI 0 ax [308])
                (plus:DI (reg:DI 0 ax [307])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 222 {*adddi_1}
     (nil))
(insn 354 353 355 21 (set (reg:QI 0 ax [orig:119 _33 ] [119])
        (mem/j:QI (reg/f:DI 0 ax [308]) [0 playerinfo_94->area S1 A8])) "function.c":659 88 {*movqi_internal}
     (nil))
(insn 355 354 356 21 (set (reg:SI 0 ax [orig:120 _34 ] [120])
        (sign_extend:SI (reg:QI 0 ax [orig:119 _33 ] [119]))) "function.c":659 155 {extendqisi2}
     (nil))
(insn 356 355 357 21 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:120 _34 ] [120])) "function.c":659 86 {*movsi_internal}
     (nil))
(insn 357 356 358 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":659 85 {*movdi_internal}
     (nil))
(insn 358 357 359 21 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":659 88 {*movqi_internal}
     (nil))
(call_insn 359 358 360 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":659 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              6 [always] 
;;              11 [always] 
;;              16 [always] 
;;              18 [always] 
;;              20 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 360 359 361 22 76 (nil) [5 uses])
(note 361 360 362 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":624 221 {*addsi_1}
     (nil))
;;  succ:       23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              4 [always] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 363 362 364 23 74 (nil) [1 uses])
(note 364 363 366 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 366 364 367 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":624 11 {*cmpsi_1}
     (nil))
(jump_insn 367 366 368 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 365)
            (pc))) "function.c":624 682 {*jcc}
     (nil)
 -> 365)
;;  succ:       5
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 368 367 369 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 369 368 370 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":622 221 {*addsi_1}
     (nil))
;;  succ:       25 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 370 369 371 25 73 (nil) [1 uses])
(note 371 370 373 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 373 371 374 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":622 11 {*cmpsi_1}
     (nil))
(jump_insn 374 373 375 25 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) "function.c":622 682 {*jcc}
     (nil)
 -> 372)
;;  succ:       4
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 309 310 311 312 313 314 315 316 317
(note 375 374 376 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 376 375 377 26 (set (reg/f:DI 0 ax [orig:121 stdscr.90_35 ] [121])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":664 85 {*movdi_internal}
     (nil))
(insn 377 376 378 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":664 86 {*movsi_internal}
     (nil))
(insn 378 377 379 26 (set (reg:SI 4 si)
        (const_int 25 [0x19])) "function.c":664 86 {*movsi_internal}
     (nil))
(insn 379 378 380 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:121 stdscr.90_35 ] [121])) "function.c":664 85 {*movdi_internal}
     (nil))
(call_insn 380 379 381 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":664 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 381 380 382 26 (set (reg/f:DI 0 ax [309])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":665 85 {*movdi_internal}
     (nil))
(insn 382 381 383 26 (set (reg:SI 0 ax [orig:122 _36 ] [122])
        (mem:SI (plus:DI (reg/f:DI 0 ax [309])
                (const_int 4 [0x4])) [3 playerinfo_94->PID_serwer+0 S4 A32])) "function.c":665 86 {*movsi_internal}
     (nil))
(insn 383 382 384 26 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:122 _36 ] [122])) "function.c":665 86 {*movsi_internal}
     (nil))
(insn 384 383 385 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f7cd0ee26c0 *.LC5>)) "function.c":665 85 {*movdi_internal}
     (nil))
(insn 385 384 386 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":665 88 {*movqi_internal}
     (nil))
(call_insn 386 385 387 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":665 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 387 386 388 26 (set (reg/f:DI 0 ax [orig:123 stdscr.91_37 ] [123])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":667 85 {*movdi_internal}
     (nil))
(insn 388 387 389 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":667 86 {*movsi_internal}
     (nil))
(insn 389 388 390 26 (set (reg:SI 4 si)
        (const_int 26 [0x1a])) "function.c":667 86 {*movsi_internal}
     (nil))
(insn 390 389 391 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:123 stdscr.91_37 ] [123])) "function.c":667 85 {*movdi_internal}
     (nil))
(call_insn 391 390 392 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":667 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 392 391 393 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x7f7cd0f0d120 *.LC41>)) "function.c":668 85 {*movdi_internal}
     (nil))
(insn 393 392 394 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":668 88 {*movqi_internal}
     (nil))
(call_insn 394 393 395 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":668 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 395 394 396 26 (set (reg/f:DI 0 ax [orig:124 stdscr.92_38 ] [124])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":670 85 {*movdi_internal}
     (nil))
(insn 396 395 397 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":670 86 {*movsi_internal}
     (nil))
(insn 397 396 398 26 (set (reg:SI 4 si)
        (const_int 27 [0x1b])) "function.c":670 86 {*movsi_internal}
     (nil))
(insn 398 397 399 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:124 stdscr.92_38 ] [124])) "function.c":670 85 {*movdi_internal}
     (nil))
(call_insn 399 398 400 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":670 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 400 399 401 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC42") [flags 0x2]  <var_decl 0x7f7cd0aac480 *.LC42>)) "function.c":671 85 {*movdi_internal}
     (nil))
(insn 401 400 402 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":671 88 {*movqi_internal}
     (nil))
(call_insn 402 401 403 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":671 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 403 402 404 26 (set (reg/f:DI 0 ax [orig:125 stdscr.93_39 ] [125])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":673 85 {*movdi_internal}
     (nil))
(insn 404 403 405 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":673 86 {*movsi_internal}
     (nil))
(insn 405 404 406 26 (set (reg:SI 4 si)
        (const_int 28 [0x1c])) "function.c":673 86 {*movsi_internal}
     (nil))
(insn 406 405 407 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:125 stdscr.93_39 ] [125])) "function.c":673 85 {*movdi_internal}
     (nil))
(call_insn 407 406 408 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":673 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 408 407 409 26 (set (reg/f:DI 0 ax [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":674 85 {*movdi_internal}
     (nil))
(insn 409 408 410 26 (set (reg:SI 0 ax [orig:126 _40 ] [126])
        (mem:SI (plus:DI (reg/f:DI 0 ax [310])
                (const_int 22552 [0x5818])) [3 playerinfo_94->runda+0 S4 A64])) "function.c":674 86 {*movsi_internal}
     (nil))
(insn 410 409 411 26 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:126 _40 ] [126])) "function.c":674 86 {*movsi_internal}
     (nil))
(insn 411 410 412 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f7cd0ee27e0 *.LC7>)) "function.c":674 85 {*movdi_internal}
     (nil))
(insn 412 411 413 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":674 88 {*movqi_internal}
     (nil))
(call_insn 413 412 414 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":674 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 414 413 415 26 (set (reg/f:DI 0 ax [orig:127 stdscr.94_41 ] [127])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":676 85 {*movdi_internal}
     (nil))
(insn 415 414 416 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":676 86 {*movsi_internal}
     (nil))
(insn 416 415 417 26 (set (reg:SI 4 si)
        (const_int 30 [0x1e])) "function.c":676 86 {*movsi_internal}
     (nil))
(insn 417 416 418 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:127 stdscr.94_41 ] [127])) "function.c":676 85 {*movdi_internal}
     (nil))
(call_insn 418 417 419 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":676 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 419 418 420 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC43") [flags 0x2]  <var_decl 0x7f7cd0aac510 *.LC43>)) "function.c":677 85 {*movdi_internal}
     (nil))
(insn 420 419 421 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":677 88 {*movqi_internal}
     (nil))
(call_insn 421 420 422 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":677 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 422 421 423 26 (set (reg/f:DI 0 ax [orig:128 stdscr.95_42 ] [128])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":679 85 {*movdi_internal}
     (nil))
(insn 423 422 424 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":679 86 {*movsi_internal}
     (nil))
(insn 424 423 425 26 (set (reg:SI 4 si)
        (const_int 31 [0x1f])) "function.c":679 86 {*movsi_internal}
     (nil))
(insn 425 424 426 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:128 stdscr.95_42 ] [128])) "function.c":679 85 {*movdi_internal}
     (nil))
(call_insn 426 425 427 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":679 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 427 426 428 26 (set (reg/f:DI 0 ax [311])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":680 85 {*movdi_internal}
     (nil))
(insn 428 427 429 26 (set (reg:SI 0 ax [orig:129 _43 ] [129])
        (mem:SI (plus:DI (reg/f:DI 0 ax [311])
                (const_int 8 [0x8])) [3 playerinfo_94->numer+0 S4 A64])) "function.c":680 86 {*movsi_internal}
     (nil))
(insn 429 428 430 26 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:129 _43 ] [129])) "function.c":680 86 {*movsi_internal}
     (nil))
(insn 430 429 431 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x7f7cd0aac5a0 *.LC44>)) "function.c":680 85 {*movdi_internal}
     (nil))
(insn 431 430 432 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":680 88 {*movqi_internal}
     (nil))
(call_insn 432 431 433 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":680 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 433 432 434 26 (set (reg/f:DI 0 ax [orig:130 stdscr.96_44 ] [130])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":682 85 {*movdi_internal}
     (nil))
(insn 434 433 435 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":682 86 {*movsi_internal}
     (nil))
(insn 435 434 436 26 (set (reg:SI 4 si)
        (const_int 32 [0x20])) "function.c":682 86 {*movsi_internal}
     (nil))
(insn 436 435 437 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:130 stdscr.96_44 ] [130])) "function.c":682 85 {*movdi_internal}
     (nil))
(call_insn 437 436 438 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":682 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 438 437 439 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC45") [flags 0x2]  <var_decl 0x7f7cd0aac630 *.LC45>)) "function.c":683 85 {*movdi_internal}
     (nil))
(insn 439 438 440 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":683 88 {*movqi_internal}
     (nil))
(call_insn 440 439 441 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":683 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 441 440 442 26 (set (reg/f:DI 0 ax [orig:131 stdscr.97_45 ] [131])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":685 85 {*movdi_internal}
     (nil))
(insn 442 441 443 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":685 86 {*movsi_internal}
     (nil))
(insn 443 442 444 26 (set (reg:SI 4 si)
        (const_int 33 [0x21])) "function.c":685 86 {*movsi_internal}
     (nil))
(insn 444 443 445 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:131 stdscr.97_45 ] [131])) "function.c":685 85 {*movdi_internal}
     (nil))
(call_insn 445 444 446 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":685 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 446 445 447 26 (set (reg/f:DI 0 ax [312])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":686 85 {*movdi_internal}
     (nil))
(insn 447 446 448 26 (set (reg:SI 1 dx [orig:132 _46 ] [132])
        (mem:SI (plus:DI (reg/f:DI 0 ax [312])
                (const_int 16 [0x10])) [3 playerinfo_94->y_current+0 S4 A64])) "function.c":686 86 {*movsi_internal}
     (nil))
(insn 448 447 449 26 (set (reg/f:DI 0 ax [313])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":686 85 {*movdi_internal}
     (nil))
(insn 449 448 451 26 (set (reg:SI 0 ax [orig:133 _47 ] [133])
        (mem:SI (plus:DI (reg/f:DI 0 ax [313])
                (const_int 12 [0xc])) [3 playerinfo_94->x_current+0 S4 A32])) "function.c":686 86 {*movsi_internal}
     (nil))
(insn 451 449 452 26 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:133 _47 ] [133])) "function.c":686 86 {*movsi_internal}
     (nil))
(insn 452 451 453 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC46") [flags 0x2]  <var_decl 0x7f7cd0aac6c0 *.LC46>)) "function.c":686 85 {*movdi_internal}
     (nil))
(insn 453 452 454 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":686 88 {*movqi_internal}
     (nil))
(call_insn 454 453 455 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":686 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 455 454 456 26 (set (reg/f:DI 0 ax [orig:134 stdscr.98_48 ] [134])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":688 85 {*movdi_internal}
     (nil))
(insn 456 455 457 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":688 86 {*movsi_internal}
     (nil))
(insn 457 456 458 26 (set (reg:SI 4 si)
        (const_int 34 [0x22])) "function.c":688 86 {*movsi_internal}
     (nil))
(insn 458 457 459 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:134 stdscr.98_48 ] [134])) "function.c":688 85 {*movdi_internal}
     (nil))
(call_insn 459 458 460 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":688 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 460 459 461 26 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":689 85 {*movdi_internal}
     (nil))
(insn 461 460 462 26 (set (reg:SI 0 ax [orig:135 _49 ] [135])
        (mem:SI (plus:DI (reg/f:DI 0 ax [314])
                (const_int 28 [0x1c])) [3 playerinfo_94->deaths+0 S4 A32])) "function.c":689 86 {*movsi_internal}
     (nil))
(insn 462 461 463 26 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:135 _49 ] [135])) "function.c":689 86 {*movsi_internal}
     (nil))
(insn 463 462 464 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC47") [flags 0x2]  <var_decl 0x7f7cd0aac750 *.LC47>)) "function.c":689 85 {*movdi_internal}
     (nil))
(insn 464 463 465 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":689 88 {*movqi_internal}
     (nil))
(call_insn 465 464 466 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":689 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 466 465 467 26 (set (reg/f:DI 0 ax [orig:136 stdscr.99_50 ] [136])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":691 85 {*movdi_internal}
     (nil))
(insn 467 466 468 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":691 86 {*movsi_internal}
     (nil))
(insn 468 467 469 26 (set (reg:SI 4 si)
        (const_int 36 [0x24])) "function.c":691 86 {*movsi_internal}
     (nil))
(insn 469 468 470 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:136 stdscr.99_50 ] [136])) "function.c":691 85 {*movdi_internal}
     (nil))
(call_insn 470 469 471 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":691 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 471 470 472 26 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":692 85 {*movdi_internal}
     (nil))
(insn 472 471 473 26 (set (reg:SI 0 ax [orig:137 _51 ] [137])
        (mem:SI (plus:DI (reg/f:DI 0 ax [315])
                (const_int 32 [0x20])) [3 playerinfo_94->coins_carried+0 S4 A64])) "function.c":692 86 {*movsi_internal}
     (nil))
(insn 473 472 474 26 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:137 _51 ] [137])) "function.c":692 86 {*movsi_internal}
     (nil))
(insn 474 473 475 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC48") [flags 0x2]  <var_decl 0x7f7cd0aac7e0 *.LC48>)) "function.c":692 85 {*movdi_internal}
     (nil))
(insn 475 474 476 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":692 88 {*movqi_internal}
     (nil))
(call_insn 476 475 477 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":692 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 477 476 478 26 (set (reg/f:DI 0 ax [orig:138 stdscr.100_52 ] [138])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":694 85 {*movdi_internal}
     (nil))
(insn 478 477 479 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":694 86 {*movsi_internal}
     (nil))
(insn 479 478 480 26 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "function.c":694 86 {*movsi_internal}
     (nil))
(insn 480 479 481 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:138 stdscr.100_52 ] [138])) "function.c":694 85 {*movdi_internal}
     (nil))
(call_insn 481 480 482 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":694 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 482 481 483 26 (set (reg/f:DI 0 ax [316])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":695 85 {*movdi_internal}
     (nil))
(insn 483 482 484 26 (set (reg:SI 0 ax [orig:139 _53 ] [139])
        (mem:SI (plus:DI (reg/f:DI 0 ax [316])
                (const_int 36 [0x24])) [3 playerinfo_94->coins_brought+0 S4 A32])) "function.c":695 86 {*movsi_internal}
     (nil))
(insn 484 483 485 26 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:139 _53 ] [139])) "function.c":695 86 {*movsi_internal}
     (nil))
(insn 485 484 486 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC49") [flags 0x2]  <var_decl 0x7f7cd0aac870 *.LC49>)) "function.c":695 85 {*movdi_internal}
     (nil))
(insn 486 485 487 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":695 88 {*movqi_internal}
     (nil))
(call_insn 487 486 488 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":695 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 488 487 489 26 (set (reg/f:DI 0 ax [orig:140 stdscr.101_54 ] [140])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":697 85 {*movdi_internal}
     (nil))
(insn 489 488 490 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":697 86 {*movsi_internal}
     (nil))
(insn 490 489 491 26 (set (reg:SI 4 si)
        (const_int 40 [0x28])) "function.c":697 86 {*movsi_internal}
     (nil))
(insn 491 490 492 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:140 stdscr.101_54 ] [140])) "function.c":697 85 {*movdi_internal}
     (nil))
(call_insn 492 491 493 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":697 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 493 492 494 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f7cd0ee2c60 *.LC16>)) "function.c":698 85 {*movdi_internal}
     (nil))
(insn 494 493 495 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":698 88 {*movqi_internal}
     (nil))
(call_insn 495 494 496 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":698 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 496 495 497 26 (set (reg/f:DI 0 ax [orig:141 stdscr.102_55 ] [141])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":700 85 {*movdi_internal}
     (nil))
(insn 497 496 498 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":700 86 {*movsi_internal}
     (nil))
(insn 498 497 499 26 (set (reg:SI 4 si)
        (const_int 41 [0x29])) "function.c":700 86 {*movsi_internal}
     (nil))
(insn 499 498 500 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:141 stdscr.102_55 ] [141])) "function.c":700 85 {*movdi_internal}
     (nil))
(call_insn 500 499 501 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":700 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 501 500 502 26 (set (reg/f:DI 0 ax [orig:142 stdscr.103_56 ] [142])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":701 85 {*movdi_internal}
     (nil))
(insn 502 501 503 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":701 85 {*movdi_internal}
     (nil))
(insn 503 502 504 26 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":701 86 {*movsi_internal}
     (nil))
(insn 504 503 505 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:142 stdscr.103_56 ] [142])) "function.c":701 85 {*movdi_internal}
     (nil))
(call_insn 505 504 506 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":701 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 506 505 507 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f7cd0ee2cf0 *.LC17>)) "function.c":702 85 {*movdi_internal}
     (nil))
(insn 507 506 508 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":702 88 {*movqi_internal}
     (nil))
(call_insn 508 507 509 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":702 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 509 508 510 26 (set (reg/f:DI 0 ax [orig:143 stdscr.104_57 ] [143])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":703 85 {*movdi_internal}
     (nil))
(insn 510 509 511 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":703 85 {*movdi_internal}
     (nil))
(insn 511 510 512 26 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":703 86 {*movsi_internal}
     (nil))
(insn 512 511 513 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:143 stdscr.104_57 ] [143])) "function.c":703 85 {*movdi_internal}
     (nil))
(call_insn 513 512 514 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":703 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 514 513 515 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f7cd0ee2d80 *.LC18>)) "function.c":704 85 {*movdi_internal}
     (nil))
(insn 515 514 516 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":704 88 {*movqi_internal}
     (nil))
(call_insn 516 515 517 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":704 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 517 516 518 26 (set (reg/f:DI 0 ax [orig:144 stdscr.105_58 ] [144])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":706 85 {*movdi_internal}
     (nil))
(insn 518 517 519 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":706 86 {*movsi_internal}
     (nil))
(insn 519 518 520 26 (set (reg:SI 4 si)
        (const_int 42 [0x2a])) "function.c":706 86 {*movsi_internal}
     (nil))
(insn 520 519 521 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:144 stdscr.105_58 ] [144])) "function.c":706 85 {*movdi_internal}
     (nil))
(call_insn 521 520 522 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":706 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 522 521 523 26 (set (reg/f:DI 0 ax [orig:145 stdscr.106_59 ] [145])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":707 85 {*movdi_internal}
     (nil))
(insn 523 522 524 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":707 85 {*movdi_internal}
     (nil))
(insn 524 523 525 26 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":707 86 {*movsi_internal}
     (nil))
(insn 525 524 526 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:145 stdscr.106_59 ] [145])) "function.c":707 85 {*movdi_internal}
     (nil))
(call_insn 526 525 527 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":707 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 527 526 528 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":708 85 {*movdi_internal}
     (nil))
(insn 528 527 529 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":708 88 {*movqi_internal}
     (nil))
(call_insn 529 528 530 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":708 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 530 529 531 26 (set (reg/f:DI 0 ax [orig:146 stdscr.107_60 ] [146])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":709 85 {*movdi_internal}
     (nil))
(insn 531 530 532 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":709 85 {*movdi_internal}
     (nil))
(insn 532 531 533 26 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":709 86 {*movsi_internal}
     (nil))
(insn 533 532 534 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:146 stdscr.107_60 ] [146])) "function.c":709 85 {*movdi_internal}
     (nil))
(call_insn 534 533 535 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":709 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 535 534 536 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f7cd0ee2e10 *.LC19>)) "function.c":710 85 {*movdi_internal}
     (nil))
(insn 536 535 537 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":710 88 {*movqi_internal}
     (nil))
(call_insn 537 536 538 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":710 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 538 537 539 26 (set (reg/f:DI 0 ax [orig:147 stdscr.108_61 ] [147])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":712 85 {*movdi_internal}
     (nil))
(insn 539 538 540 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":712 86 {*movsi_internal}
     (nil))
(insn 540 539 541 26 (set (reg:SI 4 si)
        (const_int 43 [0x2b])) "function.c":712 86 {*movsi_internal}
     (nil))
(insn 541 540 542 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:147 stdscr.108_61 ] [147])) "function.c":712 85 {*movdi_internal}
     (nil))
(call_insn 542 541 543 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":712 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 543 542 544 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f7cd0ee2ea0 *.LC20>)) "function.c":713 85 {*movdi_internal}
     (nil))
(insn 544 543 545 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":713 88 {*movqi_internal}
     (nil))
(call_insn 545 544 546 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":713 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 546 545 547 26 (set (reg/f:DI 0 ax [orig:148 stdscr.109_62 ] [148])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":715 85 {*movdi_internal}
     (nil))
(insn 547 546 548 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":715 86 {*movsi_internal}
     (nil))
(insn 548 547 549 26 (set (reg:SI 4 si)
        (const_int 44 [0x2c])) "function.c":715 86 {*movsi_internal}
     (nil))
(insn 549 548 550 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:148 stdscr.109_62 ] [148])) "function.c":715 85 {*movdi_internal}
     (nil))
(call_insn 550 549 551 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":715 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 551 550 552 26 (set (reg/f:DI 0 ax [orig:149 stdscr.110_63 ] [149])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":716 85 {*movdi_internal}
     (nil))
(insn 552 551 553 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":716 85 {*movdi_internal}
     (nil))
(insn 553 552 554 26 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":716 86 {*movsi_internal}
     (nil))
(insn 554 553 555 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:149 stdscr.110_63 ] [149])) "function.c":716 85 {*movdi_internal}
     (nil))
(call_insn 555 554 556 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":716 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 556 555 557 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f7cd0ee2f30 *.LC21>)) "function.c":717 85 {*movdi_internal}
     (nil))
(insn 557 556 558 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":717 88 {*movqi_internal}
     (nil))
(call_insn 558 557 559 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":717 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 559 558 560 26 (set (reg/f:DI 0 ax [orig:150 stdscr.111_64 ] [150])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":718 85 {*movdi_internal}
     (nil))
(insn 560 559 561 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":718 85 {*movdi_internal}
     (nil))
(insn 561 560 562 26 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":718 86 {*movsi_internal}
     (nil))
(insn 562 561 563 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:150 stdscr.111_64 ] [150])) "function.c":718 85 {*movdi_internal}
     (nil))
(call_insn 563 562 564 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":718 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 564 563 565 26 (set (reg/f:DI 0 ax [orig:151 stdscr.112_65 ] [151])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":720 85 {*movdi_internal}
     (nil))
(insn 565 564 566 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":720 86 {*movsi_internal}
     (nil))
(insn 566 565 567 26 (set (reg:SI 4 si)
        (const_int 45 [0x2d])) "function.c":720 86 {*movsi_internal}
     (nil))
(insn 567 566 568 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:151 stdscr.112_65 ] [151])) "function.c":720 85 {*movdi_internal}
     (nil))
(call_insn 568 567 569 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":720 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 569 568 570 26 (set (reg/f:DI 0 ax [orig:152 stdscr.113_66 ] [152])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":721 85 {*movdi_internal}
     (nil))
(insn 570 569 571 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":721 85 {*movdi_internal}
     (nil))
(insn 571 570 572 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":721 86 {*movsi_internal}
     (nil))
(insn 572 571 573 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:152 stdscr.113_66 ] [152])) "function.c":721 85 {*movdi_internal}
     (nil))
(call_insn 573 572 574 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":721 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 574 573 575 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f7cd0ef3000 *.LC22>)) "function.c":722 85 {*movdi_internal}
     (nil))
(insn 575 574 576 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":722 88 {*movqi_internal}
     (nil))
(call_insn 576 575 577 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":722 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 577 576 578 26 (set (reg/f:DI 0 ax [orig:153 stdscr.114_67 ] [153])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":723 85 {*movdi_internal}
     (nil))
(insn 578 577 579 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":723 85 {*movdi_internal}
     (nil))
(insn 579 578 580 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":723 86 {*movsi_internal}
     (nil))
(insn 580 579 581 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:153 stdscr.114_67 ] [153])) "function.c":723 85 {*movdi_internal}
     (nil))
(call_insn 581 580 582 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":723 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 582 581 583 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC50") [flags 0x2]  <var_decl 0x7f7cd0aac900 *.LC50>)) "function.c":724 85 {*movdi_internal}
     (nil))
(insn 583 582 584 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":724 88 {*movqi_internal}
     (nil))
(call_insn 584 583 585 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":724 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 585 584 586 26 (set (reg/f:DI 0 ax [orig:154 stdscr.115_68 ] [154])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":725 85 {*movdi_internal}
     (nil))
(insn 586 585 587 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":725 85 {*movdi_internal}
     (nil))
(insn 587 586 588 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":725 86 {*movsi_internal}
     (nil))
(insn 588 587 589 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:154 stdscr.115_68 ] [154])) "function.c":725 85 {*movdi_internal}
     (nil))
(call_insn 589 588 590 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":725 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 590 589 591 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f7cd0ef3120 *.LC24>)) "function.c":726 85 {*movdi_internal}
     (nil))
(insn 591 590 592 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":726 88 {*movqi_internal}
     (nil))
(call_insn 592 591 593 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":726 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 593 592 594 26 (set (reg/f:DI 0 ax [orig:155 stdscr.116_69 ] [155])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":727 85 {*movdi_internal}
     (nil))
(insn 594 593 595 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":727 85 {*movdi_internal}
     (nil))
(insn 595 594 596 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":727 86 {*movsi_internal}
     (nil))
(insn 596 595 597 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:155 stdscr.116_69 ] [155])) "function.c":727 85 {*movdi_internal}
     (nil))
(call_insn 597 596 598 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":727 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 598 597 599 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f7cd0ef31b0 *.LC25>)) "function.c":728 85 {*movdi_internal}
     (nil))
(insn 599 598 600 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":728 88 {*movqi_internal}
     (nil))
(call_insn 600 599 601 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":728 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 601 600 602 26 (set (reg/f:DI 0 ax [orig:156 stdscr.117_70 ] [156])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":730 85 {*movdi_internal}
     (nil))
(insn 602 601 603 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":730 86 {*movsi_internal}
     (nil))
(insn 603 602 604 26 (set (reg:SI 4 si)
        (const_int 46 [0x2e])) "function.c":730 86 {*movsi_internal}
     (nil))
(insn 604 603 605 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:156 stdscr.117_70 ] [156])) "function.c":730 85 {*movdi_internal}
     (nil))
(call_insn 605 604 606 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":730 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 606 605 607 26 (set (reg/f:DI 0 ax [orig:157 stdscr.118_71 ] [157])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":731 85 {*movdi_internal}
     (nil))
(insn 607 606 608 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":731 85 {*movdi_internal}
     (nil))
(insn 608 607 609 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":731 86 {*movsi_internal}
     (nil))
(insn 609 608 610 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:157 stdscr.118_71 ] [157])) "function.c":731 85 {*movdi_internal}
     (nil))
(call_insn 610 609 611 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":731 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 611 610 612 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f7cd0ef3240 *.LC26>)) "function.c":732 85 {*movdi_internal}
     (nil))
(insn 612 611 613 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":732 88 {*movqi_internal}
     (nil))
(call_insn 613 612 614 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":732 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 614 613 615 26 (set (reg/f:DI 0 ax [orig:158 stdscr.119_72 ] [158])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":733 85 {*movdi_internal}
     (nil))
(insn 615 614 616 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":733 85 {*movdi_internal}
     (nil))
(insn 616 615 617 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":733 86 {*movsi_internal}
     (nil))
(insn 617 616 618 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:158 stdscr.119_72 ] [158])) "function.c":733 85 {*movdi_internal}
     (nil))
(call_insn 618 617 619 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":733 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 619 618 620 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f7cd0ef32d0 *.LC27>)) "function.c":734 85 {*movdi_internal}
     (nil))
(insn 620 619 621 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":734 88 {*movqi_internal}
     (nil))
(call_insn 621 620 622 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":734 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 622 621 623 26 (set (reg/f:DI 0 ax [orig:159 stdscr.120_73 ] [159])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":736 85 {*movdi_internal}
     (nil))
(insn 623 622 624 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":736 86 {*movsi_internal}
     (nil))
(insn 624 623 625 26 (set (reg:SI 4 si)
        (const_int 47 [0x2f])) "function.c":736 86 {*movsi_internal}
     (nil))
(insn 625 624 626 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:159 stdscr.120_73 ] [159])) "function.c":736 85 {*movdi_internal}
     (nil))
(call_insn 626 625 627 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":736 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 627 626 628 26 (set (reg/f:DI 0 ax [orig:160 stdscr.121_74 ] [160])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":737 85 {*movdi_internal}
     (nil))
(insn 628 627 629 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":737 85 {*movdi_internal}
     (nil))
(insn 629 628 630 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":737 86 {*movsi_internal}
     (nil))
(insn 630 629 631 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:160 stdscr.121_74 ] [160])) "function.c":737 85 {*movdi_internal}
     (nil))
(call_insn 631 630 632 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":737 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 632 631 633 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f7cd0ef3360 *.LC28>)) "function.c":738 85 {*movdi_internal}
     (nil))
(insn 633 632 634 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":738 88 {*movqi_internal}
     (nil))
(call_insn 634 633 635 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":738 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 635 634 636 26 (set (reg/f:DI 0 ax [orig:161 stdscr.122_75 ] [161])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":739 85 {*movdi_internal}
     (nil))
(insn 636 635 637 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":739 85 {*movdi_internal}
     (nil))
(insn 637 636 638 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":739 86 {*movsi_internal}
     (nil))
(insn 638 637 639 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:161 stdscr.122_75 ] [161])) "function.c":739 85 {*movdi_internal}
     (nil))
(call_insn 639 638 640 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":739 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 640 639 641 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f7cd0ef33f0 *.LC29>)) "function.c":740 85 {*movdi_internal}
     (nil))
(insn 641 640 642 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":740 88 {*movqi_internal}
     (nil))
(call_insn 642 641 643 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":740 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 643 642 644 26 (set (reg/f:DI 0 ax [orig:162 stdscr.123_76 ] [162])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":742 85 {*movdi_internal}
     (nil))
(insn 644 643 645 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":742 86 {*movsi_internal}
     (nil))
(insn 645 644 646 26 (set (reg:SI 4 si)
        (const_int 48 [0x30])) "function.c":742 86 {*movsi_internal}
     (nil))
(insn 646 645 647 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:162 stdscr.123_76 ] [162])) "function.c":742 85 {*movdi_internal}
     (nil))
(call_insn 647 646 648 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":742 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 648 647 649 26 (set (reg/f:DI 0 ax [orig:163 stdscr.124_77 ] [163])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":743 85 {*movdi_internal}
     (nil))
(insn 649 648 650 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":743 85 {*movdi_internal}
     (nil))
(insn 650 649 651 26 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":743 86 {*movsi_internal}
     (nil))
(insn 651 650 652 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:163 stdscr.124_77 ] [163])) "function.c":743 85 {*movdi_internal}
     (nil))
(call_insn 652 651 653 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":743 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 653 652 654 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":744 85 {*movdi_internal}
     (nil))
(insn 654 653 655 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":744 88 {*movqi_internal}
     (nil))
(call_insn 655 654 656 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":744 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 656 655 657 26 (set (reg/f:DI 0 ax [orig:164 stdscr.125_78 ] [164])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":745 85 {*movdi_internal}
     (nil))
(insn 657 656 658 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":745 85 {*movdi_internal}
     (nil))
(insn 658 657 659 26 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":745 86 {*movsi_internal}
     (nil))
(insn 659 658 660 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:164 stdscr.125_78 ] [164])) "function.c":745 85 {*movdi_internal}
     (nil))
(call_insn 660 659 661 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":745 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 661 660 662 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f7cd0ef3510 *.LC31>)) "function.c":746 85 {*movdi_internal}
     (nil))
(insn 662 661 663 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":746 88 {*movqi_internal}
     (nil))
(call_insn 663 662 664 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":746 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 664 663 665 26 (set (reg/f:DI 0 ax [orig:165 stdscr.126_79 ] [165])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":747 85 {*movdi_internal}
     (nil))
(insn 665 664 666 26 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:165 stdscr.126_79 ] [165])) "function.c":747 85 {*movdi_internal}
     (nil))
(call_insn 666 665 667 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wrefresh") [flags 0x41]  <function_decl 0x7f7cd10cd300 wrefresh>) [0 wrefresh S1 A8])
            (const_int 0 [0]))) "function.c":747 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 667 666 668 26 (set (reg:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [18 sem_p1_pom+0 S8 A64])) "function.c":748 85 {*movdi_internal}
     (nil))
(insn 668 667 669 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [317])) "function.c":748 85 {*movdi_internal}
     (nil))
(call_insn 669 668 670 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":748 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 670 669 671 26 (set (reg:QI 0 ax [orig:166 END.127_80 ] [166])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":749 88 {*movqi_internal}
     (nil))
(insn 671 670 672 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:166 END.127_80 ] [166])
            (const_int 113 [0x71]))) "function.c":749 9 {*cmpqi_1}
     (nil))
(jump_insn 672 671 673 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 681)
            (pc))) "function.c":749 682 {*jcc}
     (nil)
 -> 681)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 167 168 318
(note 673 672 674 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 674 673 675 27 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":751 85 {*movdi_internal}
     (nil))
(insn 675 674 676 27 (set (reg/f:DI 0 ax [orig:167 _81 ] [167])
        (mem/f:DI (reg/f:DI 0 ax [318]) [10 createplayer_89->name1+0 S8 A64])) "function.c":751 85 {*movdi_internal}
     (nil))
(insn 676 675 677 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:167 _81 ] [167])) "function.c":751 85 {*movdi_internal}
     (nil))
(call_insn 677 676 678 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":751 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 678 677 710 27 (set (reg/f:DI 0 ax [orig:168 _195 ] [168])
        (const_int 0 [0])) "function.c":752 85 {*movdi_internal}
     (nil))
(jump_insn 710 678 711 27 (set (pc)
        (label_ref 709)) "function.c":752 683 {jump}
     (nil)
 -> 709)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168

(barrier 711 710 681)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 681 711 682 28 85 (nil) [1 uses])
(note 682 681 712 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(jump_insn 712 682 713 28 (set (pc)
        (label_ref 683)) "function.c":620 683 {jump}
     (nil)
 -> 683)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 713 712 709)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 1, flags: (RTL, MODIFIED)
;;  pred:       27 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  def 	 0 [ax] 169
(code_label 709 713 687 29 88 (nil) [1 uses])
(note 687 709 692 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 692 687 693 29 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:169 <retval> ] [169])) "function.c":756 85 {*movdi_internal}
     (nil))
(insn 693 692 714 29 (use (reg/i:DI 0 ax)) "function.c":756 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 714 693 0 NOTE_INSN_DELETED)

;; Function random_return (random_return, funcdef_no=13, decl_uid=6230, cgraph_uid=13, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 2:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 11:  (0) r  (1) r  (2) le {*addsi_1}
            1 Early clobber: reject++
            2 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 12:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
      Creating newreg=98 from oldreg=87, assigning class AREG to r98
   12: {r98:SI=r98:SI/r89:SI;r94:SI=r98:SI%r89:SI;clobber flags:CC;}
      REG_DEAD r89:SI
      REG_DEAD r87:SI
      REG_UNUSED r95:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   26: r98:SI=r87:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*addsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 22: point = 0, n_alt = -2
   Insn 18: point = 1, n_alt = -2
   Insn 15: point = 3, n_alt = 0
   Insn 14: point = 5, n_alt = 0
   Insn 13: point = 6, n_alt = -2
   Insn 12: point = 8, n_alt = 0
   Insn 26: point = 10, n_alt = -2
	Hard reg 1 is preferable by r98 with profit 1000
   Insn 11: point = 12, n_alt = 3
   Insn 10: point = 14, n_alt = 1
   Insn 9: point = 16, n_alt = 0
   Insn 8: point = 17, n_alt = -2
   Insn 7: point = 18, n_alt = 0
   Insn 3: point = 18, n_alt = 1
   Insn 2: point = 18, n_alt = 1
 r87: [11..17]
 r88: [13..14]
 r89: [9..12]
 r90: [4..6]
 r91: [2..3]
 r92: [0..1]
 r93: [15..16]
 r94: [7..9]
 r96: [4..5]
 r98: [8..10]
Compressing live ranges: from 18 to 15 - 83%
Ranges after the compression:
 r87: [9..14]
 r88: [11..12]
 r89: [7..10]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [13..14]
 r94: [6..7]
 r96: [4..5]
 r98: [6..8]

********** Assignment #1: **********

	 Assigning to 98 (cl=AREG, orig=87, freq=2000, tfirst=98, tfreq=2000)...
	   Assign 0 to reload r98 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18
changing reg in insn 22
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
deleting insn with uid = 13.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.


random_return

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,9u} r1={4d,2u,1e} r2={3d,2u} r4={2d,1u} r5={2d,1u} r6={1d,7u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={5d} r18={1d} r19={1d} r20={1d,1u,3e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 134{104d,26u,4e} in 13{12 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (reg:SI 5 di [ low ])) "function.c":759 86 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (reg:SI 4 si [ upp ])) "function.c":759 86 {*movsi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 7 4 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f7cd0fe1600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "function.c":760 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 8 7 9 2 (set (reg:SI 1 dx [orig:87 _1 ] [87])
        (reg:SI 0 ax)) "function.c":760 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [93])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":760 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 0 ax [orig:88 _2 ] [88])
                (minus:SI (reg:SI 0 ax [93])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 277 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
        (nil)))
(insn 11 10 26 2 (parallel [
            (set (reg:SI 2 cx [orig:89 _3 ] [89])
                (plus:SI (reg:SI 0 ax [orig:88 _2 ] [88])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 221 {*addsi_1}
     (nil))
(insn 26 11 12 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (reg:SI 1 dx [orig:87 _1 ] [87])) "function.c":760 86 {*movsi_internal}
     (nil))
(insn 12 26 14 2 (parallel [
            (set (reg:SI 0 ax [orig:87 _1 ] [87])
                (div:SI (reg:SI 0 ax [orig:87 _1 ] [87])
                    (reg:SI 2 cx [orig:89 _3 ] [89])))
            (set (reg:SI 1 dx [94])
                (mod:SI (reg:SI 0 ax [orig:87 _1 ] [87])
                    (reg:SI 2 cx [orig:89 _3 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 382 {*divmodsi4}
     (nil))
(insn 14 12 15 2 (set (reg:SI 0 ax [96])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":760 86 {*movsi_internal}
     (nil))
(insn 15 14 22 2 (parallel [
            (set (reg:SI 0 ax [orig:91 _9 ] [91])
                (plus:SI (reg:SI 0 ax [96])
                    (reg:SI 1 dx [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:90 _4 ] [90])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
        (nil)))
(insn 22 15 23 2 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:92 <retval> ] [92])) "function.c":761 86 {*movsi_internal}
     (nil))
(insn 23 22 25 2 (use (reg/i:SI 0 ax)) "function.c":761 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 25 23 0 NOTE_INSN_DELETED)

;; Function player_set (player_set, funcdef_no=14, decl_uid=6232, cgraph_uid=14, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) rm  (1) re {*cmpdi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 47: point = 0, n_alt = -1
   Insn 46: point = 0, n_alt = -2
   Insn 42: point = 1, n_alt = -2
  BB 5
   Insn 51: point = 4, n_alt = -1
   Insn 34: point = 4, n_alt = 2
  BB 3
   Insn 49: point = 5, n_alt = -1
   Insn 16: point = 5, n_alt = 2
  BB 6
   Insn 39: point = 6, n_alt = 3
  BB 4
   Insn 32: point = 7, n_alt = -1
   Insn 31: point = 7, n_alt = 0
   Insn 30: point = 7, n_alt = 5
   Insn 29: point = 8, n_alt = -2
   Insn 28: point = 9, n_alt = 0
   Insn 27: point = 9, n_alt = 2
   Insn 26: point = 9, n_alt = 2
   Insn 25: point = 9, n_alt = 0
   Insn 24: point = 9, n_alt = 0
   Insn 23: point = 9, n_alt = -2
   Insn 22: point = 10, n_alt = 2
   Insn 21: point = 10, n_alt = 0
  BB 2
   Insn 14: point = 11, n_alt = -1
   Insn 13: point = 11, n_alt = 0
   Insn 12: point = 11, n_alt = 1
   Insn 11: point = 12, n_alt = -2
   Insn 10: point = 13, n_alt = 0
   Insn 9: point = 13, n_alt = -2
   Insn 8: point = 14, n_alt = 0
   Insn 7: point = 14, n_alt = 0
   Insn 6: point = 14, n_alt = 3
   Insn 2: point = 15, n_alt = 5
 r87: [2..6]
 r88: [0..1]
 r89: [13..14]
 r90: [11..12]
 r91: [9..10]
 r92: [7..8]
Compressing live ranges: from 15 to 12 - 80%
Ranges after the compression:
 r87: [2..3]
 r88: [0..1]
 r89: [10..11]
 r90: [8..9]
 r91: [6..7]
 r92: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 39
changing reg in insn 34
changing reg in insn 16
changing reg in insn 42
changing reg in insn 42
changing reg in insn 46
changing reg in insn 6
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 21
changing reg in insn 23
changing reg in insn 29
changing reg in insn 30
deleting insn with uid = 11.
deleting insn with uid = 29.
deleting insn with uid = 42.
starting the processing of deferred insns
ending the processing of deferred insns


player_set

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={9d,7u} r1={5d,2u} r2={4d,1u} r4={5d,2u} r5={5d,3u} r6={1d,15u} r7={1d,9u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r20={1d,1u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={4d,1u} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 223{179d,44u,0e} in 27{25 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [10 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":764 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [10 pom+0 S8 A64])) "function.c":765 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":765 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 4 si)
        (const_int 66 [0x42])) "function.c":765 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "function.c":765 85 {*movdi_internal}
     (nil))
(call_insn 10 9 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_open") [flags 0x41]  <function_decl 0x7f7cd133cb00 shm_open>) [0 shm_open S1 A8])
            (const_int 0 [0]))) "function.c":765 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 12 10 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 fd+0 S4 A32])
        (reg:SI 0 ax [90])) "function.c":765 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 fd+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "function.c":766 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "function.c":766 682 {*jcc}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 49 3 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (const_int 0 [0])) "function.c":768 85 {*movdi_internal}
     (nil))
(jump_insn 49 16 50 3 (set (pc)
        (label_ref 40)) "function.c":768 683 {jump}
     (nil)
 -> 40)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 50 49 19)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92
(code_label 19 50 20 4 92 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 0 ax [91])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 fd+0 S4 A32])) "function.c":770 86 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 38 r9)
        (const_int 0 [0])) "function.c":770 85 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 37 r8)
        (reg:SI 0 ax [91])) "function.c":770 86 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "function.c":770 86 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":770 86 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":770 85 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":770 85 {*movdi_internal}
     (nil))
(call_insn 28 27 30 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("mmap") [flags 0x41]  <function_decl 0x7f7cd133c000 mmap>) [0 mmap S1 A8])
            (const_int 0 [0]))) "function.c":770 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 30 28 31 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [14 playerinfo+0 S8 A64])
        (reg:DI 0 ax [92])) "function.c":770 85 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [14 playerinfo+0 S8 A64])
            (const_int -1 [0xffffffffffffffff]))) "function.c":772 12 {*cmpdi_1}
     (nil))
(jump_insn 32 31 33 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "function.c":772 682 {*jcc}
     (nil)
 -> 37)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 51 5 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (const_int 0 [0])) "function.c":774 85 {*movdi_internal}
     (nil))
(jump_insn 51 34 52 5 (set (pc)
        (label_ref 40)) "function.c":774 683 {jump}
     (nil)
 -> 40)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 52 51 37)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 37 52 38 6 94 (nil) [1 uses])
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [14 playerinfo+0 S8 A64])) "function.c":776 85 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;;              3 [always] 
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 88
(code_label 40 39 41 7 93 (nil) [2 uses])
(note 41 40 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 41 47 7 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:88 <retval> ] [88])) "function.c":777 85 {*movdi_internal}
     (nil))
(insn 47 46 53 7 (use (reg/i:DI 0 ax)) "function.c":777 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 53 47 0 NOTE_INSN_DELETED)

;; Function step1_krzak (step1_krzak, funcdef_no=15, decl_uid=6234, cgraph_uid=15, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 36: point = 0, n_alt = -1
   Insn 35: point = 0, n_alt = -2
   Insn 31: point = 1, n_alt = -2
   Insn 28: point = 3, n_alt = 0
  BB 3
   Insn 25: point = 4, n_alt = 1
  BB 2
   Insn 23: point = 4, n_alt = -1
   Insn 22: point = 4, n_alt = 0
   Insn 21: point = 5, n_alt = 4
   Insn 20: point = 7, n_alt = 0
   Insn 19: point = 9, n_alt = 0
   Insn 18: point = 11, n_alt = 0
   Insn 17: point = 13, n_alt = 3
   Insn 16: point = 15, n_alt = 3
   Insn 15: point = 16, n_alt = 3
   Insn 14: point = 18, n_alt = 0
   Insn 13: point = 20, n_alt = 0
   Insn 12: point = 22, n_alt = 0
   Insn 11: point = 24, n_alt = 0
   Insn 10: point = 26, n_alt = 3
   Insn 9: point = 28, n_alt = 3
   Insn 8: point = 29, n_alt = 3
   Insn 7: point = 31, n_alt = 3
   Insn 6: point = 32, n_alt = 1
   Insn 2: point = 32, n_alt = 5
 r87: [19..29]
 r88: [25..26]
 r89: [23..24]
 r90: [21..22]
 r91: [19..20]
 r92: [17..18]
 r93: [8..16]
 r94: [12..13]
 r95: [10..11]
 r96: [8..9]
 r97: [6..7]
 r98: [4..5]
 r99: [2..3]
 r100: [0..1]
 r101: [30..31]
 r102: [27..28]
 r103: [14..15]
Compressing live ranges: from 32 to 30 - 93%
Ranges after the compression:
 r87: [18..27]
 r88: [24..25]
 r89: [22..23]
 r90: [20..21]
 r91: [18..19]
 r92: [16..17]
 r93: [8..15]
 r94: [12..13]
 r95: [10..11]
 r96: [8..9]
 r97: [6..7]
 r98: [4..5]
 r99: [2..3]
 r100: [0..1]
 r101: [28..29]
 r102: [26..27]
 r103: [14..15]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns


step1_krzak

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={16d,16u} r1={3d,2u} r2={1d} r4={1d} r5={1d,1u} r6={1d,11u} r7={1d,4u} r17={4d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 75{39d,36u,0e} in 23{23 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 101 102 103
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":780 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 0 [0])) "function.c":781 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 16 [0x10])) [9 serwer_16(D)->mapa+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 32 [0x20])) [14 serwer_16(D)->player1+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":782 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [orig:90 _4 ] [90])
        (sign_extend:DI (reg:SI 0 ax [orig:89 _3 ] [89]))) "function.c":782 149 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 0 ax [orig:91 _5 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 _4 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":782 551 {*ashldi3_1}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (plus:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (reg/f:DI 1 dx [orig:87 _1 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":782 222 {*adddi_1}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:92 _6 ] [92]) [10 *_6+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 32 [0x20])) [14 serwer_16(D)->player1+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (const_int 12 [0xc])) [3 _8->x_current+0 S4 A32])) "function.c":782 86 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 0 ax [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "function.c":782 149 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 _10 ] [96])
                    (reg/f:DI 1 dx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":782 222 {*adddi_1}
     (nil))
(insn 21 20 22 2 (set (reg:QI 0 ax [orig:98 _12 ] [98])
        (mem:QI (reg/f:DI 0 ax [orig:97 _11 ] [97]) [0 *_11+0 S1 A8])) "function.c":782 88 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 _12 ] [98])
            (const_int 35 [0x23]))) "function.c":782 9 {*cmpqi_1}
     (nil))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "function.c":782 682 {*jcc}
     (nil)
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 2 [0x2])) "function.c":784 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 99 100
(code_label 26 25 27 4 96 (nil) [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 35 4 (set (reg:SI 0 ax [orig:99 _18 ] [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])) "function.c":787 86 {*movsi_internal}
     (nil))
(insn 35 28 36 4 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:100 <retval> ] [100])) "function.c":788 86 {*movsi_internal}
     (nil))
(insn 36 35 38 4 (use (reg/i:SI 0 ax)) "function.c":788 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 38 36 0 NOTE_INSN_DELETED)

;; Function step2_krzak (step2_krzak, funcdef_no=16, decl_uid=6236, cgraph_uid=16, symbol_order=19)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 14
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 20
	 Choosing alt 0 in insn 20:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 36: point = 0, n_alt = -1
   Insn 35: point = 0, n_alt = -2
   Insn 31: point = 1, n_alt = -2
   Insn 28: point = 3, n_alt = 0
  BB 3
   Insn 25: point = 4, n_alt = 1
  BB 2
   Insn 23: point = 4, n_alt = -1
   Insn 22: point = 4, n_alt = 0
   Insn 21: point = 5, n_alt = 4
   Insn 20: point = 7, n_alt = 0
   Insn 19: point = 9, n_alt = 0
   Insn 18: point = 11, n_alt = 0
   Insn 17: point = 13, n_alt = 3
   Insn 16: point = 15, n_alt = 3
   Insn 15: point = 16, n_alt = 3
   Insn 14: point = 18, n_alt = 0
   Insn 13: point = 20, n_alt = 0
   Insn 12: point = 22, n_alt = 0
   Insn 11: point = 24, n_alt = 0
   Insn 10: point = 26, n_alt = 3
   Insn 9: point = 28, n_alt = 3
   Insn 8: point = 29, n_alt = 3
   Insn 7: point = 31, n_alt = 3
   Insn 6: point = 32, n_alt = 1
   Insn 2: point = 32, n_alt = 5
 r87: [19..29]
 r88: [25..26]
 r89: [23..24]
 r90: [21..22]
 r91: [19..20]
 r92: [17..18]
 r93: [8..16]
 r94: [12..13]
 r95: [10..11]
 r96: [8..9]
 r97: [6..7]
 r98: [4..5]
 r99: [2..3]
 r100: [0..1]
 r101: [30..31]
 r102: [27..28]
 r103: [14..15]
Compressing live ranges: from 32 to 30 - 93%
Ranges after the compression:
 r87: [18..27]
 r88: [24..25]
 r89: [22..23]
 r90: [20..21]
 r91: [18..19]
 r92: [16..17]
 r93: [8..15]
 r94: [12..13]
 r95: [10..11]
 r96: [8..9]
 r97: [6..7]
 r98: [4..5]
 r99: [2..3]
 r100: [0..1]
 r101: [28..29]
 r102: [26..27]
 r103: [14..15]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 31
changing reg in insn 31
changing reg in insn 35
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns


step2_krzak

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={16d,16u} r1={3d,2u} r2={1d} r4={1d} r5={1d,1u} r6={1d,11u} r7={1d,4u} r17={4d,1u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 75{39d,36u,0e} in 23{23 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 101 102 103
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":791 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 0 [0])) "function.c":792 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 1 dx [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [101])
                (const_int 16 [0x10])) [9 serwer_16(D)->mapa+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 40 [0x28])) [14 serwer_16(D)->player2+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":793 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 0 ax [orig:90 _4 ] [90])
        (sign_extend:DI (reg:SI 0 ax [orig:89 _3 ] [89]))) "function.c":793 149 {*extendsidi2_rex64}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 0 ax [orig:91 _5 ] [91])
                (ashift:DI (reg:DI 0 ax [orig:90 _4 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":793 551 {*ashldi3_1}
     (nil))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (plus:DI (reg:DI 0 ax [orig:91 _5 ] [91])
                    (reg/f:DI 1 dx [orig:87 _1 ] [87])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":793 222 {*adddi_1}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:92 _6 ] [92]) [10 *_6+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [103])
                (const_int 40 [0x28])) [14 serwer_16(D)->player2+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (const_int 12 [0xc])) [3 _8->x_current+0 S4 A32])) "function.c":793 86 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 0 ax [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "function.c":793 149 {*extendsidi2_rex64}
     (nil))
(insn 20 19 21 2 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (plus:DI (reg:DI 0 ax [orig:96 _10 ] [96])
                    (reg/f:DI 1 dx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":793 222 {*adddi_1}
     (nil))
(insn 21 20 22 2 (set (reg:QI 0 ax [orig:98 _12 ] [98])
        (mem:QI (reg/f:DI 0 ax [orig:97 _11 ] [97]) [0 *_11+0 S1 A8])) "function.c":793 88 {*movqi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 _12 ] [98])
            (const_int 35 [0x23]))) "function.c":793 9 {*cmpqi_1}
     (nil))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "function.c":793 682 {*jcc}
     (nil)
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 2 [0x2])) "function.c":795 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 99 100
(code_label 26 25 27 4 99 (nil) [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 35 4 (set (reg:SI 0 ax [orig:99 _18 ] [99])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])) "function.c":798 86 {*movsi_internal}
     (nil))
(insn 35 28 36 4 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:100 <retval> ] [100])) "function.c":799 86 {*movsi_internal}
     (nil))
(insn 36 35 38 4 (use (reg/i:SI 0 ax)) "function.c":799 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 38 36 0 NOTE_INSN_DELETED)

;; Function step1 (step1, funcdef_no=17, decl_uid=6238, cgraph_uid=17, symbol_order=20)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 55:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 56:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 76:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 89:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 90:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 123:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 124:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 146:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 157:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 158:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6 7 8 9
EBB 10 11
EBB 12 13
EBB 14 15
EBB 17
EBB 18
EBB 19
EBB 20
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 171: point = 0, n_alt = -1
   Insn 170: point = 0, n_alt = -2
   Insn 166: point = 1, n_alt = -2
   Insn 163: point = 3, n_alt = 0
  BB 20
   Insn 201: point = 4, n_alt = -1
  BB 15
   Insn 182: point = 4, n_alt = -1
   Insn 158: point = 4, n_alt = 8
   Insn 157: point = 4, n_alt = 8
   Insn 156: point = 5, n_alt = 3
   Insn 155: point = 7, n_alt = 3
   Insn 154: point = 8, n_alt = 1
   Insn 153: point = 9, n_alt = 0
   Insn 152: point = 11, n_alt = 0
   Insn 151: point = 12, n_alt = 3
   Insn 150: point = 14, n_alt = 3
  BB 14
   Insn 148: point = 15, n_alt = -1
   Insn 147: point = 15, n_alt = 0
   Insn 146: point = 16, n_alt = 4
   Insn 145: point = 18, n_alt = 0
   Insn 144: point = 20, n_alt = 0
   Insn 143: point = 22, n_alt = 0
   Insn 142: point = 24, n_alt = 0
   Insn 141: point = 26, n_alt = 3
   Insn 140: point = 28, n_alt = 3
   Insn 139: point = 29, n_alt = 3
   Insn 138: point = 31, n_alt = 0
   Insn 137: point = 33, n_alt = 0
   Insn 136: point = 35, n_alt = 0
   Insn 135: point = 37, n_alt = 0
   Insn 134: point = 39, n_alt = 3
   Insn 133: point = 41, n_alt = 3
   Insn 132: point = 42, n_alt = 3
   Insn 131: point = 44, n_alt = 3
  BB 18
   Insn 192: point = 45, n_alt = -1
   Insn 191: point = 45, n_alt = -1
  BB 11
   Insn 178: point = 45, n_alt = -1
   Insn 90: point = 45, n_alt = 8
   Insn 89: point = 45, n_alt = 8
   Insn 88: point = 46, n_alt = 3
   Insn 87: point = 48, n_alt = 3
   Insn 86: point = 49, n_alt = 1
   Insn 85: point = 50, n_alt = 0
   Insn 84: point = 52, n_alt = 0
   Insn 83: point = 53, n_alt = 3
   Insn 82: point = 55, n_alt = 3
  BB 10
   Insn 80: point = 56, n_alt = -1
   Insn 79: point = 56, n_alt = 0
   Insn 78: point = 57, n_alt = 4
   Insn 77: point = 59, n_alt = 0
   Insn 76: point = 61, n_alt = 0
   Insn 75: point = 63, n_alt = 0
   Insn 74: point = 65, n_alt = 0
   Insn 73: point = 67, n_alt = 3
   Insn 72: point = 69, n_alt = 3
   Insn 71: point = 70, n_alt = 3
   Insn 70: point = 72, n_alt = 0
   Insn 69: point = 74, n_alt = 0
   Insn 68: point = 76, n_alt = 0
   Insn 67: point = 78, n_alt = 0
   Insn 66: point = 80, n_alt = 3
   Insn 65: point = 82, n_alt = 3
   Insn 64: point = 83, n_alt = 3
   Insn 63: point = 85, n_alt = 3
  BB 17
   Insn 187: point = 86, n_alt = -1
   Insn 186: point = 86, n_alt = -1
  BB 9
   Insn 176: point = 86, n_alt = -1
   Insn 56: point = 86, n_alt = 8
   Insn 55: point = 86, n_alt = 8
   Insn 54: point = 87, n_alt = 3
   Insn 53: point = 89, n_alt = 3
   Insn 52: point = 90, n_alt = 1
   Insn 51: point = 91, n_alt = 0
   Insn 50: point = 93, n_alt = 0
   Insn 49: point = 94, n_alt = 3
   Insn 48: point = 96, n_alt = 3
  BB 8
   Insn 46: point = 97, n_alt = -1
   Insn 45: point = 97, n_alt = 0
   Insn 44: point = 98, n_alt = 4
   Insn 43: point = 100, n_alt = 0
   Insn 42: point = 102, n_alt = 0
   Insn 41: point = 104, n_alt = 0
   Insn 40: point = 106, n_alt = 3
   Insn 39: point = 108, n_alt = 3
   Insn 38: point = 109, n_alt = 3
   Insn 37: point = 111, n_alt = 0
   Insn 36: point = 113, n_alt = 0
   Insn 35: point = 115, n_alt = 0
   Insn 34: point = 117, n_alt = 0
   Insn 33: point = 119, n_alt = 0
   Insn 32: point = 121, n_alt = 3
   Insn 31: point = 123, n_alt = 3
   Insn 30: point = 124, n_alt = 3
   Insn 29: point = 126, n_alt = 3
  BB 19
   Insn 197: point = 127, n_alt = -1
   Insn 196: point = 127, n_alt = -1
  BB 13
   Insn 180: point = 127, n_alt = -1
   Insn 124: point = 127, n_alt = 8
   Insn 123: point = 127, n_alt = 8
   Insn 122: point = 128, n_alt = 3
   Insn 121: point = 130, n_alt = 3
   Insn 120: point = 131, n_alt = 1
   Insn 119: point = 132, n_alt = 0
   Insn 118: point = 134, n_alt = 0
   Insn 117: point = 135, n_alt = 3
   Insn 116: point = 137, n_alt = 3
  BB 12
   Insn 114: point = 138, n_alt = -1
   Insn 113: point = 138, n_alt = 0
   Insn 112: point = 139, n_alt = 4
   Insn 111: point = 141, n_alt = 0
   Insn 110: point = 143, n_alt = 0
   Insn 109: point = 145, n_alt = 0
   Insn 108: point = 147, n_alt = 3
   Insn 107: point = 149, n_alt = 3
   Insn 106: point = 150, n_alt = 3
   Insn 105: point = 152, n_alt = 0
   Insn 104: point = 154, n_alt = 0
   Insn 103: point = 156, n_alt = 0
   Insn 102: point = 158, n_alt = 0
   Insn 101: point = 160, n_alt = 0
   Insn 100: point = 162, n_alt = 3
   Insn 99: point = 164, n_alt = 3
   Insn 98: point = 165, n_alt = 3
   Insn 97: point = 167, n_alt = 3
  BB 5
   Insn 174: point = 168, n_alt = -1
  BB 4
   Insn 17: point = 168, n_alt = -1
   Insn 16: point = 168, n_alt = 0
  BB 7
   Insn 27: point = 170, n_alt = -1
   Insn 26: point = 170, n_alt = 0
  BB 6
   Insn 24: point = 172, n_alt = -1
   Insn 23: point = 172, n_alt = 0
  BB 3
   Insn 14: point = 173, n_alt = -1
   Insn 13: point = 173, n_alt = 0
  BB 2
   Insn 11: point = 174, n_alt = -1
   Insn 10: point = 174, n_alt = 0
   Insn 9: point = 174, n_alt = 0
   Insn 8: point = 176, n_alt = 4
   Insn 7: point = 178, n_alt = 3
   Insn 6: point = 180, n_alt = 3
   Insn 2: point = 181, n_alt = 5
 r87: [177..178]
 r88: [175..176]
 r89: [168..174]
 r90: [112..124]
 r91: [120..121]
 r92: [118..119]
 r93: [116..117]
 r94: [114..115]
 r95: [112..113]
 r96: [110..111]
 r97: [101..109]
 r98: [105..106]
 r99: [103..104]
 r100: [101..102]
 r101: [99..100]
 r102: [97..98]
 r103: [90..94]
 r104: [92..93]
 r105: [90..91]
 r106: [86..87]
 r107: [73..83]
 r108: [79..80]
 r109: [77..78]
 r110: [75..76]
 r111: [73..74]
 r112: [71..72]
 r113: [60..70]
 r114: [66..67]
 r115: [64..65]
 r116: [62..63]
 r117: [60..61]
 r118: [58..59]
 r119: [56..57]
 r120: [49..53]
 r121: [51..52]
 r122: [49..50]
 r123: [45..46]
 r124: [153..165]
 r125: [161..162]
 r126: [159..160]
 r127: [157..158]
 r128: [155..156]
 r129: [153..154]
 r130: [151..152]
 r131: [142..150]
 r132: [146..147]
 r133: [144..145]
 r134: [142..143]
 r135: [140..141]
 r136: [138..139]
 r137: [131..135]
 r138: [133..134]
 r139: [131..132]
 r140: [127..128]
 r141: [32..42]
 r142: [38..39]
 r143: [36..37]
 r144: [34..35]
 r145: [32..33]
 r146: [30..31]
 r147: [19..29]
 r148: [25..26]
 r149: [23..24]
 r150: [21..22]
 r151: [19..20]
 r152: [17..18]
 r153: [15..16]
 r154: [8..12]
 r155: [10..11]
 r156: [8..9]
 r157: [4..5]
 r158: [2..3]
 r159: [0..1]
 r160: [179..180]
 r161: [125..126]
 r162: [122..123]
 r163: [107..108]
 r164: [95..96]
 r165: [88..89]
 r166: [84..85]
 r167: [81..82]
 r168: [68..69]
 r169: [54..55]
 r170: [47..48]
 r171: [166..167]
 r172: [163..164]
 r173: [148..149]
 r174: [136..137]
 r175: [129..130]
 r176: [43..44]
 r177: [40..41]
 r178: [27..28]
 r179: [13..14]
 r180: [6..7]
Compressing live ranges: from 181 to 164 - 90%
Ranges after the compression:
 r87: [160..161]
 r88: [158..159]
 r89: [156..157]
 r90: [104..115]
 r91: [112..113]
 r92: [110..111]
 r93: [108..109]
 r94: [106..107]
 r95: [104..105]
 r96: [102..103]
 r97: [94..101]
 r98: [98..99]
 r99: [96..97]
 r100: [94..95]
 r101: [92..93]
 r102: [90..91]
 r103: [84..87]
 r104: [86..87]
 r105: [84..85]
 r106: [80..81]
 r107: [68..77]
 r108: [74..75]
 r109: [72..73]
 r110: [70..71]
 r111: [68..69]
 r112: [66..67]
 r113: [56..65]
 r114: [62..63]
 r115: [60..61]
 r116: [58..59]
 r117: [56..57]
 r118: [54..55]
 r119: [52..53]
 r120: [46..49]
 r121: [48..49]
 r122: [46..47]
 r123: [42..43]
 r124: [142..153]
 r125: [150..151]
 r126: [148..149]
 r127: [146..147]
 r128: [144..145]
 r129: [142..143]
 r130: [140..141]
 r131: [132..139]
 r132: [136..137]
 r133: [134..135]
 r134: [132..133]
 r135: [130..131]
 r136: [128..129]
 r137: [122..125]
 r138: [124..125]
 r139: [122..123]
 r140: [118..119]
 r141: [30..39]
 r142: [36..37]
 r143: [34..35]
 r144: [32..33]
 r145: [30..31]
 r146: [28..29]
 r147: [18..27]
 r148: [24..25]
 r149: [22..23]
 r150: [20..21]
 r151: [18..19]
 r152: [16..17]
 r153: [14..15]
 r154: [8..11]
 r155: [10..11]
 r156: [8..9]
 r157: [4..5]
 r158: [2..3]
 r159: [0..1]
 r160: [162..163]
 r161: [116..117]
 r162: [114..115]
 r163: [100..101]
 r164: [88..89]
 r165: [82..83]
 r166: [78..79]
 r167: [76..77]
 r168: [64..65]
 r169: [50..51]
 r170: [44..45]
 r171: [154..155]
 r172: [152..153]
 r173: [138..139]
 r174: [126..127]
 r175: [120..121]
 r176: [40..41]
 r177: [38..39]
 r178: [26..27]
 r179: [12..13]
 r180: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 26
changing reg in insn 23
changing reg in insn 16
changing reg in insn 13
changing reg in insn 10
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 86
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 117
changing reg in insn 120
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 151
changing reg in insn 154
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 163
changing reg in insn 166
changing reg in insn 166
changing reg in insn 170
changing reg in insn 6
changing reg in insn 7
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 39
changing reg in insn 40
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 72
changing reg in insn 73
changing reg in insn 82
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 107
changing reg in insn 108
changing reg in insn 116
changing reg in insn 117
changing reg in insn 121
changing reg in insn 122
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 140
changing reg in insn 141
changing reg in insn 150
changing reg in insn 151
changing reg in insn 155
changing reg in insn 156
deleting insn with uid = 166.
starting the processing of deferred insns
ending the processing of deferred insns


step1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={79d,87u} r1={17d,16u} r2={1d} r4={1d} r5={1d,1u} r6={1d,42u} r7={1d,20u} r17={29d,9u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 317{141d,176u,0e} in 138{138 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 160
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":802 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":803 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":803 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (plus:DI (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (const_int 40 [0x28])) [0 _1->request+0 S1 A64])) "function.c":803 88 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (sign_extend:SI (reg:QI 0 ax [orig:88 _2 ] [88]))) "function.c":803 155 {extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 100 [0x64]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":803 682 {*jcc}
     (nil)
 -> 129)
;;  succ:       3 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 100 [0x64]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "function.c":803 682 {*jcc}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 97 [0x61]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 17 16 173 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "function.c":803 682 {*jcc}
     (nil)
 -> 61)
;;  succ:       5 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 173 17 174 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 174 173 175 5 (set (pc)
        (label_ref 161)) "function.c":803 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 175 174 21)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(code_label 21 175 22 6 103 (nil) [1 uses])
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 115 [0x73]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 24 23 25 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) "function.c":803 682 {*jcc}
     (nil)
 -> 95)
;;  succ:       7 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 119 [0x77]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 161)
            (pc))) "function.c":803 682 {*jcc}
     (nil)
 -> 161)
;;  succ:       16
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 98 99 100 101 102 161 162 163
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 30 29 31 8 (set (reg/f:DI 1 dx [orig:90 _4 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 31 30 32 8 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 32 31 33 8 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [162])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 33 32 34 8 (set (reg:SI 0 ax [orig:92 _6 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":806 86 {*movsi_internal}
     (nil))
(insn 34 33 35 8 (set (reg:DI 0 ax [orig:93 _7 ] [93])
        (sign_extend:DI (reg:SI 0 ax [orig:92 _6 ] [92]))) "function.c":806 149 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 8 (parallel [
            (set (reg:DI 0 ax [orig:94 _8 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 _7 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 551 {*ashldi3_1}
     (nil))
(insn 36 35 37 8 (parallel [
            (set (reg:DI 0 ax [orig:95 _9 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 _8 ] [94])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 222 {*adddi_1}
     (nil))
(insn 37 36 38 8 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 _9 ] [95])
                    (reg/f:DI 1 dx [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 222 {*adddi_1}
     (nil))
(insn 38 37 39 8 (set (reg/f:DI 1 dx [orig:97 _11 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [10 *_10+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 39 38 40 8 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 40 39 41 8 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [163])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (const_int 12 [0xc])) [3 _12->x_current+0 S4 A32])) "function.c":806 86 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:DI 0 ax [orig:100 _14 ] [100])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "function.c":806 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _14 ] [100])
                    (reg/f:DI 1 dx [orig:97 _11 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 222 {*adddi_1}
     (nil))
(insn 44 43 45 8 (set (reg:QI 0 ax [orig:102 _16 ] [102])
        (mem:QI (reg/f:DI 0 ax [orig:101 _15 ] [101]) [0 *_15+0 S1 A8])) "function.c":806 88 {*movqi_internal}
     (nil))
(insn 45 44 46 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:102 _16 ] [102])
            (const_int 77 [0x4d]))) "function.c":806 9 {*cmpqi_1}
     (nil))
(jump_insn 46 45 47 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 185)
            (pc))) "function.c":806 682 {*jcc}
     (nil)
 -> 185)
;;  succ:       9 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 164 165
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":808 85 {*movdi_internal}
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [164])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":808 85 {*movdi_internal}
     (nil))
(insn 50 49 51 9 (set (reg:SI 1 dx [orig:104 _18 ] [104])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])) "function.c":808 86 {*movsi_internal}
     (nil))
(insn 51 50 52 9 (parallel [
            (set (reg:SI 1 dx [orig:105 _19 ] [105])
                (plus:SI (reg:SI 1 dx [orig:104 _18 ] [104])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":808 221 {*addsi_1}
     (nil))
(insn 52 51 53 9 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:105 _19 ] [105])) "function.c":808 86 {*movsi_internal}
     (nil))
(insn 53 52 54 9 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":809 85 {*movdi_internal}
     (nil))
(insn 54 53 55 9 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [165])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":809 85 {*movdi_internal}
     (nil))
(insn 55 54 56 9 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (const_int 40 [0x28])) [0 _20->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":809 88 {*movqi_internal}
     (nil))
(insn 56 55 176 9 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":810 88 {*movqi_internal}
     (nil))
(jump_insn 176 56 177 9 (set (pc)
        (label_ref:DI 185)) "function.c":812 683 {jump}
     (nil)
 -> 185)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 177 176 61)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 110 111 112 113 114 115 116 117 118 119 166 167 168
(code_label 61 177 62 10 104 (nil) [1 uses])
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 64 63 65 10 (set (reg/f:DI 1 dx [orig:107 _21 ] [107])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [166])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 65 64 66 10 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 66 65 67 10 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [167])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 67 66 68 10 (set (reg:SI 0 ax [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:108 _22 ] [108])
                (const_int 16 [0x10])) [3 _22->y_current+0 S4 A64])) "function.c":814 86 {*movsi_internal}
     (nil))
(insn 68 67 69 10 (set (reg:DI 0 ax [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 0 ax [orig:109 _23 ] [109]))) "function.c":814 149 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 10 (parallel [
            (set (reg:DI 0 ax [orig:111 _25 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 551 {*ashldi3_1}
     (nil))
(insn 70 69 71 10 (parallel [
            (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
                (plus:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (reg/f:DI 1 dx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 222 {*adddi_1}
     (nil))
(insn 71 70 72 10 (set (reg/f:DI 1 dx [orig:113 _27 ] [113])
        (mem/f:DI (reg/f:DI 0 ax [orig:112 _26 ] [112]) [10 *_26+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 72 71 73 10 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 73 72 74 10 (set (reg/f:DI 0 ax [orig:114 _28 ] [114])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [168])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 74 73 75 10 (set (reg:SI 0 ax [orig:115 _29 ] [115])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:114 _28 ] [114])
                (const_int 12 [0xc])) [3 _28->x_current+0 S4 A32])) "function.c":814 86 {*movsi_internal}
     (nil))
(insn 75 74 76 10 (set (reg:DI 0 ax [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 0 ax [orig:115 _29 ] [115]))) "function.c":814 149 {*extendsidi2_rex64}
     (nil))
(insn 76 75 77 10 (parallel [
            (set (reg:DI 0 ax [orig:117 _31 ] [117])
                (plus:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 222 {*adddi_1}
     (nil))
(insn 77 76 78 10 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (reg/f:DI 1 dx [orig:113 _27 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 222 {*adddi_1}
     (nil))
(insn 78 77 79 10 (set (reg:QI 0 ax [orig:119 _33 ] [119])
        (mem:QI (reg/f:DI 0 ax [orig:118 _32 ] [118]) [0 *_32+0 S1 A8])) "function.c":814 88 {*movqi_internal}
     (nil))
(insn 79 78 80 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:119 _33 ] [119])
            (const_int 77 [0x4d]))) "function.c":814 9 {*cmpqi_1}
     (nil))
(jump_insn 80 79 81 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 190)
            (pc))) "function.c":814 682 {*jcc}
     (nil)
 -> 190)
;;  succ:       11 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 169 170
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":816 85 {*movdi_internal}
     (nil))
(insn 83 82 84 11 (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [169])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":816 85 {*movdi_internal}
     (nil))
(insn 84 83 85 11 (set (reg:SI 1 dx [orig:121 _35 ] [121])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (const_int 12 [0xc])) [3 _34->x_current+0 S4 A32])) "function.c":816 86 {*movsi_internal}
     (nil))
(insn 85 84 86 11 (parallel [
            (set (reg:SI 1 dx [orig:122 _36 ] [122])
                (plus:SI (reg:SI 1 dx [orig:121 _35 ] [121])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":816 221 {*addsi_1}
     (nil))
(insn 86 85 87 11 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (const_int 12 [0xc])) [3 _34->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:122 _36 ] [122])) "function.c":816 86 {*movsi_internal}
     (nil))
(insn 87 86 88 11 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":817 85 {*movdi_internal}
     (nil))
(insn 88 87 89 11 (set (reg/f:DI 0 ax [orig:123 _37 ] [123])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [170])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":817 85 {*movdi_internal}
     (nil))
(insn 89 88 90 11 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:123 _37 ] [123])
                (const_int 40 [0x28])) [0 _37->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":817 88 {*movqi_internal}
     (nil))
(insn 90 89 178 11 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":818 88 {*movqi_internal}
     (nil))
(jump_insn 178 90 179 11 (set (pc)
        (label_ref:DI 190)) "function.c":820 683 {jump}
     (nil)
 -> 190)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 179 178 95)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 129 130 131 132 133 134 135 136 171 172 173
(code_label 95 179 96 12 106 (nil) [1 uses])
(note 96 95 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 12 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 98 97 99 12 (set (reg/f:DI 1 dx [orig:124 _38 ] [124])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [171])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 99 98 100 12 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 100 99 101 12 (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [172])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:SI 0 ax [orig:126 _40 ] [126])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (const_int 16 [0x10])) [3 _39->y_current+0 S4 A64])) "function.c":822 86 {*movsi_internal}
     (nil))
(insn 102 101 103 12 (set (reg:DI 0 ax [orig:127 _41 ] [127])
        (sign_extend:DI (reg:SI 0 ax [orig:126 _40 ] [126]))) "function.c":822 149 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 12 (parallel [
            (set (reg:DI 0 ax [orig:128 _42 ] [128])
                (plus:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 222 {*adddi_1}
     (nil))
(insn 104 103 105 12 (parallel [
            (set (reg:DI 0 ax [orig:129 _43 ] [129])
                (ashift:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 551 {*ashldi3_1}
     (nil))
(insn 105 104 106 12 (parallel [
            (set (reg/f:DI 0 ax [orig:130 _44 ] [130])
                (plus:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (reg/f:DI 1 dx [orig:124 _38 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 222 {*adddi_1}
     (nil))
(insn 106 105 107 12 (set (reg/f:DI 1 dx [orig:131 _45 ] [131])
        (mem/f:DI (reg/f:DI 0 ax [orig:130 _44 ] [130]) [10 *_44+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 107 106 108 12 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 108 107 109 12 (set (reg/f:DI 0 ax [orig:132 _46 ] [132])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [173])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 109 108 110 12 (set (reg:SI 0 ax [orig:133 _47 ] [133])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:132 _46 ] [132])
                (const_int 12 [0xc])) [3 _46->x_current+0 S4 A32])) "function.c":822 86 {*movsi_internal}
     (nil))
(insn 110 109 111 12 (set (reg:DI 0 ax [orig:134 _48 ] [134])
        (sign_extend:DI (reg:SI 0 ax [orig:133 _47 ] [133]))) "function.c":822 149 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 12 (parallel [
            (set (reg/f:DI 0 ax [orig:135 _49 ] [135])
                (plus:DI (reg:DI 0 ax [orig:134 _48 ] [134])
                    (reg/f:DI 1 dx [orig:131 _45 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 222 {*adddi_1}
     (nil))
(insn 112 111 113 12 (set (reg:QI 0 ax [orig:136 _50 ] [136])
        (mem:QI (reg/f:DI 0 ax [orig:135 _49 ] [135]) [0 *_49+0 S1 A8])) "function.c":822 88 {*movqi_internal}
     (nil))
(insn 113 112 114 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:136 _50 ] [136])
            (const_int 77 [0x4d]))) "function.c":822 9 {*cmpqi_1}
     (nil))
(jump_insn 114 113 115 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 195)
            (pc))) "function.c":822 682 {*jcc}
     (nil)
 -> 195)
;;  succ:       13 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 138 139 140 174 175
(note 115 114 116 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 13 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":824 85 {*movdi_internal}
     (nil))
(insn 117 116 118 13 (set (reg/f:DI 0 ax [orig:137 _51 ] [137])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [174])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":824 85 {*movdi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:SI 1 dx [orig:138 _52 ] [138])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:137 _51 ] [137])
                (const_int 16 [0x10])) [3 _51->y_current+0 S4 A64])) "function.c":824 86 {*movsi_internal}
     (nil))
(insn 119 118 120 13 (parallel [
            (set (reg:SI 1 dx [orig:139 _53 ] [139])
                (plus:SI (reg:SI 1 dx [orig:138 _52 ] [138])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":824 221 {*addsi_1}
     (nil))
(insn 120 119 121 13 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:137 _51 ] [137])
                (const_int 16 [0x10])) [3 _51->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:139 _53 ] [139])) "function.c":824 86 {*movsi_internal}
     (nil))
(insn 121 120 122 13 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":825 85 {*movdi_internal}
     (nil))
(insn 122 121 123 13 (set (reg/f:DI 0 ax [orig:140 _54 ] [140])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [175])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":825 85 {*movdi_internal}
     (nil))
(insn 123 122 124 13 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:140 _54 ] [140])
                (const_int 40 [0x28])) [0 _54->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":825 88 {*movqi_internal}
     (nil))
(insn 124 123 180 13 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":826 88 {*movqi_internal}
     (nil))
(jump_insn 180 124 181 13 (set (pc)
        (label_ref:DI 195)) "function.c":828 683 {jump}
     (nil)
 -> 195)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 129)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 144 145 146 147 148 149 150 151 152 153 176 177 178
(code_label 129 181 130 14 102 (nil) [1 uses])
(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 14 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 132 131 133 14 (set (reg/f:DI 1 dx [orig:141 _55 ] [141])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [176])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 133 132 134 14 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 134 133 135 14 (set (reg/f:DI 0 ax [orig:142 _56 ] [142])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [177])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 135 134 136 14 (set (reg:SI 0 ax [orig:143 _57 ] [143])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:142 _56 ] [142])
                (const_int 16 [0x10])) [3 _56->y_current+0 S4 A64])) "function.c":830 86 {*movsi_internal}
     (nil))
(insn 136 135 137 14 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [orig:143 _57 ] [143]))) "function.c":830 149 {*extendsidi2_rex64}
     (nil))
(insn 137 136 138 14 (parallel [
            (set (reg:DI 0 ax [orig:145 _59 ] [145])
                (ashift:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 551 {*ashldi3_1}
     (nil))
(insn 138 137 139 14 (parallel [
            (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (reg/f:DI 1 dx [orig:141 _55 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 222 {*adddi_1}
     (nil))
(insn 139 138 140 14 (set (reg/f:DI 1 dx [orig:147 _61 ] [147])
        (mem/f:DI (reg/f:DI 0 ax [orig:146 _60 ] [146]) [10 *_60+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 140 139 141 14 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 141 140 142 14 (set (reg/f:DI 0 ax [orig:148 _62 ] [148])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [178])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 142 141 143 14 (set (reg:SI 0 ax [orig:149 _63 ] [149])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:148 _62 ] [148])
                (const_int 12 [0xc])) [3 _62->x_current+0 S4 A32])) "function.c":830 86 {*movsi_internal}
     (nil))
(insn 143 142 144 14 (set (reg:DI 0 ax [orig:150 _64 ] [150])
        (sign_extend:DI (reg:SI 0 ax [orig:149 _63 ] [149]))) "function.c":830 149 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 14 (parallel [
            (set (reg:DI 0 ax [orig:151 _65 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 _64 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 222 {*adddi_1}
     (nil))
(insn 145 144 146 14 (parallel [
            (set (reg/f:DI 0 ax [orig:152 _66 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _65 ] [151])
                    (reg/f:DI 1 dx [orig:147 _61 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 222 {*adddi_1}
     (nil))
(insn 146 145 147 14 (set (reg:QI 0 ax [orig:153 _67 ] [153])
        (mem:QI (reg/f:DI 0 ax [orig:152 _66 ] [152]) [0 *_66+0 S1 A8])) "function.c":830 88 {*movqi_internal}
     (nil))
(insn 147 146 148 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:153 _67 ] [153])
            (const_int 77 [0x4d]))) "function.c":830 9 {*cmpqi_1}
     (nil))
(jump_insn 148 147 149 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 200)
            (pc))) "function.c":830 682 {*jcc}
     (nil)
 -> 200)
;;  succ:       15 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 179 180
(note 149 148 150 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 15 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":832 85 {*movdi_internal}
     (nil))
(insn 151 150 152 15 (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [179])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":832 85 {*movdi_internal}
     (nil))
(insn 152 151 153 15 (set (reg:SI 1 dx [orig:155 _69 ] [155])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])) "function.c":832 86 {*movsi_internal}
     (nil))
(insn 153 152 154 15 (parallel [
            (set (reg:SI 1 dx [orig:156 _70 ] [156])
                (plus:SI (reg:SI 1 dx [orig:155 _69 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":832 221 {*addsi_1}
     (nil))
(insn 154 153 155 15 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:156 _70 ] [156])) "function.c":832 86 {*movsi_internal}
     (nil))
(insn 155 154 156 15 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":833 85 {*movdi_internal}
     (nil))
(insn 156 155 157 15 (set (reg/f:DI 0 ax [orig:157 _71 ] [157])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [180])
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":833 85 {*movdi_internal}
     (nil))
(insn 157 156 158 15 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:157 _71 ] [157])
                (const_int 40 [0x28])) [0 _71->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":833 88 {*movqi_internal}
     (nil))
(insn 158 157 182 15 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":834 88 {*movqi_internal}
     (nil))
(jump_insn 182 158 183 15 (set (pc)
        (label_ref:DI 200)) "function.c":836 683 {jump}
     (nil)
 -> 200)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 183 182 185)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 15, next block 18, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 185 183 184 17 112 (nil) [2 uses])
(note 184 185 186 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 186 184 187 17 (const_int 0 [0]) "function.c":812 718 {nop}
     (nil))
(jump_insn 187 186 188 17 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 188 187 190)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 190 188 189 18 113 (nil) [2 uses])
(note 189 190 191 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 191 189 192 18 (const_int 0 [0]) "function.c":820 718 {nop}
     (nil))
(jump_insn 192 191 193 18 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 193 192 195)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       12
;;              13 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 195 193 194 19 114 (nil) [2 uses])
(note 194 195 196 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 196 194 197 19 (const_int 0 [0]) "function.c":828 718 {nop}
     (nil))
(jump_insn 197 196 198 19 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 198 197 200)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14
;;              15 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 200 198 199 20 115 (nil) [2 uses])
(note 199 200 201 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 201 199 161 20 (const_int 0 [0]) "function.c":836 718 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7
;;              5 [always] 
;;              19 [always] 
;;              17 [always] 
;;              18 [always] 
;;              20 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 158 159
(code_label 161 201 162 16 105 (nil) [5 uses])
(note 162 161 163 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 170 16 (set (reg:SI 0 ax [orig:158 _91 ] [158])
        (const_int 0 [0])) "function.c":838 86 {*movsi_internal}
     (nil))
(insn 170 163 171 16 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:159 <retval> ] [159])) "function.c":839 86 {*movsi_internal}
     (nil))
(insn 171 170 202 16 (use (reg/i:SI 0 ax)) "function.c":839 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 202 171 0 NOTE_INSN_DELETED)

;; Function step2 (step2, funcdef_no=18, decl_uid=6240, cgraph_uid=18, symbol_order=21)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 36:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 43
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 55:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 56:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 77
	 Choosing alt 0 in insn 77:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 89:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 90:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 104
	 Choosing alt 0 in insn 104:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 110:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 119:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 123:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 124:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 143:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 144:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 145
	 Choosing alt 0 in insn 145:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 146:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 153:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 157:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 158:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6 7 8 9
EBB 10 11
EBB 12 13
EBB 14 15
EBB 17
EBB 18
EBB 19
EBB 20
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 171: point = 0, n_alt = -1
   Insn 170: point = 0, n_alt = -2
   Insn 166: point = 1, n_alt = -2
   Insn 163: point = 3, n_alt = 0
  BB 20
   Insn 201: point = 4, n_alt = -1
  BB 15
   Insn 182: point = 4, n_alt = -1
   Insn 158: point = 4, n_alt = 8
   Insn 157: point = 4, n_alt = 8
   Insn 156: point = 5, n_alt = 3
   Insn 155: point = 7, n_alt = 3
   Insn 154: point = 8, n_alt = 1
   Insn 153: point = 9, n_alt = 0
   Insn 152: point = 11, n_alt = 0
   Insn 151: point = 12, n_alt = 3
   Insn 150: point = 14, n_alt = 3
  BB 14
   Insn 148: point = 15, n_alt = -1
   Insn 147: point = 15, n_alt = 0
   Insn 146: point = 16, n_alt = 4
   Insn 145: point = 18, n_alt = 0
   Insn 144: point = 20, n_alt = 0
   Insn 143: point = 22, n_alt = 0
   Insn 142: point = 24, n_alt = 0
   Insn 141: point = 26, n_alt = 3
   Insn 140: point = 28, n_alt = 3
   Insn 139: point = 29, n_alt = 3
   Insn 138: point = 31, n_alt = 0
   Insn 137: point = 33, n_alt = 0
   Insn 136: point = 35, n_alt = 0
   Insn 135: point = 37, n_alt = 0
   Insn 134: point = 39, n_alt = 3
   Insn 133: point = 41, n_alt = 3
   Insn 132: point = 42, n_alt = 3
   Insn 131: point = 44, n_alt = 3
  BB 18
   Insn 192: point = 45, n_alt = -1
   Insn 191: point = 45, n_alt = -1
  BB 11
   Insn 178: point = 45, n_alt = -1
   Insn 90: point = 45, n_alt = 8
   Insn 89: point = 45, n_alt = 8
   Insn 88: point = 46, n_alt = 3
   Insn 87: point = 48, n_alt = 3
   Insn 86: point = 49, n_alt = 1
   Insn 85: point = 50, n_alt = 0
   Insn 84: point = 52, n_alt = 0
   Insn 83: point = 53, n_alt = 3
   Insn 82: point = 55, n_alt = 3
  BB 10
   Insn 80: point = 56, n_alt = -1
   Insn 79: point = 56, n_alt = 0
   Insn 78: point = 57, n_alt = 4
   Insn 77: point = 59, n_alt = 0
   Insn 76: point = 61, n_alt = 0
   Insn 75: point = 63, n_alt = 0
   Insn 74: point = 65, n_alt = 3
   Insn 73: point = 67, n_alt = 3
   Insn 72: point = 68, n_alt = 3
   Insn 71: point = 70, n_alt = 0
   Insn 70: point = 72, n_alt = 0
   Insn 69: point = 74, n_alt = 0
   Insn 68: point = 76, n_alt = 0
   Insn 67: point = 78, n_alt = 0
   Insn 66: point = 80, n_alt = 3
   Insn 65: point = 82, n_alt = 3
   Insn 64: point = 83, n_alt = 3
   Insn 63: point = 85, n_alt = 3
  BB 17
   Insn 187: point = 86, n_alt = -1
   Insn 186: point = 86, n_alt = -1
  BB 9
   Insn 176: point = 86, n_alt = -1
   Insn 56: point = 86, n_alt = 8
   Insn 55: point = 86, n_alt = 8
   Insn 54: point = 87, n_alt = 3
   Insn 53: point = 89, n_alt = 3
   Insn 52: point = 90, n_alt = 1
   Insn 51: point = 91, n_alt = 0
   Insn 50: point = 93, n_alt = 0
   Insn 49: point = 94, n_alt = 3
   Insn 48: point = 96, n_alt = 3
  BB 8
   Insn 46: point = 97, n_alt = -1
   Insn 45: point = 97, n_alt = 0
   Insn 44: point = 98, n_alt = 4
   Insn 43: point = 100, n_alt = 0
   Insn 42: point = 102, n_alt = 0
   Insn 41: point = 104, n_alt = 0
   Insn 40: point = 106, n_alt = 3
   Insn 39: point = 108, n_alt = 3
   Insn 38: point = 109, n_alt = 3
   Insn 37: point = 111, n_alt = 0
   Insn 36: point = 113, n_alt = 0
   Insn 35: point = 115, n_alt = 0
   Insn 34: point = 117, n_alt = 0
   Insn 33: point = 119, n_alt = 0
   Insn 32: point = 121, n_alt = 3
   Insn 31: point = 123, n_alt = 3
   Insn 30: point = 124, n_alt = 3
   Insn 29: point = 126, n_alt = 3
  BB 19
   Insn 197: point = 127, n_alt = -1
   Insn 196: point = 127, n_alt = -1
  BB 13
   Insn 180: point = 127, n_alt = -1
   Insn 124: point = 127, n_alt = 8
   Insn 123: point = 127, n_alt = 8
   Insn 122: point = 128, n_alt = 3
   Insn 121: point = 130, n_alt = 3
   Insn 120: point = 131, n_alt = 1
   Insn 119: point = 132, n_alt = 0
   Insn 118: point = 134, n_alt = 0
   Insn 117: point = 135, n_alt = 3
   Insn 116: point = 137, n_alt = 3
  BB 12
   Insn 114: point = 138, n_alt = -1
   Insn 113: point = 138, n_alt = 0
   Insn 112: point = 139, n_alt = 4
   Insn 111: point = 141, n_alt = 0
   Insn 110: point = 143, n_alt = 0
   Insn 109: point = 145, n_alt = 0
   Insn 108: point = 147, n_alt = 0
   Insn 107: point = 149, n_alt = 3
   Insn 106: point = 151, n_alt = 3
   Insn 105: point = 152, n_alt = 3
   Insn 104: point = 154, n_alt = 0
   Insn 103: point = 156, n_alt = 0
   Insn 102: point = 158, n_alt = 0
   Insn 101: point = 160, n_alt = 0
   Insn 100: point = 162, n_alt = 3
   Insn 99: point = 164, n_alt = 3
   Insn 98: point = 165, n_alt = 3
   Insn 97: point = 167, n_alt = 3
  BB 5
   Insn 174: point = 168, n_alt = -1
  BB 4
   Insn 17: point = 168, n_alt = -1
   Insn 16: point = 168, n_alt = 0
  BB 7
   Insn 27: point = 170, n_alt = -1
   Insn 26: point = 170, n_alt = 0
  BB 6
   Insn 24: point = 172, n_alt = -1
   Insn 23: point = 172, n_alt = 0
  BB 3
   Insn 14: point = 173, n_alt = -1
   Insn 13: point = 173, n_alt = 0
  BB 2
   Insn 11: point = 174, n_alt = -1
   Insn 10: point = 174, n_alt = 0
   Insn 9: point = 174, n_alt = 0
   Insn 8: point = 176, n_alt = 4
   Insn 7: point = 178, n_alt = 3
   Insn 6: point = 180, n_alt = 3
   Insn 2: point = 181, n_alt = 5
 r87: [177..178]
 r88: [175..176]
 r89: [168..174]
 r90: [112..124]
 r91: [120..121]
 r92: [118..119]
 r93: [116..117]
 r94: [114..115]
 r95: [112..113]
 r96: [110..111]
 r97: [101..109]
 r98: [105..106]
 r99: [103..104]
 r100: [101..102]
 r101: [99..100]
 r102: [97..98]
 r103: [90..94]
 r104: [92..93]
 r105: [90..91]
 r106: [86..87]
 r107: [71..83]
 r108: [79..80]
 r109: [77..78]
 r110: [75..76]
 r111: [73..74]
 r112: [71..72]
 r113: [69..70]
 r114: [60..68]
 r115: [64..65]
 r116: [62..63]
 r117: [60..61]
 r118: [58..59]
 r119: [56..57]
 r120: [49..53]
 r121: [51..52]
 r122: [49..50]
 r123: [45..46]
 r124: [155..165]
 r125: [161..162]
 r126: [159..160]
 r127: [157..158]
 r128: [155..156]
 r129: [153..154]
 r130: [142..152]
 r131: [148..149]
 r132: [146..147]
 r133: [144..145]
 r134: [142..143]
 r135: [140..141]
 r136: [138..139]
 r137: [131..135]
 r138: [133..134]
 r139: [131..132]
 r140: [127..128]
 r141: [32..42]
 r142: [38..39]
 r143: [36..37]
 r144: [34..35]
 r145: [32..33]
 r146: [30..31]
 r147: [19..29]
 r148: [25..26]
 r149: [23..24]
 r150: [21..22]
 r151: [19..20]
 r152: [17..18]
 r153: [15..16]
 r154: [8..12]
 r155: [10..11]
 r156: [8..9]
 r157: [4..5]
 r158: [2..3]
 r159: [0..1]
 r160: [179..180]
 r161: [125..126]
 r162: [122..123]
 r163: [107..108]
 r164: [95..96]
 r165: [88..89]
 r166: [84..85]
 r167: [81..82]
 r168: [66..67]
 r169: [54..55]
 r170: [47..48]
 r171: [166..167]
 r172: [163..164]
 r173: [150..151]
 r174: [136..137]
 r175: [129..130]
 r176: [43..44]
 r177: [40..41]
 r178: [27..28]
 r179: [13..14]
 r180: [6..7]
Compressing live ranges: from 181 to 164 - 90%
Ranges after the compression:
 r87: [160..161]
 r88: [158..159]
 r89: [156..157]
 r90: [104..115]
 r91: [112..113]
 r92: [110..111]
 r93: [108..109]
 r94: [106..107]
 r95: [104..105]
 r96: [102..103]
 r97: [94..101]
 r98: [98..99]
 r99: [96..97]
 r100: [94..95]
 r101: [92..93]
 r102: [90..91]
 r103: [84..87]
 r104: [86..87]
 r105: [84..85]
 r106: [80..81]
 r107: [66..77]
 r108: [74..75]
 r109: [72..73]
 r110: [70..71]
 r111: [68..69]
 r112: [66..67]
 r113: [64..65]
 r114: [56..63]
 r115: [60..61]
 r116: [58..59]
 r117: [56..57]
 r118: [54..55]
 r119: [52..53]
 r120: [46..49]
 r121: [48..49]
 r122: [46..47]
 r123: [42..43]
 r124: [144..153]
 r125: [150..151]
 r126: [148..149]
 r127: [146..147]
 r128: [144..145]
 r129: [142..143]
 r130: [132..141]
 r131: [138..139]
 r132: [136..137]
 r133: [134..135]
 r134: [132..133]
 r135: [130..131]
 r136: [128..129]
 r137: [122..125]
 r138: [124..125]
 r139: [122..123]
 r140: [118..119]
 r141: [30..39]
 r142: [36..37]
 r143: [34..35]
 r144: [32..33]
 r145: [30..31]
 r146: [28..29]
 r147: [18..27]
 r148: [24..25]
 r149: [22..23]
 r150: [20..21]
 r151: [18..19]
 r152: [16..17]
 r153: [14..15]
 r154: [8..11]
 r155: [10..11]
 r156: [8..9]
 r157: [4..5]
 r158: [2..3]
 r159: [0..1]
 r160: [162..163]
 r161: [116..117]
 r162: [114..115]
 r163: [100..101]
 r164: [88..89]
 r165: [82..83]
 r166: [78..79]
 r167: [76..77]
 r168: [62..63]
 r169: [50..51]
 r170: [44..45]
 r171: [154..155]
 r172: [152..153]
 r173: [140..141]
 r174: [126..127]
 r175: [120..121]
 r176: [40..41]
 r177: [38..39]
 r178: [26..27]
 r179: [12..13]
 r180: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 26
changing reg in insn 23
changing reg in insn 16
changing reg in insn 13
changing reg in insn 10
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 86
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 98
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 117
changing reg in insn 120
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 147
changing reg in insn 151
changing reg in insn 154
changing reg in insn 152
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 163
changing reg in insn 166
changing reg in insn 166
changing reg in insn 170
changing reg in insn 6
changing reg in insn 7
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 39
changing reg in insn 40
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 73
changing reg in insn 74
changing reg in insn 82
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 106
changing reg in insn 107
changing reg in insn 116
changing reg in insn 117
changing reg in insn 121
changing reg in insn 122
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 140
changing reg in insn 141
changing reg in insn 150
changing reg in insn 151
changing reg in insn 155
changing reg in insn 156
deleting insn with uid = 166.
starting the processing of deferred insns
ending the processing of deferred insns


step2

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={79d,87u} r1={17d,16u} r2={1d} r4={1d} r5={1d,1u} r6={1d,42u} r7={1d,20u} r17={29d,9u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 317{141d,176u,0e} in 138{138 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 160
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":842 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":843 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":843 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:QI 0 ax [orig:88 _2 ] [88])
        (mem:QI (plus:DI (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (const_int 40 [0x28])) [0 _1->request+0 S1 A64])) "function.c":843 88 {*movqi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (sign_extend:SI (reg:QI 0 ax [orig:88 _2 ] [88]))) "function.c":843 155 {extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 100 [0x64]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":843 682 {*jcc}
     (nil)
 -> 129)
;;  succ:       3 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 100 [0x64]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "function.c":843 682 {*jcc}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 97 [0x61]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 17 16 173 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) "function.c":843 682 {*jcc}
     (nil)
 -> 95)
;;  succ:       5 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 173 17 174 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 174 173 175 5 (set (pc)
        (label_ref 161)) "function.c":843 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 175 174 21)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(code_label 21 175 22 6 118 (nil) [1 uses])
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 115 [0x73]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 24 23 25 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "function.c":843 682 {*jcc}
     (nil)
 -> 61)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 119 [0x77]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 161)
            (pc))) "function.c":843 682 {*jcc}
     (nil)
 -> 161)
;;  succ:       16
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 98 99 100 101 102 161 162 163
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 30 29 31 8 (set (reg/f:DI 1 dx [orig:90 _4 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 31 30 32 8 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 32 31 33 8 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [162])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 33 32 34 8 (set (reg:SI 0 ax [orig:92 _6 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":846 86 {*movsi_internal}
     (nil))
(insn 34 33 35 8 (set (reg:DI 0 ax [orig:93 _7 ] [93])
        (sign_extend:DI (reg:SI 0 ax [orig:92 _6 ] [92]))) "function.c":846 149 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 8 (parallel [
            (set (reg:DI 0 ax [orig:94 _8 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 _7 ] [93])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 551 {*ashldi3_1}
     (nil))
(insn 36 35 37 8 (parallel [
            (set (reg:DI 0 ax [orig:95 _9 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 _8 ] [94])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 222 {*adddi_1}
     (nil))
(insn 37 36 38 8 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 _9 ] [95])
                    (reg/f:DI 1 dx [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 222 {*adddi_1}
     (nil))
(insn 38 37 39 8 (set (reg/f:DI 1 dx [orig:97 _11 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [10 *_10+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 39 38 40 8 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 40 39 41 8 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [163])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 41 40 42 8 (set (reg:SI 0 ax [orig:99 _13 ] [99])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (const_int 12 [0xc])) [3 _12->x_current+0 S4 A32])) "function.c":846 86 {*movsi_internal}
     (nil))
(insn 42 41 43 8 (set (reg:DI 0 ax [orig:100 _14 ] [100])
        (sign_extend:DI (reg:SI 0 ax [orig:99 _13 ] [99]))) "function.c":846 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 8 (parallel [
            (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
                (plus:DI (reg:DI 0 ax [orig:100 _14 ] [100])
                    (reg/f:DI 1 dx [orig:97 _11 ] [97])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 222 {*adddi_1}
     (nil))
(insn 44 43 45 8 (set (reg:QI 0 ax [orig:102 _16 ] [102])
        (mem:QI (reg/f:DI 0 ax [orig:101 _15 ] [101]) [0 *_15+0 S1 A8])) "function.c":846 88 {*movqi_internal}
     (nil))
(insn 45 44 46 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:102 _16 ] [102])
            (const_int 77 [0x4d]))) "function.c":846 9 {*cmpqi_1}
     (nil))
(jump_insn 46 45 47 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 185)
            (pc))) "function.c":846 682 {*jcc}
     (nil)
 -> 185)
;;  succ:       9 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 164 165
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":848 85 {*movdi_internal}
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [164])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":848 85 {*movdi_internal}
     (nil))
(insn 50 49 51 9 (set (reg:SI 1 dx [orig:104 _18 ] [104])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])) "function.c":848 86 {*movsi_internal}
     (nil))
(insn 51 50 52 9 (parallel [
            (set (reg:SI 1 dx [orig:105 _19 ] [105])
                (plus:SI (reg:SI 1 dx [orig:104 _18 ] [104])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":848 221 {*addsi_1}
     (nil))
(insn 52 51 53 9 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:105 _19 ] [105])) "function.c":848 86 {*movsi_internal}
     (nil))
(insn 53 52 54 9 (set (reg/f:DI 0 ax [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":849 85 {*movdi_internal}
     (nil))
(insn 54 53 55 9 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [165])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":849 85 {*movdi_internal}
     (nil))
(insn 55 54 56 9 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (const_int 40 [0x28])) [0 _20->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":849 88 {*movqi_internal}
     (nil))
(insn 56 55 176 9 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":850 88 {*movqi_internal}
     (nil))
(jump_insn 176 56 177 9 (set (pc)
        (label_ref:DI 185)) "function.c":852 683 {jump}
     (nil)
 -> 185)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 177 176 61)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 110 111 112 113 114 115 116 117 118 119 166 167 168
(code_label 61 177 62 10 121 (nil) [1 uses])
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 64 63 65 10 (set (reg/f:DI 1 dx [orig:107 _21 ] [107])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [166])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 65 64 66 10 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 66 65 67 10 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [167])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 67 66 68 10 (set (reg:SI 0 ax [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:108 _22 ] [108])
                (const_int 16 [0x10])) [3 _22->y_current+0 S4 A64])) "function.c":854 86 {*movsi_internal}
     (nil))
(insn 68 67 69 10 (set (reg:DI 0 ax [orig:110 _24 ] [110])
        (sign_extend:DI (reg:SI 0 ax [orig:109 _23 ] [109]))) "function.c":854 149 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 10 (parallel [
            (set (reg:DI 0 ax [orig:111 _25 ] [111])
                (plus:DI (reg:DI 0 ax [orig:110 _24 ] [110])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 222 {*adddi_1}
     (nil))
(insn 70 69 71 10 (parallel [
            (set (reg:DI 0 ax [orig:112 _26 ] [112])
                (ashift:DI (reg:DI 0 ax [orig:111 _25 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 551 {*ashldi3_1}
     (nil))
(insn 71 70 72 10 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 _26 ] [112])
                    (reg/f:DI 1 dx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 222 {*adddi_1}
     (nil))
(insn 72 71 73 10 (set (reg/f:DI 1 dx [orig:114 _28 ] [114])
        (mem/f:DI (reg/f:DI 0 ax [orig:113 _27 ] [113]) [10 *_27+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 73 72 74 10 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 74 73 75 10 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [168])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 75 74 76 10 (set (reg:SI 0 ax [orig:116 _30 ] [116])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:115 _29 ] [115])
                (const_int 12 [0xc])) [3 _29->x_current+0 S4 A32])) "function.c":854 86 {*movsi_internal}
     (nil))
(insn 76 75 77 10 (set (reg:DI 0 ax [orig:117 _31 ] [117])
        (sign_extend:DI (reg:SI 0 ax [orig:116 _30 ] [116]))) "function.c":854 149 {*extendsidi2_rex64}
     (nil))
(insn 77 76 78 10 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (reg/f:DI 1 dx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 222 {*adddi_1}
     (nil))
(insn 78 77 79 10 (set (reg:QI 0 ax [orig:119 _33 ] [119])
        (mem:QI (reg/f:DI 0 ax [orig:118 _32 ] [118]) [0 *_32+0 S1 A8])) "function.c":854 88 {*movqi_internal}
     (nil))
(insn 79 78 80 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:119 _33 ] [119])
            (const_int 77 [0x4d]))) "function.c":854 9 {*cmpqi_1}
     (nil))
(jump_insn 80 79 81 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 190)
            (pc))) "function.c":854 682 {*jcc}
     (nil)
 -> 190)
;;  succ:       11 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 169 170
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":856 85 {*movdi_internal}
     (nil))
(insn 83 82 84 11 (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [169])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":856 85 {*movdi_internal}
     (nil))
(insn 84 83 85 11 (set (reg:SI 1 dx [orig:121 _35 ] [121])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (const_int 16 [0x10])) [3 _34->y_current+0 S4 A64])) "function.c":856 86 {*movsi_internal}
     (nil))
(insn 85 84 86 11 (parallel [
            (set (reg:SI 1 dx [orig:122 _36 ] [122])
                (plus:SI (reg:SI 1 dx [orig:121 _35 ] [121])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":856 221 {*addsi_1}
     (nil))
(insn 86 85 87 11 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (const_int 16 [0x10])) [3 _34->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:122 _36 ] [122])) "function.c":856 86 {*movsi_internal}
     (nil))
(insn 87 86 88 11 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":857 85 {*movdi_internal}
     (nil))
(insn 88 87 89 11 (set (reg/f:DI 0 ax [orig:123 _37 ] [123])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [170])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":857 85 {*movdi_internal}
     (nil))
(insn 89 88 90 11 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:123 _37 ] [123])
                (const_int 40 [0x28])) [0 _37->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":857 88 {*movqi_internal}
     (nil))
(insn 90 89 178 11 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":858 88 {*movqi_internal}
     (nil))
(jump_insn 178 90 179 11 (set (pc)
        (label_ref:DI 190)) "function.c":860 683 {jump}
     (nil)
 -> 190)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 179 178 95)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 129 130 131 132 133 134 135 136 171 172 173
(code_label 95 179 96 12 119 (nil) [1 uses])
(note 96 95 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 12 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 98 97 99 12 (set (reg/f:DI 1 dx [orig:124 _38 ] [124])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [171])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 99 98 100 12 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 100 99 101 12 (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [172])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:SI 0 ax [orig:126 _40 ] [126])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (const_int 16 [0x10])) [3 _39->y_current+0 S4 A64])) "function.c":862 86 {*movsi_internal}
     (nil))
(insn 102 101 103 12 (set (reg:DI 0 ax [orig:127 _41 ] [127])
        (sign_extend:DI (reg:SI 0 ax [orig:126 _40 ] [126]))) "function.c":862 149 {*extendsidi2_rex64}
     (nil))
(insn 103 102 104 12 (parallel [
            (set (reg:DI 0 ax [orig:128 _42 ] [128])
                (ashift:DI (reg:DI 0 ax [orig:127 _41 ] [127])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 551 {*ashldi3_1}
     (nil))
(insn 104 103 105 12 (parallel [
            (set (reg/f:DI 0 ax [orig:129 _43 ] [129])
                (plus:DI (reg:DI 0 ax [orig:128 _42 ] [128])
                    (reg/f:DI 1 dx [orig:124 _38 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 222 {*adddi_1}
     (nil))
(insn 105 104 106 12 (set (reg/f:DI 1 dx [orig:130 _44 ] [130])
        (mem/f:DI (reg/f:DI 0 ax [orig:129 _43 ] [129]) [10 *_43+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 106 105 107 12 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 107 106 108 12 (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [173])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 108 107 109 12 (set (reg:SI 0 ax [orig:132 _46 ] [132])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (const_int 12 [0xc])) [3 _45->x_current+0 S4 A32])) "function.c":862 86 {*movsi_internal}
     (nil))
(insn 109 108 110 12 (set (reg:DI 0 ax [orig:133 _47 ] [133])
        (sign_extend:DI (reg:SI 0 ax [orig:132 _46 ] [132]))) "function.c":862 149 {*extendsidi2_rex64}
     (nil))
(insn 110 109 111 12 (parallel [
            (set (reg:DI 0 ax [orig:134 _48 ] [134])
                (plus:DI (reg:DI 0 ax [orig:133 _47 ] [133])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 222 {*adddi_1}
     (nil))
(insn 111 110 112 12 (parallel [
            (set (reg/f:DI 0 ax [orig:135 _49 ] [135])
                (plus:DI (reg:DI 0 ax [orig:134 _48 ] [134])
                    (reg/f:DI 1 dx [orig:130 _44 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 222 {*adddi_1}
     (nil))
(insn 112 111 113 12 (set (reg:QI 0 ax [orig:136 _50 ] [136])
        (mem:QI (reg/f:DI 0 ax [orig:135 _49 ] [135]) [0 *_49+0 S1 A8])) "function.c":862 88 {*movqi_internal}
     (nil))
(insn 113 112 114 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:136 _50 ] [136])
            (const_int 77 [0x4d]))) "function.c":862 9 {*cmpqi_1}
     (nil))
(jump_insn 114 113 115 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 195)
            (pc))) "function.c":862 682 {*jcc}
     (nil)
 -> 195)
;;  succ:       13 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 138 139 140 174 175
(note 115 114 116 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 13 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":864 85 {*movdi_internal}
     (nil))
(insn 117 116 118 13 (set (reg/f:DI 0 ax [orig:137 _51 ] [137])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [174])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":864 85 {*movdi_internal}
     (nil))
(insn 118 117 119 13 (set (reg:SI 1 dx [orig:138 _52 ] [138])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:137 _51 ] [137])
                (const_int 12 [0xc])) [3 _51->x_current+0 S4 A32])) "function.c":864 86 {*movsi_internal}
     (nil))
(insn 119 118 120 13 (parallel [
            (set (reg:SI 1 dx [orig:139 _53 ] [139])
                (plus:SI (reg:SI 1 dx [orig:138 _52 ] [138])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":864 221 {*addsi_1}
     (nil))
(insn 120 119 121 13 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:137 _51 ] [137])
                (const_int 12 [0xc])) [3 _51->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:139 _53 ] [139])) "function.c":864 86 {*movsi_internal}
     (nil))
(insn 121 120 122 13 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":865 85 {*movdi_internal}
     (nil))
(insn 122 121 123 13 (set (reg/f:DI 0 ax [orig:140 _54 ] [140])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [175])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":865 85 {*movdi_internal}
     (nil))
(insn 123 122 124 13 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:140 _54 ] [140])
                (const_int 40 [0x28])) [0 _54->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":865 88 {*movqi_internal}
     (nil))
(insn 124 123 180 13 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":866 88 {*movqi_internal}
     (nil))
(jump_insn 180 124 181 13 (set (pc)
        (label_ref:DI 195)) "function.c":868 683 {jump}
     (nil)
 -> 195)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 129)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 144 145 146 147 148 149 150 151 152 153 176 177 178
(code_label 129 181 130 14 117 (nil) [1 uses])
(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 14 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 132 131 133 14 (set (reg/f:DI 1 dx [orig:141 _55 ] [141])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [176])
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 133 132 134 14 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 134 133 135 14 (set (reg/f:DI 0 ax [orig:142 _56 ] [142])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [177])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 135 134 136 14 (set (reg:SI 0 ax [orig:143 _57 ] [143])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:142 _56 ] [142])
                (const_int 16 [0x10])) [3 _56->y_current+0 S4 A64])) "function.c":870 86 {*movsi_internal}
     (nil))
(insn 136 135 137 14 (set (reg:DI 0 ax [orig:144 _58 ] [144])
        (sign_extend:DI (reg:SI 0 ax [orig:143 _57 ] [143]))) "function.c":870 149 {*extendsidi2_rex64}
     (nil))
(insn 137 136 138 14 (parallel [
            (set (reg:DI 0 ax [orig:145 _59 ] [145])
                (ashift:DI (reg:DI 0 ax [orig:144 _58 ] [144])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 551 {*ashldi3_1}
     (nil))
(insn 138 137 139 14 (parallel [
            (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (reg/f:DI 1 dx [orig:141 _55 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 222 {*adddi_1}
     (nil))
(insn 139 138 140 14 (set (reg/f:DI 1 dx [orig:147 _61 ] [147])
        (mem/f:DI (reg/f:DI 0 ax [orig:146 _60 ] [146]) [10 *_60+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 140 139 141 14 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 141 140 142 14 (set (reg/f:DI 0 ax [orig:148 _62 ] [148])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [178])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 142 141 143 14 (set (reg:SI 0 ax [orig:149 _63 ] [149])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:148 _62 ] [148])
                (const_int 12 [0xc])) [3 _62->x_current+0 S4 A32])) "function.c":870 86 {*movsi_internal}
     (nil))
(insn 143 142 144 14 (set (reg:DI 0 ax [orig:150 _64 ] [150])
        (sign_extend:DI (reg:SI 0 ax [orig:149 _63 ] [149]))) "function.c":870 149 {*extendsidi2_rex64}
     (nil))
(insn 144 143 145 14 (parallel [
            (set (reg:DI 0 ax [orig:151 _65 ] [151])
                (plus:DI (reg:DI 0 ax [orig:150 _64 ] [150])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 222 {*adddi_1}
     (nil))
(insn 145 144 146 14 (parallel [
            (set (reg/f:DI 0 ax [orig:152 _66 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _65 ] [151])
                    (reg/f:DI 1 dx [orig:147 _61 ] [147])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 222 {*adddi_1}
     (nil))
(insn 146 145 147 14 (set (reg:QI 0 ax [orig:153 _67 ] [153])
        (mem:QI (reg/f:DI 0 ax [orig:152 _66 ] [152]) [0 *_66+0 S1 A8])) "function.c":870 88 {*movqi_internal}
     (nil))
(insn 147 146 148 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:153 _67 ] [153])
            (const_int 77 [0x4d]))) "function.c":870 9 {*cmpqi_1}
     (nil))
(jump_insn 148 147 149 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 200)
            (pc))) "function.c":870 682 {*jcc}
     (nil)
 -> 200)
;;  succ:       15 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 179 180
(note 149 148 150 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 15 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":872 85 {*movdi_internal}
     (nil))
(insn 151 150 152 15 (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [179])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":872 85 {*movdi_internal}
     (nil))
(insn 152 151 153 15 (set (reg:SI 1 dx [orig:155 _69 ] [155])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])) "function.c":872 86 {*movsi_internal}
     (nil))
(insn 153 152 154 15 (parallel [
            (set (reg:SI 1 dx [orig:156 _70 ] [156])
                (plus:SI (reg:SI 1 dx [orig:155 _69 ] [155])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":872 221 {*addsi_1}
     (nil))
(insn 154 153 155 15 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:156 _70 ] [156])) "function.c":872 86 {*movsi_internal}
     (nil))
(insn 155 154 156 15 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":873 85 {*movdi_internal}
     (nil))
(insn 156 155 157 15 (set (reg/f:DI 0 ax [orig:157 _71 ] [157])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [180])
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":873 85 {*movdi_internal}
     (nil))
(insn 157 156 158 15 (set (mem:QI (plus:DI (reg/f:DI 0 ax [orig:157 _71 ] [157])
                (const_int 40 [0x28])) [0 _71->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":873 88 {*movqi_internal}
     (nil))
(insn 158 157 182 15 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":874 88 {*movqi_internal}
     (nil))
(jump_insn 182 158 183 15 (set (pc)
        (label_ref:DI 200)) "function.c":876 683 {jump}
     (nil)
 -> 200)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 183 182 185)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 15, next block 18, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 185 183 184 17 127 (nil) [2 uses])
(note 184 185 186 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 186 184 187 17 (const_int 0 [0]) "function.c":852 718 {nop}
     (nil))
(jump_insn 187 186 188 17 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 188 187 190)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 190 188 189 18 128 (nil) [2 uses])
(note 189 190 191 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 191 189 192 18 (const_int 0 [0]) "function.c":860 718 {nop}
     (nil))
(jump_insn 192 191 193 18 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 193 192 195)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       12
;;              13 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 195 193 194 19 129 (nil) [2 uses])
(note 194 195 196 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 196 194 197 19 (const_int 0 [0]) "function.c":868 718 {nop}
     (nil))
(jump_insn 197 196 198 19 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 198 197 200)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14
;;              15 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 200 198 199 20 130 (nil) [2 uses])
(note 199 200 201 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 201 199 161 20 (const_int 0 [0]) "function.c":876 718 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7
;;              5 [always] 
;;              19 [always] 
;;              17 [always] 
;;              18 [always] 
;;              20 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 158 159
(code_label 161 201 162 16 120 (nil) [5 uses])
(note 162 161 163 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 170 16 (set (reg:SI 0 ax [orig:158 _91 ] [158])
        (const_int 0 [0])) "function.c":878 86 {*movsi_internal}
     (nil))
(insn 170 163 171 16 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:159 <retval> ] [159])) "function.c":879 86 {*movsi_internal}
     (nil))
(insn 171 170 202 16 (use (reg/i:SI 0 ax)) "function.c":879 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 202 171 0 NOTE_INSN_DELETED)

;; Function bestia_move_random (bestia_move_random, funcdef_no=19, decl_uid=6242, cgraph_uid=19, symbol_order=22)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 22:  (0) r  (1) r  (2) le {*addsi_1}
            1 Early clobber: reject++
            2 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 23:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
      Creating newreg=142 from oldreg=89, assigning class AREG to r142
   23: {r142:SI=r142:SI/r91:SI;r122:SI=r142:SI%r91:SI;clobber flags:CC;}
      REG_DEAD r91:SI
      REG_DEAD r89:SI
      REG_UNUSED r123:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  111: r142:SI=r89:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) 0  (2) rm {*subsi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*addsi_1}
            1 Early clobber: reject++
            2 Small class reload: reject+=3
          alt=0,overall=10,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 36:  (0) =a  (1) =&d  (2) 0  (3) rm {*divmodsi4}
      Creating newreg=143 from oldreg=94, assigning class AREG to r143
   36: {r143:SI=r143:SI/r96:SI;r127:SI=r143:SI%r96:SI;clobber flags:CC;}
      REG_DEAD r96:SI
      REG_DEAD r94:SI
      REG_UNUSED r128:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  112: r143:SI=r94:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 53
	 Choosing alt 0 in insn 53:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6 7
EBB 8
EBB 10
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 103: point = 0, n_alt = -1
  BB 10
   Insn 109: point = 0, n_alt = -1
  BB 7
   Insn 88: point = 0, n_alt = -1
   Insn 87: point = 0, n_alt = 0
   Insn 86: point = 1, n_alt = 0
   Insn 85: point = 3, n_alt = 3
   Insn 84: point = 5, n_alt = 3
   Insn 83: point = 6, n_alt = 0
   Insn 82: point = 8, n_alt = 3
  BB 6
   Insn 80: point = 9, n_alt = -1
   Insn 79: point = 9, n_alt = 0
   Insn 78: point = 10, n_alt = 0
   Insn 77: point = 12, n_alt = 3
   Insn 76: point = 14, n_alt = 3
   Insn 75: point = 15, n_alt = 0
   Insn 74: point = 17, n_alt = 3
  BB 5
   Insn 72: point = 18, n_alt = -1
   Insn 71: point = 18, n_alt = 0
   Insn 70: point = 19, n_alt = 0
   Insn 69: point = 21, n_alt = 3
   Insn 68: point = 23, n_alt = 3
   Insn 67: point = 24, n_alt = 0
   Insn 66: point = 26, n_alt = 3
  BB 4
   Insn 64: point = 27, n_alt = -1
   Insn 63: point = 27, n_alt = 0
   Insn 62: point = 28, n_alt = 0
   Insn 61: point = 30, n_alt = 3
   Insn 60: point = 32, n_alt = 3
   Insn 59: point = 33, n_alt = 0
   Insn 58: point = 35, n_alt = 3
  BB 3
   Insn 56: point = 36, n_alt = -1
   Insn 55: point = 36, n_alt = 0
   Insn 54: point = 37, n_alt = 4
   Insn 53: point = 39, n_alt = 0
   Insn 52: point = 41, n_alt = 0
   Insn 51: point = 43, n_alt = 0
   Insn 50: point = 45, n_alt = 3
   Insn 49: point = 46, n_alt = 3
   Insn 48: point = 48, n_alt = 0
   Insn 47: point = 50, n_alt = 0
   Insn 46: point = 52, n_alt = 0
   Insn 45: point = 54, n_alt = 0
   Insn 44: point = 56, n_alt = 3
   Insn 43: point = 57, n_alt = 3
   Insn 42: point = 59, n_alt = 3
   Insn 41: point = 60, n_alt = 1
   Insn 40: point = 61, n_alt = 3
   Insn 39: point = 62, n_alt = 0
   Insn 38: point = 64, n_alt = 0
   Insn 37: point = 65, n_alt = -2
   Insn 36: point = 67, n_alt = 0
   Insn 112: point = 69, n_alt = -2
	Hard reg 1 is preferable by r143 with profit 1000
   Insn 35: point = 71, n_alt = 3
   Insn 34: point = 73, n_alt = 1
   Insn 33: point = 75, n_alt = 0
   Insn 32: point = 76, n_alt = -2
   Insn 31: point = 77, n_alt = 0
   Insn 30: point = 77, n_alt = 1
   Insn 29: point = 77, n_alt = 1
   Insn 28: point = 77, n_alt = 1
   Insn 27: point = 78, n_alt = 3
   Insn 26: point = 79, n_alt = 0
   Insn 25: point = 81, n_alt = 0
   Insn 24: point = 82, n_alt = -2
   Insn 23: point = 84, n_alt = 0
   Insn 111: point = 86, n_alt = -2
	Hard reg 1 is preferable by r142 with profit 1000
   Insn 22: point = 88, n_alt = 3
   Insn 21: point = 90, n_alt = 1
   Insn 20: point = 92, n_alt = 0
   Insn 19: point = 93, n_alt = -2
   Insn 18: point = 94, n_alt = 0
   Insn 17: point = 94, n_alt = 1
   Insn 16: point = 94, n_alt = 1
  BB 8
   Insn 105: point = 94, n_alt = -1
  BB 2
   Insn 14: point = 94, n_alt = 0
   Insn 13: point = 94, n_alt = -2
   Insn 12: point = 95, n_alt = 0
   Insn 11: point = 97, n_alt = -2
   Insn 10: point = 98, n_alt = 0
   Insn 9: point = 98, n_alt = 2
   Insn 8: point = 98, n_alt = 1
   Insn 7: point = 98, n_alt = 1
   Insn 6: point = 98, n_alt = 1
   Insn 2: point = 98, n_alt = 5
 r87: [96..97]
 r88: [94..95]
 r89: [87..93]
 r90: [89..90]
 r91: [85..88]
 r92: [80..82]
 r93: [77..79]
 r94: [70..76]
 r95: [72..73]
 r96: [68..71]
 r97: [63..65]
 r98: [60..62]
 r99: [49..57]
 r100: [53..54]
 r101: [51..52]
 r102: [49..50]
 r103: [47..48]
 r104: [40..46]
 r105: [42..43]
 r106: [40..41]
 r107: [38..39]
 r108: [36..37]
 r109: [27..33]
 r110: [29..30]
 r111: [27..28]
 r112: [18..24]
 r113: [20..21]
 r114: [18..19]
 r115: [9..15]
 r116: [11..12]
 r117: [9..10]
 r118: [0..6]
 r119: [2..3]
 r120: [0..1]
 r121: [91..92]
 r122: [83..85]
 r124: [80..81]
 r125: [77..78]
 r126: [74..75]
 r127: [66..68]
 r129: [63..64]
 r130: [60..61]
 r131: [58..59]
 r132: [55..56]
 r133: [44..45]
 r134: [34..35]
 r135: [31..32]
 r136: [25..26]
 r137: [22..23]
 r138: [16..17]
 r139: [13..14]
 r140: [7..8]
 r141: [4..5]
 r142: [84..86]
 r143: [67..69]
Compressing live ranges: from 98 to 84 - 85%
Ranges after the compression:
 r87: [82..83]
 r88: [80..81]
 r89: [74..79]
 r90: [76..77]
 r91: [72..75]
 r92: [69..70]
 r93: [67..68]
 r94: [61..66]
 r95: [63..64]
 r96: [59..62]
 r97: [56..57]
 r98: [54..55]
 r99: [44..51]
 r100: [48..49]
 r101: [46..47]
 r102: [44..45]
 r103: [42..43]
 r104: [36..41]
 r105: [38..39]
 r106: [36..37]
 r107: [34..35]
 r108: [32..33]
 r109: [24..29]
 r110: [26..27]
 r111: [24..25]
 r112: [16..21]
 r113: [18..19]
 r114: [16..17]
 r115: [8..13]
 r116: [10..11]
 r117: [8..9]
 r118: [0..5]
 r119: [2..3]
 r120: [0..1]
 r121: [78..79]
 r122: [71..72]
 r124: [69..70]
 r125: [67..68]
 r126: [65..66]
 r127: [58..59]
 r129: [56..57]
 r130: [54..55]
 r131: [52..53]
 r132: [50..51]
 r133: [40..41]
 r134: [30..31]
 r135: [28..29]
 r136: [22..23]
 r137: [20..21]
 r138: [14..15]
 r139: [12..13]
 r140: [6..7]
 r141: [4..5]
 r142: [71..73]
 r143: [58..60]

********** Assignment #1: **********

	 Assigning to 142 (cl=AREG, orig=89, freq=2000, tfirst=142, tfreq=2000)...
	   Assign 0 to reload r142 (freq=2000)
	 Assigning to 143 (cl=AREG, orig=94, freq=2000, tfirst=143, tfreq=2000)...
	   Assign 0 to reload r143 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 63
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 71
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 75
changing reg in insn 79
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 87
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 51
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
deleting insn with uid = 11.
deleting insn with uid = 24.
deleting insn with uid = 37.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 31.


bestia_move_random

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={45d,43u} r1={17d,12u,2e} r2={7d,4u} r4={5d} r5={7d,3u} r6={1d,37u} r7={1d,14u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={20d,5u} r18={4d} r19={4d} r20={1d,1u,6e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 505{378d,119u,8e} in 81{77 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":882 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 0 [0])) "function.c":883 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 0 [0])) "function.c":884 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 number+0 S4 A32])
        (const_int 0 [0])) "function.c":885 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":886 85 {*movdi_internal}
     (nil))
(call_insn 10 9 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":886 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 10 13 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (reg:SI 0 ax [orig:87 _1 ] [87])) "function.c":886 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "function.c":886 86 {*movsi_internal}
     (nil))
(call_insn 14 13 94 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":886 689 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              8 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 121 122 123 124 125 126 127 128 129 130 131 132 133
(code_label 94 14 15 3 134 (nil) [1 uses])
(note 15 94 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":890 86 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":890 86 {*movsi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f7cd0fe1600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "function.c":891 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 19 18 20 3 (set (reg:SI 1 dx [orig:89 _3 ] [89])
        (reg:SI 0 ax)) "function.c":891 86 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":891 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:SI 0 ax [orig:90 _4 ] [90])
                (minus:SI (reg:SI 0 ax [121])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 277 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
        (nil)))
(insn 22 21 111 3 (parallel [
            (set (reg:SI 2 cx [orig:91 _5 ] [91])
                (plus:SI (reg:SI 0 ax [orig:90 _4 ] [90])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 221 {*addsi_1}
     (nil))
(insn 111 22 23 3 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (reg:SI 1 dx [orig:89 _3 ] [89])) "function.c":891 86 {*movsi_internal}
     (nil))
(insn 23 111 25 3 (parallel [
            (set (reg:SI 0 ax [orig:89 _3 ] [89])
                (div:SI (reg:SI 0 ax [orig:89 _3 ] [89])
                    (reg:SI 2 cx [orig:91 _5 ] [91])))
            (set (reg:SI 1 dx [122])
                (mod:SI (reg:SI 0 ax [orig:89 _3 ] [89])
                    (reg:SI 2 cx [orig:91 _5 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 382 {*divmodsi4}
     (nil))
(insn 25 23 26 3 (set (reg:SI 0 ax [124])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":891 86 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg:SI 1 dx [orig:93 _7 ] [93])
                (plus:SI (reg:SI 1 dx [orig:92 _6 ] [92])
                    (reg:SI 0 ax [124])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:92 _6 ] [92])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
        (nil)))
(insn 27 26 28 3 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":891 85 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (set (mem:SI (plus:DI (reg/f:DI 0 ax [125])
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])
        (reg:SI 1 dx [orig:93 _7 ] [93])) "function.c":891 86 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":893 86 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":893 86 {*movsi_internal}
     (nil))
(call_insn 31 30 32 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f7cd0fe1600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "function.c":894 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 32 31 33 3 (set (reg:SI 1 dx [orig:94 _8 ] [94])
        (reg:SI 0 ax)) "function.c":894 86 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:SI 0 ax [126])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":894 86 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg:SI 0 ax [orig:95 _9 ] [95])
                (minus:SI (reg:SI 0 ax [126])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 277 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
        (nil)))
(insn 35 34 112 3 (parallel [
            (set (reg:SI 2 cx [orig:96 _10 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 _9 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 221 {*addsi_1}
     (nil))
(insn 112 35 36 3 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (reg:SI 1 dx [orig:94 _8 ] [94])) "function.c":894 86 {*movsi_internal}
     (nil))
(insn 36 112 38 3 (parallel [
            (set (reg:SI 0 ax [orig:94 _8 ] [94])
                (div:SI (reg:SI 0 ax [orig:94 _8 ] [94])
                    (reg:SI 2 cx [orig:96 _10 ] [96])))
            (set (reg:SI 1 dx [127])
                (mod:SI (reg:SI 0 ax [orig:94 _8 ] [94])
                    (reg:SI 2 cx [orig:96 _10 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 382 {*divmodsi4}
     (nil))
(insn 38 36 39 3 (set (reg:SI 0 ax [129])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":894 86 {*movsi_internal}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:SI 1 dx [orig:98 _12 ] [98])
                (plus:SI (reg:SI 1 dx [orig:97 _11 ] [97])
                    (reg:SI 0 ax [129])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 1 dx [orig:97 _11 ] [97])
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
        (nil)))
(insn 40 39 41 3 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":894 85 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (mem:SI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])
        (reg:SI 1 dx [orig:98 _12 ] [98])) "function.c":894 86 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 43 42 44 3 (set (reg/f:DI 1 dx [orig:99 _13 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [131])
                (const_int 16 [0x10])) [9 serwer_45(D)->mapa+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 44 43 45 3 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 45 44 46 3 (set (reg:SI 0 ax [orig:100 _14 ] [100])
        (mem:SI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])) "function.c":896 86 {*movsi_internal}
     (nil))
(insn 46 45 47 3 (set (reg:DI 0 ax [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 0 ax [orig:100 _14 ] [100]))) "function.c":896 149 {*extendsidi2_rex64}
     (nil))
(insn 47 46 48 3 (parallel [
            (set (reg:DI 0 ax [orig:102 _16 ] [102])
                (ashift:DI (reg:DI 0 ax [orig:101 _15 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":896 551 {*ashldi3_1}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (reg/f:DI 1 dx [orig:99 _13 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":896 222 {*adddi_1}
     (nil))
(insn 49 48 50 3 (set (reg/f:DI 1 dx [orig:104 _18 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [10 *_17+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 50 49 51 3 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:SI 0 ax [orig:105 _19 ] [105])
        (mem:SI (plus:DI (reg/f:DI 0 ax [133])
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])) "function.c":896 86 {*movsi_internal}
     (nil))
(insn 52 51 53 3 (set (reg:DI 0 ax [orig:106 _20 ] [106])
        (sign_extend:DI (reg:SI 0 ax [orig:105 _19 ] [105]))) "function.c":896 149 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 3 (parallel [
            (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (plus:DI (reg:DI 0 ax [orig:106 _20 ] [106])
                    (reg/f:DI 1 dx [orig:104 _18 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":896 222 {*adddi_1}
     (nil))
(insn 54 53 55 3 (set (reg:QI 0 ax [orig:108 _22 ] [108])
        (mem:QI (reg/f:DI 0 ax [orig:107 _21 ] [107]) [0 *_21+0 S1 A8])) "function.c":896 88 {*movqi_internal}
     (nil))
(insn 55 54 56 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:108 _22 ] [108])
            (const_int 46 [0x2e]))) "function.c":896 9 {*cmpqi_1}
     (nil))
(jump_insn 56 55 57 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":896 682 {*jcc}
     (nil)
 -> 92)
;;  succ:       4 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 111 134 135
(note 57 56 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 4 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:SI 1 dx [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [134])
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])) "function.c":896 86 {*movsi_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [135])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg:SI 0 ax [orig:111 _25 ] [111])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (const_int 16 [0x10])) [3 _24->y_current+0 S4 A64])) "function.c":896 86 {*movsi_internal}
     (nil))
(insn 63 62 64 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:109 _23 ] [109])
            (reg:SI 0 ax [orig:111 _25 ] [111]))) "function.c":896 11 {*cmpsi_1}
     (nil))
(jump_insn 64 63 65 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":896 682 {*jcc}
     (nil)
 -> 92)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 113 114 136 137
(note 65 64 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 5 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:SI 1 dx [orig:112 _26 ] [112])
        (mem:SI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])) "function.c":896 86 {*movsi_internal}
     (nil))
(insn 68 67 69 5 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 69 68 70 5 (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [137])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 70 69 71 5 (set (reg:SI 0 ax [orig:114 _28 ] [114])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (const_int 12 [0xc])) [3 _27->x_current+0 S4 A32])) "function.c":896 86 {*movsi_internal}
     (nil))
(insn 71 70 72 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:112 _26 ] [112])
            (reg:SI 0 ax [orig:114 _28 ] [114]))) "function.c":896 11 {*cmpsi_1}
     (nil))
(jump_insn 72 71 73 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":896 682 {*jcc}
     (nil)
 -> 92)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 138 139
(note 73 72 74 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 6 (set (reg/f:DI 0 ax [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 75 74 76 6 (set (reg:SI 1 dx [orig:115 _29 ] [115])
        (mem:SI (plus:DI (reg/f:DI 0 ax [138])
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])) "function.c":897 86 {*movsi_internal}
     (nil))
(insn 76 75 77 6 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 77 76 78 6 (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 78 77 79 6 (set (reg:SI 0 ax [orig:117 _31 ] [117])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (const_int 16 [0x10])) [3 _30->y_current+0 S4 A64])) "function.c":897 86 {*movsi_internal}
     (nil))
(insn 79 78 80 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:115 _29 ] [115])
            (reg:SI 0 ax [orig:117 _31 ] [117]))) "function.c":897 11 {*cmpsi_1}
     (nil))
(jump_insn 80 79 81 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":897 682 {*jcc}
     (nil)
 -> 92)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 140 141
(note 81 80 82 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 7 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 83 82 84 7 (set (reg:SI 1 dx [orig:118 _32 ] [118])
        (mem:SI (plus:DI (reg/f:DI 0 ax [140])
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])) "function.c":897 86 {*movsi_internal}
     (nil))
(insn 84 83 85 7 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 85 84 86 7 (set (reg/f:DI 0 ax [orig:119 _33 ] [119])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [141])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 86 85 87 7 (set (reg:SI 0 ax [orig:120 _34 ] [120])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:119 _33 ] [119])
                (const_int 12 [0xc])) [3 _33->x_current+0 S4 A32])) "function.c":897 86 {*movsi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:118 _32 ] [118])
            (reg:SI 0 ax [orig:120 _34 ] [120]))) "function.c":897 11 {*cmpsi_1}
     (nil))
(jump_insn 88 87 92 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 108)
            (pc))) "function.c":897 682 {*jcc}
     (nil)
 -> 108)
;;  succ:       10
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 10, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4
;;              5
;;              6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 92 88 93 8 132 (nil) [4 uses])
(note 93 92 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 105 93 106 8 (set (pc)
        (label_ref 94)) "function.c":890 683 {jump}
     (nil)
 -> 94)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 108)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 8, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 108 106 107 10 137 (nil) [1 uses])
(note 107 108 109 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 109 107 104 10 (const_int 0 [0]) "function.c":899 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 104 109 98 9 136 (nil) [0 uses])
(note 98 104 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 103 98 110 9 (const_int 0 [0]) "function.c":903 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 110 103 0 NOTE_INSN_DELETED)

;; Function wizja1 (wizja1, funcdef_no=20, decl_uid=6244, cgraph_uid=20, symbol_order=23)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 170:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 175:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 176
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 179:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 199:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 200
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 203:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 231:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 242:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 243:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 244
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 245
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 247:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 250:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 281:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 283
	 Choosing alt 0 in insn 283:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 285:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 288:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 294:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 297:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 299:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 314:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 315
	 Choosing alt 0 in insn 315:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 316
	 Choosing alt 0 in insn 316:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 318:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5 6
EBB 7 8
EBB 9
EBB 10 11
EBB 12 13 14
EBB 15 16
EBB 17
EBB 18
EBB 19
EBB 20 21 22
EBB 23
EBB 24 25 26 27
EBB 28
EBB 29 30 31 32
EBB 33
EBB 34 35
EBB 36 37

********** Pseudo live ranges #1: **********

  BB 37
   Insn 327: point = 0, n_alt = -1
   Insn 326: point = 0, n_alt = -2
   Insn 322: point = 1, n_alt = -2
   Insn 319: point = 3, n_alt = 0
   Insn 318: point = 4, n_alt = 8
   Insn 317: point = 5, n_alt = 0
   Insn 316: point = 7, n_alt = 0
   Insn 315: point = 9, n_alt = 0
   Insn 314: point = 11, n_alt = 1
   Insn 313: point = 13, n_alt = 1
   Insn 312: point = 15, n_alt = 0
   Insn 311: point = 16, n_alt = 0
   Insn 310: point = 18, n_alt = 0
   Insn 309: point = 19, n_alt = 3
   Insn 308: point = 21, n_alt = 3
   Insn 307: point = 23, n_alt = 3
  BB 36
   Insn 305: point = 24, n_alt = -1
   Insn 304: point = 24, n_alt = 1
   Insn 303: point = 25, n_alt = 0
  BB 18
   Insn 337: point = 26, n_alt = -1
   Insn 147: point = 26, n_alt = 1
   Insn 146: point = 27, n_alt = 0
  BB 16
   Insn 335: point = 28, n_alt = -1
   Insn 124: point = 28, n_alt = 1
  BB 17
   Insn 143: point = 28, n_alt = 1
   Insn 142: point = 28, n_alt = 1
   Insn 141: point = 29, n_alt = 0
   Insn 140: point = 31, n_alt = 0
   Insn 139: point = 33, n_alt = 3
   Insn 138: point = 35, n_alt = 3
   Insn 137: point = 37, n_alt = 3
   Insn 136: point = 38, n_alt = 1
   Insn 135: point = 39, n_alt = 0
   Insn 134: point = 41, n_alt = 0
   Insn 133: point = 43, n_alt = 3
   Insn 132: point = 45, n_alt = 3
   Insn 131: point = 47, n_alt = 3
  BB 11
   Insn 333: point = 48, n_alt = -1
   Insn 93: point = 48, n_alt = 1
   Insn 92: point = 49, n_alt = 0
   Insn 91: point = 51, n_alt = 3
   Insn 90: point = 53, n_alt = 3
   Insn 89: point = 55, n_alt = 3
   Insn 88: point = 56, n_alt = 1
   Insn 87: point = 56, n_alt = 1
  BB 15
   Insn 122: point = 56, n_alt = -1
   Insn 121: point = 56, n_alt = 0
   Insn 120: point = 57, n_alt = 0
   Insn 119: point = 59, n_alt = 3
   Insn 118: point = 61, n_alt = 3
   Insn 117: point = 63, n_alt = 3
  BB 14
   Insn 114: point = 64, n_alt = 1
  BB 13
   Insn 112: point = 64, n_alt = -1
   Insn 111: point = 64, n_alt = 0
   Insn 110: point = 65, n_alt = 0
   Insn 109: point = 67, n_alt = 3
   Insn 108: point = 69, n_alt = 3
   Insn 107: point = 71, n_alt = 3
   Insn 106: point = 72, n_alt = 1
   Insn 105: point = 72, n_alt = 1
  BB 12
   Insn 103: point = 72, n_alt = -1
   Insn 102: point = 72, n_alt = 0
   Insn 101: point = 73, n_alt = 0
   Insn 100: point = 75, n_alt = 3
   Insn 99: point = 77, n_alt = 3
   Insn 98: point = 79, n_alt = 3
  BB 10
   Insn 85: point = 80, n_alt = -1
   Insn 84: point = 80, n_alt = 0
   Insn 83: point = 81, n_alt = 0
   Insn 82: point = 83, n_alt = 3
   Insn 81: point = 85, n_alt = 3
   Insn 80: point = 87, n_alt = 3
  BB 8
   Insn 331: point = 88, n_alt = -1
   Insn 58: point = 88, n_alt = 1
  BB 9
   Insn 77: point = 88, n_alt = 1
   Insn 76: point = 88, n_alt = 1
   Insn 75: point = 89, n_alt = 0
   Insn 74: point = 91, n_alt = 0
   Insn 73: point = 93, n_alt = 3
   Insn 72: point = 95, n_alt = 3
   Insn 71: point = 97, n_alt = 3
   Insn 70: point = 98, n_alt = 1
   Insn 69: point = 99, n_alt = 0
   Insn 68: point = 101, n_alt = 0
   Insn 67: point = 103, n_alt = 3
   Insn 66: point = 105, n_alt = 3
   Insn 65: point = 107, n_alt = 3
  BB 3
   Insn 329: point = 108, n_alt = -1
   Insn 27: point = 108, n_alt = 1
   Insn 26: point = 109, n_alt = 0
   Insn 25: point = 111, n_alt = 3
   Insn 24: point = 113, n_alt = 3
   Insn 23: point = 115, n_alt = 3
   Insn 22: point = 116, n_alt = 1
   Insn 21: point = 116, n_alt = 1
  BB 7
   Insn 56: point = 116, n_alt = -1
   Insn 55: point = 116, n_alt = 0
   Insn 54: point = 117, n_alt = 0
   Insn 53: point = 119, n_alt = 3
   Insn 52: point = 121, n_alt = 3
   Insn 51: point = 123, n_alt = 3
  BB 6
   Insn 48: point = 124, n_alt = 1
  BB 5
   Insn 46: point = 124, n_alt = -1
   Insn 45: point = 124, n_alt = 0
   Insn 44: point = 125, n_alt = 0
   Insn 43: point = 127, n_alt = 3
   Insn 42: point = 129, n_alt = 3
   Insn 41: point = 131, n_alt = 3
   Insn 40: point = 132, n_alt = 1
   Insn 39: point = 132, n_alt = 1
  BB 4
   Insn 37: point = 132, n_alt = -1
   Insn 36: point = 132, n_alt = 0
   Insn 35: point = 133, n_alt = 0
   Insn 34: point = 135, n_alt = 3
   Insn 33: point = 137, n_alt = 3
   Insn 32: point = 139, n_alt = 3
  BB 2
   Insn 19: point = 140, n_alt = -1
   Insn 18: point = 140, n_alt = 0
   Insn 17: point = 141, n_alt = 0
   Insn 16: point = 143, n_alt = 3
   Insn 15: point = 145, n_alt = 3
   Insn 14: point = 147, n_alt = 3
   Insn 13: point = 148, n_alt = 1
   Insn 12: point = 148, n_alt = 1
   Insn 11: point = 148, n_alt = 1
   Insn 10: point = 148, n_alt = 1
   Insn 9: point = 148, n_alt = 1
   Insn 8: point = 148, n_alt = 1
   Insn 7: point = 148, n_alt = 1
   Insn 6: point = 148, n_alt = 1
   Insn 2: point = 148, n_alt = 5
  BB 35
   Insn 299: point = 148, n_alt = 1
   Insn 298: point = 148, n_alt = 1
   Insn 297: point = 148, n_alt = 1
  BB 34
   Insn 295: point = 148, n_alt = -1
   Insn 294: point = 148, n_alt = 1
   Insn 293: point = 149, n_alt = 0
  BB 19
   Insn 339: point = 150, n_alt = -1
   Insn 152: point = 150, n_alt = 1
   Insn 151: point = 151, n_alt = 0
  BB 33
   Insn 289: point = 152, n_alt = 1
   Insn 288: point = 152, n_alt = 1
  BB 32
   Insn 285: point = 152, n_alt = 8
   Insn 284: point = 153, n_alt = 0
   Insn 283: point = 155, n_alt = 0
   Insn 282: point = 157, n_alt = 0
   Insn 281: point = 159, n_alt = 1
   Insn 280: point = 161, n_alt = 1
   Insn 279: point = 163, n_alt = 0
   Insn 278: point = 164, n_alt = 0
   Insn 277: point = 166, n_alt = 0
   Insn 276: point = 167, n_alt = 3
   Insn 275: point = 169, n_alt = 3
   Insn 274: point = 171, n_alt = 3
  BB 31
   Insn 272: point = 172, n_alt = -1
   Insn 271: point = 172, n_alt = 0
   Insn 270: point = 173, n_alt = 0
   Insn 269: point = 175, n_alt = 3
   Insn 268: point = 177, n_alt = 3
   Insn 267: point = 179, n_alt = 3
  BB 30
   Insn 265: point = 180, n_alt = -1
   Insn 264: point = 180, n_alt = 0
   Insn 263: point = 181, n_alt = 0
   Insn 262: point = 183, n_alt = 3
   Insn 261: point = 185, n_alt = 3
   Insn 260: point = 187, n_alt = 3
  BB 29
   Insn 258: point = 188, n_alt = -1
   Insn 257: point = 188, n_alt = 0
   Insn 255: point = 189, n_alt = 0
   Insn 254: point = 191, n_alt = 3
   Insn 253: point = 193, n_alt = 3
  BB 23
   Insn 341: point = 194, n_alt = -1
   Insn 206: point = 194, n_alt = 1
  BB 22
   Insn 203: point = 194, n_alt = 8
   Insn 202: point = 195, n_alt = 0
   Insn 201: point = 197, n_alt = 0
   Insn 200: point = 199, n_alt = 0
   Insn 199: point = 201, n_alt = 1
   Insn 198: point = 203, n_alt = 1
   Insn 197: point = 205, n_alt = 0
   Insn 196: point = 206, n_alt = 0
   Insn 195: point = 208, n_alt = 0
   Insn 194: point = 209, n_alt = 3
   Insn 193: point = 211, n_alt = 3
   Insn 192: point = 213, n_alt = 3
  BB 21
   Insn 190: point = 214, n_alt = -1
   Insn 189: point = 214, n_alt = 0
   Insn 188: point = 215, n_alt = 0
   Insn 187: point = 217, n_alt = 3
   Insn 186: point = 219, n_alt = 3
  BB 20
   Insn 184: point = 220, n_alt = -1
   Insn 183: point = 220, n_alt = 0
   Insn 182: point = 221, n_alt = 0
   Insn 181: point = 223, n_alt = 3
   Insn 180: point = 225, n_alt = 3
   Insn 179: point = 226, n_alt = 8
   Insn 178: point = 227, n_alt = 0
   Insn 177: point = 229, n_alt = 0
   Insn 176: point = 231, n_alt = 0
   Insn 175: point = 233, n_alt = 1
   Insn 174: point = 235, n_alt = 1
   Insn 173: point = 237, n_alt = 0
   Insn 172: point = 238, n_alt = 1
   Insn 171: point = 240, n_alt = 0
   Insn 170: point = 241, n_alt = 4
   Insn 169: point = 243, n_alt = 3
   Insn 168: point = 245, n_alt = 3
   Insn 167: point = 247, n_alt = 3
   Insn 166: point = 248, n_alt = 0
   Insn 165: point = 250, n_alt = 0
   Insn 164: point = 252, n_alt = 0
   Insn 163: point = 253, n_alt = 3
   Insn 162: point = 255, n_alt = 0
   Insn 161: point = 257, n_alt = 0
   Insn 160: point = 259, n_alt = 1
   Insn 159: point = 261, n_alt = 0
   Insn 158: point = 262, n_alt = 3
   Insn 157: point = 264, n_alt = 3
   Insn 156: point = 266, n_alt = 3
  BB 28
   Insn 250: point = 267, n_alt = 1
  BB 27
   Insn 247: point = 267, n_alt = 8
   Insn 246: point = 268, n_alt = 0
   Insn 245: point = 270, n_alt = 0
   Insn 244: point = 272, n_alt = 0
   Insn 243: point = 274, n_alt = 1
   Insn 242: point = 276, n_alt = 1
   Insn 241: point = 278, n_alt = 0
   Insn 240: point = 279, n_alt = 0
   Insn 239: point = 281, n_alt = 0
   Insn 238: point = 282, n_alt = 3
   Insn 237: point = 284, n_alt = 3
   Insn 236: point = 286, n_alt = 3
  BB 26
   Insn 234: point = 287, n_alt = -1
   Insn 233: point = 287, n_alt = 0
   Insn 232: point = 288, n_alt = 0
   Insn 231: point = 290, n_alt = 1
   Insn 230: point = 292, n_alt = 0
   Insn 229: point = 293, n_alt = 3
   Insn 228: point = 295, n_alt = 3
  BB 25
   Insn 226: point = 296, n_alt = -1
   Insn 225: point = 296, n_alt = 0
   Insn 224: point = 297, n_alt = 0
   Insn 223: point = 299, n_alt = 0
   Insn 222: point = 301, n_alt = 1
   Insn 221: point = 303, n_alt = 0
   Insn 220: point = 304, n_alt = 3
   Insn 219: point = 306, n_alt = 3
  BB 24
   Insn 217: point = 307, n_alt = -1
   Insn 216: point = 307, n_alt = 0
   Insn 215: point = 308, n_alt = 0
   Insn 214: point = 310, n_alt = 0
   Insn 213: point = 312, n_alt = 1
   Insn 212: point = 314, n_alt = 0
   Insn 211: point = 315, n_alt = 3
   Insn 210: point = 317, n_alt = 3
 r87: [144..145]
 r88: [142..143]
 r89: [140..141]
 r90: [112..113]
 r91: [110..111]
 r92: [136..137]
 r93: [134..135]
 r94: [132..133]
 r95: [128..129]
 r96: [126..127]
 r97: [124..125]
 r98: [120..121]
 r99: [118..119]
 r100: [116..117]
 r101: [104..105]
 r102: [102..103]
 r103: [100..101]
 r104: [94..95]
 r105: [92..93]
 r106: [90..91]
 r107: [84..85]
 r108: [82..83]
 r109: [80..81]
 r110: [52..53]
 r111: [50..51]
 r112: [76..77]
 r113: [74..75]
 r114: [72..73]
 r115: [68..69]
 r116: [66..67]
 r117: [64..65]
 r118: [60..61]
 r119: [58..59]
 r120: [56..57]
 r121: [44..45]
 r122: [42..43]
 r123: [40..41]
 r124: [34..35]
 r125: [32..33]
 r126: [30..31]
 r127: [263..264]
 r128: [256..262]
 r129: [258..259]
 r130: [256..257]
 r131: [254..255]
 r132: [249..253]
 r133: [249..250]
 r134: [242..248]
 r135: [244..245]
 r136: [232..243]
 r137: [226..241]
 r138: [222..223]
 r139: [220..221]
 r140: [216..217]
 r141: [214..215]
 r142: [210..211]
 r143: [200..209]
 r144: [309..315]
 r145: [307..308]
 r146: [298..304]
 r147: [296..297]
 r148: [289..293]
 r149: [287..288]
 r150: [283..284]
 r151: [273..282]
 r152: [190..191]
 r153: [188..189]
 r154: [184..185]
 r155: [182..183]
 r156: [180..181]
 r157: [176..177]
 r158: [174..175]
 r159: [172..173]
 r160: [168..169]
 r161: [158..167]
 r162: [20..21]
 r163: [10..19]
 r164: [2..3]
 r165: [0..1]
 r166: [146..147]
 r167: [114..115]
 r168: [108..109]
 r169: [138..139]
 r170: [130..131]
 r171: [122..123]
 r172: [106..107]
 r173: [98..99]
 r174: [96..97]
 r175: [88..89]
 r176: [86..87]
 r177: [54..55]
 r178: [48..49]
 r179: [78..79]
 r180: [70..71]
 r181: [62..63]
 r182: [46..47]
 r183: [38..39]
 r184: [36..37]
 r185: [28..29]
 r186: [26..27]
 r187: [150..151]
 r188: [265..266]
 r189: [260..261]
 r190: [251..252]
 r191: [246..247]
 r192: [230..238]
 r193: [239..240]
 r194: [234..235]
 r195: [236..237]
 r196: [232..233]
 r197: [230..231]
 r198: [228..229]
 r199: [226..227]
 r200: [224..225]
 r201: [218..219]
 r202: [212..213]
 r203: [198..206]
 r204: [207..208]
 r205: [202..203]
 r206: [204..205]
 r207: [200..201]
 r208: [198..199]
 r209: [196..197]
 r210: [194..195]
 r211: [316..317]
 r212: [311..312]
 r213: [313..314]
 r214: [309..310]
 r215: [305..306]
 r216: [300..301]
 r217: [302..303]
 r218: [298..299]
 r219: [294..295]
 r220: [289..290]
 r221: [291..292]
 r222: [285..286]
 r223: [271..279]
 r224: [280..281]
 r225: [275..276]
 r226: [277..278]
 r227: [273..274]
 r228: [271..272]
 r229: [269..270]
 r230: [267..268]
 r231: [192..193]
 r232: [186..187]
 r233: [178..179]
 r234: [170..171]
 r235: [156..164]
 r236: [165..166]
 r237: [160..161]
 r238: [162..163]
 r239: [158..159]
 r240: [156..157]
 r241: [154..155]
 r242: [152..153]
 r243: [148..149]
 r244: [24..25]
 r245: [22..23]
 r246: [8..16]
 r247: [17..18]
 r248: [12..13]
 r249: [14..15]
 r250: [10..11]
 r251: [8..9]
 r252: [6..7]
 r253: [4..5]
Compressing live ranges: from 318 to 302 - 94%
Ranges after the compression:
 r87: [142..143]
 r88: [140..141]
 r89: [138..139]
 r90: [110..111]
 r91: [108..109]
 r92: [134..135]
 r93: [132..133]
 r94: [130..131]
 r95: [126..127]
 r96: [124..125]
 r97: [122..123]
 r98: [118..119]
 r99: [116..117]
 r100: [114..115]
 r101: [102..103]
 r102: [100..101]
 r103: [98..99]
 r104: [92..93]
 r105: [90..91]
 r106: [88..89]
 r107: [82..83]
 r108: [80..81]
 r109: [78..79]
 r110: [50..51]
 r111: [48..49]
 r112: [74..75]
 r113: [72..73]
 r114: [70..71]
 r115: [66..67]
 r116: [64..65]
 r117: [62..63]
 r118: [58..59]
 r119: [56..57]
 r120: [54..55]
 r121: [42..43]
 r122: [40..41]
 r123: [38..39]
 r124: [32..33]
 r125: [30..31]
 r126: [28..29]
 r127: [252..253]
 r128: [246..251]
 r129: [248..249]
 r130: [246..247]
 r131: [244..245]
 r132: [240..243]
 r133: [240..241]
 r134: [234..239]
 r135: [236..237]
 r136: [226..235]
 r137: [220..233]
 r138: [216..217]
 r139: [214..215]
 r140: [210..211]
 r141: [208..209]
 r142: [204..205]
 r143: [196..203]
 r144: [294..299]
 r145: [292..293]
 r146: [284..289]
 r147: [282..283]
 r148: [276..279]
 r149: [274..275]
 r150: [270..271]
 r151: [262..269]
 r152: [186..187]
 r153: [184..185]
 r154: [180..181]
 r155: [178..179]
 r156: [176..177]
 r157: [172..173]
 r158: [170..171]
 r159: [168..169]
 r160: [164..165]
 r161: [156..163]
 r162: [18..19]
 r163: [10..17]
 r164: [2..3]
 r165: [0..1]
 r166: [144..145]
 r167: [112..113]
 r168: [106..107]
 r169: [136..137]
 r170: [128..129]
 r171: [120..121]
 r172: [104..105]
 r173: [96..97]
 r174: [94..95]
 r175: [86..87]
 r176: [84..85]
 r177: [52..53]
 r178: [46..47]
 r179: [76..77]
 r180: [68..69]
 r181: [60..61]
 r182: [44..45]
 r183: [36..37]
 r184: [34..35]
 r185: [26..27]
 r186: [24..25]
 r187: [148..149]
 r188: [254..255]
 r189: [250..251]
 r190: [242..243]
 r191: [238..239]
 r192: [224..231]
 r193: [232..233]
 r194: [228..229]
 r195: [230..231]
 r196: [226..227]
 r197: [224..225]
 r198: [222..223]
 r199: [220..221]
 r200: [218..219]
 r201: [212..213]
 r202: [206..207]
 r203: [194..201]
 r204: [202..203]
 r205: [198..199]
 r206: [200..201]
 r207: [196..197]
 r208: [194..195]
 r209: [192..193]
 r210: [190..191]
 r211: [300..301]
 r212: [296..297]
 r213: [298..299]
 r214: [294..295]
 r215: [290..291]
 r216: [286..287]
 r217: [288..289]
 r218: [284..285]
 r219: [280..281]
 r220: [276..277]
 r221: [278..279]
 r222: [272..273]
 r223: [260..267]
 r224: [268..269]
 r225: [264..265]
 r226: [266..267]
 r227: [262..263]
 r228: [260..261]
 r229: [258..259]
 r230: [256..257]
 r231: [188..189]
 r232: [182..183]
 r233: [174..175]
 r234: [166..167]
 r235: [154..161]
 r236: [162..163]
 r237: [158..159]
 r238: [160..161]
 r239: [156..157]
 r240: [154..155]
 r241: [152..153]
 r242: [150..151]
 r243: [146..147]
 r244: [22..23]
 r245: [20..21]
 r246: [8..15]
 r247: [16..17]
 r248: [12..13]
 r249: [14..15]
 r250: [10..11]
 r251: [8..9]
 r252: [6..7]
 r253: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 162
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 166
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 170
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 211
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 220
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 319
changing reg in insn 322
changing reg in insn 322
changing reg in insn 326
changing reg in insn 14
changing reg in insn 15
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 51
changing reg in insn 52
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 98
changing reg in insn 99
changing reg in insn 107
changing reg in insn 108
changing reg in insn 117
changing reg in insn 118
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 147
changing reg in insn 151
changing reg in insn 152
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 172
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 193
changing reg in insn 196
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 219
changing reg in insn 220
changing reg in insn 222
changing reg in insn 223
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 228
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 230
changing reg in insn 231
changing reg in insn 236
changing reg in insn 237
changing reg in insn 240
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 253
changing reg in insn 254
changing reg in insn 260
changing reg in insn 261
changing reg in insn 267
changing reg in insn 268
changing reg in insn 274
changing reg in insn 275
changing reg in insn 278
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 279
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 285
changing reg in insn 293
changing reg in insn 294
changing reg in insn 303
changing reg in insn 304
changing reg in insn 307
changing reg in insn 308
changing reg in insn 311
changing reg in insn 310
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 316
changing reg in insn 317
changing reg in insn 317
changing reg in insn 318
deleting insn with uid = 322.
starting the processing of deferred insns
ending the processing of deferred insns


wizja1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={126d,126u} r1={34d,33u} r2={9d,8u} r4={2d,1u} r5={1d,1u} r6={1d,136u} r7={1d,37u} r17={52d,18u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 598{237d,361u,0e} in 254{254 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 166
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])
        (reg:DI 5 di [ user ])) "function.c":907 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
        (const_int 0 [0])) "function.c":908 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":909 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":910 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":911 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":912 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":913 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":914 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":915 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":917 85 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [166]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":917 85 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (const_int 32 [0x20])) [14 _1->player1+0 S8 A64])) "function.c":917 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":917 86 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 1 [0x1]))) "function.c":917 11 {*cmpsi_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "function.c":917 682 {*jcc}
     (nil)
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90 91 167 168
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":919 86 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":920 86 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":921 85 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [167]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":921 85 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (const_int 32 [0x20])) [14 _4->player1+0 S8 A64])) "function.c":921 85 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 ax [168])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":921 86 {*movsi_internal}
     (nil))
(insn 27 26 329 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 0 ax [168])) "function.c":921 86 {*movsi_internal}
     (nil))
(jump_insn 329 27 330 3 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 330 329 30)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 169
(code_label 30 330 31 4 139 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":923 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [169]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":923 85 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (const_int 32 [0x20])) [14 _6->player1+0 S8 A64])) "function.c":923 85 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (const_int 16 [0x10])) [3 _7->y_current+0 S4 A64])) "function.c":923 86 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:94 _8 ] [94])
            (const_int 17 [0x11]))) "function.c":923 11 {*cmpsi_1}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "function.c":923 682 {*jcc}
     (nil)
 -> 63)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 170
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 16 [0x10])) "function.c":925 86 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 20 [0x14])) "function.c":926 86 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":927 85 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [170]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":927 85 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (const_int 32 [0x20])) [14 _9->player1+0 S8 A64])) "function.c":927 85 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:SI 0 ax [orig:97 _11 ] [97])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (const_int 16 [0x10])) [3 _10->y_current+0 S4 A64])) "function.c":927 86 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 _11 ] [97])
            (const_int 18 [0x12]))) "function.c":927 11 {*cmpsi_1}
     (nil))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "function.c":927 682 {*jcc}
     (nil)
 -> 49)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":929 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 171
(code_label 49 48 50 7 142 (nil) [1 uses])
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 7 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":931 85 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [171]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":931 85 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (const_int 32 [0x20])) [14 _12->player1+0 S8 A64])) "function.c":931 85 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:SI 0 ax [orig:100 _14 ] [100])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (const_int 16 [0x10])) [3 _13->y_current+0 S4 A64])) "function.c":931 86 {*movsi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 _14 ] [100])
            (const_int 19 [0x13]))) "function.c":931 11 {*cmpsi_1}
     (nil))
(jump_insn 56 55 57 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 78)
            (pc))) "function.c":931 682 {*jcc}
     (nil)
 -> 78)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 331 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 3 [0x3])) "function.c":933 86 {*movsi_internal}
     (nil))
(jump_insn 331 58 332 8 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 332 331 63)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 172 173 174 175
(code_label 63 332 64 9 141 (nil) [1 uses])
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":938 85 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [172]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":938 85 {*movdi_internal}
     (nil))
(insn 67 66 68 9 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:101 _15 ] [101])
                (const_int 32 [0x20])) [14 _15->player1+0 S8 A64])) "function.c":938 85 {*movdi_internal}
     (nil))
(insn 68 67 69 9 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:102 _16 ] [102])
                (const_int 16 [0x10])) [3 _16->y_current+0 S4 A64])) "function.c":938 86 {*movsi_internal}
     (nil))
(insn 69 68 70 9 (parallel [
            (set (reg:SI 0 ax [173])
                (plus:SI (reg:SI 0 ax [orig:103 _17 ] [103])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":938 221 {*addsi_1}
     (nil))
(insn 70 69 71 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (reg:SI 0 ax [173])) "function.c":938 86 {*movsi_internal}
     (nil))
(insn 71 70 72 9 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":939 85 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg/f:DI 0 ax [orig:104 _18 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [174]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":939 85 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:104 _18 ] [104])
                (const_int 32 [0x20])) [14 _18->player1+0 S8 A64])) "function.c":939 85 {*movdi_internal}
     (nil))
(insn 74 73 75 9 (set (reg:SI 0 ax [orig:106 _20 ] [106])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:105 _19 ] [105])
                (const_int 16 [0x10])) [3 _19->y_current+0 S4 A64])) "function.c":939 86 {*movsi_internal}
     (nil))
(insn 75 74 76 9 (parallel [
            (set (reg:SI 0 ax [175])
                (plus:SI (reg:SI 0 ax [orig:106 _20 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":939 221 {*addsi_1}
     (nil))
(insn 76 75 77 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (reg:SI 0 ax [175])) "function.c":939 86 {*movsi_internal}
     (nil))
(insn 77 76 78 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":940 86 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7
;;              3 [always] 
;;              9 (FALLTHRU)
;;              8 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 176
(code_label 78 77 79 10 140 (nil) [3 uses])
(note 79 78 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 10 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":943 85 {*movdi_internal}
     (nil))
(insn 81 80 82 10 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [176]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":943 85 {*movdi_internal}
     (nil))
(insn 82 81 83 10 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (const_int 32 [0x20])) [14 _21->player1+0 S8 A64])) "function.c":943 85 {*movdi_internal}
     (nil))
(insn 83 82 84 10 (set (reg:SI 0 ax [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:108 _22 ] [108])
                (const_int 12 [0xc])) [3 _22->x_current+0 S4 A32])) "function.c":943 86 {*movsi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:109 _23 ] [109])
            (const_int 1 [0x1]))) "function.c":943 11 {*cmpsi_1}
     (nil))
(jump_insn 85 84 86 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "function.c":943 682 {*jcc}
     (nil)
 -> 96)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110 111 177 178
(note 86 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":945 86 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":946 86 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":947 85 {*movdi_internal}
     (nil))
(insn 90 89 91 11 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [177]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":947 85 {*movdi_internal}
     (nil))
(insn 91 90 92 11 (set (reg/f:DI 0 ax [orig:111 _25 ] [111])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (const_int 32 [0x20])) [14 _24->player1+0 S8 A64])) "function.c":947 85 {*movdi_internal}
     (nil))
(insn 92 91 93 11 (set (reg:SI 0 ax [178])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:111 _25 ] [111])
                (const_int 12 [0xc])) [3 _25->x_current+0 S4 A32])) "function.c":947 86 {*movsi_internal}
     (nil))
(insn 93 92 333 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (reg:SI 0 ax [178])) "function.c":947 86 {*movsi_internal}
     (nil))
(jump_insn 333 93 334 11 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 334 333 96)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 113 114 179
(code_label 96 334 97 12 144 (nil) [1 uses])
(note 97 96 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 12 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":949 85 {*movdi_internal}
     (nil))
(insn 99 98 100 12 (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
        (mem/f:DI (reg/f:DI 0 ax [179]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":949 85 {*movdi_internal}
     (nil))
(insn 100 99 101 12 (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:112 _26 ] [112])
                (const_int 32 [0x20])) [14 _26->player1+0 S8 A64])) "function.c":949 85 {*movdi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:SI 0 ax [orig:114 _28 ] [114])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (const_int 12 [0xc])) [3 _27->x_current+0 S4 A32])) "function.c":949 86 {*movsi_internal}
     (nil))
(insn 102 101 103 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:114 _28 ] [114])
            (const_int 27 [0x1b]))) "function.c":949 11 {*cmpsi_1}
     (nil))
(jump_insn 103 102 104 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":949 682 {*jcc}
     (nil)
 -> 129)
;;  succ:       13 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 180
(note 104 103 105 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 26 [0x1a])) "function.c":951 86 {*movsi_internal}
     (nil))
(insn 106 105 107 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 30 [0x1e])) "function.c":952 86 {*movsi_internal}
     (nil))
(insn 107 106 108 13 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":953 85 {*movdi_internal}
     (nil))
(insn 108 107 109 13 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [180]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":953 85 {*movdi_internal}
     (nil))
(insn 109 108 110 13 (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:115 _29 ] [115])
                (const_int 32 [0x20])) [14 _29->player1+0 S8 A64])) "function.c":953 85 {*movdi_internal}
     (nil))
(insn 110 109 111 13 (set (reg:SI 0 ax [orig:117 _31 ] [117])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (const_int 12 [0xc])) [3 _30->x_current+0 S4 A32])) "function.c":953 86 {*movsi_internal}
     (nil))
(insn 111 110 112 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:117 _31 ] [117])
            (const_int 28 [0x1c]))) "function.c":953 11 {*cmpsi_1}
     (nil))
(jump_insn 112 111 113 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":953 682 {*jcc}
     (nil)
 -> 115)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":955 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 181
(code_label 115 114 116 15 147 (nil) [1 uses])
(note 116 115 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 15 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":957 85 {*movdi_internal}
     (nil))
(insn 118 117 119 15 (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [181]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":957 85 {*movdi_internal}
     (nil))
(insn 119 118 120 15 (set (reg/f:DI 0 ax [orig:119 _33 ] [119])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (const_int 32 [0x20])) [14 _32->player1+0 S8 A64])) "function.c":957 85 {*movdi_internal}
     (nil))
(insn 120 119 121 15 (set (reg:SI 0 ax [orig:120 _34 ] [120])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:119 _33 ] [119])
                (const_int 12 [0xc])) [3 _33->x_current+0 S4 A32])) "function.c":957 86 {*movsi_internal}
     (nil))
(insn 121 120 122 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:120 _34 ] [120])
            (const_int 29 [0x1d]))) "function.c":957 11 {*cmpsi_1}
     (nil))
(jump_insn 122 121 123 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) "function.c":957 682 {*jcc}
     (nil)
 -> 144)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 123 122 124 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 335 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 3 [0x3])) "function.c":959 86 {*movsi_internal}
     (nil))
(jump_insn 335 124 336 16 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 336 335 129)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 124 125 126 182 183 184 185
(code_label 129 336 130 17 146 (nil) [1 uses])
(note 130 129 131 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 17 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":964 85 {*movdi_internal}
     (nil))
(insn 132 131 133 17 (set (reg/f:DI 0 ax [orig:121 _35 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [182]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":964 85 {*movdi_internal}
     (nil))
(insn 133 132 134 17 (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:121 _35 ] [121])
                (const_int 32 [0x20])) [14 _35->player1+0 S8 A64])) "function.c":964 85 {*movdi_internal}
     (nil))
(insn 134 133 135 17 (set (reg:SI 0 ax [orig:123 _37 ] [123])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:122 _36 ] [122])
                (const_int 12 [0xc])) [3 _36->x_current+0 S4 A32])) "function.c":964 86 {*movsi_internal}
     (nil))
(insn 135 134 136 17 (parallel [
            (set (reg:SI 0 ax [183])
                (plus:SI (reg:SI 0 ax [orig:123 _37 ] [123])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":964 221 {*addsi_1}
     (nil))
(insn 136 135 137 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (reg:SI 0 ax [183])) "function.c":964 86 {*movsi_internal}
     (nil))
(insn 137 136 138 17 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":965 85 {*movdi_internal}
     (nil))
(insn 138 137 139 17 (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [184]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":965 85 {*movdi_internal}
     (nil))
(insn 139 138 140 17 (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:124 _38 ] [124])
                (const_int 32 [0x20])) [14 _38->player1+0 S8 A64])) "function.c":965 85 {*movdi_internal}
     (nil))
(insn 140 139 141 17 (set (reg:SI 0 ax [orig:126 _40 ] [126])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (const_int 12 [0xc])) [3 _39->x_current+0 S4 A32])) "function.c":965 86 {*movsi_internal}
     (nil))
(insn 141 140 142 17 (parallel [
            (set (reg:SI 0 ax [185])
                (plus:SI (reg:SI 0 ax [orig:126 _40 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":965 221 {*addsi_1}
     (nil))
(insn 142 141 143 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (reg:SI 0 ax [185])) "function.c":965 86 {*movsi_internal}
     (nil))
(insn 143 142 144 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":966 86 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       15
;;              11 [always] 
;;              17 (FALLTHRU)
;;              16 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 186
(code_label 144 143 145 18 145 (nil) [3 uses])
(note 145 144 146 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 18 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])) "function.c":969 86 {*movsi_internal}
     (nil))
(insn 147 146 337 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
        (reg:SI 0 ax [186])) "function.c":969 86 {*movsi_internal}
     (nil))
(jump_insn 337 147 338 18 (set (pc)
        (label_ref 300)) "function.c":969 683 {jump}
     (nil)
 -> 300)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 338 337 302)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       36
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 187
(code_label 302 338 150 19 157 (nil) [1 uses])
(note 150 302 151 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 19 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])) "function.c":971 86 {*movsi_internal}
     (nil))
(insn 152 151 339 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
        (reg:SI 0 ax [187])) "function.c":971 86 {*movsi_internal}
     (nil))
(jump_insn 339 152 340 19 (set (pc)
        (label_ref 290)) "function.c":971 683 {jump}
     (nil)
 -> 290)
;;  succ:       34 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 340 339 292)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       34
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 130 131 132 133 134 135 136 137 138 139 188 189 190 191 192 193 194 195 196 197 198 199 200
(code_label 292 340 155 20 156 (nil) [1 uses])
(note 155 292 156 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 20 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 157 156 158 20 (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
        (mem/f:DI (reg/f:DI 0 ax [188]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 158 157 159 20 (set (reg/f:DI 0 ax [orig:128 _42 ] [128])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:127 _41 ] [127])
                (const_int 16 [0x10])) [9 _41->mapa+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 159 158 160 20 (set (reg:SI 1 dx [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 160 159 161 20 (set (reg:DI 1 dx [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 1 dx [189]))) "function.c":973 149 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 20 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (ashift:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 551 {*ashldi3_1}
     (nil))
(insn 162 161 163 20 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:128 _42 ] [128])
                    (reg:DI 1 dx [orig:130 _44 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (nil))
(insn 163 162 164 20 (set (reg/f:DI 1 dx [orig:132 _46 ] [132])
        (mem/f:DI (reg/f:DI 0 ax [orig:131 _45 ] [131]) [10 *_45+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 164 163 165 20 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 165 164 166 20 (set (reg:DI 0 ax [orig:133 _47 ] [133])
        (sign_extend:DI (reg:SI 0 ax [190]))) "function.c":973 149 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 20 (parallel [
            (set (reg/f:DI 1 dx [orig:134 _48 ] [134])
                (plus:DI (reg/f:DI 1 dx [orig:132 _46 ] [132])
                    (reg:DI 0 ax [orig:133 _47 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (nil))
(insn 167 166 168 20 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 168 167 169 20 (set (reg/f:DI 0 ax [orig:135 _49 ] [135])
        (mem/f:DI (reg/f:DI 0 ax [191]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 169 168 170 20 (set (reg/f:DI 4 si [orig:136 _50 ] [136])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:135 _49 ] [135])
                (const_int 32 [0x20])) [14 _49->player1+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 170 169 171 20 (set (reg:QI 0 ax [orig:137 _51 ] [137])
        (mem:QI (reg/f:DI 1 dx [orig:134 _48 ] [134]) [0 *_48+0 S1 A8])) "function.c":973 88 {*movqi_internal}
     (nil))
(insn 171 170 172 20 (set (reg:SI 1 dx [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 172 171 173 20 (set (reg:DI 1 dx [192])
        (sign_extend:DI (reg:SI 1 dx [193]))) "function.c":973 149 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 20 (set (reg:SI 2 cx [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 174 173 175 20 (set (reg:DI 2 cx [194])
        (sign_extend:DI (reg:SI 2 cx [195]))) "function.c":973 149 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 20 (parallel [
            (set (reg:DI 2 cx [196])
                (mult:DI (reg:DI 2 cx [194])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 349 {*muldi3_1}
     (nil))
(insn 176 175 177 20 (parallel [
            (set (reg:DI 2 cx [197])
                (plus:DI (reg:DI 2 cx [196])
                    (reg/f:DI 4 si [orig:136 _50 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (nil))
(insn 177 176 178 20 (parallel [
            (set (reg:DI 1 dx [198])
                (plus:DI (reg:DI 1 dx [192])
                    (reg:DI 2 cx [197])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (nil))
(insn 178 177 179 20 (parallel [
            (set (reg/f:DI 1 dx [199])
                (plus:DI (reg:DI 1 dx [198])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (nil))
(insn 179 178 180 20 (set (mem/j:QI (reg/f:DI 1 dx [199]) [0 _50->area S1 A8])
        (reg:QI 0 ax [orig:137 _51 ] [137])) "function.c":973 88 {*movqi_internal}
     (nil))
(insn 180 179 181 20 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (nil))
(insn 181 180 182 20 (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
        (mem/f:DI (reg/f:DI 0 ax [200]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (nil))
(insn 182 181 183 20 (set (reg:SI 0 ax [orig:139 _53 ] [139])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (const_int 36068 [0x8ce4])) [3 _52->bestia.y+0 S4 A32])) "function.c":974 86 {*movsi_internal}
     (nil))
(insn 183 182 184 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:139 _53 ] [139]))) "function.c":974 11 {*cmpsi_1}
     (nil))
(jump_insn 184 183 185 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":974 682 {*jcc}
     (nil)
 -> 204)
;;  succ:       21 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 141 201
(note 185 184 186 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 21 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (nil))
(insn 187 186 188 21 (set (reg/f:DI 0 ax [orig:140 _54 ] [140])
        (mem/f:DI (reg/f:DI 0 ax [201]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (nil))
(insn 188 187 189 21 (set (reg:SI 0 ax [orig:141 _55 ] [141])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:140 _54 ] [140])
                (const_int 36064 [0x8ce0])) [3 _54->bestia.x+0 S4 A64])) "function.c":974 86 {*movsi_internal}
     (nil))
(insn 189 188 190 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 0 ax [orig:141 _55 ] [141]))) "function.c":974 11 {*cmpsi_1}
     (nil))
(jump_insn 190 189 191 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":974 682 {*jcc}
     (nil)
 -> 204)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 202 203 204 205 206 207 208 209 210
(note 191 190 192 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 22 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":976 85 {*movdi_internal}
     (nil))
(insn 193 192 194 22 (set (reg/f:DI 0 ax [orig:142 _56 ] [142])
        (mem/f:DI (reg/f:DI 0 ax [202]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":976 85 {*movdi_internal}
     (nil))
(insn 194 193 195 22 (set (reg/f:DI 2 cx [orig:143 _57 ] [143])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:142 _56 ] [142])
                (const_int 32 [0x20])) [14 _56->player1+0 S8 A64])) "function.c":976 85 {*movdi_internal}
     (nil))
(insn 195 194 196 22 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":976 86 {*movsi_internal}
     (nil))
(insn 196 195 197 22 (set (reg:DI 0 ax [203])
        (sign_extend:DI (reg:SI 0 ax [204]))) "function.c":976 149 {*extendsidi2_rex64}
     (nil))
(insn 197 196 198 22 (set (reg:SI 1 dx [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":976 86 {*movsi_internal}
     (nil))
(insn 198 197 199 22 (set (reg:DI 1 dx [205])
        (sign_extend:DI (reg:SI 1 dx [206]))) "function.c":976 149 {*extendsidi2_rex64}
     (nil))
(insn 199 198 200 22 (parallel [
            (set (reg:DI 1 dx [207])
                (mult:DI (reg:DI 1 dx [205])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 349 {*muldi3_1}
     (nil))
(insn 200 199 201 22 (parallel [
            (set (reg:DI 1 dx [208])
                (plus:DI (reg:DI 1 dx [207])
                    (reg/f:DI 2 cx [orig:143 _57 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 222 {*adddi_1}
     (nil))
(insn 201 200 202 22 (parallel [
            (set (reg:DI 0 ax [209])
                (plus:DI (reg:DI 0 ax [203])
                    (reg:DI 1 dx [208])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 222 {*adddi_1}
     (nil))
(insn 202 201 203 22 (parallel [
            (set (reg/f:DI 0 ax [210])
                (plus:DI (reg:DI 0 ax [209])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 222 {*adddi_1}
     (nil))
(insn 203 202 204 22 (set (mem/j:QI (reg/f:DI 0 ax [210]) [0 _57->area S1 A8])
        (const_int 42 [0x2a])) "function.c":976 88 {*movqi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       20
;;              21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 204 203 205 23 151 (nil) [2 uses])
(note 205 204 206 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 341 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
        (const_int 0 [0])) "function.c":979 86 {*movsi_internal}
     (nil))
(jump_insn 341 206 342 23 (set (pc)
        (label_ref 251)) "function.c":979 683 {jump}
     (nil)
 -> 251)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 342 341 256)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       29
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 211 212 213 214
(code_label 256 342 209 24 154 (nil) [1 uses])
(note 209 256 210 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 24 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 211 210 212 24 (set (reg/f:DI 0 ax [orig:144 _58 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [211]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 212 211 213 24 (set (reg:SI 1 dx [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 213 212 214 24 (set (reg:DI 1 dx [212])
        (sign_extend:DI (reg:SI 1 dx [213]))) "function.c":981 149 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 24 (parallel [
            (set (reg:DI 1 dx [214])
                (plus:DI (reg:DI 1 dx [212])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":981 222 {*adddi_1}
     (nil))
(insn 215 214 216 24 (set (reg:SI 0 ax [orig:145 _59 ] [145])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [214])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [orig:144 _58 ] [144])) [3 _58->skarb.value_all_dropped_coin S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 216 215 217 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:145 _59 ] [145])
            (const_int 0 [0]))) "function.c":981 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 217 216 218 24 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":981 682 {*jcc}
     (nil)
 -> 248)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 215 216 217 218
(note 218 217 219 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 25 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 220 219 221 25 (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [215]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 221 220 222 25 (set (reg:SI 1 dx [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 222 221 223 25 (set (reg:DI 1 dx [216])
        (sign_extend:DI (reg:SI 1 dx [217]))) "function.c":981 149 {*extendsidi2_rex64}
     (nil))
(insn 223 222 224 25 (parallel [
            (set (reg:DI 1 dx [218])
                (plus:DI (reg:DI 1 dx [216])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":981 222 {*adddi_1}
     (nil))
(insn 224 223 225 25 (set (reg:SI 0 ax [orig:147 _61 ] [147])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [218])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:146 _60 ] [146])) [3 _60->skarb.dropped_coin S4 A64])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 225 224 226 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:147 _61 ] [147]))) "function.c":981 11 {*cmpsi_1}
     (nil))
(jump_insn 226 225 227 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":981 682 {*jcc}
     (nil)
 -> 248)
;;  succ:       26 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 219 220 221
(note 227 226 228 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 26 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 229 228 230 26 (set (reg/f:DI 0 ax [orig:148 _62 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [219]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 230 229 231 26 (set (reg:SI 1 dx [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 231 230 232 26 (set (reg:DI 1 dx [220])
        (sign_extend:DI (reg:SI 1 dx [221]))) "function.c":981 149 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 26 (set (reg:SI 0 ax [orig:149 _63 ] [149])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [220])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [orig:148 _62 ] [148]))
                (const_int 24068 [0x5e04])) [3 _62->skarb.dropped_coin S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 233 232 234 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 0 ax [orig:149 _63 ] [149]))) "function.c":981 11 {*cmpsi_1}
     (nil))
(jump_insn 234 233 235 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":981 682 {*jcc}
     (nil)
 -> 248)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 222 223 224 225 226 227 228 229 230
(note 235 234 236 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 27 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":983 85 {*movdi_internal}
     (nil))
(insn 237 236 238 27 (set (reg/f:DI 0 ax [orig:150 _64 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [222]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":983 85 {*movdi_internal}
     (nil))
(insn 238 237 239 27 (set (reg/f:DI 2 cx [orig:151 _65 ] [151])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:150 _64 ] [150])
                (const_int 32 [0x20])) [14 _64->player1+0 S8 A64])) "function.c":983 85 {*movdi_internal}
     (nil))
(insn 239 238 240 27 (set (reg:SI 0 ax [224])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":983 86 {*movsi_internal}
     (nil))
(insn 240 239 241 27 (set (reg:DI 0 ax [223])
        (sign_extend:DI (reg:SI 0 ax [224]))) "function.c":983 149 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 27 (set (reg:SI 1 dx [226])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":983 86 {*movsi_internal}
     (nil))
(insn 242 241 243 27 (set (reg:DI 1 dx [225])
        (sign_extend:DI (reg:SI 1 dx [226]))) "function.c":983 149 {*extendsidi2_rex64}
     (nil))
(insn 243 242 244 27 (parallel [
            (set (reg:DI 1 dx [227])
                (mult:DI (reg:DI 1 dx [225])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 349 {*muldi3_1}
     (nil))
(insn 244 243 245 27 (parallel [
            (set (reg:DI 1 dx [228])
                (plus:DI (reg:DI 1 dx [227])
                    (reg/f:DI 2 cx [orig:151 _65 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 222 {*adddi_1}
     (nil))
(insn 245 244 246 27 (parallel [
            (set (reg:DI 0 ax [229])
                (plus:DI (reg:DI 0 ax [223])
                    (reg:DI 1 dx [228])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 222 {*adddi_1}
     (nil))
(insn 246 245 247 27 (parallel [
            (set (reg/f:DI 0 ax [230])
                (plus:DI (reg:DI 0 ax [229])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 222 {*adddi_1}
     (nil))
(insn 247 246 248 27 (set (mem/j:QI (reg/f:DI 0 ax [230]) [0 _65->area S1 A8])
        (const_int 68 [0x44])) "function.c":983 88 {*movqi_internal}
     (nil))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       24
;;              25
;;              26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 248 247 249 28 153 (nil) [3 uses])
(note 249 248 250 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":979 221 {*addsi_1}
     (nil))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              23 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 231
(code_label 251 250 252 29 152 (nil) [1 uses])
(note 252 251 253 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 29 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":979 85 {*movdi_internal}
     (nil))
(insn 254 253 255 29 (set (reg/f:DI 0 ax [orig:152 _66 ] [152])
        (mem/f:DI (reg/f:DI 0 ax [231]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":979 85 {*movdi_internal}
     (nil))
(insn 255 254 257 29 (set (reg:SI 0 ax [orig:153 _67 ] [153])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:152 _66 ] [152])
                (const_int 24060 [0x5dfc])) [3 _66->skarb.count_drop_coin+0 S4 A32])) "function.c":979 86 {*movsi_internal}
     (nil))
(insn 257 255 258 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
            (reg:SI 0 ax [orig:153 _67 ] [153]))) "function.c":979 11 {*cmpsi_1}
     (nil))
(jump_insn 258 257 259 29 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 256)
            (pc))) "function.c":979 682 {*jcc}
     (nil)
 -> 256)
;;  succ:       24
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 232
(note 259 258 260 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 30 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 261 260 262 30 (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
        (mem/f:DI (reg/f:DI 0 ax [232]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 262 261 263 30 (set (reg/f:DI 0 ax [orig:155 _69 ] [155])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (const_int 32 [0x20])) [14 _68->player1+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 263 262 264 30 (set (reg:SI 0 ax [orig:156 _70 ] [156])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:155 _69 ] [155])
                (const_int 16 [0x10])) [3 _69->y_current+0 S4 A64])) "function.c":987 86 {*movsi_internal}
     (nil))
(insn 264 263 265 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:156 _70 ] [156]))) "function.c":987 11 {*cmpsi_1}
     (nil))
(jump_insn 265 264 266 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":987 682 {*jcc}
     (nil)
 -> 286)
;;  succ:       31 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 233
(note 266 265 267 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 31 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 268 267 269 31 (set (reg/f:DI 0 ax [orig:157 _71 ] [157])
        (mem/f:DI (reg/f:DI 0 ax [233]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 269 268 270 31 (set (reg/f:DI 0 ax [orig:158 _72 ] [158])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:157 _71 ] [157])
                (const_int 32 [0x20])) [14 _71->player1+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 270 269 271 31 (set (reg:SI 0 ax [orig:159 _73 ] [159])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:158 _72 ] [158])
                (const_int 12 [0xc])) [3 _72->x_current+0 S4 A32])) "function.c":987 86 {*movsi_internal}
     (nil))
(insn 271 270 272 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 0 ax [orig:159 _73 ] [159]))) "function.c":987 11 {*cmpsi_1}
     (nil))
(jump_insn 272 271 273 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":987 682 {*jcc}
     (nil)
 -> 286)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 234 235 236 237 238 239 240 241 242
(note 273 272 274 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 32 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":989 85 {*movdi_internal}
     (nil))
(insn 275 274 276 32 (set (reg/f:DI 0 ax [orig:160 _74 ] [160])
        (mem/f:DI (reg/f:DI 0 ax [234]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":989 85 {*movdi_internal}
     (nil))
(insn 276 275 277 32 (set (reg/f:DI 2 cx [orig:161 _75 ] [161])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:160 _74 ] [160])
                (const_int 32 [0x20])) [14 _74->player1+0 S8 A64])) "function.c":989 85 {*movdi_internal}
     (nil))
(insn 277 276 278 32 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":989 86 {*movsi_internal}
     (nil))
(insn 278 277 279 32 (set (reg:DI 0 ax [235])
        (sign_extend:DI (reg:SI 0 ax [236]))) "function.c":989 149 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 32 (set (reg:SI 1 dx [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":989 86 {*movsi_internal}
     (nil))
(insn 280 279 281 32 (set (reg:DI 1 dx [237])
        (sign_extend:DI (reg:SI 1 dx [238]))) "function.c":989 149 {*extendsidi2_rex64}
     (nil))
(insn 281 280 282 32 (parallel [
            (set (reg:DI 1 dx [239])
                (mult:DI (reg:DI 1 dx [237])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 349 {*muldi3_1}
     (nil))
(insn 282 281 283 32 (parallel [
            (set (reg:DI 1 dx [240])
                (plus:DI (reg:DI 1 dx [239])
                    (reg/f:DI 2 cx [orig:161 _75 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 222 {*adddi_1}
     (nil))
(insn 283 282 284 32 (parallel [
            (set (reg:DI 0 ax [241])
                (plus:DI (reg:DI 0 ax [235])
                    (reg:DI 1 dx [240])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 222 {*adddi_1}
     (nil))
(insn 284 283 285 32 (parallel [
            (set (reg/f:DI 0 ax [242])
                (plus:DI (reg:DI 0 ax [241])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 222 {*adddi_1}
     (nil))
(insn 285 284 286 32 (set (mem/j:QI (reg/f:DI 0 ax [242]) [0 _75->area S1 A8])
        (const_int 50 [0x32])) "function.c":989 88 {*movqi_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       30
;;              31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 286 285 287 33 155 (nil) [2 uses])
(note 287 286 288 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":992 221 {*addsi_1}
     (nil))
(insn 289 288 290 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":971 221 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              19 [always] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243
(code_label 290 289 291 34 150 (nil) [1 uses])
(note 291 290 293 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 293 291 294 34 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":971 86 {*movsi_internal}
     (nil))
(insn 294 293 295 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [243])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32]))) "function.c":971 11 {*cmpsi_1}
     (nil))
(jump_insn 295 294 296 34 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 292)
            (pc))) "function.c":971 682 {*jcc}
     (nil)
 -> 292)
;;  succ:       20
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 296 295 297 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":994 221 {*addsi_1}
     (nil))
(insn 298 297 299 35 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":995 86 {*movsi_internal}
     (nil))
(insn 299 298 300 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":969 221 {*addsi_1}
     (nil))
;;  succ:       36 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU,DFS_BACK)
;;              18 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244
(code_label 300 299 301 36 149 (nil) [1 uses])
(note 301 300 303 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 303 301 304 36 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":969 86 {*movsi_internal}
     (nil))
(insn 304 303 305 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [244])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32]))) "function.c":969 11 {*cmpsi_1}
     (nil))
(jump_insn 305 304 306 36 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) "function.c":969 682 {*jcc}
     (nil)
 -> 302)
;;  succ:       19
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 1, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 162 163 164 165 245 246 247 248 249 250 251 252 253
(note 306 305 307 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 37 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":998 85 {*movdi_internal}
     (nil))
(insn 308 307 309 37 (set (reg/f:DI 0 ax [orig:162 _76 ] [162])
        (mem/f:DI (reg/f:DI 0 ax [245]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":998 85 {*movdi_internal}
     (nil))
(insn 309 308 310 37 (set (reg/f:DI 2 cx [orig:163 _77 ] [163])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:162 _76 ] [162])
                (const_int 32 [0x20])) [14 _76->player1+0 S8 A64])) "function.c":998 85 {*movdi_internal}
     (nil))
(insn 310 309 311 37 (set (reg:SI 0 ax [247])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])) "function.c":998 86 {*movsi_internal}
     (nil))
(insn 311 310 312 37 (set (reg:DI 0 ax [246])
        (sign_extend:DI (reg:SI 0 ax [247]))) "function.c":998 149 {*extendsidi2_rex64}
     (nil))
(insn 312 311 313 37 (set (reg:SI 1 dx [249])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "function.c":998 86 {*movsi_internal}
     (nil))
(insn 313 312 314 37 (set (reg:DI 1 dx [248])
        (sign_extend:DI (reg:SI 1 dx [249]))) "function.c":998 149 {*extendsidi2_rex64}
     (nil))
(insn 314 313 315 37 (parallel [
            (set (reg:DI 1 dx [250])
                (mult:DI (reg:DI 1 dx [248])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 349 {*muldi3_1}
     (nil))
(insn 315 314 316 37 (parallel [
            (set (reg:DI 1 dx [251])
                (plus:DI (reg:DI 1 dx [250])
                    (reg/f:DI 2 cx [orig:163 _77 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 222 {*adddi_1}
     (nil))
(insn 316 315 317 37 (parallel [
            (set (reg:DI 0 ax [252])
                (plus:DI (reg:DI 0 ax [246])
                    (reg:DI 1 dx [251])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 222 {*adddi_1}
     (nil))
(insn 317 316 318 37 (parallel [
            (set (reg/f:DI 0 ax [253])
                (plus:DI (reg:DI 0 ax [252])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 222 {*adddi_1}
     (nil))
(insn 318 317 319 37 (set (mem/j:QI (reg/f:DI 0 ax [253]) [0 _77->area S1 A8])
        (const_int 49 [0x31])) "function.c":998 88 {*movqi_internal}
     (nil))
(insn 319 318 326 37 (set (reg:SI 0 ax [orig:164 _144 ] [164])
        (const_int 0 [0])) "function.c":1000 86 {*movsi_internal}
     (nil))
(insn 326 319 327 37 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:165 <retval> ] [165])) "function.c":1001 86 {*movsi_internal}
     (nil))
(insn 327 326 343 37 (use (reg/i:SI 0 ax)) "function.c":1001 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 343 327 0 NOTE_INSN_DELETED)

;; Function wizja2 (wizja2, funcdef_no=21, decl_uid=6246, cgraph_uid=21, symbol_order=24)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 69:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 70:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 75:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 114:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 133:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 135:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 147:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 152:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 158:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 160:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 170:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 172:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 174:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 175:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 176
	 Choosing alt 0 in insn 176:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 177
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 178:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 179:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 182:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 192:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 194:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 195:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 199:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 200
	 Choosing alt 0 in insn 200:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 202:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 203:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 206:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 210:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 220:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 221:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 222:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 223:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 229:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 231:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 232:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 233:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 236:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 238:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 240:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 242:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 243:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 244
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 245
	 Choosing alt 0 in insn 245:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 246:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 247:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 250:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 253:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 254:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 262:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 275:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 277:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 279:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 280:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 281:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 282
	 Choosing alt 0 in insn 282:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 283
	 Choosing alt 0 in insn 283:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 284:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 285:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 288:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 289:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 294:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 297:  (0) rm  (1) 0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 299:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) rm {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 307:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 308:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 309:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 310:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 312:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 313:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 314:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 315
	 Choosing alt 0 in insn 315:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 316
	 Choosing alt 0 in insn 316:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 317:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 318:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5 6
EBB 7 8
EBB 9
EBB 10 11
EBB 12 13 14
EBB 15 16
EBB 17
EBB 18
EBB 19
EBB 20 21 22
EBB 23
EBB 24 25 26 27
EBB 28
EBB 29 30 31 32
EBB 33
EBB 34 35
EBB 36 37

********** Pseudo live ranges #1: **********

  BB 37
   Insn 327: point = 0, n_alt = -1
   Insn 326: point = 0, n_alt = -2
   Insn 322: point = 1, n_alt = -2
   Insn 319: point = 3, n_alt = 0
   Insn 318: point = 4, n_alt = 8
   Insn 317: point = 5, n_alt = 0
   Insn 316: point = 7, n_alt = 0
   Insn 315: point = 9, n_alt = 0
   Insn 314: point = 11, n_alt = 1
   Insn 313: point = 13, n_alt = 1
   Insn 312: point = 15, n_alt = 0
   Insn 311: point = 16, n_alt = 0
   Insn 310: point = 18, n_alt = 0
   Insn 309: point = 19, n_alt = 3
   Insn 308: point = 21, n_alt = 3
   Insn 307: point = 23, n_alt = 3
  BB 36
   Insn 305: point = 24, n_alt = -1
   Insn 304: point = 24, n_alt = 1
   Insn 303: point = 25, n_alt = 0
  BB 18
   Insn 337: point = 26, n_alt = -1
   Insn 147: point = 26, n_alt = 1
   Insn 146: point = 27, n_alt = 0
  BB 16
   Insn 335: point = 28, n_alt = -1
   Insn 124: point = 28, n_alt = 1
  BB 17
   Insn 143: point = 28, n_alt = 1
   Insn 142: point = 28, n_alt = 1
   Insn 141: point = 29, n_alt = 0
   Insn 140: point = 31, n_alt = 0
   Insn 139: point = 33, n_alt = 3
   Insn 138: point = 35, n_alt = 3
   Insn 137: point = 37, n_alt = 3
   Insn 136: point = 38, n_alt = 1
   Insn 135: point = 39, n_alt = 0
   Insn 134: point = 41, n_alt = 0
   Insn 133: point = 43, n_alt = 3
   Insn 132: point = 45, n_alt = 3
   Insn 131: point = 47, n_alt = 3
  BB 11
   Insn 333: point = 48, n_alt = -1
   Insn 93: point = 48, n_alt = 1
   Insn 92: point = 49, n_alt = 0
   Insn 91: point = 51, n_alt = 3
   Insn 90: point = 53, n_alt = 3
   Insn 89: point = 55, n_alt = 3
   Insn 88: point = 56, n_alt = 1
   Insn 87: point = 56, n_alt = 1
  BB 15
   Insn 122: point = 56, n_alt = -1
   Insn 121: point = 56, n_alt = 0
   Insn 120: point = 57, n_alt = 0
   Insn 119: point = 59, n_alt = 3
   Insn 118: point = 61, n_alt = 3
   Insn 117: point = 63, n_alt = 3
  BB 14
   Insn 114: point = 64, n_alt = 1
  BB 13
   Insn 112: point = 64, n_alt = -1
   Insn 111: point = 64, n_alt = 0
   Insn 110: point = 65, n_alt = 0
   Insn 109: point = 67, n_alt = 3
   Insn 108: point = 69, n_alt = 3
   Insn 107: point = 71, n_alt = 3
   Insn 106: point = 72, n_alt = 1
   Insn 105: point = 72, n_alt = 1
  BB 12
   Insn 103: point = 72, n_alt = -1
   Insn 102: point = 72, n_alt = 0
   Insn 101: point = 73, n_alt = 0
   Insn 100: point = 75, n_alt = 3
   Insn 99: point = 77, n_alt = 3
   Insn 98: point = 79, n_alt = 3
  BB 10
   Insn 85: point = 80, n_alt = -1
   Insn 84: point = 80, n_alt = 0
   Insn 83: point = 81, n_alt = 0
   Insn 82: point = 83, n_alt = 3
   Insn 81: point = 85, n_alt = 3
   Insn 80: point = 87, n_alt = 3
  BB 8
   Insn 331: point = 88, n_alt = -1
   Insn 58: point = 88, n_alt = 1
  BB 9
   Insn 77: point = 88, n_alt = 1
   Insn 76: point = 88, n_alt = 1
   Insn 75: point = 89, n_alt = 0
   Insn 74: point = 91, n_alt = 0
   Insn 73: point = 93, n_alt = 3
   Insn 72: point = 95, n_alt = 3
   Insn 71: point = 97, n_alt = 3
   Insn 70: point = 98, n_alt = 1
   Insn 69: point = 99, n_alt = 0
   Insn 68: point = 101, n_alt = 0
   Insn 67: point = 103, n_alt = 3
   Insn 66: point = 105, n_alt = 3
   Insn 65: point = 107, n_alt = 3
  BB 3
   Insn 329: point = 108, n_alt = -1
   Insn 27: point = 108, n_alt = 1
   Insn 26: point = 109, n_alt = 0
   Insn 25: point = 111, n_alt = 3
   Insn 24: point = 113, n_alt = 3
   Insn 23: point = 115, n_alt = 3
   Insn 22: point = 116, n_alt = 1
   Insn 21: point = 116, n_alt = 1
  BB 7
   Insn 56: point = 116, n_alt = -1
   Insn 55: point = 116, n_alt = 0
   Insn 54: point = 117, n_alt = 0
   Insn 53: point = 119, n_alt = 3
   Insn 52: point = 121, n_alt = 3
   Insn 51: point = 123, n_alt = 3
  BB 6
   Insn 48: point = 124, n_alt = 1
  BB 5
   Insn 46: point = 124, n_alt = -1
   Insn 45: point = 124, n_alt = 0
   Insn 44: point = 125, n_alt = 0
   Insn 43: point = 127, n_alt = 3
   Insn 42: point = 129, n_alt = 3
   Insn 41: point = 131, n_alt = 3
   Insn 40: point = 132, n_alt = 1
   Insn 39: point = 132, n_alt = 1
  BB 4
   Insn 37: point = 132, n_alt = -1
   Insn 36: point = 132, n_alt = 0
   Insn 35: point = 133, n_alt = 0
   Insn 34: point = 135, n_alt = 3
   Insn 33: point = 137, n_alt = 3
   Insn 32: point = 139, n_alt = 3
  BB 2
   Insn 19: point = 140, n_alt = -1
   Insn 18: point = 140, n_alt = 0
   Insn 17: point = 141, n_alt = 0
   Insn 16: point = 143, n_alt = 3
   Insn 15: point = 145, n_alt = 3
   Insn 14: point = 147, n_alt = 3
   Insn 13: point = 148, n_alt = 1
   Insn 12: point = 148, n_alt = 1
   Insn 11: point = 148, n_alt = 1
   Insn 10: point = 148, n_alt = 1
   Insn 9: point = 148, n_alt = 1
   Insn 8: point = 148, n_alt = 1
   Insn 7: point = 148, n_alt = 1
   Insn 6: point = 148, n_alt = 1
   Insn 2: point = 148, n_alt = 5
  BB 35
   Insn 299: point = 148, n_alt = 1
   Insn 298: point = 148, n_alt = 1
   Insn 297: point = 148, n_alt = 1
  BB 34
   Insn 295: point = 148, n_alt = -1
   Insn 294: point = 148, n_alt = 1
   Insn 293: point = 149, n_alt = 0
  BB 19
   Insn 339: point = 150, n_alt = -1
   Insn 152: point = 150, n_alt = 1
   Insn 151: point = 151, n_alt = 0
  BB 33
   Insn 289: point = 152, n_alt = 1
   Insn 288: point = 152, n_alt = 1
  BB 32
   Insn 285: point = 152, n_alt = 8
   Insn 284: point = 153, n_alt = 0
   Insn 283: point = 155, n_alt = 0
   Insn 282: point = 157, n_alt = 0
   Insn 281: point = 159, n_alt = 1
   Insn 280: point = 161, n_alt = 1
   Insn 279: point = 163, n_alt = 0
   Insn 278: point = 164, n_alt = 0
   Insn 277: point = 166, n_alt = 0
   Insn 276: point = 167, n_alt = 3
   Insn 275: point = 169, n_alt = 3
   Insn 274: point = 171, n_alt = 3
  BB 31
   Insn 272: point = 172, n_alt = -1
   Insn 271: point = 172, n_alt = 0
   Insn 270: point = 173, n_alt = 0
   Insn 269: point = 175, n_alt = 3
   Insn 268: point = 177, n_alt = 3
   Insn 267: point = 179, n_alt = 3
  BB 30
   Insn 265: point = 180, n_alt = -1
   Insn 264: point = 180, n_alt = 0
   Insn 263: point = 181, n_alt = 0
   Insn 262: point = 183, n_alt = 3
   Insn 261: point = 185, n_alt = 3
   Insn 260: point = 187, n_alt = 3
  BB 29
   Insn 258: point = 188, n_alt = -1
   Insn 257: point = 188, n_alt = 0
   Insn 255: point = 189, n_alt = 0
   Insn 254: point = 191, n_alt = 3
   Insn 253: point = 193, n_alt = 3
  BB 23
   Insn 341: point = 194, n_alt = -1
   Insn 206: point = 194, n_alt = 1
  BB 22
   Insn 203: point = 194, n_alt = 8
   Insn 202: point = 195, n_alt = 0
   Insn 201: point = 197, n_alt = 0
   Insn 200: point = 199, n_alt = 0
   Insn 199: point = 201, n_alt = 1
   Insn 198: point = 203, n_alt = 1
   Insn 197: point = 205, n_alt = 0
   Insn 196: point = 206, n_alt = 0
   Insn 195: point = 208, n_alt = 0
   Insn 194: point = 209, n_alt = 3
   Insn 193: point = 211, n_alt = 3
   Insn 192: point = 213, n_alt = 3
  BB 21
   Insn 190: point = 214, n_alt = -1
   Insn 189: point = 214, n_alt = 0
   Insn 188: point = 215, n_alt = 0
   Insn 187: point = 217, n_alt = 3
   Insn 186: point = 219, n_alt = 3
  BB 20
   Insn 184: point = 220, n_alt = -1
   Insn 183: point = 220, n_alt = 0
   Insn 182: point = 221, n_alt = 0
   Insn 181: point = 223, n_alt = 3
   Insn 180: point = 225, n_alt = 3
   Insn 179: point = 226, n_alt = 8
   Insn 178: point = 227, n_alt = 0
   Insn 177: point = 229, n_alt = 0
   Insn 176: point = 231, n_alt = 0
   Insn 175: point = 233, n_alt = 1
   Insn 174: point = 235, n_alt = 1
   Insn 173: point = 237, n_alt = 0
   Insn 172: point = 238, n_alt = 1
   Insn 171: point = 240, n_alt = 0
   Insn 170: point = 241, n_alt = 4
   Insn 169: point = 243, n_alt = 3
   Insn 168: point = 245, n_alt = 3
   Insn 167: point = 247, n_alt = 3
   Insn 166: point = 248, n_alt = 0
   Insn 165: point = 250, n_alt = 0
   Insn 164: point = 252, n_alt = 0
   Insn 163: point = 253, n_alt = 3
   Insn 162: point = 255, n_alt = 0
   Insn 161: point = 257, n_alt = 0
   Insn 160: point = 259, n_alt = 1
   Insn 159: point = 261, n_alt = 0
   Insn 158: point = 262, n_alt = 3
   Insn 157: point = 264, n_alt = 3
   Insn 156: point = 266, n_alt = 3
  BB 28
   Insn 250: point = 267, n_alt = 1
  BB 27
   Insn 247: point = 267, n_alt = 8
   Insn 246: point = 268, n_alt = 0
   Insn 245: point = 270, n_alt = 0
   Insn 244: point = 272, n_alt = 0
   Insn 243: point = 274, n_alt = 1
   Insn 242: point = 276, n_alt = 1
   Insn 241: point = 278, n_alt = 0
   Insn 240: point = 279, n_alt = 0
   Insn 239: point = 281, n_alt = 0
   Insn 238: point = 282, n_alt = 3
   Insn 237: point = 284, n_alt = 3
   Insn 236: point = 286, n_alt = 3
  BB 26
   Insn 234: point = 287, n_alt = -1
   Insn 233: point = 287, n_alt = 0
   Insn 232: point = 288, n_alt = 0
   Insn 231: point = 290, n_alt = 1
   Insn 230: point = 292, n_alt = 0
   Insn 229: point = 293, n_alt = 3
   Insn 228: point = 295, n_alt = 3
  BB 25
   Insn 226: point = 296, n_alt = -1
   Insn 225: point = 296, n_alt = 0
   Insn 224: point = 297, n_alt = 0
   Insn 223: point = 299, n_alt = 0
   Insn 222: point = 301, n_alt = 1
   Insn 221: point = 303, n_alt = 0
   Insn 220: point = 304, n_alt = 3
   Insn 219: point = 306, n_alt = 3
  BB 24
   Insn 217: point = 307, n_alt = -1
   Insn 216: point = 307, n_alt = 0
   Insn 215: point = 308, n_alt = 0
   Insn 214: point = 310, n_alt = 0
   Insn 213: point = 312, n_alt = 1
   Insn 212: point = 314, n_alt = 0
   Insn 211: point = 315, n_alt = 3
   Insn 210: point = 317, n_alt = 3
 r87: [144..145]
 r88: [142..143]
 r89: [140..141]
 r90: [112..113]
 r91: [110..111]
 r92: [136..137]
 r93: [134..135]
 r94: [132..133]
 r95: [128..129]
 r96: [126..127]
 r97: [124..125]
 r98: [120..121]
 r99: [118..119]
 r100: [116..117]
 r101: [104..105]
 r102: [102..103]
 r103: [100..101]
 r104: [94..95]
 r105: [92..93]
 r106: [90..91]
 r107: [84..85]
 r108: [82..83]
 r109: [80..81]
 r110: [52..53]
 r111: [50..51]
 r112: [76..77]
 r113: [74..75]
 r114: [72..73]
 r115: [68..69]
 r116: [66..67]
 r117: [64..65]
 r118: [60..61]
 r119: [58..59]
 r120: [56..57]
 r121: [44..45]
 r122: [42..43]
 r123: [40..41]
 r124: [34..35]
 r125: [32..33]
 r126: [30..31]
 r127: [263..264]
 r128: [256..262]
 r129: [258..259]
 r130: [256..257]
 r131: [254..255]
 r132: [249..253]
 r133: [249..250]
 r134: [242..248]
 r135: [244..245]
 r136: [232..243]
 r137: [226..241]
 r138: [222..223]
 r139: [220..221]
 r140: [216..217]
 r141: [214..215]
 r142: [210..211]
 r143: [200..209]
 r144: [309..315]
 r145: [307..308]
 r146: [298..304]
 r147: [296..297]
 r148: [289..293]
 r149: [287..288]
 r150: [283..284]
 r151: [273..282]
 r152: [190..191]
 r153: [188..189]
 r154: [184..185]
 r155: [182..183]
 r156: [180..181]
 r157: [176..177]
 r158: [174..175]
 r159: [172..173]
 r160: [168..169]
 r161: [158..167]
 r162: [20..21]
 r163: [10..19]
 r164: [2..3]
 r165: [0..1]
 r166: [146..147]
 r167: [114..115]
 r168: [108..109]
 r169: [138..139]
 r170: [130..131]
 r171: [122..123]
 r172: [106..107]
 r173: [98..99]
 r174: [96..97]
 r175: [88..89]
 r176: [86..87]
 r177: [54..55]
 r178: [48..49]
 r179: [78..79]
 r180: [70..71]
 r181: [62..63]
 r182: [46..47]
 r183: [38..39]
 r184: [36..37]
 r185: [28..29]
 r186: [26..27]
 r187: [150..151]
 r188: [265..266]
 r189: [260..261]
 r190: [251..252]
 r191: [246..247]
 r192: [230..238]
 r193: [239..240]
 r194: [234..235]
 r195: [236..237]
 r196: [232..233]
 r197: [230..231]
 r198: [228..229]
 r199: [226..227]
 r200: [224..225]
 r201: [218..219]
 r202: [212..213]
 r203: [198..206]
 r204: [207..208]
 r205: [202..203]
 r206: [204..205]
 r207: [200..201]
 r208: [198..199]
 r209: [196..197]
 r210: [194..195]
 r211: [316..317]
 r212: [311..312]
 r213: [313..314]
 r214: [309..310]
 r215: [305..306]
 r216: [300..301]
 r217: [302..303]
 r218: [298..299]
 r219: [294..295]
 r220: [289..290]
 r221: [291..292]
 r222: [285..286]
 r223: [271..279]
 r224: [280..281]
 r225: [275..276]
 r226: [277..278]
 r227: [273..274]
 r228: [271..272]
 r229: [269..270]
 r230: [267..268]
 r231: [192..193]
 r232: [186..187]
 r233: [178..179]
 r234: [170..171]
 r235: [156..164]
 r236: [165..166]
 r237: [160..161]
 r238: [162..163]
 r239: [158..159]
 r240: [156..157]
 r241: [154..155]
 r242: [152..153]
 r243: [148..149]
 r244: [24..25]
 r245: [22..23]
 r246: [8..16]
 r247: [17..18]
 r248: [12..13]
 r249: [14..15]
 r250: [10..11]
 r251: [8..9]
 r252: [6..7]
 r253: [4..5]
Compressing live ranges: from 318 to 302 - 94%
Ranges after the compression:
 r87: [142..143]
 r88: [140..141]
 r89: [138..139]
 r90: [110..111]
 r91: [108..109]
 r92: [134..135]
 r93: [132..133]
 r94: [130..131]
 r95: [126..127]
 r96: [124..125]
 r97: [122..123]
 r98: [118..119]
 r99: [116..117]
 r100: [114..115]
 r101: [102..103]
 r102: [100..101]
 r103: [98..99]
 r104: [92..93]
 r105: [90..91]
 r106: [88..89]
 r107: [82..83]
 r108: [80..81]
 r109: [78..79]
 r110: [50..51]
 r111: [48..49]
 r112: [74..75]
 r113: [72..73]
 r114: [70..71]
 r115: [66..67]
 r116: [64..65]
 r117: [62..63]
 r118: [58..59]
 r119: [56..57]
 r120: [54..55]
 r121: [42..43]
 r122: [40..41]
 r123: [38..39]
 r124: [32..33]
 r125: [30..31]
 r126: [28..29]
 r127: [252..253]
 r128: [246..251]
 r129: [248..249]
 r130: [246..247]
 r131: [244..245]
 r132: [240..243]
 r133: [240..241]
 r134: [234..239]
 r135: [236..237]
 r136: [226..235]
 r137: [220..233]
 r138: [216..217]
 r139: [214..215]
 r140: [210..211]
 r141: [208..209]
 r142: [204..205]
 r143: [196..203]
 r144: [294..299]
 r145: [292..293]
 r146: [284..289]
 r147: [282..283]
 r148: [276..279]
 r149: [274..275]
 r150: [270..271]
 r151: [262..269]
 r152: [186..187]
 r153: [184..185]
 r154: [180..181]
 r155: [178..179]
 r156: [176..177]
 r157: [172..173]
 r158: [170..171]
 r159: [168..169]
 r160: [164..165]
 r161: [156..163]
 r162: [18..19]
 r163: [10..17]
 r164: [2..3]
 r165: [0..1]
 r166: [144..145]
 r167: [112..113]
 r168: [106..107]
 r169: [136..137]
 r170: [128..129]
 r171: [120..121]
 r172: [104..105]
 r173: [96..97]
 r174: [94..95]
 r175: [86..87]
 r176: [84..85]
 r177: [52..53]
 r178: [46..47]
 r179: [76..77]
 r180: [68..69]
 r181: [60..61]
 r182: [44..45]
 r183: [36..37]
 r184: [34..35]
 r185: [26..27]
 r186: [24..25]
 r187: [148..149]
 r188: [254..255]
 r189: [250..251]
 r190: [242..243]
 r191: [238..239]
 r192: [224..231]
 r193: [232..233]
 r194: [228..229]
 r195: [230..231]
 r196: [226..227]
 r197: [224..225]
 r198: [222..223]
 r199: [220..221]
 r200: [218..219]
 r201: [212..213]
 r202: [206..207]
 r203: [194..201]
 r204: [202..203]
 r205: [198..199]
 r206: [200..201]
 r207: [196..197]
 r208: [194..195]
 r209: [192..193]
 r210: [190..191]
 r211: [300..301]
 r212: [296..297]
 r213: [298..299]
 r214: [294..295]
 r215: [290..291]
 r216: [286..287]
 r217: [288..289]
 r218: [284..285]
 r219: [280..281]
 r220: [276..277]
 r221: [278..279]
 r222: [272..273]
 r223: [260..267]
 r224: [268..269]
 r225: [264..265]
 r226: [266..267]
 r227: [262..263]
 r228: [260..261]
 r229: [258..259]
 r230: [256..257]
 r231: [188..189]
 r232: [182..183]
 r233: [174..175]
 r234: [166..167]
 r235: [154..161]
 r236: [162..163]
 r237: [158..159]
 r238: [160..161]
 r239: [156..157]
 r240: [154..155]
 r241: [152..153]
 r242: [150..151]
 r243: [146..147]
 r244: [22..23]
 r245: [20..21]
 r246: [8..15]
 r247: [16..17]
 r248: [12..13]
 r249: [14..15]
 r250: [10..11]
 r251: [8..9]
 r252: [6..7]
 r253: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 162
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 166
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 170
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 179
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 211
changing reg in insn 215
changing reg in insn 215
changing reg in insn 216
changing reg in insn 220
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 229
changing reg in insn 232
changing reg in insn 232
changing reg in insn 233
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 261
changing reg in insn 262
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 268
changing reg in insn 269
changing reg in insn 269
changing reg in insn 270
changing reg in insn 270
changing reg in insn 271
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 308
changing reg in insn 309
changing reg in insn 309
changing reg in insn 319
changing reg in insn 322
changing reg in insn 322
changing reg in insn 326
changing reg in insn 14
changing reg in insn 15
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 42
changing reg in insn 51
changing reg in insn 52
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 89
changing reg in insn 90
changing reg in insn 92
changing reg in insn 93
changing reg in insn 98
changing reg in insn 99
changing reg in insn 107
changing reg in insn 108
changing reg in insn 117
changing reg in insn 118
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 147
changing reg in insn 151
changing reg in insn 152
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 172
changing reg in insn 171
changing reg in insn 172
changing reg in insn 174
changing reg in insn 175
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 186
changing reg in insn 187
changing reg in insn 192
changing reg in insn 193
changing reg in insn 196
changing reg in insn 195
changing reg in insn 196
changing reg in insn 198
changing reg in insn 199
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 210
changing reg in insn 211
changing reg in insn 213
changing reg in insn 214
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 219
changing reg in insn 220
changing reg in insn 222
changing reg in insn 223
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 228
changing reg in insn 229
changing reg in insn 231
changing reg in insn 232
changing reg in insn 230
changing reg in insn 231
changing reg in insn 236
changing reg in insn 237
changing reg in insn 240
changing reg in insn 239
changing reg in insn 240
changing reg in insn 242
changing reg in insn 243
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 247
changing reg in insn 253
changing reg in insn 254
changing reg in insn 260
changing reg in insn 261
changing reg in insn 267
changing reg in insn 268
changing reg in insn 274
changing reg in insn 275
changing reg in insn 278
changing reg in insn 277
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 279
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 285
changing reg in insn 293
changing reg in insn 294
changing reg in insn 303
changing reg in insn 304
changing reg in insn 307
changing reg in insn 308
changing reg in insn 311
changing reg in insn 310
changing reg in insn 311
changing reg in insn 313
changing reg in insn 314
changing reg in insn 312
changing reg in insn 313
changing reg in insn 314
changing reg in insn 315
changing reg in insn 316
changing reg in insn 317
changing reg in insn 317
changing reg in insn 318
deleting insn with uid = 322.
starting the processing of deferred insns
ending the processing of deferred insns


wizja2

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={126d,126u} r1={34d,33u} r2={9d,8u} r4={2d,1u} r5={1d,1u} r6={1d,136u} r7={1d,37u} r17={52d,18u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 598{237d,361u,0e} in 254{254 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 166
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])
        (reg:DI 5 di [ user ])) "function.c":1004 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
        (const_int 0 [0])) "function.c":1005 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":1006 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1007 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1008 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1009 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1010 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":1011 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":1012 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1014 85 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (reg/f:DI 0 ax [166]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1014 85 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (const_int 40 [0x28])) [14 _1->player2+0 S8 A64])) "function.c":1014 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":1014 86 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:89 _3 ] [89])
            (const_int 1 [0x1]))) "function.c":1014 11 {*cmpsi_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "function.c":1014 682 {*jcc}
     (nil)
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90 91 167 168
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1016 86 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":1017 86 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1018 85 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (reg/f:DI 0 ax [167]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1018 85 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:90 _4 ] [90])
                (const_int 40 [0x28])) [14 _4->player2+0 S8 A64])) "function.c":1018 85 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 ax [168])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1018 86 {*movsi_internal}
     (nil))
(insn 27 26 329 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 0 ax [168])) "function.c":1018 86 {*movsi_internal}
     (nil))
(jump_insn 329 27 330 3 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 330 329 30)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 169
(code_label 30 330 31 4 160 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1020 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
        (mem/f:DI (reg/f:DI 0 ax [169]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1020 85 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (const_int 40 [0x28])) [14 _6->player2+0 S8 A64])) "function.c":1020 85 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (const_int 16 [0x10])) [3 _7->y_current+0 S4 A64])) "function.c":1020 86 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:94 _8 ] [94])
            (const_int 17 [0x11]))) "function.c":1020 11 {*cmpsi_1}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "function.c":1020 682 {*jcc}
     (nil)
 -> 63)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 170
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 16 [0x10])) "function.c":1022 86 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 20 [0x14])) "function.c":1023 86 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg/f:DI 0 ax [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1024 85 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (reg/f:DI 0 ax [170]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1024 85 {*movdi_internal}
     (nil))
(insn 43 42 44 5 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (const_int 40 [0x28])) [14 _9->player2+0 S8 A64])) "function.c":1024 85 {*movdi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:SI 0 ax [orig:97 _11 ] [97])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (const_int 16 [0x10])) [3 _10->y_current+0 S4 A64])) "function.c":1024 86 {*movsi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 _11 ] [97])
            (const_int 18 [0x12]))) "function.c":1024 11 {*cmpsi_1}
     (nil))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "function.c":1024 682 {*jcc}
     (nil)
 -> 49)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1026 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 171
(code_label 49 48 50 7 163 (nil) [1 uses])
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 7 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1028 85 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (reg/f:DI 0 ax [171]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1028 85 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (const_int 40 [0x28])) [14 _12->player2+0 S8 A64])) "function.c":1028 85 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (reg:SI 0 ax [orig:100 _14 ] [100])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (const_int 16 [0x10])) [3 _13->y_current+0 S4 A64])) "function.c":1028 86 {*movsi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:100 _14 ] [100])
            (const_int 19 [0x13]))) "function.c":1028 11 {*cmpsi_1}
     (nil))
(jump_insn 56 55 57 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 78)
            (pc))) "function.c":1028 682 {*jcc}
     (nil)
 -> 78)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 331 8 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 3 [0x3])) "function.c":1030 86 {*movsi_internal}
     (nil))
(jump_insn 331 58 332 8 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 332 331 63)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 172 173 174 175
(code_label 63 332 64 9 162 (nil) [1 uses])
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg/f:DI 0 ax [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1035 85 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [172]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1035 85 {*movdi_internal}
     (nil))
(insn 67 66 68 9 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:101 _15 ] [101])
                (const_int 40 [0x28])) [14 _15->player2+0 S8 A64])) "function.c":1035 85 {*movdi_internal}
     (nil))
(insn 68 67 69 9 (set (reg:SI 0 ax [orig:103 _17 ] [103])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:102 _16 ] [102])
                (const_int 16 [0x10])) [3 _16->y_current+0 S4 A64])) "function.c":1035 86 {*movsi_internal}
     (nil))
(insn 69 68 70 9 (parallel [
            (set (reg:SI 0 ax [173])
                (plus:SI (reg:SI 0 ax [orig:103 _17 ] [103])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1035 221 {*addsi_1}
     (nil))
(insn 70 69 71 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (reg:SI 0 ax [173])) "function.c":1035 86 {*movsi_internal}
     (nil))
(insn 71 70 72 9 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1036 85 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg/f:DI 0 ax [orig:104 _18 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [174]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1036 85 {*movdi_internal}
     (nil))
(insn 73 72 74 9 (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:104 _18 ] [104])
                (const_int 40 [0x28])) [14 _18->player2+0 S8 A64])) "function.c":1036 85 {*movdi_internal}
     (nil))
(insn 74 73 75 9 (set (reg:SI 0 ax [orig:106 _20 ] [106])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:105 _19 ] [105])
                (const_int 16 [0x10])) [3 _19->y_current+0 S4 A64])) "function.c":1036 86 {*movsi_internal}
     (nil))
(insn 75 74 76 9 (parallel [
            (set (reg:SI 0 ax [175])
                (plus:SI (reg:SI 0 ax [orig:106 _20 ] [106])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1036 221 {*addsi_1}
     (nil))
(insn 76 75 77 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (reg:SI 0 ax [175])) "function.c":1036 86 {*movsi_internal}
     (nil))
(insn 77 76 78 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1037 86 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7
;;              3 [always] 
;;              9 (FALLTHRU)
;;              8 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 176
(code_label 78 77 79 10 161 (nil) [3 uses])
(note 79 78 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 10 (set (reg/f:DI 0 ax [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1040 85 {*movdi_internal}
     (nil))
(insn 81 80 82 10 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f:DI (reg/f:DI 0 ax [176]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1040 85 {*movdi_internal}
     (nil))
(insn 82 81 83 10 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (const_int 40 [0x28])) [14 _21->player2+0 S8 A64])) "function.c":1040 85 {*movdi_internal}
     (nil))
(insn 83 82 84 10 (set (reg:SI 0 ax [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:108 _22 ] [108])
                (const_int 12 [0xc])) [3 _22->x_current+0 S4 A32])) "function.c":1040 86 {*movsi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:109 _23 ] [109])
            (const_int 1 [0x1]))) "function.c":1040 11 {*cmpsi_1}
     (nil))
(jump_insn 85 84 86 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "function.c":1040 682 {*jcc}
     (nil)
 -> 96)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110 111 177 178
(note 86 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1042 86 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":1043 86 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1044 85 {*movdi_internal}
     (nil))
(insn 90 89 91 11 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [177]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1044 85 {*movdi_internal}
     (nil))
(insn 91 90 92 11 (set (reg/f:DI 0 ax [orig:111 _25 ] [111])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (const_int 40 [0x28])) [14 _24->player2+0 S8 A64])) "function.c":1044 85 {*movdi_internal}
     (nil))
(insn 92 91 93 11 (set (reg:SI 0 ax [178])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:111 _25 ] [111])
                (const_int 12 [0xc])) [3 _25->x_current+0 S4 A32])) "function.c":1044 86 {*movsi_internal}
     (nil))
(insn 93 92 333 11 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (reg:SI 0 ax [178])) "function.c":1044 86 {*movsi_internal}
     (nil))
(jump_insn 333 93 334 11 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 334 333 96)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 113 114 179
(code_label 96 334 97 12 165 (nil) [1 uses])
(note 97 96 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 12 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1046 85 {*movdi_internal}
     (nil))
(insn 99 98 100 12 (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
        (mem/f:DI (reg/f:DI 0 ax [179]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1046 85 {*movdi_internal}
     (nil))
(insn 100 99 101 12 (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:112 _26 ] [112])
                (const_int 40 [0x28])) [14 _26->player2+0 S8 A64])) "function.c":1046 85 {*movdi_internal}
     (nil))
(insn 101 100 102 12 (set (reg:SI 0 ax [orig:114 _28 ] [114])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (const_int 12 [0xc])) [3 _27->x_current+0 S4 A32])) "function.c":1046 86 {*movsi_internal}
     (nil))
(insn 102 101 103 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:114 _28 ] [114])
            (const_int 27 [0x1b]))) "function.c":1046 11 {*cmpsi_1}
     (nil))
(jump_insn 103 102 104 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":1046 682 {*jcc}
     (nil)
 -> 129)
;;  succ:       13 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 180
(note 104 103 105 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 26 [0x1a])) "function.c":1048 86 {*movsi_internal}
     (nil))
(insn 106 105 107 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 30 [0x1e])) "function.c":1049 86 {*movsi_internal}
     (nil))
(insn 107 106 108 13 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1050 85 {*movdi_internal}
     (nil))
(insn 108 107 109 13 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [180]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1050 85 {*movdi_internal}
     (nil))
(insn 109 108 110 13 (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:115 _29 ] [115])
                (const_int 40 [0x28])) [14 _29->player2+0 S8 A64])) "function.c":1050 85 {*movdi_internal}
     (nil))
(insn 110 109 111 13 (set (reg:SI 0 ax [orig:117 _31 ] [117])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (const_int 12 [0xc])) [3 _30->x_current+0 S4 A32])) "function.c":1050 86 {*movsi_internal}
     (nil))
(insn 111 110 112 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:117 _31 ] [117])
            (const_int 28 [0x1c]))) "function.c":1050 11 {*cmpsi_1}
     (nil))
(jump_insn 112 111 113 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":1050 682 {*jcc}
     (nil)
 -> 115)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1052 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 181
(code_label 115 114 116 15 168 (nil) [1 uses])
(note 116 115 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 15 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1054 85 {*movdi_internal}
     (nil))
(insn 118 117 119 15 (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
        (mem/f:DI (reg/f:DI 0 ax [181]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1054 85 {*movdi_internal}
     (nil))
(insn 119 118 120 15 (set (reg/f:DI 0 ax [orig:119 _33 ] [119])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (const_int 40 [0x28])) [14 _32->player2+0 S8 A64])) "function.c":1054 85 {*movdi_internal}
     (nil))
(insn 120 119 121 15 (set (reg:SI 0 ax [orig:120 _34 ] [120])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:119 _33 ] [119])
                (const_int 12 [0xc])) [3 _33->x_current+0 S4 A32])) "function.c":1054 86 {*movsi_internal}
     (nil))
(insn 121 120 122 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:120 _34 ] [120])
            (const_int 29 [0x1d]))) "function.c":1054 11 {*cmpsi_1}
     (nil))
(jump_insn 122 121 123 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) "function.c":1054 682 {*jcc}
     (nil)
 -> 144)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 123 122 124 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 335 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 3 [0x3])) "function.c":1056 86 {*movsi_internal}
     (nil))
(jump_insn 335 124 336 16 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 336 335 129)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 124 125 126 182 183 184 185
(code_label 129 336 130 17 167 (nil) [1 uses])
(note 130 129 131 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 17 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1061 85 {*movdi_internal}
     (nil))
(insn 132 131 133 17 (set (reg/f:DI 0 ax [orig:121 _35 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [182]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1061 85 {*movdi_internal}
     (nil))
(insn 133 132 134 17 (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:121 _35 ] [121])
                (const_int 40 [0x28])) [14 _35->player2+0 S8 A64])) "function.c":1061 85 {*movdi_internal}
     (nil))
(insn 134 133 135 17 (set (reg:SI 0 ax [orig:123 _37 ] [123])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:122 _36 ] [122])
                (const_int 12 [0xc])) [3 _36->x_current+0 S4 A32])) "function.c":1061 86 {*movsi_internal}
     (nil))
(insn 135 134 136 17 (parallel [
            (set (reg:SI 0 ax [183])
                (plus:SI (reg:SI 0 ax [orig:123 _37 ] [123])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1061 221 {*addsi_1}
     (nil))
(insn 136 135 137 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (reg:SI 0 ax [183])) "function.c":1061 86 {*movsi_internal}
     (nil))
(insn 137 136 138 17 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1062 85 {*movdi_internal}
     (nil))
(insn 138 137 139 17 (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [184]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1062 85 {*movdi_internal}
     (nil))
(insn 139 138 140 17 (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:124 _38 ] [124])
                (const_int 40 [0x28])) [14 _38->player2+0 S8 A64])) "function.c":1062 85 {*movdi_internal}
     (nil))
(insn 140 139 141 17 (set (reg:SI 0 ax [orig:126 _40 ] [126])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (const_int 12 [0xc])) [3 _39->x_current+0 S4 A32])) "function.c":1062 86 {*movsi_internal}
     (nil))
(insn 141 140 142 17 (parallel [
            (set (reg:SI 0 ax [185])
                (plus:SI (reg:SI 0 ax [orig:126 _40 ] [126])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1062 221 {*addsi_1}
     (nil))
(insn 142 141 143 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (reg:SI 0 ax [185])) "function.c":1062 86 {*movsi_internal}
     (nil))
(insn 143 142 144 17 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1063 86 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       15
;;              11 [always] 
;;              17 (FALLTHRU)
;;              16 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 186
(code_label 144 143 145 18 166 (nil) [3 uses])
(note 145 144 146 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 18 (set (reg:SI 0 ax [186])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])) "function.c":1066 86 {*movsi_internal}
     (nil))
(insn 147 146 337 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
        (reg:SI 0 ax [186])) "function.c":1066 86 {*movsi_internal}
     (nil))
(jump_insn 337 147 338 18 (set (pc)
        (label_ref 300)) "function.c":1066 683 {jump}
     (nil)
 -> 300)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 338 337 302)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       36
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 187
(code_label 302 338 150 19 178 (nil) [1 uses])
(note 150 302 151 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 19 (set (reg:SI 0 ax [187])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])) "function.c":1068 86 {*movsi_internal}
     (nil))
(insn 152 151 339 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
        (reg:SI 0 ax [187])) "function.c":1068 86 {*movsi_internal}
     (nil))
(jump_insn 339 152 340 19 (set (pc)
        (label_ref 290)) "function.c":1068 683 {jump}
     (nil)
 -> 290)
;;  succ:       34 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 340 339 292)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       34
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 130 131 132 133 134 135 136 137 138 139 188 189 190 191 192 193 194 195 196 197 198 199 200
(code_label 292 340 155 20 177 (nil) [1 uses])
(note 155 292 156 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 20 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 157 156 158 20 (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
        (mem/f:DI (reg/f:DI 0 ax [188]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 158 157 159 20 (set (reg/f:DI 0 ax [orig:128 _42 ] [128])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:127 _41 ] [127])
                (const_int 16 [0x10])) [9 _41->mapa+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 159 158 160 20 (set (reg:SI 1 dx [189])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 160 159 161 20 (set (reg:DI 1 dx [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 1 dx [189]))) "function.c":1070 149 {*extendsidi2_rex64}
     (nil))
(insn 161 160 162 20 (parallel [
            (set (reg:DI 1 dx [orig:130 _44 ] [130])
                (ashift:DI (reg:DI 1 dx [orig:129 _43 ] [129])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 551 {*ashldi3_1}
     (nil))
(insn 162 161 163 20 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (plus:DI (reg/f:DI 0 ax [orig:128 _42 ] [128])
                    (reg:DI 1 dx [orig:130 _44 ] [130])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (nil))
(insn 163 162 164 20 (set (reg/f:DI 1 dx [orig:132 _46 ] [132])
        (mem/f:DI (reg/f:DI 0 ax [orig:131 _45 ] [131]) [10 *_45+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 164 163 165 20 (set (reg:SI 0 ax [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 165 164 166 20 (set (reg:DI 0 ax [orig:133 _47 ] [133])
        (sign_extend:DI (reg:SI 0 ax [190]))) "function.c":1070 149 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 20 (parallel [
            (set (reg/f:DI 1 dx [orig:134 _48 ] [134])
                (plus:DI (reg/f:DI 1 dx [orig:132 _46 ] [132])
                    (reg:DI 0 ax [orig:133 _47 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (nil))
(insn 167 166 168 20 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 168 167 169 20 (set (reg/f:DI 0 ax [orig:135 _49 ] [135])
        (mem/f:DI (reg/f:DI 0 ax [191]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 169 168 170 20 (set (reg/f:DI 4 si [orig:136 _50 ] [136])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:135 _49 ] [135])
                (const_int 40 [0x28])) [14 _49->player2+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 170 169 171 20 (set (reg:QI 0 ax [orig:137 _51 ] [137])
        (mem:QI (reg/f:DI 1 dx [orig:134 _48 ] [134]) [0 *_48+0 S1 A8])) "function.c":1070 88 {*movqi_internal}
     (nil))
(insn 171 170 172 20 (set (reg:SI 1 dx [193])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 172 171 173 20 (set (reg:DI 1 dx [192])
        (sign_extend:DI (reg:SI 1 dx [193]))) "function.c":1070 149 {*extendsidi2_rex64}
     (nil))
(insn 173 172 174 20 (set (reg:SI 2 cx [195])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 174 173 175 20 (set (reg:DI 2 cx [194])
        (sign_extend:DI (reg:SI 2 cx [195]))) "function.c":1070 149 {*extendsidi2_rex64}
     (nil))
(insn 175 174 176 20 (parallel [
            (set (reg:DI 2 cx [196])
                (mult:DI (reg:DI 2 cx [194])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 349 {*muldi3_1}
     (nil))
(insn 176 175 177 20 (parallel [
            (set (reg:DI 2 cx [197])
                (plus:DI (reg:DI 2 cx [196])
                    (reg/f:DI 4 si [orig:136 _50 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (nil))
(insn 177 176 178 20 (parallel [
            (set (reg:DI 1 dx [198])
                (plus:DI (reg:DI 1 dx [192])
                    (reg:DI 2 cx [197])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (nil))
(insn 178 177 179 20 (parallel [
            (set (reg/f:DI 1 dx [199])
                (plus:DI (reg:DI 1 dx [198])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (nil))
(insn 179 178 180 20 (set (mem/j:QI (reg/f:DI 1 dx [199]) [0 _50->area S1 A8])
        (reg:QI 0 ax [orig:137 _51 ] [137])) "function.c":1070 88 {*movqi_internal}
     (nil))
(insn 180 179 181 20 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (nil))
(insn 181 180 182 20 (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
        (mem/f:DI (reg/f:DI 0 ax [200]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (nil))
(insn 182 181 183 20 (set (reg:SI 0 ax [orig:139 _53 ] [139])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (const_int 36068 [0x8ce4])) [3 _52->bestia.y+0 S4 A32])) "function.c":1071 86 {*movsi_internal}
     (nil))
(insn 183 182 184 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:139 _53 ] [139]))) "function.c":1071 11 {*cmpsi_1}
     (nil))
(jump_insn 184 183 185 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":1071 682 {*jcc}
     (nil)
 -> 204)
;;  succ:       21 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 141 201
(note 185 184 186 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 21 (set (reg/f:DI 0 ax [201])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (nil))
(insn 187 186 188 21 (set (reg/f:DI 0 ax [orig:140 _54 ] [140])
        (mem/f:DI (reg/f:DI 0 ax [201]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (nil))
(insn 188 187 189 21 (set (reg:SI 0 ax [orig:141 _55 ] [141])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:140 _54 ] [140])
                (const_int 36064 [0x8ce0])) [3 _54->bestia.x+0 S4 A64])) "function.c":1071 86 {*movsi_internal}
     (nil))
(insn 189 188 190 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 0 ax [orig:141 _55 ] [141]))) "function.c":1071 11 {*cmpsi_1}
     (nil))
(jump_insn 190 189 191 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":1071 682 {*jcc}
     (nil)
 -> 204)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 202 203 204 205 206 207 208 209 210
(note 191 190 192 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 22 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1073 85 {*movdi_internal}
     (nil))
(insn 193 192 194 22 (set (reg/f:DI 0 ax [orig:142 _56 ] [142])
        (mem/f:DI (reg/f:DI 0 ax [202]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1073 85 {*movdi_internal}
     (nil))
(insn 194 193 195 22 (set (reg/f:DI 2 cx [orig:143 _57 ] [143])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:142 _56 ] [142])
                (const_int 40 [0x28])) [14 _56->player2+0 S8 A64])) "function.c":1073 85 {*movdi_internal}
     (nil))
(insn 195 194 196 22 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1073 86 {*movsi_internal}
     (nil))
(insn 196 195 197 22 (set (reg:DI 0 ax [203])
        (sign_extend:DI (reg:SI 0 ax [204]))) "function.c":1073 149 {*extendsidi2_rex64}
     (nil))
(insn 197 196 198 22 (set (reg:SI 1 dx [206])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1073 86 {*movsi_internal}
     (nil))
(insn 198 197 199 22 (set (reg:DI 1 dx [205])
        (sign_extend:DI (reg:SI 1 dx [206]))) "function.c":1073 149 {*extendsidi2_rex64}
     (nil))
(insn 199 198 200 22 (parallel [
            (set (reg:DI 1 dx [207])
                (mult:DI (reg:DI 1 dx [205])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 349 {*muldi3_1}
     (nil))
(insn 200 199 201 22 (parallel [
            (set (reg:DI 1 dx [208])
                (plus:DI (reg:DI 1 dx [207])
                    (reg/f:DI 2 cx [orig:143 _57 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 222 {*adddi_1}
     (nil))
(insn 201 200 202 22 (parallel [
            (set (reg:DI 0 ax [209])
                (plus:DI (reg:DI 0 ax [203])
                    (reg:DI 1 dx [208])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 222 {*adddi_1}
     (nil))
(insn 202 201 203 22 (parallel [
            (set (reg/f:DI 0 ax [210])
                (plus:DI (reg:DI 0 ax [209])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 222 {*adddi_1}
     (nil))
(insn 203 202 204 22 (set (mem/j:QI (reg/f:DI 0 ax [210]) [0 _57->area S1 A8])
        (const_int 42 [0x2a])) "function.c":1073 88 {*movqi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       20
;;              21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 204 203 205 23 172 (nil) [2 uses])
(note 205 204 206 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 341 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
        (const_int 0 [0])) "function.c":1076 86 {*movsi_internal}
     (nil))
(jump_insn 341 206 342 23 (set (pc)
        (label_ref 251)) "function.c":1076 683 {jump}
     (nil)
 -> 251)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 342 341 256)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       29
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 211 212 213 214
(code_label 256 342 209 24 175 (nil) [1 uses])
(note 209 256 210 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 24 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 211 210 212 24 (set (reg/f:DI 0 ax [orig:144 _58 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [211]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 212 211 213 24 (set (reg:SI 1 dx [213])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 213 212 214 24 (set (reg:DI 1 dx [212])
        (sign_extend:DI (reg:SI 1 dx [213]))) "function.c":1078 149 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 24 (parallel [
            (set (reg:DI 1 dx [214])
                (plus:DI (reg:DI 1 dx [212])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1078 222 {*adddi_1}
     (nil))
(insn 215 214 216 24 (set (reg:SI 0 ax [orig:145 _59 ] [145])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [214])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [orig:144 _58 ] [144])) [3 _58->skarb.value_all_dropped_coin S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 216 215 217 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:145 _59 ] [145])
            (const_int 0 [0]))) "function.c":1078 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 217 216 218 24 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":1078 682 {*jcc}
     (nil)
 -> 248)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 215 216 217 218
(note 218 217 219 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 25 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 220 219 221 25 (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
        (mem/f:DI (reg/f:DI 0 ax [215]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 221 220 222 25 (set (reg:SI 1 dx [217])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 222 221 223 25 (set (reg:DI 1 dx [216])
        (sign_extend:DI (reg:SI 1 dx [217]))) "function.c":1078 149 {*extendsidi2_rex64}
     (nil))
(insn 223 222 224 25 (parallel [
            (set (reg:DI 1 dx [218])
                (plus:DI (reg:DI 1 dx [216])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1078 222 {*adddi_1}
     (nil))
(insn 224 223 225 25 (set (reg:SI 0 ax [orig:147 _61 ] [147])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [218])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [orig:146 _60 ] [146])) [3 _60->skarb.dropped_coin S4 A64])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 225 224 226 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:147 _61 ] [147]))) "function.c":1078 11 {*cmpsi_1}
     (nil))
(jump_insn 226 225 227 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":1078 682 {*jcc}
     (nil)
 -> 248)
;;  succ:       26 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 219 220 221
(note 227 226 228 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 26 (set (reg/f:DI 0 ax [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 229 228 230 26 (set (reg/f:DI 0 ax [orig:148 _62 ] [148])
        (mem/f:DI (reg/f:DI 0 ax [219]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 230 229 231 26 (set (reg:SI 1 dx [221])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 231 230 232 26 (set (reg:DI 1 dx [220])
        (sign_extend:DI (reg:SI 1 dx [221]))) "function.c":1078 149 {*extendsidi2_rex64}
     (nil))
(insn 232 231 233 26 (set (reg:SI 0 ax [orig:149 _63 ] [149])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [220])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [orig:148 _62 ] [148]))
                (const_int 24068 [0x5e04])) [3 _62->skarb.dropped_coin S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 233 232 234 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 0 ax [orig:149 _63 ] [149]))) "function.c":1078 11 {*cmpsi_1}
     (nil))
(jump_insn 234 233 235 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":1078 682 {*jcc}
     (nil)
 -> 248)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 222 223 224 225 226 227 228 229 230
(note 235 234 236 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 27 (set (reg/f:DI 0 ax [222])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1080 85 {*movdi_internal}
     (nil))
(insn 237 236 238 27 (set (reg/f:DI 0 ax [orig:150 _64 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [222]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1080 85 {*movdi_internal}
     (nil))
(insn 238 237 239 27 (set (reg/f:DI 2 cx [orig:151 _65 ] [151])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:150 _64 ] [150])
                (const_int 40 [0x28])) [14 _64->player2+0 S8 A64])) "function.c":1080 85 {*movdi_internal}
     (nil))
(insn 239 238 240 27 (set (reg:SI 0 ax [224])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1080 86 {*movsi_internal}
     (nil))
(insn 240 239 241 27 (set (reg:DI 0 ax [223])
        (sign_extend:DI (reg:SI 0 ax [224]))) "function.c":1080 149 {*extendsidi2_rex64}
     (nil))
(insn 241 240 242 27 (set (reg:SI 1 dx [226])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1080 86 {*movsi_internal}
     (nil))
(insn 242 241 243 27 (set (reg:DI 1 dx [225])
        (sign_extend:DI (reg:SI 1 dx [226]))) "function.c":1080 149 {*extendsidi2_rex64}
     (nil))
(insn 243 242 244 27 (parallel [
            (set (reg:DI 1 dx [227])
                (mult:DI (reg:DI 1 dx [225])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 349 {*muldi3_1}
     (nil))
(insn 244 243 245 27 (parallel [
            (set (reg:DI 1 dx [228])
                (plus:DI (reg:DI 1 dx [227])
                    (reg/f:DI 2 cx [orig:151 _65 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 222 {*adddi_1}
     (nil))
(insn 245 244 246 27 (parallel [
            (set (reg:DI 0 ax [229])
                (plus:DI (reg:DI 0 ax [223])
                    (reg:DI 1 dx [228])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 222 {*adddi_1}
     (nil))
(insn 246 245 247 27 (parallel [
            (set (reg/f:DI 0 ax [230])
                (plus:DI (reg:DI 0 ax [229])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 222 {*adddi_1}
     (nil))
(insn 247 246 248 27 (set (mem/j:QI (reg/f:DI 0 ax [230]) [0 _65->area S1 A8])
        (const_int 68 [0x44])) "function.c":1080 88 {*movqi_internal}
     (nil))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       24
;;              25
;;              26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 248 247 249 28 174 (nil) [3 uses])
(note 249 248 250 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1076 221 {*addsi_1}
     (nil))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              23 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 231
(code_label 251 250 252 29 173 (nil) [1 uses])
(note 252 251 253 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 29 (set (reg/f:DI 0 ax [231])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1076 85 {*movdi_internal}
     (nil))
(insn 254 253 255 29 (set (reg/f:DI 0 ax [orig:152 _66 ] [152])
        (mem/f:DI (reg/f:DI 0 ax [231]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1076 85 {*movdi_internal}
     (nil))
(insn 255 254 257 29 (set (reg:SI 0 ax [orig:153 _67 ] [153])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:152 _66 ] [152])
                (const_int 24060 [0x5dfc])) [3 _66->skarb.count_drop_coin+0 S4 A32])) "function.c":1076 86 {*movsi_internal}
     (nil))
(insn 257 255 258 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
            (reg:SI 0 ax [orig:153 _67 ] [153]))) "function.c":1076 11 {*cmpsi_1}
     (nil))
(jump_insn 258 257 259 29 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 256)
            (pc))) "function.c":1076 682 {*jcc}
     (nil)
 -> 256)
;;  succ:       24
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 232
(note 259 258 260 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 30 (set (reg/f:DI 0 ax [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 261 260 262 30 (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
        (mem/f:DI (reg/f:DI 0 ax [232]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 262 261 263 30 (set (reg/f:DI 0 ax [orig:155 _69 ] [155])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (const_int 32 [0x20])) [14 _68->player1+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 263 262 264 30 (set (reg:SI 0 ax [orig:156 _70 ] [156])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:155 _69 ] [155])
                (const_int 16 [0x10])) [3 _69->y_current+0 S4 A64])) "function.c":1084 86 {*movsi_internal}
     (nil))
(insn 264 263 265 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:156 _70 ] [156]))) "function.c":1084 11 {*cmpsi_1}
     (nil))
(jump_insn 265 264 266 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":1084 682 {*jcc}
     (nil)
 -> 286)
;;  succ:       31 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 233
(note 266 265 267 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 31 (set (reg/f:DI 0 ax [233])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 268 267 269 31 (set (reg/f:DI 0 ax [orig:157 _71 ] [157])
        (mem/f:DI (reg/f:DI 0 ax [233]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 269 268 270 31 (set (reg/f:DI 0 ax [orig:158 _72 ] [158])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:157 _71 ] [157])
                (const_int 32 [0x20])) [14 _71->player1+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 270 269 271 31 (set (reg:SI 0 ax [orig:159 _73 ] [159])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:158 _72 ] [158])
                (const_int 12 [0xc])) [3 _72->x_current+0 S4 A32])) "function.c":1084 86 {*movsi_internal}
     (nil))
(insn 271 270 272 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 0 ax [orig:159 _73 ] [159]))) "function.c":1084 11 {*cmpsi_1}
     (nil))
(jump_insn 272 271 273 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":1084 682 {*jcc}
     (nil)
 -> 286)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 234 235 236 237 238 239 240 241 242
(note 273 272 274 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 32 (set (reg/f:DI 0 ax [234])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1086 85 {*movdi_internal}
     (nil))
(insn 275 274 276 32 (set (reg/f:DI 0 ax [orig:160 _74 ] [160])
        (mem/f:DI (reg/f:DI 0 ax [234]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1086 85 {*movdi_internal}
     (nil))
(insn 276 275 277 32 (set (reg/f:DI 2 cx [orig:161 _75 ] [161])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:160 _74 ] [160])
                (const_int 40 [0x28])) [14 _74->player2+0 S8 A64])) "function.c":1086 85 {*movdi_internal}
     (nil))
(insn 277 276 278 32 (set (reg:SI 0 ax [236])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1086 86 {*movsi_internal}
     (nil))
(insn 278 277 279 32 (set (reg:DI 0 ax [235])
        (sign_extend:DI (reg:SI 0 ax [236]))) "function.c":1086 149 {*extendsidi2_rex64}
     (nil))
(insn 279 278 280 32 (set (reg:SI 1 dx [238])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1086 86 {*movsi_internal}
     (nil))
(insn 280 279 281 32 (set (reg:DI 1 dx [237])
        (sign_extend:DI (reg:SI 1 dx [238]))) "function.c":1086 149 {*extendsidi2_rex64}
     (nil))
(insn 281 280 282 32 (parallel [
            (set (reg:DI 1 dx [239])
                (mult:DI (reg:DI 1 dx [237])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 349 {*muldi3_1}
     (nil))
(insn 282 281 283 32 (parallel [
            (set (reg:DI 1 dx [240])
                (plus:DI (reg:DI 1 dx [239])
                    (reg/f:DI 2 cx [orig:161 _75 ] [161])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 222 {*adddi_1}
     (nil))
(insn 283 282 284 32 (parallel [
            (set (reg:DI 0 ax [241])
                (plus:DI (reg:DI 0 ax [235])
                    (reg:DI 1 dx [240])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 222 {*adddi_1}
     (nil))
(insn 284 283 285 32 (parallel [
            (set (reg/f:DI 0 ax [242])
                (plus:DI (reg:DI 0 ax [241])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 222 {*adddi_1}
     (nil))
(insn 285 284 286 32 (set (mem/j:QI (reg/f:DI 0 ax [242]) [0 _75->area S1 A8])
        (const_int 49 [0x31])) "function.c":1086 88 {*movqi_internal}
     (nil))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       30
;;              31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 286 285 287 33 176 (nil) [2 uses])
(note 287 286 288 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1089 221 {*addsi_1}
     (nil))
(insn 289 288 290 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1068 221 {*addsi_1}
     (nil))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              19 [always] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243
(code_label 290 289 291 34 171 (nil) [1 uses])
(note 291 290 293 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 293 291 294 34 (set (reg:SI 0 ax [243])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":1068 86 {*movsi_internal}
     (nil))
(insn 294 293 295 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [243])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32]))) "function.c":1068 11 {*cmpsi_1}
     (nil))
(jump_insn 295 294 296 34 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 292)
            (pc))) "function.c":1068 682 {*jcc}
     (nil)
 -> 292)
;;  succ:       20
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 296 295 297 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1091 221 {*addsi_1}
     (nil))
(insn 298 297 299 35 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":1092 86 {*movsi_internal}
     (nil))
(insn 299 298 300 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1066 221 {*addsi_1}
     (nil))
;;  succ:       36 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU,DFS_BACK)
;;              18 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244
(code_label 300 299 301 36 170 (nil) [1 uses])
(note 301 300 303 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 303 301 304 36 (set (reg:SI 0 ax [244])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":1066 86 {*movsi_internal}
     (nil))
(insn 304 303 305 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [244])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32]))) "function.c":1066 11 {*cmpsi_1}
     (nil))
(jump_insn 305 304 306 36 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) "function.c":1066 682 {*jcc}
     (nil)
 -> 302)
;;  succ:       19
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 1, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 162 163 164 165 245 246 247 248 249 250 251 252 253
(note 306 305 307 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 37 (set (reg/f:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1095 85 {*movdi_internal}
     (nil))
(insn 308 307 309 37 (set (reg/f:DI 0 ax [orig:162 _76 ] [162])
        (mem/f:DI (reg/f:DI 0 ax [245]) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1095 85 {*movdi_internal}
     (nil))
(insn 309 308 310 37 (set (reg/f:DI 2 cx [orig:163 _77 ] [163])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:162 _76 ] [162])
                (const_int 40 [0x28])) [14 _76->player2+0 S8 A64])) "function.c":1095 85 {*movdi_internal}
     (nil))
(insn 310 309 311 37 (set (reg:SI 0 ax [247])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])) "function.c":1095 86 {*movsi_internal}
     (nil))
(insn 311 310 312 37 (set (reg:DI 0 ax [246])
        (sign_extend:DI (reg:SI 0 ax [247]))) "function.c":1095 149 {*extendsidi2_rex64}
     (nil))
(insn 312 311 313 37 (set (reg:SI 1 dx [249])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "function.c":1095 86 {*movsi_internal}
     (nil))
(insn 313 312 314 37 (set (reg:DI 1 dx [248])
        (sign_extend:DI (reg:SI 1 dx [249]))) "function.c":1095 149 {*extendsidi2_rex64}
     (nil))
(insn 314 313 315 37 (parallel [
            (set (reg:DI 1 dx [250])
                (mult:DI (reg:DI 1 dx [248])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 349 {*muldi3_1}
     (nil))
(insn 315 314 316 37 (parallel [
            (set (reg:DI 1 dx [251])
                (plus:DI (reg:DI 1 dx [250])
                    (reg/f:DI 2 cx [orig:163 _77 ] [163])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 222 {*adddi_1}
     (nil))
(insn 316 315 317 37 (parallel [
            (set (reg:DI 0 ax [252])
                (plus:DI (reg:DI 0 ax [246])
                    (reg:DI 1 dx [251])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 222 {*adddi_1}
     (nil))
(insn 317 316 318 37 (parallel [
            (set (reg/f:DI 0 ax [253])
                (plus:DI (reg:DI 0 ax [252])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 222 {*adddi_1}
     (nil))
(insn 318 317 319 37 (set (mem/j:QI (reg/f:DI 0 ax [253]) [0 _77->area S1 A8])
        (const_int 50 [0x32])) "function.c":1095 88 {*movqi_internal}
     (nil))
(insn 319 318 326 37 (set (reg:SI 0 ax [orig:164 _144 ] [164])
        (const_int 0 [0])) "function.c":1097 86 {*movsi_internal}
     (nil))
(insn 326 319 327 37 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:165 <retval> ] [165])) "function.c":1098 86 {*movsi_internal}
     (nil))
(insn 327 326 343 37 (use (reg/i:SI 0 ax)) "function.c":1098 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 343 327 0 NOTE_INSN_DELETED)

;; Function druk_wizja (druk_wizja, funcdef_no=22, decl_uid=6248, cgraph_uid=22, symbol_order=25)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 37:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 38
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 39
	 Choosing alt 0 in insn 39:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 68:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 69:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 70
	 Choosing alt 0 in insn 70:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 71
	 Choosing alt 0 in insn 71:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 72:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 90:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 91:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 92
	 Choosing alt 0 in insn 92:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 93
	 Choosing alt 0 in insn 93:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 94:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 106:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 107
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 108
	 Choosing alt 0 in insn 108:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 109:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 115:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 121:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 122
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 123
	 Choosing alt 0 in insn 123:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 124:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 125:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 136:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 137
	 Choosing alt 0 in insn 137:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 139:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 146:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 147:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 151:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 155:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 156:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 157:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 158
	 Choosing alt 0 in insn 158:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 159
	 Choosing alt 0 in insn 159:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 160:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 161:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 164:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 165:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 167:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 168:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 177:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 181:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 182:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 183:  (0) r  (1) rm  (2) e {*muldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 184
	 Choosing alt 0 in insn 184:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 185
	 Choosing alt 0 in insn 185:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 186:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 187:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 188:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 190:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 191:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 192:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 195:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 202:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 209:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6 7
EBB 8 9 10 11
EBB 12
EBB 13
EBB 14
EBB 15 16
EBB 17 18

********** Pseudo live ranges #1: **********

  BB 18
   Insn 217: point = 0, n_alt = -1
   Insn 216: point = 0, n_alt = -2
   Insn 212: point = 1, n_alt = -2
   Insn 209: point = 3, n_alt = 0
  BB 17
   Insn 207: point = 4, n_alt = -1
   Insn 206: point = 4, n_alt = 0
  BB 2
   Insn 219: point = 4, n_alt = -1
   Insn 14: point = 4, n_alt = 1
   Insn 13: point = 4, n_alt = 0
   Insn 12: point = 4, n_alt = 0
   Insn 11: point = 4, n_alt = 0
   Insn 10: point = 4, n_alt = 0
   Insn 9: point = 4, n_alt = 0
   Insn 8: point = 4, n_alt = 0
   Insn 7: point = 4, n_alt = 0
   Insn 6: point = 4, n_alt = 0
   Insn 2: point = 4, n_alt = 5
  BB 16
   Insn 202: point = 4, n_alt = 1
  BB 15
   Insn 200: point = 4, n_alt = -1
   Insn 199: point = 4, n_alt = 0
  BB 3
   Insn 221: point = 4, n_alt = -1
   Insn 18: point = 4, n_alt = 1
  BB 14
   Insn 195: point = 4, n_alt = 1
  BB 12
   Insn 227: point = 4, n_alt = -1
   Insn 171: point = 4, n_alt = 0
   Insn 170: point = 4, n_alt = -2
   Insn 169: point = 5, n_alt = 0
   Insn 168: point = 5, n_alt = 2
   Insn 167: point = 5, n_alt = 3
   Insn 166: point = 6, n_alt = 0
   Insn 165: point = 6, n_alt = 3
   Insn 164: point = 6, n_alt = 4
   Insn 163: point = 6, n_alt = -2
   Insn 162: point = 7, n_alt = 0
   Insn 161: point = 9, n_alt = 4
   Insn 160: point = 11, n_alt = 0
   Insn 159: point = 13, n_alt = 0
   Insn 158: point = 15, n_alt = 0
   Insn 157: point = 17, n_alt = 1
   Insn 156: point = 19, n_alt = 1
   Insn 155: point = 21, n_alt = 0
   Insn 154: point = 22, n_alt = 0
   Insn 153: point = 24, n_alt = 0
   Insn 152: point = 25, n_alt = 3
   Insn 151: point = 27, n_alt = 3
   Insn 150: point = 29, n_alt = 3
   Insn 149: point = 30, n_alt = 0
   Insn 148: point = 30, n_alt = -2
   Insn 147: point = 31, n_alt = 0
   Insn 146: point = 31, n_alt = 2
   Insn 145: point = 31, n_alt = 3
  BB 7
   Insn 225: point = 32, n_alt = -1
   Insn 79: point = 32, n_alt = 0
   Insn 78: point = 32, n_alt = 3
   Insn 77: point = 32, n_alt = 4
  BB 5
   Insn 223: point = 32, n_alt = -1
   Insn 57: point = 32, n_alt = 0
   Insn 56: point = 32, n_alt = -2
   Insn 55: point = 33, n_alt = 0
   Insn 54: point = 33, n_alt = 2
   Insn 53: point = 33, n_alt = 3
   Insn 52: point = 34, n_alt = 0
   Insn 51: point = 34, n_alt = 3
   Insn 50: point = 34, n_alt = 4
   Insn 49: point = 34, n_alt = 0
   Insn 48: point = 34, n_alt = -2
   Insn 47: point = 35, n_alt = 0
   Insn 46: point = 35, n_alt = 2
   Insn 45: point = 35, n_alt = 3
  BB 13
   Insn 192: point = 36, n_alt = 0
   Insn 191: point = 36, n_alt = 3
   Insn 190: point = 36, n_alt = 4
   Insn 189: point = 36, n_alt = -2
   Insn 188: point = 37, n_alt = 0
   Insn 187: point = 39, n_alt = 4
   Insn 186: point = 41, n_alt = 0
   Insn 185: point = 43, n_alt = 0
   Insn 184: point = 45, n_alt = 0
   Insn 183: point = 47, n_alt = 1
   Insn 182: point = 49, n_alt = 1
   Insn 181: point = 51, n_alt = 0
   Insn 180: point = 52, n_alt = 0
   Insn 179: point = 54, n_alt = 0
   Insn 178: point = 55, n_alt = 3
   Insn 177: point = 57, n_alt = 3
   Insn 176: point = 59, n_alt = 3
  BB 11
   Insn 142: point = 60, n_alt = -1
   Insn 141: point = 60, n_alt = 0
   Insn 140: point = 61, n_alt = 4
   Insn 139: point = 63, n_alt = 0
   Insn 138: point = 65, n_alt = 0
   Insn 137: point = 67, n_alt = 0
   Insn 136: point = 69, n_alt = 1
   Insn 135: point = 71, n_alt = 1
   Insn 134: point = 73, n_alt = 0
   Insn 133: point = 74, n_alt = 0
   Insn 132: point = 76, n_alt = 0
   Insn 131: point = 77, n_alt = 3
   Insn 130: point = 79, n_alt = 3
   Insn 129: point = 81, n_alt = 3
  BB 10
   Insn 127: point = 82, n_alt = -1
   Insn 126: point = 82, n_alt = 0
   Insn 125: point = 83, n_alt = 4
   Insn 124: point = 85, n_alt = 0
   Insn 123: point = 87, n_alt = 0
   Insn 122: point = 89, n_alt = 0
   Insn 121: point = 91, n_alt = 1
   Insn 120: point = 93, n_alt = 1
   Insn 119: point = 95, n_alt = 0
   Insn 118: point = 96, n_alt = 0
   Insn 117: point = 98, n_alt = 0
   Insn 116: point = 99, n_alt = 3
   Insn 115: point = 101, n_alt = 3
   Insn 114: point = 103, n_alt = 3
  BB 9
   Insn 112: point = 104, n_alt = -1
   Insn 111: point = 104, n_alt = 0
   Insn 110: point = 105, n_alt = 4
   Insn 109: point = 107, n_alt = 0
   Insn 108: point = 109, n_alt = 0
   Insn 107: point = 111, n_alt = 0
   Insn 106: point = 113, n_alt = 1
   Insn 105: point = 115, n_alt = 1
   Insn 104: point = 117, n_alt = 0
   Insn 103: point = 118, n_alt = 0
   Insn 102: point = 120, n_alt = 0
   Insn 101: point = 121, n_alt = 3
   Insn 100: point = 123, n_alt = 3
   Insn 99: point = 125, n_alt = 3
  BB 8
   Insn 97: point = 126, n_alt = -1
   Insn 96: point = 126, n_alt = 0
   Insn 95: point = 127, n_alt = 4
   Insn 94: point = 129, n_alt = 0
   Insn 93: point = 131, n_alt = 0
   Insn 92: point = 133, n_alt = 0
   Insn 91: point = 135, n_alt = 1
   Insn 90: point = 137, n_alt = 1
   Insn 89: point = 139, n_alt = 0
   Insn 88: point = 140, n_alt = 0
   Insn 87: point = 142, n_alt = 0
   Insn 86: point = 143, n_alt = 3
   Insn 85: point = 145, n_alt = 3
   Insn 84: point = 147, n_alt = 3
  BB 6
   Insn 75: point = 148, n_alt = -1
   Insn 74: point = 148, n_alt = 0
   Insn 73: point = 149, n_alt = 4
   Insn 72: point = 151, n_alt = 0
   Insn 71: point = 153, n_alt = 0
   Insn 70: point = 155, n_alt = 0
   Insn 69: point = 157, n_alt = 1
   Insn 68: point = 159, n_alt = 1
   Insn 67: point = 161, n_alt = 0
   Insn 66: point = 162, n_alt = 0
   Insn 65: point = 164, n_alt = 0
   Insn 64: point = 165, n_alt = 3
   Insn 63: point = 167, n_alt = 3
   Insn 62: point = 169, n_alt = 3
  BB 4
   Insn 43: point = 170, n_alt = -1
   Insn 42: point = 170, n_alt = 0
   Insn 41: point = 171, n_alt = 4
   Insn 40: point = 173, n_alt = 0
   Insn 39: point = 175, n_alt = 0
   Insn 38: point = 177, n_alt = 0
   Insn 37: point = 179, n_alt = 1
   Insn 36: point = 181, n_alt = 1
   Insn 35: point = 183, n_alt = 0
   Insn 34: point = 184, n_alt = 0
   Insn 33: point = 186, n_alt = 0
   Insn 32: point = 187, n_alt = 3
   Insn 31: point = 189, n_alt = 3
   Insn 30: point = 191, n_alt = 3
   Insn 29: point = 192, n_alt = 0
   Insn 28: point = 192, n_alt = -2
   Insn 27: point = 193, n_alt = -2
   Insn 26: point = 194, n_alt = -2
   Insn 25: point = 195, n_alt = 0
   Insn 24: point = 196, n_alt = 3
   Insn 23: point = 197, n_alt = 3
   Insn 22: point = 199, n_alt = 0
 r87: [194..197]
 r88: [192..196]
 r89: [188..189]
 r90: [178..187]
 r91: [170..171]
 r92: [34..35]
 r93: [32..33]
 r94: [166..167]
 r95: [156..165]
 r96: [148..149]
 r97: [144..145]
 r98: [134..143]
 r99: [126..127]
 r100: [122..123]
 r101: [112..121]
 r102: [104..105]
 r103: [100..101]
 r104: [90..99]
 r105: [82..83]
 r106: [78..79]
 r107: [68..77]
 r108: [60..61]
 r109: [30..31]
 r110: [26..27]
 r111: [16..25]
 r112: [8..9]
 r113: [6..7]
 r114: [4..5]
 r115: [56..57]
 r116: [46..55]
 r117: [38..39]
 r118: [36..37]
 r119: [2..3]
 r120: [0..1]
 r121: [198..199]
 r122: [193..195]
 r123: [190..191]
 r124: [176..184]
 r125: [185..186]
 r126: [180..181]
 r127: [182..183]
 r128: [178..179]
 r129: [176..177]
 r130: [174..175]
 r131: [172..173]
 r132: [168..169]
 r133: [154..162]
 r134: [163..164]
 r135: [158..159]
 r136: [160..161]
 r137: [156..157]
 r138: [154..155]
 r139: [152..153]
 r140: [150..151]
 r141: [146..147]
 r142: [132..140]
 r143: [141..142]
 r144: [136..137]
 r145: [138..139]
 r146: [134..135]
 r147: [132..133]
 r148: [130..131]
 r149: [128..129]
 r150: [124..125]
 r151: [110..118]
 r152: [119..120]
 r153: [114..115]
 r154: [116..117]
 r155: [112..113]
 r156: [110..111]
 r157: [108..109]
 r158: [106..107]
 r159: [102..103]
 r160: [88..96]
 r161: [97..98]
 r162: [92..93]
 r163: [94..95]
 r164: [90..91]
 r165: [88..89]
 r166: [86..87]
 r167: [84..85]
 r168: [80..81]
 r169: [66..74]
 r170: [75..76]
 r171: [70..71]
 r172: [72..73]
 r173: [68..69]
 r174: [66..67]
 r175: [64..65]
 r176: [62..63]
 r177: [28..29]
 r178: [14..22]
 r179: [23..24]
 r180: [18..19]
 r181: [20..21]
 r182: [16..17]
 r183: [14..15]
 r184: [12..13]
 r185: [10..11]
 r186: [58..59]
 r187: [44..52]
 r188: [53..54]
 r189: [48..49]
 r190: [50..51]
 r191: [46..47]
 r192: [44..45]
 r193: [42..43]
 r194: [40..41]
Compressing live ranges: from 200 to 180 - 90%
Ranges after the compression:
 r87: [176..177]
 r88: [176..177]
 r89: [172..173]
 r90: [164..171]
 r91: [156..157]
 r92: [32..33]
 r93: [30..31]
 r94: [152..153]
 r95: [144..151]
 r96: [136..137]
 r97: [132..133]
 r98: [124..131]
 r99: [116..117]
 r100: [112..113]
 r101: [104..111]
 r102: [96..97]
 r103: [92..93]
 r104: [84..91]
 r105: [76..77]
 r106: [72..73]
 r107: [64..71]
 r108: [56..57]
 r109: [28..29]
 r110: [24..25]
 r111: [16..23]
 r112: [8..9]
 r113: [6..7]
 r114: [4..5]
 r115: [52..53]
 r116: [44..51]
 r117: [36..37]
 r118: [34..35]
 r119: [2..3]
 r120: [0..1]
 r121: [178..179]
 r122: [176..177]
 r123: [174..175]
 r124: [162..169]
 r125: [170..171]
 r126: [166..167]
 r127: [168..169]
 r128: [164..165]
 r129: [162..163]
 r130: [160..161]
 r131: [158..159]
 r132: [154..155]
 r133: [142..149]
 r134: [150..151]
 r135: [146..147]
 r136: [148..149]
 r137: [144..145]
 r138: [142..143]
 r139: [140..141]
 r140: [138..139]
 r141: [134..135]
 r142: [122..129]
 r143: [130..131]
 r144: [126..127]
 r145: [128..129]
 r146: [124..125]
 r147: [122..123]
 r148: [120..121]
 r149: [118..119]
 r150: [114..115]
 r151: [102..109]
 r152: [110..111]
 r153: [106..107]
 r154: [108..109]
 r155: [104..105]
 r156: [102..103]
 r157: [100..101]
 r158: [98..99]
 r159: [94..95]
 r160: [82..89]
 r161: [90..91]
 r162: [86..87]
 r163: [88..89]
 r164: [84..85]
 r165: [82..83]
 r166: [80..81]
 r167: [78..79]
 r168: [74..75]
 r169: [62..69]
 r170: [70..71]
 r171: [66..67]
 r172: [68..69]
 r173: [64..65]
 r174: [62..63]
 r175: [60..61]
 r176: [58..59]
 r177: [26..27]
 r178: [14..21]
 r179: [22..23]
 r180: [18..19]
 r181: [20..21]
 r182: [16..17]
 r183: [14..15]
 r184: [12..13]
 r185: [10..11]
 r186: [54..55]
 r187: [42..49]
 r188: [50..51]
 r189: [46..47]
 r190: [48..49]
 r191: [44..45]
 r192: [42..43]
 r193: [40..41]
 r194: [38..39]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 48
changing reg in insn 53
changing reg in insn 56
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 73
changing reg in insn 74
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 110
changing reg in insn 111
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 125
changing reg in insn 126
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 140
changing reg in insn 141
changing reg in insn 145
changing reg in insn 148
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 167
changing reg in insn 170
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 189
changing reg in insn 209
changing reg in insn 212
changing reg in insn 212
changing reg in insn 216
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 94
changing reg in insn 95
changing reg in insn 99
changing reg in insn 100
changing reg in insn 103
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 106
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 114
changing reg in insn 115
changing reg in insn 118
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 124
changing reg in insn 125
changing reg in insn 129
changing reg in insn 130
changing reg in insn 133
changing reg in insn 132
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 150
changing reg in insn 151
changing reg in insn 154
changing reg in insn 153
changing reg in insn 154
changing reg in insn 156
changing reg in insn 157
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 176
changing reg in insn 177
changing reg in insn 180
changing reg in insn 179
changing reg in insn 180
changing reg in insn 182
changing reg in insn 183
changing reg in insn 181
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
deleting insn with uid = 26.
deleting insn with uid = 212.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 192.


druk_wizja

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={82d,71u} r1={51d,39u} r2={21d,9u} r4={21d,9u} r5={23d,12u} r6={1d,53u} r7={1d,29u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r17={54d,8u} r18={11d} r19={11d} r20={1d,1u,1e} r21={12d} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} 
;;    total ref usage 1223{991d,231u,1e} in 176{165 regular + 11 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])
        (reg:DI 5 di [ user ])) "function.c":1101 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":1102 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":1102 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1102 86 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":1102 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 10 9 11 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":1103 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":1103 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":1103 86 {*movsi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":1103 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 14 13 219 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1105 86 {*movsi_internal}
     (nil))
(jump_insn 219 14 220 2 (set (pc)
        (label_ref 203)) "function.c":1105 683 {jump}
     (nil)
 -> 203)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 220 219 205)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 205 220 17 3 189 (nil) [1 uses])
(note 17 205 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 221 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":1107 86 {*movsi_internal}
     (nil))
(jump_insn 221 18 222 3 (set (pc)
        (label_ref 196)) "function.c":1107 683 {jump}
     (nil)
 -> 196)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 222 221 198)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 121 122 123 124 125 126 127 128 129 130 131
(code_label 198 222 21 4 188 (nil) [1 uses])
(note 21 198 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 0 ax [121])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1109 86 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg:SI 1 dx [orig:87 _1 ] [87])
                (plus:SI (reg:SI 0 ax [121])
                    (const_int 100 [0x64])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1109 221 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 100 [0x64]))
        (nil)))
(insn 24 23 25 4 (set (reg/f:DI 0 ax [orig:88 stdscr.128_2 ] [88])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1109 85 {*movdi_internal}
     (nil))
(insn 25 24 27 4 (set (reg:SI 2 cx [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1109 86 {*movsi_internal}
     (nil))
(insn 27 25 28 4 (set (reg:SI 4 si)
        (reg:SI 2 cx [122])) "function.c":1109 86 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:88 stdscr.128_2 ] [88])) "function.c":1109 85 {*movdi_internal}
     (nil))
(call_insn 29 28 30 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":1109 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 30 29 31 4 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1110 85 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (reg/f:DI 0 ax [123]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1110 85 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 2 cx [orig:90 _4 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (const_int 32 [0x20])) [14 _3->player1+0 S8 A64])) "function.c":1110 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 0 ax [125])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1110 86 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 0 ax [124])
        (sign_extend:DI (reg:SI 0 ax [125]))) "function.c":1110 149 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 4 (set (reg:SI 1 dx [127])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1110 86 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 1 dx [126])
        (sign_extend:DI (reg:SI 1 dx [127]))) "function.c":1110 149 {*extendsidi2_rex64}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 1 dx [128])
                (mult:DI (reg:DI 1 dx [126])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 349 {*muldi3_1}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 1 dx [129])
                (plus:DI (reg:DI 1 dx [128])
                    (reg/f:DI 2 cx [orig:90 _4 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 222 {*adddi_1}
     (nil))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 0 ax [130])
                (plus:DI (reg:DI 0 ax [124])
                    (reg:DI 1 dx [129])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 222 {*adddi_1}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 0 ax [131])
                (plus:DI (reg:DI 0 ax [130])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 222 {*adddi_1}
     (nil))
(insn 41 40 42 4 (set (reg:QI 0 ax [orig:91 _5 ] [91])
        (mem/j:QI (reg/f:DI 0 ax [131]) [0 _4->area S1 A8])) "function.c":1110 88 {*movqi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:91 _5 ] [91])
            (const_int 77 [0x4d]))) "function.c":1110 9 {*cmpqi_1}
     (nil))
(jump_insn 43 42 44 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "function.c":1110 682 {*jcc}
     (nil)
 -> 60)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93
(note 44 43 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 5 (set (reg/f:DI 0 ax [orig:92 stdscr.129_6 ] [92])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1112 85 {*movdi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1112 85 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":1112 86 {*movsi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:92 stdscr.129_6 ] [92])) "function.c":1112 85 {*movdi_internal}
     (nil))
(call_insn 49 48 50 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":1112 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 50 49 51 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":1113 85 {*movdi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1113 88 {*movqi_internal}
     (nil))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1113 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 53 52 54 5 (set (reg/f:DI 0 ax [orig:93 stdscr.130_7 ] [93])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1114 85 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1114 85 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":1114 86 {*movsi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:93 stdscr.130_7 ] [93])) "function.c":1114 85 {*movdi_internal}
     (nil))
(call_insn 57 56 223 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":1114 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 223 57 224 5 (set (pc)
        (label_ref 193)) 683 {jump}
     (nil)
 -> 193)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 224 223 60)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 132 133 134 135 136 137 138 139 140
(code_label 60 224 61 6 183 (nil) [1 uses])
(note 61 60 62 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 6 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1116 85 {*movdi_internal}
     (nil))
(insn 63 62 64 6 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [132]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1116 85 {*movdi_internal}
     (nil))
(insn 64 63 65 6 (set (reg/f:DI 2 cx [orig:95 _9 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (const_int 32 [0x20])) [14 _8->player1+0 S8 A64])) "function.c":1116 85 {*movdi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:SI 0 ax [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1116 86 {*movsi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:DI 0 ax [133])
        (sign_extend:DI (reg:SI 0 ax [134]))) "function.c":1116 149 {*extendsidi2_rex64}
     (nil))
(insn 67 66 68 6 (set (reg:SI 1 dx [136])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1116 86 {*movsi_internal}
     (nil))
(insn 68 67 69 6 (set (reg:DI 1 dx [135])
        (sign_extend:DI (reg:SI 1 dx [136]))) "function.c":1116 149 {*extendsidi2_rex64}
     (nil))
(insn 69 68 70 6 (parallel [
            (set (reg:DI 1 dx [137])
                (mult:DI (reg:DI 1 dx [135])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 349 {*muldi3_1}
     (nil))
(insn 70 69 71 6 (parallel [
            (set (reg:DI 1 dx [138])
                (plus:DI (reg:DI 1 dx [137])
                    (reg/f:DI 2 cx [orig:95 _9 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 222 {*adddi_1}
     (nil))
(insn 71 70 72 6 (parallel [
            (set (reg:DI 0 ax [139])
                (plus:DI (reg:DI 0 ax [133])
                    (reg:DI 1 dx [138])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 222 {*adddi_1}
     (nil))
(insn 72 71 73 6 (parallel [
            (set (reg/f:DI 0 ax [140])
                (plus:DI (reg:DI 0 ax [139])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 222 {*adddi_1}
     (nil))
(insn 73 72 74 6 (set (reg:QI 0 ax [orig:96 _10 ] [96])
        (mem/j:QI (reg/f:DI 0 ax [140]) [0 _9->area S1 A8])) "function.c":1116 88 {*movqi_internal}
     (nil))
(insn 74 73 75 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:96 _10 ] [96])
            (const_int 46 [0x2e]))) "function.c":1116 9 {*cmpqi_1}
     (nil))
(jump_insn 75 74 76 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "function.c":1116 682 {*jcc}
     (nil)
 -> 82)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":1118 85 {*movdi_internal}
     (nil))
(insn 78 77 79 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1118 88 {*movqi_internal}
     (nil))
(call_insn 79 78 225 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1118 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 225 79 226 7 (set (pc)
        (label_ref 193)) 683 {jump}
     (nil)
 -> 193)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 226 225 82)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 141 142 143 144 145 146 147 148 149
(code_label 82 226 83 8 185 (nil) [1 uses])
(note 83 82 84 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 8 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f:DI (reg/f:DI 0 ax [141]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 86 85 87 8 (set (reg/f:DI 2 cx [orig:98 _12 ] [98])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (const_int 32 [0x20])) [14 _11->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 87 86 88 8 (set (reg:SI 0 ax [143])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 88 87 89 8 (set (reg:DI 0 ax [142])
        (sign_extend:DI (reg:SI 0 ax [143]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 89 88 90 8 (set (reg:SI 1 dx [145])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 90 89 91 8 (set (reg:DI 1 dx [144])
        (sign_extend:DI (reg:SI 1 dx [145]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 1 dx [146])
                (mult:DI (reg:DI 1 dx [144])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (nil))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 1 dx [147])
                (plus:DI (reg:DI 1 dx [146])
                    (reg/f:DI 2 cx [orig:98 _12 ] [98])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 93 92 94 8 (parallel [
            (set (reg:DI 0 ax [148])
                (plus:DI (reg:DI 0 ax [142])
                    (reg:DI 1 dx [147])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg/f:DI 0 ax [149])
                (plus:DI (reg:DI 0 ax [148])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 95 94 96 8 (set (reg:QI 0 ax [orig:99 _13 ] [99])
        (mem/j:QI (reg/f:DI 0 ax [149]) [0 _12->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (nil))
(insn 96 95 97 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:99 _13 ] [99])
            (const_int 99 [0x63]))) "function.c":1120 9 {*cmpqi_1}
     (nil))
(jump_insn 97 96 98 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "function.c":1120 682 {*jcc}
     (nil)
 -> 143)
;;  succ:       12
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 150 151 152 153 154 155 156 157 158
(note 98 97 99 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 9 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 100 99 101 9 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (reg/f:DI 0 ax [150]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 101 100 102 9 (set (reg/f:DI 2 cx [orig:101 _15 ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:100 _14 ] [100])
                (const_int 32 [0x20])) [14 _14->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 102 101 103 9 (set (reg:SI 0 ax [152])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 103 102 104 9 (set (reg:DI 0 ax [151])
        (sign_extend:DI (reg:SI 0 ax [152]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 9 (set (reg:SI 1 dx [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 105 104 106 9 (set (reg:DI 1 dx [153])
        (sign_extend:DI (reg:SI 1 dx [154]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 9 (parallel [
            (set (reg:DI 1 dx [155])
                (mult:DI (reg:DI 1 dx [153])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (nil))
(insn 107 106 108 9 (parallel [
            (set (reg:DI 1 dx [156])
                (plus:DI (reg:DI 1 dx [155])
                    (reg/f:DI 2 cx [orig:101 _15 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 108 107 109 9 (parallel [
            (set (reg:DI 0 ax [157])
                (plus:DI (reg:DI 0 ax [151])
                    (reg:DI 1 dx [156])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 109 108 110 9 (parallel [
            (set (reg/f:DI 0 ax [158])
                (plus:DI (reg:DI 0 ax [157])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 110 109 111 9 (set (reg:QI 0 ax [orig:102 _16 ] [102])
        (mem/j:QI (reg/f:DI 0 ax [158]) [0 _15->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (nil))
(insn 111 110 112 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:102 _16 ] [102])
            (const_int 68 [0x44]))) "function.c":1120 9 {*cmpqi_1}
     (nil))
(jump_insn 112 111 113 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "function.c":1120 682 {*jcc}
     (nil)
 -> 143)
;;  succ:       12
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 159 160 161 162 163 164 165 166 167
(note 113 112 114 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 10 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
        (mem/f:DI (reg/f:DI 0 ax [159]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 116 115 117 10 (set (reg/f:DI 2 cx [orig:104 _18 ] [104])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (const_int 32 [0x20])) [14 _17->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 117 116 118 10 (set (reg:SI 0 ax [161])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 118 117 119 10 (set (reg:DI 0 ax [160])
        (sign_extend:DI (reg:SI 0 ax [161]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 119 118 120 10 (set (reg:SI 1 dx [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 120 119 121 10 (set (reg:DI 1 dx [162])
        (sign_extend:DI (reg:SI 1 dx [163]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 10 (parallel [
            (set (reg:DI 1 dx [164])
                (mult:DI (reg:DI 1 dx [162])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (nil))
(insn 122 121 123 10 (parallel [
            (set (reg:DI 1 dx [165])
                (plus:DI (reg:DI 1 dx [164])
                    (reg/f:DI 2 cx [orig:104 _18 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 123 122 124 10 (parallel [
            (set (reg:DI 0 ax [166])
                (plus:DI (reg:DI 0 ax [160])
                    (reg:DI 1 dx [165])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 124 123 125 10 (parallel [
            (set (reg/f:DI 0 ax [167])
                (plus:DI (reg:DI 0 ax [166])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 125 124 126 10 (set (reg:QI 0 ax [orig:105 _19 ] [105])
        (mem/j:QI (reg/f:DI 0 ax [167]) [0 _18->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (nil))
(insn 126 125 127 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:105 _19 ] [105])
            (const_int 116 [0x74]))) "function.c":1120 9 {*cmpqi_1}
     (nil))
(jump_insn 127 126 128 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "function.c":1120 682 {*jcc}
     (nil)
 -> 143)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 168 169 170 171 172 173 174 175 176
(note 128 127 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 11 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 130 129 131 11 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f:DI (reg/f:DI 0 ax [168]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 131 130 132 11 (set (reg/f:DI 2 cx [orig:107 _21 ] [107])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (const_int 32 [0x20])) [14 _20->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 132 131 133 11 (set (reg:SI 0 ax [170])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 133 132 134 11 (set (reg:DI 0 ax [169])
        (sign_extend:DI (reg:SI 0 ax [170]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 134 133 135 11 (set (reg:SI 1 dx [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 135 134 136 11 (set (reg:DI 1 dx [171])
        (sign_extend:DI (reg:SI 1 dx [172]))) "function.c":1120 149 {*extendsidi2_rex64}
     (nil))
(insn 136 135 137 11 (parallel [
            (set (reg:DI 1 dx [173])
                (mult:DI (reg:DI 1 dx [171])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (nil))
(insn 137 136 138 11 (parallel [
            (set (reg:DI 1 dx [174])
                (plus:DI (reg:DI 1 dx [173])
                    (reg/f:DI 2 cx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 138 137 139 11 (parallel [
            (set (reg:DI 0 ax [175])
                (plus:DI (reg:DI 0 ax [169])
                    (reg:DI 1 dx [174])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 139 138 140 11 (parallel [
            (set (reg/f:DI 0 ax [176])
                (plus:DI (reg:DI 0 ax [175])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (nil))
(insn 140 139 141 11 (set (reg:QI 0 ax [orig:108 _22 ] [108])
        (mem/j:QI (reg/f:DI 0 ax [176]) [0 _21->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (nil))
(insn 141 140 142 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:108 _22 ] [108])
            (const_int 84 [0x54]))) "function.c":1120 9 {*cmpqi_1}
     (nil))
(jump_insn 142 141 143 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) "function.c":1120 682 {*jcc}
     (nil)
 -> 174)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9
;;              10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 110 111 112 113 114 177 178 179 180 181 182 183 184 185
(code_label 143 142 144 12 186 (nil) [3 uses])
(note 144 143 145 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 12 (set (reg/f:DI 0 ax [orig:109 stdscr.131_23 ] [109])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1122 85 {*movdi_internal}
     (nil))
(insn 146 145 147 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1122 85 {*movdi_internal}
     (nil))
(insn 147 146 148 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":1122 86 {*movsi_internal}
     (nil))
(insn 148 147 149 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:109 stdscr.131_23 ] [109])) "function.c":1122 85 {*movdi_internal}
     (nil))
(call_insn 149 148 150 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":1122 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 150 149 151 12 (set (reg/f:DI 0 ax [177])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1123 85 {*movdi_internal}
     (nil))
(insn 151 150 152 12 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (reg/f:DI 0 ax [177]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1123 85 {*movdi_internal}
     (nil))
(insn 152 151 153 12 (set (reg/f:DI 2 cx [orig:111 _25 ] [111])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (const_int 32 [0x20])) [14 _24->player1+0 S8 A64])) "function.c":1123 85 {*movdi_internal}
     (nil))
(insn 153 152 154 12 (set (reg:SI 0 ax [179])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1123 86 {*movsi_internal}
     (nil))
(insn 154 153 155 12 (set (reg:DI 0 ax [178])
        (sign_extend:DI (reg:SI 0 ax [179]))) "function.c":1123 149 {*extendsidi2_rex64}
     (nil))
(insn 155 154 156 12 (set (reg:SI 1 dx [181])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1123 86 {*movsi_internal}
     (nil))
(insn 156 155 157 12 (set (reg:DI 1 dx [180])
        (sign_extend:DI (reg:SI 1 dx [181]))) "function.c":1123 149 {*extendsidi2_rex64}
     (nil))
(insn 157 156 158 12 (parallel [
            (set (reg:DI 1 dx [182])
                (mult:DI (reg:DI 1 dx [180])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 349 {*muldi3_1}
     (nil))
(insn 158 157 159 12 (parallel [
            (set (reg:DI 1 dx [183])
                (plus:DI (reg:DI 1 dx [182])
                    (reg/f:DI 2 cx [orig:111 _25 ] [111])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 222 {*adddi_1}
     (nil))
(insn 159 158 160 12 (parallel [
            (set (reg:DI 0 ax [184])
                (plus:DI (reg:DI 0 ax [178])
                    (reg:DI 1 dx [183])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 222 {*adddi_1}
     (nil))
(insn 160 159 161 12 (parallel [
            (set (reg/f:DI 0 ax [185])
                (plus:DI (reg:DI 0 ax [184])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 222 {*adddi_1}
     (nil))
(insn 161 160 162 12 (set (reg:QI 0 ax [orig:112 _26 ] [112])
        (mem/j:QI (reg/f:DI 0 ax [185]) [0 _25->area S1 A8])) "function.c":1123 88 {*movqi_internal}
     (nil))
(insn 162 161 163 12 (set (reg:SI 0 ax [orig:113 _27 ] [113])
        (sign_extend:SI (reg:QI 0 ax [orig:112 _26 ] [112]))) "function.c":1123 155 {extendqisi2}
     (nil))
(insn 163 162 164 12 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:113 _27 ] [113])) "function.c":1123 86 {*movsi_internal}
     (nil))
(insn 164 163 165 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":1123 85 {*movdi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1123 88 {*movqi_internal}
     (nil))
(call_insn 166 165 167 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1123 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 167 166 168 12 (set (reg/f:DI 0 ax [orig:114 stdscr.132_28 ] [114])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1124 85 {*movdi_internal}
     (nil))
(insn 168 167 169 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1124 85 {*movdi_internal}
     (nil))
(insn 169 168 170 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":1124 86 {*movsi_internal}
     (nil))
(insn 170 169 171 12 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:114 stdscr.132_28 ] [114])) "function.c":1124 85 {*movdi_internal}
     (nil))
(call_insn 171 170 227 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":1124 700 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 227 171 228 12 (set (pc)
        (label_ref 193)) "function.c":1124 683 {jump}
     (nil)
 -> 193)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 228 227 174)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 116 117 118 186 187 188 189 190 191 192 193 194
(code_label 174 228 175 13 187 (nil) [1 uses])
(note 175 174 176 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 13 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1128 85 {*movdi_internal}
     (nil))
(insn 177 176 178 13 (set (reg/f:DI 0 ax [orig:115 _29 ] [115])
        (mem/f:DI (reg/f:DI 0 ax [186]) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1128 85 {*movdi_internal}
     (nil))
(insn 178 177 179 13 (set (reg/f:DI 2 cx [orig:116 _30 ] [116])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:115 _29 ] [115])
                (const_int 32 [0x20])) [14 _29->player1+0 S8 A64])) "function.c":1128 85 {*movdi_internal}
     (nil))
(insn 179 178 180 13 (set (reg:SI 0 ax [188])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1128 86 {*movsi_internal}
     (nil))
(insn 180 179 181 13 (set (reg:DI 0 ax [187])
        (sign_extend:DI (reg:SI 0 ax [188]))) "function.c":1128 149 {*extendsidi2_rex64}
     (nil))
(insn 181 180 182 13 (set (reg:SI 1 dx [190])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1128 86 {*movsi_internal}
     (nil))
(insn 182 181 183 13 (set (reg:DI 1 dx [189])
        (sign_extend:DI (reg:SI 1 dx [190]))) "function.c":1128 149 {*extendsidi2_rex64}
     (nil))
(insn 183 182 184 13 (parallel [
            (set (reg:DI 1 dx [191])
                (mult:DI (reg:DI 1 dx [189])
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 349 {*muldi3_1}
     (nil))
(insn 184 183 185 13 (parallel [
            (set (reg:DI 1 dx [192])
                (plus:DI (reg:DI 1 dx [191])
                    (reg/f:DI 2 cx [orig:116 _30 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 222 {*adddi_1}
     (nil))
(insn 185 184 186 13 (parallel [
            (set (reg:DI 0 ax [193])
                (plus:DI (reg:DI 0 ax [187])
                    (reg:DI 1 dx [192])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 222 {*adddi_1}
     (nil))
(insn 186 185 187 13 (parallel [
            (set (reg/f:DI 0 ax [194])
                (plus:DI (reg:DI 0 ax [193])
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 222 {*adddi_1}
     (nil))
(insn 187 186 188 13 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem/j:QI (reg/f:DI 0 ax [194]) [0 _30->area S1 A8])) "function.c":1128 88 {*movqi_internal}
     (nil))
(insn 188 187 189 13 (set (reg:SI 0 ax [orig:118 _32 ] [118])
        (sign_extend:SI (reg:QI 0 ax [orig:117 _31 ] [117]))) "function.c":1128 155 {extendqisi2}
     (nil))
(insn 189 188 190 13 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:118 _32 ] [118])) "function.c":1128 86 {*movsi_internal}
     (nil))
(insn 190 189 191 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":1128 85 {*movdi_internal}
     (nil))
(insn 191 190 192 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1128 88 {*movqi_internal}
     (nil))
(call_insn 192 191 193 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1128 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              5 [always] 
;;              7 [always] 
;;              12 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 193 192 194 14 184 (nil) [3 uses])
(note 194 193 195 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1107 221 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 196 195 197 15 182 (nil) [1 uses])
(note 197 196 199 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 199 197 200 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":1107 11 {*cmpsi_1}
     (nil))
(jump_insn 200 199 201 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) "function.c":1107 682 {*jcc}
     (nil)
 -> 198)
;;  succ:       4
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 201 200 202 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1105 221 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 203 202 204 17 181 (nil) [1 uses])
(note 204 203 206 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 206 204 207 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":1105 11 {*cmpsi_1}
     (nil))
(jump_insn 207 206 208 17 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) "function.c":1105 682 {*jcc}
     (nil)
 -> 205)
;;  succ:       3
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 1, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 119 120
(note 208 207 209 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 216 18 (set (reg:SI 0 ax [orig:119 _55 ] [119])
        (const_int 0 [0])) "function.c":1132 86 {*movsi_internal}
     (nil))
(insn 216 209 217 18 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:120 <retval> ] [120])) "function.c":1133 86 {*movsi_internal}
     (nil))
(insn 217 216 229 18 (use (reg/i:SI 0 ax)) "function.c":1133 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 229 217 0 NOTE_INSN_DELETED)

;; Function bestia_move (bestia_move, funcdef_no=23, decl_uid=6253, cgraph_uid=23, symbol_order=26)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 5:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 35:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 48:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 61:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 71:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 74:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6 7 8
EBB 9
EBB 10
EBB 11 13
EBB 12

********** Pseudo live ranges #1: **********

  BB 12
   Insn 87: point = 0, n_alt = -1
   Insn 86: point = 0, n_alt = -2
   Insn 82: point = 1, n_alt = -2
   Insn 79: point = 3, n_alt = 2
  BB 10
   Insn 96: point = 4, n_alt = -1
   Insn 63: point = 4, n_alt = 1
   Insn 62: point = 5, n_alt = 3
   Insn 61: point = 6, n_alt = 3
   Insn 60: point = 8, n_alt = 0
   Insn 59: point = 10, n_alt = 3
   Insn 58: point = 11, n_alt = 1
   Insn 57: point = 12, n_alt = 3
   Insn 56: point = 13, n_alt = 0
   Insn 55: point = 15, n_alt = 3
  BB 13
   Insn 99: point = 16, n_alt = -1
  BB 11
   Insn 76: point = 16, n_alt = 1
   Insn 75: point = 17, n_alt = 3
   Insn 74: point = 18, n_alt = 3
   Insn 73: point = 20, n_alt = 0
   Insn 72: point = 22, n_alt = 3
   Insn 71: point = 23, n_alt = 1
   Insn 70: point = 24, n_alt = 3
   Insn 69: point = 25, n_alt = 0
   Insn 68: point = 27, n_alt = 3
  BB 9
   Insn 94: point = 28, n_alt = -1
   Insn 50: point = 28, n_alt = 1
   Insn 49: point = 29, n_alt = 3
   Insn 48: point = 30, n_alt = 3
   Insn 47: point = 32, n_alt = 0
   Insn 46: point = 34, n_alt = 3
   Insn 45: point = 35, n_alt = 1
   Insn 44: point = 36, n_alt = 3
   Insn 43: point = 37, n_alt = 0
   Insn 42: point = 39, n_alt = 3
  BB 8
   Insn 92: point = 40, n_alt = -1
   Insn 37: point = 40, n_alt = 1
   Insn 36: point = 41, n_alt = 3
   Insn 35: point = 42, n_alt = 3
   Insn 34: point = 44, n_alt = 0
   Insn 33: point = 46, n_alt = 3
   Insn 32: point = 47, n_alt = 1
   Insn 31: point = 48, n_alt = 3
   Insn 30: point = 49, n_alt = 0
   Insn 29: point = 51, n_alt = 3
  BB 5
   Insn 90: point = 52, n_alt = -1
  BB 4
   Insn 17: point = 52, n_alt = -1
   Insn 16: point = 52, n_alt = 0
  BB 7
   Insn 27: point = 54, n_alt = -1
   Insn 26: point = 54, n_alt = 0
  BB 6
   Insn 24: point = 56, n_alt = -1
   Insn 23: point = 56, n_alt = 0
  BB 3
   Insn 14: point = 57, n_alt = -1
   Insn 13: point = 57, n_alt = 0
  BB 2
   Insn 11: point = 58, n_alt = -1
   Insn 10: point = 58, n_alt = 0
   Insn 9: point = 58, n_alt = 0
   Insn 5: point = 59, n_alt = 8
   Insn 4: point = 60, n_alt = 0
   Insn 3: point = 62, n_alt = -2
   Insn 2: point = 63, n_alt = 5
 r87: [52..58]
 r88: [47..49]
 r89: [43..44]
 r90: [40..42]
 r91: [35..37]
 r92: [31..32]
 r93: [28..30]
 r94: [11..13]
 r95: [7..8]
 r96: [4..6]
 r97: [23..25]
 r98: [19..20]
 r99: [16..18]
 r100: [2..3]
 r101: [0..1]
 r102: [61..62]
 r103: [59..60]
 r104: [50..51]
 r105: [47..48]
 r106: [45..46]
 r107: [40..41]
 r108: [38..39]
 r109: [35..36]
 r110: [33..34]
 r111: [28..29]
 r112: [14..15]
 r113: [11..12]
 r114: [9..10]
 r115: [4..5]
 r116: [26..27]
 r117: [23..24]
 r118: [21..22]
 r119: [16..17]
Compressing live ranges: from 63 to 50 - 79%
Ranges after the compression:
 r87: [44..45]
 r88: [40..41]
 r89: [36..37]
 r90: [34..35]
 r91: [30..31]
 r92: [26..27]
 r93: [24..25]
 r94: [10..11]
 r95: [6..7]
 r96: [4..5]
 r97: [20..21]
 r98: [16..17]
 r99: [14..15]
 r100: [2..3]
 r101: [0..1]
 r102: [48..49]
 r103: [46..47]
 r104: [42..43]
 r105: [40..41]
 r106: [38..39]
 r107: [34..35]
 r108: [32..33]
 r109: [30..31]
 r110: [28..29]
 r111: [24..25]
 r112: [12..13]
 r113: [10..11]
 r114: [8..9]
 r115: [4..5]
 r116: [22..23]
 r117: [20..21]
 r118: [18..19]
 r119: [14..15]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 26
changing reg in insn 23
changing reg in insn 16
changing reg in insn 13
changing reg in insn 10
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 37
changing reg in insn 43
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 56
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 69
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 79
changing reg in insn 82
changing reg in insn 82
changing reg in insn 86
changing reg in insn 3
changing reg in insn 4
changing reg in insn 5
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
deleting insn with uid = 82.
starting the processing of deferred insns
ending the processing of deferred insns


bestia_move

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={26d,30u} r1={9d,8u} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,32u} r7={1d,13u} r17={9d,5u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 151{60d,91u,0e} in 59{59 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 102 103
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1138 85 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg:SI 0 ax [102])
        (reg:SI 4 si [ direction ])) "function.c":1138 86 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (reg:QI 0 ax [103])
        (reg:QI 0 ax [102])) "function.c":1138 88 {*movqi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 direction+0 S1 A32])
        (reg:QI 0 ax [103])) "function.c":1138 88 {*movqi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:SI 0 ax [orig:87 _1 ] [87])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 direction+0 S1 A32]))) "function.c":1139 155 {extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 100 [0x64]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1139 682 {*jcc}
     (nil)
 -> 66)
;;  succ:       3 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 100 [0x64]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "function.c":1139 682 {*jcc}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 97 [0x61]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 17 16 89 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "function.c":1139 682 {*jcc}
     (nil)
 -> 40)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 89 17 90 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 90 89 91 5 (set (pc)
        (label_ref 77)) "function.c":1139 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 91 90 21)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(code_label 21 91 22 6 193 (nil) [1 uses])
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 115 [0x73]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 24 23 25 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "function.c":1139 682 {*jcc}
     (nil)
 -> 53)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 _1 ] [87])
            (const_int 119 [0x77]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "function.c":1139 682 {*jcc}
     (nil)
 -> 77)
;;  succ:       12
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 104 105 106 107
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (set (reg/f:DI 0 ax [104])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1142 85 {*movdi_internal}
     (nil))
(insn 30 29 31 8 (set (reg:SI 1 dx [orig:88 _2 ] [88])
        (mem:SI (plus:DI (reg/f:DI 0 ax [104])
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1142 86 {*movsi_internal}
     (nil))
(insn 31 30 32 8 (set (reg/f:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1142 85 {*movdi_internal}
     (nil))
(insn 32 31 33 8 (set (mem:SI (plus:DI (reg/f:DI 0 ax [105])
                (const_int 36076 [0x8cec])) [3 serwer_17(D)->bestia.y_ostatnie+0 S4 A32])
        (reg:SI 1 dx [orig:88 _2 ] [88])) "function.c":1142 86 {*movsi_internal}
     (nil))
(insn 33 32 34 8 (set (reg/f:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1143 85 {*movdi_internal}
     (nil))
(insn 34 33 35 8 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [106])
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1143 86 {*movsi_internal}
     (nil))
(insn 35 34 36 8 (parallel [
            (set (reg:SI 1 dx [orig:90 _4 ] [90])
                (plus:SI (reg:SI 0 ax [orig:89 _3 ] [89])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1143 221 {*addsi_1}
     (nil))
(insn 36 35 37 8 (set (reg/f:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1143 85 {*movdi_internal}
     (nil))
(insn 37 36 92 8 (set (mem:SI (plus:DI (reg/f:DI 0 ax [107])
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])
        (reg:SI 1 dx [orig:90 _4 ] [90])) "function.c":1143 86 {*movsi_internal}
     (nil))
(jump_insn 92 37 93 8 (set (pc)
        (label_ref 77)) "function.c":1144 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 93 92 40)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 108 109 110 111
(code_label 40 93 41 9 194 (nil) [1 uses])
(note 41 40 42 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 9 (set (reg/f:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1146 85 {*movdi_internal}
     (nil))
(insn 43 42 44 9 (set (reg:SI 1 dx [orig:91 _5 ] [91])
        (mem:SI (plus:DI (reg/f:DI 0 ax [108])
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1146 86 {*movsi_internal}
     (nil))
(insn 44 43 45 9 (set (reg/f:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1146 85 {*movdi_internal}
     (nil))
(insn 45 44 46 9 (set (mem:SI (plus:DI (reg/f:DI 0 ax [109])
                (const_int 36072 [0x8ce8])) [3 serwer_17(D)->bestia.x_ostatnie+0 S4 A64])
        (reg:SI 1 dx [orig:91 _5 ] [91])) "function.c":1146 86 {*movsi_internal}
     (nil))
(insn 46 45 47 9 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1147 85 {*movdi_internal}
     (nil))
(insn 47 46 48 9 (set (reg:SI 0 ax [orig:92 _6 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [110])
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1147 86 {*movsi_internal}
     (nil))
(insn 48 47 49 9 (parallel [
            (set (reg:SI 1 dx [orig:93 _7 ] [93])
                (plus:SI (reg:SI 0 ax [orig:92 _6 ] [92])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1147 221 {*addsi_1}
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1147 85 {*movdi_internal}
     (nil))
(insn 50 49 94 9 (set (mem:SI (plus:DI (reg/f:DI 0 ax [111])
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])
        (reg:SI 1 dx [orig:93 _7 ] [93])) "function.c":1147 86 {*movsi_internal}
     (nil))
(jump_insn 94 50 95 9 (set (pc)
        (label_ref 77)) "function.c":1148 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 95 94 53)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 112 113 114 115
(code_label 53 95 54 10 196 (nil) [1 uses])
(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 10 (set (reg/f:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1150 85 {*movdi_internal}
     (nil))
(insn 56 55 57 10 (set (reg:SI 1 dx [orig:94 _8 ] [94])
        (mem:SI (plus:DI (reg/f:DI 0 ax [112])
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1150 86 {*movsi_internal}
     (nil))
(insn 57 56 58 10 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1150 85 {*movdi_internal}
     (nil))
(insn 58 57 59 10 (set (mem:SI (plus:DI (reg/f:DI 0 ax [113])
                (const_int 36076 [0x8cec])) [3 serwer_17(D)->bestia.y_ostatnie+0 S4 A32])
        (reg:SI 1 dx [orig:94 _8 ] [94])) "function.c":1150 86 {*movsi_internal}
     (nil))
(insn 59 58 60 10 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1151 85 {*movdi_internal}
     (nil))
(insn 60 59 61 10 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1151 86 {*movsi_internal}
     (nil))
(insn 61 60 62 10 (parallel [
            (set (reg:SI 1 dx [orig:96 _10 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 _9 ] [95])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1151 221 {*addsi_1}
     (nil))
(insn 62 61 63 10 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1151 85 {*movdi_internal}
     (nil))
(insn 63 62 96 10 (set (mem:SI (plus:DI (reg/f:DI 0 ax [115])
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])
        (reg:SI 1 dx [orig:96 _10 ] [96])) "function.c":1151 86 {*movsi_internal}
     (nil))
(jump_insn 96 63 97 10 (set (pc)
        (label_ref 77)) "function.c":1152 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 97 96 66)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 13, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 116 117 118 119
(code_label 66 97 67 11 192 (nil) [1 uses])
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 11 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1154 85 {*movdi_internal}
     (nil))
(insn 69 68 70 11 (set (reg:SI 1 dx [orig:97 _11 ] [97])
        (mem:SI (plus:DI (reg/f:DI 0 ax [116])
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1154 86 {*movsi_internal}
     (nil))
(insn 70 69 71 11 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1154 85 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (mem:SI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 36072 [0x8ce8])) [3 serwer_17(D)->bestia.x_ostatnie+0 S4 A64])
        (reg:SI 1 dx [orig:97 _11 ] [97])) "function.c":1154 86 {*movsi_internal}
     (nil))
(insn 72 71 73 11 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1155 85 {*movdi_internal}
     (nil))
(insn 73 72 74 11 (set (reg:SI 0 ax [orig:98 _12 ] [98])
        (mem:SI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1155 86 {*movsi_internal}
     (nil))
(insn 74 73 75 11 (parallel [
            (set (reg:SI 1 dx [orig:99 _13 ] [99])
                (plus:SI (reg:SI 0 ax [orig:98 _12 ] [98])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1155 221 {*addsi_1}
     (nil))
(insn 75 74 76 11 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1155 85 {*movdi_internal}
     (nil))
(insn 76 75 98 11 (set (mem:SI (plus:DI (reg/f:DI 0 ax [119])
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])
        (reg:SI 1 dx [orig:99 _13 ] [99])) "function.c":1155 86 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 12, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 98 76 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 77 13 (const_int 0 [0]) "function.c":1156 718 {nop}
     (nil))
;;  succ:       12 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7
;;              5 [always] 
;;              8 [always] 
;;              9 [always] 
;;              13 [always]  (FALLTHRU)
;;              10 [always] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 100 101
(code_label 77 99 78 12 195 (nil) [5 uses])
(note 78 77 79 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 86 12 (set (reg/f:DI 0 ax [orig:100 _26 ] [100])
        (const_int 0 [0])) "function.c":1159 85 {*movdi_internal}
     (nil))
(insn 86 79 87 12 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:101 <retval> ] [101])) "function.c":1160 85 {*movdi_internal}
     (nil))
(insn 87 86 100 12 (use (reg/i:DI 0 ax)) "function.c":1160 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 100 87 0 NOTE_INSN_DELETED)

;; Function collect_skarb (collect_skarb, funcdef_no=24, decl_uid=6255, cgraph_uid=24, symbol_order=27)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 27
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 62:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 63:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 68:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 72:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 84:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 88:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 90
	 Choosing alt 0 in insn 90:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 113:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 115:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 120:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 125:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 126
	 Choosing alt 0 in insn 126:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 127:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 128:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 133:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 155
	 Choosing alt 0 in insn 155:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 160:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 162:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 163:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 168:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 172:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 175:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 176:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 179:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 180:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 181:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 184:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 186:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 190:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 191
	 Choosing alt 0 in insn 191:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 192:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 193:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 198:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 201:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 202:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 207:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 211:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 213:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 214:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 216:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 221:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 222:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 223:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 224:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 228:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 231:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 235:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 236:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 237:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 239:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 240:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 241:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 244
	 Choosing alt 0 in insn 244:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 245:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 246:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 247:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 248:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 249:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 250:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 251:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 252:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 254:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 255:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 256:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 257:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 259:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 260
	 Choosing alt 0 in insn 260:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 261:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 262:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 267:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 270:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 271:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 273:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 276:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 277:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 278:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 279:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 280:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 281:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 282:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 283:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 284:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 288:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 289:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 290:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 291:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 293:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 294:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 295:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 296:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 297
	 Choosing alt 0 in insn 297:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 298:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 299:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 303:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 304:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 305:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 310:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 311:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 312:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 313:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 317:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 318:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 320:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 321:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 322:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 323:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 325:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 326:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 328:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 331
	 Choosing alt 0 in insn 331:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 332:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 333:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 338:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 347:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 351:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 352:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 354:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 355:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 356:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 358:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 360
	 Choosing alt 0 in insn 360:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 361:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 365:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 366:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 367:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 368:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 370:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 374:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 375:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 381:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 383:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 384:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 385:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 386:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 387:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 388:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 390:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 393:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 395:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 396
	 Choosing alt 0 in insn 396:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 397:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 398:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 403:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 409:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 412:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 416:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 417:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 419:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 421:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 422:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 425
	 Choosing alt 0 in insn 425:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 426:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 430:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 432:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 433:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 434:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 435:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 438:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 440:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 442:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 445:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 446:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 447:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 448:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 449:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 450:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 451:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 452:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 453:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 454:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 455:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 456:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 458:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 459:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 460:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 461
	 Choosing alt 0 in insn 461:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 462:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 463:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 468:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 471:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 474:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 477:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 481:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 482:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 483:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 484:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 489:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 491:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 492:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 493:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 497:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 501:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 504:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 505:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 506:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 507:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 508:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 509:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 510:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 511:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 512:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 513:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 514
	 Choosing alt 0 in insn 514:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 515:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 516:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 517:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 518:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 519:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 520:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 521:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 522:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 523:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 524:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 525:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 526:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 527:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 528:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 529:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 530
	 Choosing alt 0 in insn 530:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 531:  (0) m  (1) qn {*movqi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 532:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 537:  (0) rm  (1) 0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 540:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 543:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 546:  (0) r  (1) Z {*movdi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6
EBB 7
EBB 8 9
EBB 10 11 12 13
EBB 14
EBB 15 16
EBB 17 18 19 20
EBB 21
EBB 22 23
EBB 24 25 26 27
EBB 28
EBB 29 30
EBB 31 32 33 34
EBB 35
EBB 36 37
EBB 38 39 40 41
EBB 42
EBB 43 44
EBB 45 46 47 48
EBB 49
EBB 50 51
EBB 52 53 54 55
EBB 56
EBB 57 58
EBB 59

********** Pseudo live ranges #1: **********

  BB 59
   Insn 554: point = 0, n_alt = -1
   Insn 553: point = 0, n_alt = -2
   Insn 549: point = 1, n_alt = -2
  BB 55
   Insn 586: point = 4, n_alt = -1
   Insn 532: point = 4, n_alt = 2
   Insn 531: point = 5, n_alt = 8
   Insn 530: point = 6, n_alt = 0
   Insn 529: point = 8, n_alt = 0
   Insn 528: point = 10, n_alt = 0
   Insn 527: point = 11, n_alt = 3
   Insn 526: point = 13, n_alt = 0
   Insn 525: point = 15, n_alt = 0
   Insn 524: point = 17, n_alt = 1
   Insn 523: point = 19, n_alt = 0
   Insn 522: point = 20, n_alt = 3
   Insn 521: point = 22, n_alt = 3
   Insn 520: point = 23, n_alt = 1
   Insn 519: point = 24, n_alt = 0
   Insn 518: point = 26, n_alt = 1
   Insn 517: point = 28, n_alt = 0
   Insn 516: point = 29, n_alt = 3
   Insn 515: point = 30, n_alt = 1
   Insn 514: point = 31, n_alt = 0
   Insn 513: point = 33, n_alt = 3
   Insn 512: point = 35, n_alt = 3
   Insn 511: point = 36, n_alt = 0
   Insn 510: point = 38, n_alt = 0
   Insn 509: point = 40, n_alt = 1
   Insn 508: point = 42, n_alt = 0
   Insn 507: point = 43, n_alt = 3
   Insn 506: point = 44, n_alt = 0
   Insn 505: point = 46, n_alt = 3
   Insn 504: point = 48, n_alt = 3
  BB 48
   Insn 582: point = 49, n_alt = -1
   Insn 463: point = 49, n_alt = 2
   Insn 462: point = 50, n_alt = 8
   Insn 461: point = 51, n_alt = 0
   Insn 460: point = 53, n_alt = 0
   Insn 459: point = 55, n_alt = 0
   Insn 458: point = 56, n_alt = 3
   Insn 457: point = 58, n_alt = 0
   Insn 456: point = 60, n_alt = 0
   Insn 455: point = 62, n_alt = 1
   Insn 454: point = 64, n_alt = 0
   Insn 453: point = 65, n_alt = 3
   Insn 452: point = 67, n_alt = 3
   Insn 451: point = 68, n_alt = 1
   Insn 450: point = 69, n_alt = 0
   Insn 449: point = 71, n_alt = 3
   Insn 448: point = 73, n_alt = 3
   Insn 447: point = 74, n_alt = 0
   Insn 446: point = 76, n_alt = 3
   Insn 445: point = 78, n_alt = 3
  BB 41
   Insn 578: point = 79, n_alt = -1
   Insn 398: point = 79, n_alt = 2
   Insn 397: point = 80, n_alt = 8
   Insn 396: point = 81, n_alt = 0
   Insn 395: point = 83, n_alt = 0
   Insn 394: point = 85, n_alt = 0
   Insn 393: point = 86, n_alt = 3
   Insn 392: point = 88, n_alt = 0
   Insn 391: point = 90, n_alt = 0
   Insn 390: point = 92, n_alt = 1
   Insn 389: point = 94, n_alt = 0
   Insn 388: point = 95, n_alt = 3
   Insn 387: point = 97, n_alt = 3
   Insn 386: point = 98, n_alt = 1
   Insn 385: point = 99, n_alt = 0
   Insn 384: point = 101, n_alt = 3
   Insn 383: point = 103, n_alt = 3
   Insn 382: point = 104, n_alt = 0
   Insn 381: point = 106, n_alt = 3
   Insn 380: point = 108, n_alt = 3
  BB 34
   Insn 574: point = 109, n_alt = -1
   Insn 333: point = 109, n_alt = 2
   Insn 332: point = 110, n_alt = 8
   Insn 331: point = 111, n_alt = 0
   Insn 330: point = 113, n_alt = 0
   Insn 329: point = 115, n_alt = 0
   Insn 328: point = 116, n_alt = 3
   Insn 327: point = 118, n_alt = 0
   Insn 326: point = 120, n_alt = 0
   Insn 325: point = 122, n_alt = 1
   Insn 324: point = 124, n_alt = 0
   Insn 323: point = 125, n_alt = 3
   Insn 322: point = 127, n_alt = 3
   Insn 321: point = 128, n_alt = 1
   Insn 320: point = 129, n_alt = 0
   Insn 319: point = 131, n_alt = 0
   Insn 318: point = 132, n_alt = 3
   Insn 317: point = 134, n_alt = 3
  BB 27
   Insn 570: point = 135, n_alt = -1
   Insn 262: point = 135, n_alt = 2
   Insn 261: point = 136, n_alt = 8
   Insn 260: point = 137, n_alt = 0
   Insn 259: point = 139, n_alt = 0
   Insn 258: point = 141, n_alt = 0
   Insn 257: point = 142, n_alt = 3
   Insn 256: point = 144, n_alt = 0
   Insn 255: point = 146, n_alt = 0
   Insn 254: point = 148, n_alt = 1
   Insn 253: point = 150, n_alt = 0
   Insn 252: point = 151, n_alt = 3
   Insn 251: point = 153, n_alt = 3
   Insn 250: point = 154, n_alt = 1
   Insn 249: point = 155, n_alt = 0
   Insn 248: point = 157, n_alt = 1
   Insn 247: point = 159, n_alt = 0
   Insn 246: point = 160, n_alt = 3
   Insn 245: point = 161, n_alt = 1
   Insn 244: point = 162, n_alt = 0
   Insn 243: point = 164, n_alt = 3
   Insn 242: point = 166, n_alt = 3
   Insn 241: point = 167, n_alt = 0
   Insn 240: point = 169, n_alt = 0
   Insn 239: point = 171, n_alt = 1
   Insn 238: point = 173, n_alt = 0
   Insn 237: point = 174, n_alt = 3
   Insn 236: point = 175, n_alt = 0
   Insn 235: point = 177, n_alt = 3
   Insn 234: point = 179, n_alt = 3
  BB 20
   Insn 566: point = 180, n_alt = -1
   Insn 193: point = 180, n_alt = 2
   Insn 192: point = 181, n_alt = 8
   Insn 191: point = 182, n_alt = 0
   Insn 190: point = 184, n_alt = 0
   Insn 189: point = 186, n_alt = 0
   Insn 188: point = 187, n_alt = 3
   Insn 187: point = 189, n_alt = 0
   Insn 186: point = 191, n_alt = 0
   Insn 185: point = 193, n_alt = 1
   Insn 184: point = 195, n_alt = 0
   Insn 183: point = 196, n_alt = 3
   Insn 182: point = 198, n_alt = 3
   Insn 181: point = 199, n_alt = 1
   Insn 180: point = 200, n_alt = 0
   Insn 179: point = 202, n_alt = 3
   Insn 178: point = 204, n_alt = 3
   Insn 177: point = 205, n_alt = 0
   Insn 176: point = 207, n_alt = 3
   Insn 175: point = 209, n_alt = 3
  BB 13
   Insn 562: point = 210, n_alt = -1
   Insn 128: point = 210, n_alt = 2
   Insn 127: point = 211, n_alt = 8
   Insn 126: point = 212, n_alt = 0
   Insn 125: point = 214, n_alt = 0
   Insn 124: point = 216, n_alt = 0
   Insn 123: point = 217, n_alt = 3
   Insn 122: point = 219, n_alt = 0
   Insn 121: point = 221, n_alt = 0
   Insn 120: point = 223, n_alt = 1
   Insn 119: point = 225, n_alt = 0
   Insn 118: point = 226, n_alt = 3
   Insn 117: point = 228, n_alt = 3
   Insn 116: point = 229, n_alt = 1
   Insn 115: point = 230, n_alt = 0
   Insn 114: point = 232, n_alt = 3
   Insn 113: point = 234, n_alt = 3
   Insn 112: point = 235, n_alt = 0
   Insn 111: point = 237, n_alt = 3
   Insn 110: point = 239, n_alt = 3
  BB 6
   Insn 558: point = 240, n_alt = -1
   Insn 63: point = 240, n_alt = 2
   Insn 62: point = 241, n_alt = 8
   Insn 61: point = 242, n_alt = 0
   Insn 60: point = 244, n_alt = 0
   Insn 59: point = 246, n_alt = 0
   Insn 58: point = 247, n_alt = 3
   Insn 57: point = 249, n_alt = 0
   Insn 56: point = 251, n_alt = 0
   Insn 55: point = 253, n_alt = 1
   Insn 54: point = 255, n_alt = 0
   Insn 53: point = 256, n_alt = 3
   Insn 52: point = 258, n_alt = 3
   Insn 51: point = 259, n_alt = 1
   Insn 50: point = 260, n_alt = 0
   Insn 49: point = 262, n_alt = 0
   Insn 48: point = 263, n_alt = 3
   Insn 47: point = 265, n_alt = 3
  BB 58
   Insn 546: point = 266, n_alt = 2
  BB 57
   Insn 544: point = 267, n_alt = -1
   Insn 543: point = 267, n_alt = 0
   Insn 541: point = 268, n_alt = 0
   Insn 540: point = 270, n_alt = 3
  BB 51
   Insn 584: point = 271, n_alt = -1
   Insn 477: point = 271, n_alt = 1
  BB 50
   Insn 475: point = 271, n_alt = -1
   Insn 474: point = 271, n_alt = 0
   Insn 472: point = 272, n_alt = 0
   Insn 471: point = 274, n_alt = 3
  BB 44
   Insn 580: point = 275, n_alt = -1
   Insn 412: point = 275, n_alt = 1
  BB 43
   Insn 410: point = 275, n_alt = -1
   Insn 409: point = 275, n_alt = 0
   Insn 407: point = 276, n_alt = 0
   Insn 406: point = 278, n_alt = 3
  BB 37
   Insn 576: point = 279, n_alt = -1
   Insn 347: point = 279, n_alt = 1
  BB 36
   Insn 345: point = 279, n_alt = -1
   Insn 344: point = 279, n_alt = 0
   Insn 342: point = 280, n_alt = 0
   Insn 341: point = 282, n_alt = 3
  BB 30
   Insn 572: point = 283, n_alt = -1
   Insn 284: point = 283, n_alt = 1
   Insn 283: point = 283, n_alt = 1
   Insn 282: point = 284, n_alt = 0
   Insn 281: point = 286, n_alt = 3
   Insn 280: point = 288, n_alt = 3
   Insn 279: point = 289, n_alt = 1
   Insn 278: point = 290, n_alt = 0
   Insn 277: point = 292, n_alt = 3
   Insn 276: point = 294, n_alt = 3
  BB 29
   Insn 274: point = 295, n_alt = -1
   Insn 273: point = 295, n_alt = 0
   Insn 271: point = 296, n_alt = 0
   Insn 270: point = 298, n_alt = 3
  BB 23
   Insn 568: point = 299, n_alt = -1
   Insn 207: point = 299, n_alt = 1
  BB 22
   Insn 205: point = 299, n_alt = -1
   Insn 204: point = 299, n_alt = 0
   Insn 202: point = 300, n_alt = 0
   Insn 201: point = 302, n_alt = 3
  BB 16
   Insn 564: point = 303, n_alt = -1
   Insn 142: point = 303, n_alt = 1
  BB 15
   Insn 140: point = 303, n_alt = -1
   Insn 139: point = 303, n_alt = 0
   Insn 137: point = 304, n_alt = 0
   Insn 136: point = 306, n_alt = 3
  BB 9
   Insn 560: point = 307, n_alt = -1
   Insn 77: point = 307, n_alt = 1
  BB 8
   Insn 75: point = 307, n_alt = -1
   Insn 74: point = 307, n_alt = 0
   Insn 72: point = 308, n_alt = 0
   Insn 71: point = 310, n_alt = 3
  BB 2
   Insn 556: point = 311, n_alt = -1
   Insn 14: point = 311, n_alt = 1
   Insn 13: point = 311, n_alt = 1
   Insn 12: point = 312, n_alt = 0
   Insn 11: point = 314, n_alt = 3
   Insn 10: point = 316, n_alt = 3
   Insn 9: point = 317, n_alt = 1
   Insn 8: point = 318, n_alt = 0
   Insn 7: point = 320, n_alt = 3
   Insn 6: point = 322, n_alt = 3
   Insn 2: point = 323, n_alt = 5
  BB 7
   Insn 68: point = 323, n_alt = 1
  BB 5
   Insn 45: point = 323, n_alt = -1
   Insn 44: point = 323, n_alt = 0
   Insn 43: point = 324, n_alt = 0
   Insn 42: point = 326, n_alt = 1
   Insn 41: point = 328, n_alt = 0
   Insn 40: point = 329, n_alt = 3
  BB 4
   Insn 38: point = 330, n_alt = -1
   Insn 37: point = 330, n_alt = 0
   Insn 36: point = 331, n_alt = 0
   Insn 35: point = 333, n_alt = 0
   Insn 34: point = 335, n_alt = 1
   Insn 33: point = 337, n_alt = 0
   Insn 32: point = 338, n_alt = 3
  BB 3
   Insn 30: point = 339, n_alt = -1
   Insn 29: point = 339, n_alt = 0
   Insn 28: point = 340, n_alt = 4
   Insn 27: point = 342, n_alt = 0
   Insn 26: point = 344, n_alt = 0
   Insn 25: point = 346, n_alt = 0
   Insn 24: point = 347, n_alt = 3
   Insn 23: point = 349, n_alt = 0
   Insn 22: point = 351, n_alt = 0
   Insn 21: point = 353, n_alt = 1
   Insn 20: point = 355, n_alt = 0
   Insn 19: point = 356, n_alt = 3
   Insn 18: point = 358, n_alt = 3
  BB 14
   Insn 133: point = 359, n_alt = 1
  BB 12
   Insn 108: point = 359, n_alt = -1
   Insn 107: point = 359, n_alt = 0
   Insn 106: point = 360, n_alt = 0
   Insn 105: point = 362, n_alt = 1
   Insn 104: point = 364, n_alt = 0
   Insn 103: point = 365, n_alt = 3
  BB 11
   Insn 101: point = 366, n_alt = -1
   Insn 100: point = 366, n_alt = 0
   Insn 99: point = 367, n_alt = 0
   Insn 98: point = 369, n_alt = 0
   Insn 97: point = 371, n_alt = 1
   Insn 96: point = 373, n_alt = 0
   Insn 95: point = 374, n_alt = 3
  BB 10
   Insn 93: point = 375, n_alt = -1
   Insn 92: point = 375, n_alt = 0
   Insn 91: point = 376, n_alt = 4
   Insn 90: point = 378, n_alt = 0
   Insn 89: point = 380, n_alt = 0
   Insn 88: point = 382, n_alt = 0
   Insn 87: point = 383, n_alt = 3
   Insn 86: point = 385, n_alt = 0
   Insn 85: point = 387, n_alt = 0
   Insn 84: point = 389, n_alt = 1
   Insn 83: point = 391, n_alt = 0
   Insn 82: point = 392, n_alt = 3
   Insn 81: point = 394, n_alt = 3
  BB 21
   Insn 198: point = 395, n_alt = 1
  BB 19
   Insn 173: point = 395, n_alt = -1
   Insn 172: point = 395, n_alt = 0
   Insn 171: point = 396, n_alt = 0
   Insn 170: point = 398, n_alt = 1
   Insn 169: point = 400, n_alt = 0
   Insn 168: point = 401, n_alt = 3
  BB 18
   Insn 166: point = 402, n_alt = -1
   Insn 165: point = 402, n_alt = 0
   Insn 164: point = 403, n_alt = 0
   Insn 163: point = 405, n_alt = 0
   Insn 162: point = 407, n_alt = 1
   Insn 161: point = 409, n_alt = 0
   Insn 160: point = 410, n_alt = 3
  BB 17
   Insn 158: point = 411, n_alt = -1
   Insn 157: point = 411, n_alt = 0
   Insn 156: point = 412, n_alt = 4
   Insn 155: point = 414, n_alt = 0
   Insn 154: point = 416, n_alt = 0
   Insn 153: point = 418, n_alt = 0
   Insn 152: point = 419, n_alt = 3
   Insn 151: point = 421, n_alt = 0
   Insn 150: point = 423, n_alt = 0
   Insn 149: point = 425, n_alt = 1
   Insn 148: point = 427, n_alt = 0
   Insn 147: point = 428, n_alt = 3
   Insn 146: point = 430, n_alt = 3
  BB 28
   Insn 267: point = 431, n_alt = 1
  BB 26
   Insn 232: point = 431, n_alt = -1
   Insn 231: point = 431, n_alt = 0
   Insn 230: point = 432, n_alt = 0
   Insn 229: point = 434, n_alt = 1
   Insn 228: point = 436, n_alt = 0
   Insn 227: point = 437, n_alt = 3
  BB 25
   Insn 225: point = 438, n_alt = -1
   Insn 224: point = 438, n_alt = 0
   Insn 223: point = 439, n_alt = 0
   Insn 222: point = 441, n_alt = 0
   Insn 221: point = 443, n_alt = 1
   Insn 220: point = 445, n_alt = 0
   Insn 219: point = 446, n_alt = 3
  BB 24
   Insn 217: point = 447, n_alt = -1
   Insn 216: point = 447, n_alt = 0
   Insn 215: point = 448, n_alt = 0
   Insn 214: point = 450, n_alt = 0
   Insn 213: point = 452, n_alt = 1
   Insn 212: point = 454, n_alt = 0
   Insn 211: point = 455, n_alt = 3
  BB 35
   Insn 338: point = 456, n_alt = 1
  BB 33
   Insn 315: point = 456, n_alt = -1
   Insn 314: point = 456, n_alt = 0
   Insn 313: point = 457, n_alt = 0
   Insn 312: point = 459, n_alt = 1
   Insn 311: point = 461, n_alt = 0
   Insn 310: point = 462, n_alt = 3
  BB 32
   Insn 308: point = 463, n_alt = -1
   Insn 307: point = 463, n_alt = 0
   Insn 306: point = 464, n_alt = 0
   Insn 305: point = 466, n_alt = 0
   Insn 304: point = 468, n_alt = 1
   Insn 303: point = 470, n_alt = 0
   Insn 302: point = 471, n_alt = 3
  BB 31
   Insn 300: point = 472, n_alt = -1
   Insn 299: point = 472, n_alt = 0
   Insn 298: point = 473, n_alt = 4
   Insn 297: point = 475, n_alt = 0
   Insn 296: point = 477, n_alt = 0
   Insn 295: point = 479, n_alt = 0
   Insn 294: point = 480, n_alt = 3
   Insn 293: point = 482, n_alt = 0
   Insn 292: point = 484, n_alt = 0
   Insn 291: point = 486, n_alt = 1
   Insn 290: point = 488, n_alt = 0
   Insn 289: point = 489, n_alt = 3
   Insn 288: point = 491, n_alt = 3
  BB 42
   Insn 403: point = 492, n_alt = 1
  BB 40
   Insn 378: point = 492, n_alt = -1
   Insn 377: point = 492, n_alt = 0
   Insn 376: point = 493, n_alt = 0
   Insn 375: point = 495, n_alt = 1
   Insn 374: point = 497, n_alt = 0
   Insn 373: point = 498, n_alt = 3
  BB 39
   Insn 371: point = 499, n_alt = -1
   Insn 370: point = 499, n_alt = 0
   Insn 369: point = 500, n_alt = 0
   Insn 368: point = 502, n_alt = 0
   Insn 367: point = 504, n_alt = 1
   Insn 366: point = 506, n_alt = 0
   Insn 365: point = 507, n_alt = 3
  BB 38
   Insn 363: point = 508, n_alt = -1
   Insn 362: point = 508, n_alt = 0
   Insn 361: point = 509, n_alt = 4
   Insn 360: point = 511, n_alt = 0
   Insn 359: point = 513, n_alt = 0
   Insn 358: point = 515, n_alt = 0
   Insn 357: point = 516, n_alt = 3
   Insn 356: point = 518, n_alt = 0
   Insn 355: point = 520, n_alt = 0
   Insn 354: point = 522, n_alt = 1
   Insn 353: point = 524, n_alt = 0
   Insn 352: point = 525, n_alt = 3
   Insn 351: point = 527, n_alt = 3
  BB 49
   Insn 468: point = 528, n_alt = 1
  BB 47
   Insn 443: point = 528, n_alt = -1
   Insn 442: point = 528, n_alt = 0
   Insn 441: point = 529, n_alt = 0
   Insn 440: point = 531, n_alt = 1
   Insn 439: point = 533, n_alt = 0
   Insn 438: point = 534, n_alt = 3
  BB 46
   Insn 436: point = 535, n_alt = -1
   Insn 435: point = 535, n_alt = 0
   Insn 434: point = 536, n_alt = 0
   Insn 433: point = 538, n_alt = 0
   Insn 432: point = 540, n_alt = 1
   Insn 431: point = 542, n_alt = 0
   Insn 430: point = 543, n_alt = 3
  BB 45
   Insn 428: point = 544, n_alt = -1
   Insn 427: point = 544, n_alt = 0
   Insn 426: point = 545, n_alt = 4
   Insn 425: point = 547, n_alt = 0
   Insn 424: point = 549, n_alt = 0
   Insn 423: point = 551, n_alt = 0
   Insn 422: point = 552, n_alt = 3
   Insn 421: point = 554, n_alt = 0
   Insn 420: point = 556, n_alt = 0
   Insn 419: point = 558, n_alt = 1
   Insn 418: point = 560, n_alt = 0
   Insn 417: point = 561, n_alt = 3
   Insn 416: point = 563, n_alt = 3
  BB 56
   Insn 537: point = 564, n_alt = 1
  BB 54
   Insn 502: point = 564, n_alt = -1
   Insn 501: point = 564, n_alt = 0
   Insn 500: point = 565, n_alt = 0
   Insn 499: point = 567, n_alt = 1
   Insn 498: point = 569, n_alt = 0
   Insn 497: point = 570, n_alt = 3
  BB 53
   Insn 495: point = 571, n_alt = -1
   Insn 494: point = 571, n_alt = 0
   Insn 493: point = 572, n_alt = 0
   Insn 492: point = 574, n_alt = 0
   Insn 491: point = 576, n_alt = 1
   Insn 490: point = 578, n_alt = 0
   Insn 489: point = 579, n_alt = 3
  BB 52
   Insn 487: point = 580, n_alt = -1
   Insn 486: point = 580, n_alt = 0
   Insn 485: point = 581, n_alt = 0
   Insn 484: point = 583, n_alt = 0
   Insn 483: point = 585, n_alt = 1
   Insn 482: point = 587, n_alt = 0
   Insn 481: point = 588, n_alt = 3
 r87: [319..320]
 r88: [313..314]
 r89: [350..356]
 r90: [352..353]
 r91: [350..351]
 r92: [348..349]
 r93: [343..347]
 r94: [343..344]
 r95: [341..342]
 r96: [339..340]
 r97: [330..331]
 r98: [323..324]
 r99: [259..263]
 r100: [261..262]
 r101: [259..260]
 r102: [250..256]
 r103: [252..253]
 r104: [250..251]
 r105: [248..249]
 r106: [243..247]
 r107: [243..244]
 r108: [241..242]
 r109: [307..308]
 r110: [386..392]
 r111: [388..389]
 r112: [386..387]
 r113: [384..385]
 r114: [379..383]
 r115: [379..380]
 r116: [377..378]
 r117: [375..376]
 r118: [366..367]
 r119: [359..360]
 r120: [236..237]
 r121: [231..235]
 r122: [229..232]
 r123: [229..230]
 r124: [220..226]
 r125: [222..223]
 r126: [220..221]
 r127: [218..219]
 r128: [213..217]
 r129: [213..214]
 r130: [211..212]
 r131: [303..304]
 r132: [422..428]
 r133: [424..425]
 r134: [422..423]
 r135: [420..421]
 r136: [415..419]
 r137: [415..416]
 r138: [413..414]
 r139: [411..412]
 r140: [402..403]
 r141: [395..396]
 r142: [206..207]
 r143: [201..205]
 r144: [199..202]
 r145: [199..200]
 r146: [190..196]
 r147: [192..193]
 r148: [190..191]
 r149: [188..189]
 r150: [183..187]
 r151: [183..184]
 r152: [181..182]
 r153: [299..300]
 r154: [447..448]
 r155: [438..439]
 r156: [431..432]
 r157: [176..177]
 r158: [163..175]
 r159: [163..167]
 r160: [161..164]
 r161: [161..162]
 r162: [145..151]
 r163: [147..148]
 r164: [145..146]
 r165: [143..144]
 r166: [138..142]
 r167: [138..139]
 r168: [136..137]
 r169: [295..296]
 r170: [291..292]
 r171: [285..286]
 r172: [483..489]
 r173: [485..486]
 r174: [483..484]
 r175: [481..482]
 r176: [476..480]
 r177: [476..477]
 r178: [474..475]
 r179: [472..473]
 r180: [463..464]
 r181: [456..457]
 r182: [128..132]
 r183: [130..131]
 r184: [128..129]
 r185: [119..125]
 r186: [121..122]
 r187: [119..120]
 r188: [117..118]
 r189: [112..116]
 r190: [112..113]
 r191: [110..111]
 r192: [279..280]
 r193: [519..525]
 r194: [521..522]
 r195: [519..520]
 r196: [517..518]
 r197: [512..516]
 r198: [512..513]
 r199: [510..511]
 r200: [508..509]
 r201: [499..500]
 r202: [492..493]
 r203: [105..106]
 r204: [100..104]
 r205: [98..101]
 r206: [98..99]
 r207: [89..95]
 r208: [91..92]
 r209: [89..90]
 r210: [87..88]
 r211: [82..86]
 r212: [82..83]
 r213: [80..81]
 r214: [275..276]
 r215: [555..561]
 r216: [557..558]
 r217: [555..556]
 r218: [553..554]
 r219: [548..552]
 r220: [548..549]
 r221: [546..547]
 r222: [544..545]
 r223: [535..536]
 r224: [528..529]
 r225: [75..76]
 r226: [70..74]
 r227: [68..71]
 r228: [68..69]
 r229: [59..65]
 r230: [61..62]
 r231: [59..60]
 r232: [57..58]
 r233: [52..56]
 r234: [52..53]
 r235: [50..51]
 r236: [271..272]
 r237: [580..581]
 r238: [571..572]
 r239: [564..565]
 r240: [45..46]
 r241: [32..44]
 r242: [32..36]
 r243: [30..33]
 r244: [30..31]
 r245: [14..20]
 r246: [16..17]
 r247: [14..15]
 r248: [12..13]
 r249: [7..11]
 r250: [7..8]
 r251: [5..6]
 r252: [267..268]
 r253: [266..266] [240..240] [210..210] [180..180] [135..135] [109..109] [79..79] [49..49] [2..4]
 r254: [0..1]
 r255: [321..322]
 r256: [317..318]
 r257: [315..316]
 r258: [311..312]
 r259: [357..358]
 r260: [354..355]
 r261: [345..346]
 r262: [332..338]
 r263: [334..335]
 r264: [336..337]
 r265: [332..333]
 r266: [325..329]
 r267: [325..326]
 r268: [327..328]
 r269: [264..265]
 r270: [257..258]
 r271: [254..255]
 r272: [245..246]
 r273: [309..310]
 r274: [393..394]
 r275: [390..391]
 r276: [381..382]
 r277: [368..374]
 r278: [370..371]
 r279: [372..373]
 r280: [368..369]
 r281: [361..365]
 r282: [361..362]
 r283: [363..364]
 r284: [238..239]
 r285: [233..234]
 r286: [227..228]
 r287: [224..225]
 r288: [215..216]
 r289: [305..306]
 r290: [429..430]
 r291: [426..427]
 r292: [417..418]
 r293: [404..410]
 r294: [406..407]
 r295: [408..409]
 r296: [404..405]
 r297: [397..401]
 r298: [397..398]
 r299: [399..400]
 r300: [208..209]
 r301: [203..204]
 r302: [197..198]
 r303: [194..195]
 r304: [185..186]
 r305: [301..302]
 r306: [449..455]
 r307: [451..452]
 r308: [453..454]
 r309: [449..450]
 r310: [440..446]
 r311: [442..443]
 r312: [444..445]
 r313: [440..441]
 r314: [433..437]
 r315: [433..434]
 r316: [435..436]
 r317: [178..179]
 r318: [168..174]
 r319: [170..171]
 r320: [172..173]
 r321: [168..169]
 r322: [165..166]
 r323: [154..160]
 r324: [156..157]
 r325: [158..159]
 r326: [154..155]
 r327: [152..153]
 r328: [149..150]
 r329: [140..141]
 r330: [297..298]
 r331: [293..294]
 r332: [289..290]
 r333: [287..288]
 r334: [283..284]
 r335: [490..491]
 r336: [487..488]
 r337: [478..479]
 r338: [465..471]
 r339: [467..468]
 r340: [469..470]
 r341: [465..466]
 r342: [458..462]
 r343: [458..459]
 r344: [460..461]
 r345: [133..134]
 r346: [126..127]
 r347: [123..124]
 r348: [114..115]
 r349: [281..282]
 r350: [526..527]
 r351: [523..524]
 r352: [514..515]
 r353: [501..507]
 r354: [503..504]
 r355: [505..506]
 r356: [501..502]
 r357: [494..498]
 r358: [494..495]
 r359: [496..497]
 r360: [107..108]
 r361: [102..103]
 r362: [96..97]
 r363: [93..94]
 r364: [84..85]
 r365: [277..278]
 r366: [562..563]
 r367: [559..560]
 r368: [550..551]
 r369: [537..543]
 r370: [539..540]
 r371: [541..542]
 r372: [537..538]
 r373: [530..534]
 r374: [530..531]
 r375: [532..533]
 r376: [77..78]
 r377: [72..73]
 r378: [66..67]
 r379: [63..64]
 r380: [54..55]
 r381: [273..274]
 r382: [582..588]
 r383: [584..585]
 r384: [586..587]
 r385: [582..583]
 r386: [573..579]
 r387: [575..576]
 r388: [577..578]
 r389: [573..574]
 r390: [566..570]
 r391: [566..567]
 r392: [568..569]
 r393: [47..48]
 r394: [37..43]
 r395: [39..40]
 r396: [41..42]
 r397: [37..38]
 r398: [34..35]
 r399: [23..29]
 r400: [25..26]
 r401: [27..28]
 r402: [23..24]
 r403: [21..22]
 r404: [18..19]
 r405: [9..10]
 r406: [269..270]
Compressing live ranges: from 589 to 528 - 89%
Ranges after the compression:
 r87: [288..289]
 r88: [282..283]
 r89: [316..321]
 r90: [318..319]
 r91: [316..317]
 r92: [314..315]
 r93: [310..313]
 r94: [310..311]
 r95: [308..309]
 r96: [306..307]
 r97: [298..299]
 r98: [292..293]
 r99: [229..232]
 r100: [231..232]
 r101: [229..230]
 r102: [221..226]
 r103: [223..224]
 r104: [221..222]
 r105: [219..220]
 r106: [215..218]
 r107: [215..216]
 r108: [213..214]
 r109: [276..277]
 r110: [348..353]
 r111: [350..351]
 r112: [348..349]
 r113: [346..347]
 r114: [342..345]
 r115: [342..343]
 r116: [340..341]
 r117: [338..339]
 r118: [330..331]
 r119: [324..325]
 r120: [208..209]
 r121: [204..207]
 r122: [202..205]
 r123: [202..203]
 r124: [194..199]
 r125: [196..197]
 r126: [194..195]
 r127: [192..193]
 r128: [188..191]
 r129: [188..189]
 r130: [186..187]
 r131: [272..273]
 r132: [380..385]
 r133: [382..383]
 r134: [380..381]
 r135: [378..379]
 r136: [374..377]
 r137: [374..375]
 r138: [372..373]
 r139: [370..371]
 r140: [362..363]
 r141: [356..357]
 r142: [181..182]
 r143: [177..180]
 r144: [175..178]
 r145: [175..176]
 r146: [167..172]
 r147: [169..170]
 r148: [167..168]
 r149: [165..166]
 r150: [161..164]
 r151: [161..162]
 r152: [159..160]
 r153: [268..269]
 r154: [402..403]
 r155: [394..395]
 r156: [388..389]
 r157: [154..155]
 r158: [144..153]
 r159: [144..147]
 r160: [142..145]
 r161: [142..143]
 r162: [128..133]
 r163: [130..131]
 r164: [128..129]
 r165: [126..127]
 r166: [122..125]
 r167: [122..123]
 r168: [120..121]
 r169: [264..265]
 r170: [260..261]
 r171: [254..255]
 r172: [434..439]
 r173: [436..437]
 r174: [434..435]
 r175: [432..433]
 r176: [428..431]
 r177: [428..429]
 r178: [426..427]
 r179: [424..425]
 r180: [416..417]
 r181: [410..411]
 r182: [113..116]
 r183: [115..116]
 r184: [113..114]
 r185: [105..110]
 r186: [107..108]
 r187: [105..106]
 r188: [103..104]
 r189: [99..102]
 r190: [99..100]
 r191: [97..98]
 r192: [248..249]
 r193: [466..471]
 r194: [468..469]
 r195: [466..467]
 r196: [464..465]
 r197: [460..463]
 r198: [460..461]
 r199: [458..459]
 r200: [456..457]
 r201: [448..449]
 r202: [442..443]
 r203: [92..93]
 r204: [88..91]
 r205: [86..89]
 r206: [86..87]
 r207: [78..83]
 r208: [80..81]
 r209: [78..79]
 r210: [76..77]
 r211: [72..75]
 r212: [72..73]
 r213: [70..71]
 r214: [244..245]
 r215: [498..503]
 r216: [500..501]
 r217: [498..499]
 r218: [496..497]
 r219: [492..495]
 r220: [492..493]
 r221: [490..491]
 r222: [488..489]
 r223: [480..481]
 r224: [474..475]
 r225: [65..66]
 r226: [61..64]
 r227: [59..62]
 r228: [59..60]
 r229: [51..56]
 r230: [53..54]
 r231: [51..52]
 r232: [49..50]
 r233: [45..48]
 r234: [45..46]
 r235: [43..44]
 r236: [240..241]
 r237: [520..521]
 r238: [512..513]
 r239: [506..507]
 r240: [38..39]
 r241: [28..37]
 r242: [28..31]
 r243: [26..29]
 r244: [26..27]
 r245: [12..17]
 r246: [14..15]
 r247: [12..13]
 r248: [10..11]
 r249: [6..9]
 r250: [6..7]
 r251: [4..5]
 r252: [236..237]
 r253: [235..235] [212..212] [185..185] [158..158] [119..119] [96..96] [69..69] [42..42] [2..3]
 r254: [0..1]
 r255: [290..291]
 r256: [286..287]
 r257: [284..285]
 r258: [280..281]
 r259: [322..323]
 r260: [320..321]
 r261: [312..313]
 r262: [300..305]
 r263: [302..303]
 r264: [304..305]
 r265: [300..301]
 r266: [294..297]
 r267: [294..295]
 r268: [296..297]
 r269: [233..234]
 r270: [227..228]
 r271: [225..226]
 r272: [217..218]
 r273: [278..279]
 r274: [354..355]
 r275: [352..353]
 r276: [344..345]
 r277: [332..337]
 r278: [334..335]
 r279: [336..337]
 r280: [332..333]
 r281: [326..329]
 r282: [326..327]
 r283: [328..329]
 r284: [210..211]
 r285: [206..207]
 r286: [200..201]
 r287: [198..199]
 r288: [190..191]
 r289: [274..275]
 r290: [386..387]
 r291: [384..385]
 r292: [376..377]
 r293: [364..369]
 r294: [366..367]
 r295: [368..369]
 r296: [364..365]
 r297: [358..361]
 r298: [358..359]
 r299: [360..361]
 r300: [183..184]
 r301: [179..180]
 r302: [173..174]
 r303: [171..172]
 r304: [163..164]
 r305: [270..271]
 r306: [404..409]
 r307: [406..407]
 r308: [408..409]
 r309: [404..405]
 r310: [396..401]
 r311: [398..399]
 r312: [400..401]
 r313: [396..397]
 r314: [390..393]
 r315: [390..391]
 r316: [392..393]
 r317: [156..157]
 r318: [148..153]
 r319: [150..151]
 r320: [152..153]
 r321: [148..149]
 r322: [146..147]
 r323: [136..141]
 r324: [138..139]
 r325: [140..141]
 r326: [136..137]
 r327: [134..135]
 r328: [132..133]
 r329: [124..125]
 r330: [266..267]
 r331: [262..263]
 r332: [258..259]
 r333: [256..257]
 r334: [252..253]
 r335: [440..441]
 r336: [438..439]
 r337: [430..431]
 r338: [418..423]
 r339: [420..421]
 r340: [422..423]
 r341: [418..419]
 r342: [412..415]
 r343: [412..413]
 r344: [414..415]
 r345: [117..118]
 r346: [111..112]
 r347: [109..110]
 r348: [101..102]
 r349: [250..251]
 r350: [472..473]
 r351: [470..471]
 r352: [462..463]
 r353: [450..455]
 r354: [452..453]
 r355: [454..455]
 r356: [450..451]
 r357: [444..447]
 r358: [444..445]
 r359: [446..447]
 r360: [94..95]
 r361: [90..91]
 r362: [84..85]
 r363: [82..83]
 r364: [74..75]
 r365: [246..247]
 r366: [504..505]
 r367: [502..503]
 r368: [494..495]
 r369: [482..487]
 r370: [484..485]
 r371: [486..487]
 r372: [482..483]
 r373: [476..479]
 r374: [476..477]
 r375: [478..479]
 r376: [67..68]
 r377: [63..64]
 r378: [57..58]
 r379: [55..56]
 r380: [47..48]
 r381: [242..243]
 r382: [522..527]
 r383: [524..525]
 r384: [526..527]
 r385: [522..523]
 r386: [514..519]
 r387: [516..517]
 r388: [518..519]
 r389: [514..515]
 r390: [508..511]
 r391: [508..509]
 r392: [510..511]
 r393: [40..41]
 r394: [32..37]
 r395: [34..35]
 r396: [36..37]
 r397: [32..33]
 r398: [30..31]
 r399: [20..25]
 r400: [22..23]
 r401: [24..25]
 r402: [20..21]
 r403: [18..19]
 r404: [16..17]
 r405: [8..9]
 r406: [238..239]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 36
changing reg in insn 37
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 51
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 53
changing reg in insn 57
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 72
changing reg in insn 74
changing reg in insn 82
changing reg in insn 86
changing reg in insn 84
changing reg in insn 85
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 99
changing reg in insn 100
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 115
changing reg in insn 114
changing reg in insn 116
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 122
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 137
changing reg in insn 139
changing reg in insn 147
changing reg in insn 151
changing reg in insn 149
changing reg in insn 150
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 157
changing reg in insn 164
changing reg in insn 165
changing reg in insn 171
changing reg in insn 172
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 180
changing reg in insn 179
changing reg in insn 181
changing reg in insn 180
changing reg in insn 181
changing reg in insn 183
changing reg in insn 187
changing reg in insn 185
changing reg in insn 186
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 188
changing reg in insn 188
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 202
changing reg in insn 204
changing reg in insn 215
changing reg in insn 216
changing reg in insn 223
changing reg in insn 224
changing reg in insn 230
changing reg in insn 231
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 241
changing reg in insn 243
changing reg in insn 245
changing reg in insn 244
changing reg in insn 245
changing reg in insn 252
changing reg in insn 256
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 256
changing reg in insn 256
changing reg in insn 257
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 271
changing reg in insn 273
changing reg in insn 277
changing reg in insn 278
changing reg in insn 281
changing reg in insn 282
changing reg in insn 289
changing reg in insn 293
changing reg in insn 291
changing reg in insn 292
changing reg in insn 292
changing reg in insn 293
changing reg in insn 293
changing reg in insn 294
changing reg in insn 294
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 299
changing reg in insn 306
changing reg in insn 307
changing reg in insn 313
changing reg in insn 314
changing reg in insn 318
changing reg in insn 321
changing reg in insn 319
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 327
changing reg in insn 325
changing reg in insn 326
changing reg in insn 326
changing reg in insn 327
changing reg in insn 327
changing reg in insn 328
changing reg in insn 328
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 342
changing reg in insn 344
changing reg in insn 352
changing reg in insn 356
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 356
changing reg in insn 356
changing reg in insn 357
changing reg in insn 357
changing reg in insn 359
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 362
changing reg in insn 369
changing reg in insn 370
changing reg in insn 376
changing reg in insn 377
changing reg in insn 381
changing reg in insn 382
changing reg in insn 382
changing reg in insn 385
changing reg in insn 384
changing reg in insn 386
changing reg in insn 385
changing reg in insn 386
changing reg in insn 388
changing reg in insn 392
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 395
changing reg in insn 396
changing reg in insn 397
changing reg in insn 407
changing reg in insn 409
changing reg in insn 417
changing reg in insn 421
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 421
changing reg in insn 421
changing reg in insn 422
changing reg in insn 422
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 427
changing reg in insn 434
changing reg in insn 435
changing reg in insn 441
changing reg in insn 442
changing reg in insn 446
changing reg in insn 447
changing reg in insn 447
changing reg in insn 450
changing reg in insn 449
changing reg in insn 451
changing reg in insn 450
changing reg in insn 451
changing reg in insn 453
changing reg in insn 457
changing reg in insn 455
changing reg in insn 456
changing reg in insn 456
changing reg in insn 457
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 460
changing reg in insn 461
changing reg in insn 462
changing reg in insn 472
changing reg in insn 474
changing reg in insn 485
changing reg in insn 486
changing reg in insn 493
changing reg in insn 494
changing reg in insn 500
changing reg in insn 501
changing reg in insn 505
changing reg in insn 506
changing reg in insn 506
changing reg in insn 511
changing reg in insn 513
changing reg in insn 515
changing reg in insn 514
changing reg in insn 515
changing reg in insn 522
changing reg in insn 526
changing reg in insn 524
changing reg in insn 525
changing reg in insn 525
changing reg in insn 526
changing reg in insn 526
changing reg in insn 527
changing reg in insn 527
changing reg in insn 529
changing reg in insn 530
changing reg in insn 531
changing reg in insn 541
changing reg in insn 543
changing reg in insn 546
changing reg in insn 532
changing reg in insn 463
changing reg in insn 398
changing reg in insn 333
changing reg in insn 262
changing reg in insn 193
changing reg in insn 128
changing reg in insn 63
changing reg in insn 549
changing reg in insn 549
changing reg in insn 553
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 32
changing reg in insn 36
changing reg in insn 34
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
changing reg in insn 71
changing reg in insn 72
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 88
changing reg in insn 89
changing reg in insn 95
changing reg in insn 99
changing reg in insn 97
changing reg in insn 98
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 103
changing reg in insn 106
changing reg in insn 105
changing reg in insn 106
changing reg in insn 104
changing reg in insn 105
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 124
changing reg in insn 125
changing reg in insn 136
changing reg in insn 137
changing reg in insn 146
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 153
changing reg in insn 154
changing reg in insn 160
changing reg in insn 164
changing reg in insn 162
changing reg in insn 163
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 168
changing reg in insn 171
changing reg in insn 170
changing reg in insn 171
changing reg in insn 169
changing reg in insn 170
changing reg in insn 175
changing reg in insn 176
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 189
changing reg in insn 190
changing reg in insn 201
changing reg in insn 202
changing reg in insn 211
changing reg in insn 215
changing reg in insn 213
changing reg in insn 214
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 215
changing reg in insn 219
changing reg in insn 223
changing reg in insn 221
changing reg in insn 222
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 227
changing reg in insn 230
changing reg in insn 229
changing reg in insn 230
changing reg in insn 228
changing reg in insn 229
changing reg in insn 234
changing reg in insn 235
changing reg in insn 237
changing reg in insn 241
changing reg in insn 239
changing reg in insn 240
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 241
changing reg in insn 242
changing reg in insn 243
changing reg in insn 246
changing reg in insn 250
changing reg in insn 248
changing reg in insn 249
changing reg in insn 247
changing reg in insn 248
changing reg in insn 249
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 258
changing reg in insn 259
changing reg in insn 270
changing reg in insn 271
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 279
changing reg in insn 280
changing reg in insn 281
changing reg in insn 282
changing reg in insn 283
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 295
changing reg in insn 296
changing reg in insn 302
changing reg in insn 306
changing reg in insn 304
changing reg in insn 305
changing reg in insn 303
changing reg in insn 304
changing reg in insn 305
changing reg in insn 306
changing reg in insn 310
changing reg in insn 313
changing reg in insn 312
changing reg in insn 313
changing reg in insn 311
changing reg in insn 312
changing reg in insn 317
changing reg in insn 318
changing reg in insn 322
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 329
changing reg in insn 330
changing reg in insn 341
changing reg in insn 342
changing reg in insn 351
changing reg in insn 352
changing reg in insn 353
changing reg in insn 354
changing reg in insn 358
changing reg in insn 359
changing reg in insn 365
changing reg in insn 369
changing reg in insn 367
changing reg in insn 368
changing reg in insn 366
changing reg in insn 367
changing reg in insn 368
changing reg in insn 369
changing reg in insn 373
changing reg in insn 376
changing reg in insn 375
changing reg in insn 376
changing reg in insn 374
changing reg in insn 375
changing reg in insn 380
changing reg in insn 381
changing reg in insn 383
changing reg in insn 384
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 390
changing reg in insn 394
changing reg in insn 395
changing reg in insn 406
changing reg in insn 407
changing reg in insn 416
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 423
changing reg in insn 424
changing reg in insn 430
changing reg in insn 434
changing reg in insn 432
changing reg in insn 433
changing reg in insn 431
changing reg in insn 432
changing reg in insn 433
changing reg in insn 434
changing reg in insn 438
changing reg in insn 441
changing reg in insn 440
changing reg in insn 441
changing reg in insn 439
changing reg in insn 440
changing reg in insn 445
changing reg in insn 446
changing reg in insn 448
changing reg in insn 449
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
changing reg in insn 455
changing reg in insn 459
changing reg in insn 460
changing reg in insn 471
changing reg in insn 472
changing reg in insn 481
changing reg in insn 485
changing reg in insn 483
changing reg in insn 484
changing reg in insn 482
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 489
changing reg in insn 493
changing reg in insn 491
changing reg in insn 492
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 497
changing reg in insn 500
changing reg in insn 499
changing reg in insn 500
changing reg in insn 498
changing reg in insn 499
changing reg in insn 504
changing reg in insn 505
changing reg in insn 507
changing reg in insn 511
changing reg in insn 509
changing reg in insn 510
changing reg in insn 508
changing reg in insn 509
changing reg in insn 510
changing reg in insn 511
changing reg in insn 512
changing reg in insn 513
changing reg in insn 516
changing reg in insn 520
changing reg in insn 518
changing reg in insn 519
changing reg in insn 517
changing reg in insn 518
changing reg in insn 519
changing reg in insn 520
changing reg in insn 521
changing reg in insn 522
changing reg in insn 523
changing reg in insn 524
changing reg in insn 528
changing reg in insn 529
changing reg in insn 540
changing reg in insn 541
deleting insn with uid = 549.
starting the processing of deferred insns
ending the processing of deferred insns


collect_skarb

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={197d,191u} r1={131d,130u} r2={3d,2u} r4={1d} r5={1d,1u} r6={1d,224u} r7={1d,59u} r17={104d,32u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 1090{450d,640u,0e} in 448{448 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 255 256 257 258
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1163 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [255])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1164 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [255])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1164 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 ax [256])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (const_int 16 [0x10])) [3 _1->y_current+0 S4 A64])) "function.c":1164 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
        (reg:SI 0 ax [256])) "function.c":1164 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [257])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1165 85 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [257])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1165 85 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 0 ax [258])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":1165 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
        (reg:SI 0 ax [258])) "function.c":1165 86 {*movsi_internal}
     (nil))
(insn 14 13 556 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1167 86 {*movsi_internal}
     (nil))
(jump_insn 556 14 557 2 (set (pc)
        (label_ref 69)) "function.c":1167 683 {jump}
     (nil)
 -> 69)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 557 556 73)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 259 260 261
(code_label 73 557 17 3 202 (nil) [1 uses])
(note 17 73 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg/f:DI 0 ax [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [259])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 1 dx [260])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 1 dx [orig:90 _4 ] [90])
        (sign_extend:DI (reg:SI 1 dx [260]))) "function.c":1169 149 {*extendsidi2_rex64}
     (nil))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 1 dx [orig:91 _5 ] [91])
                (ashift:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 551 {*ashldi3_1}
     (nil))
(insn 23 22 24 3 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                    (reg:DI 1 dx [orig:91 _5 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 222 {*adddi_1}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:92 _6 ] [92]) [10 *_6+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:SI 0 ax [261])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 0 ax [orig:94 _8 ] [94])
        (sign_extend:DI (reg:SI 0 ax [261]))) "function.c":1169 149 {*extendsidi2_rex64}
     (nil))
(insn 27 26 28 3 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 _8 ] [94])
                    (reg/f:DI 1 dx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 222 {*adddi_1}
     (nil))
(insn 28 27 29 3 (set (reg:QI 0 ax [orig:96 _10 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 _9 ] [95]) [0 *_9+0 S1 A8])) "function.c":1169 88 {*movqi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:96 _10 ] [96])
            (const_int 99 [0x63]))) "function.c":1169 9 {*cmpqi_1}
     (nil))
(jump_insn 30 29 31 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1169 682 {*jcc}
     (nil)
 -> 66)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 262 263 264 265
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 0 ax [262])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 1 dx [264])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 1 dx [263])
        (sign_extend:DI (reg:SI 1 dx [264]))) "function.c":1169 149 {*extendsidi2_rex64}
     (nil))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 1 dx [265])
                (plus:DI (reg:DI 1 dx [263])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 222 {*adddi_1}
     (nil))
(insn 36 35 37 4 (set (reg:SI 0 ax [orig:97 _11 ] [97])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [265])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [262])) [3 serwer_178(D)->skarb.one_coin S4 A64])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:97 _11 ] [97]))) "function.c":1169 11 {*cmpsi_1}
     (nil))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1169 682 {*jcc}
     (nil)
 -> 66)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 266 267 268
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (set (reg/f:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:SI 1 dx [268])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:DI 1 dx [267])
        (sign_extend:DI (reg:SI 1 dx [268]))) "function.c":1169 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 5 (set (reg:SI 0 ax [orig:98 _12 ] [98])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [267])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [266]))
                (const_int 52 [0x34])) [3 serwer_178(D)->skarb.one_coin S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 44 43 45 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:98 _12 ] [98]))) "function.c":1169 11 {*cmpsi_1}
     (nil))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1169 682 {*jcc}
     (nil)
 -> 66)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 103 104 105 106 107 108 253 269 270 271 272
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (set (reg/f:DI 0 ax [269])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1171 85 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [269])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1171 85 {*movdi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:SI 1 dx [orig:100 _14 ] [100])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (const_int 32 [0x20])) [3 _13->coins_carried+0 S4 A64])) "function.c":1171 86 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (parallel [
            (set (reg:SI 1 dx [orig:101 _15 ] [101])
                (plus:SI (reg:SI 1 dx [orig:100 _14 ] [100])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1171 221 {*addsi_1}
     (nil))
(insn 51 50 52 6 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (const_int 32 [0x20])) [3 _13->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:101 _15 ] [101])) "function.c":1171 86 {*movsi_internal}
     (nil))
(insn 52 51 53 6 (set (reg/f:DI 0 ax [270])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1172 85 {*movdi_internal}
     (nil))
(insn 53 52 54 6 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [270])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1172 85 {*movdi_internal}
     (nil))
(insn 54 53 55 6 (set (reg:SI 1 dx [271])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1172 86 {*movsi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:DI 1 dx [orig:103 _17 ] [103])
        (sign_extend:DI (reg:SI 1 dx [271]))) "function.c":1172 149 {*extendsidi2_rex64}
     (nil))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 1 dx [orig:104 _18 ] [104])
                (ashift:DI (reg:DI 1 dx [orig:103 _17 ] [103])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1172 551 {*ashldi3_1}
     (nil))
(insn 57 56 58 6 (parallel [
            (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
                (plus:DI (reg/f:DI 0 ax [orig:102 _16 ] [102])
                    (reg:DI 1 dx [orig:104 _18 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1172 222 {*adddi_1}
     (nil))
(insn 58 57 59 6 (set (reg/f:DI 1 dx [orig:106 _20 ] [106])
        (mem/f:DI (reg/f:DI 0 ax [orig:105 _19 ] [105]) [10 *_19+0 S8 A64])) "function.c":1172 85 {*movdi_internal}
     (nil))
(insn 59 58 60 6 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1172 86 {*movsi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:DI 0 ax [orig:107 _21 ] [107])
        (sign_extend:DI (reg:SI 0 ax [272]))) "function.c":1172 149 {*extendsidi2_rex64}
     (nil))
(insn 61 60 62 6 (parallel [
            (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
                (plus:DI (reg:DI 0 ax [orig:107 _21 ] [107])
                    (reg/f:DI 1 dx [orig:106 _20 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1172 222 {*adddi_1}
     (nil))
(insn 62 61 63 6 (set (mem:QI (reg/f:DI 0 ax [orig:108 _22 ] [108]) [0 *_22+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1172 88 {*movqi_internal}
     (nil))
(insn 63 62 558 6 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1173 85 {*movdi_internal}
     (nil))
(jump_insn 558 63 559 6 (set (pc)
        (label_ref 547)) "function.c":1173 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 559 558 66)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 66 559 67 7 200 (nil) [3 uses])
(note 67 66 68 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1167 221 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 273
(code_label 69 68 70 8 199 (nil) [1 uses])
(note 70 69 71 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 8 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1167 85 {*movdi_internal}
     (nil))
(insn 72 71 74 8 (set (reg:SI 0 ax [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [273])
                (const_int 8048 [0x1f70])) [3 serwer_178(D)->skarb.count_one_coin+0 S4 A64])) "function.c":1167 86 {*movsi_internal}
     (nil))
(insn 74 72 75 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:109 _23 ] [109]))) "function.c":1167 11 {*cmpsi_1}
     (nil))
(jump_insn 75 74 76 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "function.c":1167 682 {*jcc}
     (nil)
 -> 73)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 560 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1177 86 {*movsi_internal}
     (nil))
(jump_insn 560 77 561 9 (set (pc)
        (label_ref 134)) "function.c":1177 683 {jump}
     (nil)
 -> 134)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 561 560 138)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 274 275 276
(code_label 138 561 80 10 205 (nil) [1 uses])
(note 80 138 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 10 (set (reg/f:DI 0 ax [274])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 82 81 83 10 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [274])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 83 82 84 10 (set (reg:SI 1 dx [275])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:DI 1 dx [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 1 dx [275]))) "function.c":1179 149 {*extendsidi2_rex64}
     (nil))
(insn 85 84 86 10 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (ashift:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 551 {*ashldi3_1}
     (nil))
(insn 86 85 87 10 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                    (reg:DI 1 dx [orig:112 _26 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 222 {*adddi_1}
     (nil))
(insn 87 86 88 10 (set (reg/f:DI 1 dx [orig:114 _28 ] [114])
        (mem/f:DI (reg/f:DI 0 ax [orig:113 _27 ] [113]) [10 *_27+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 88 87 89 10 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 89 88 90 10 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [276]))) "function.c":1179 149 {*extendsidi2_rex64}
     (nil))
(insn 90 89 91 10 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (reg/f:DI 1 dx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 222 {*adddi_1}
     (nil))
(insn 91 90 92 10 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [orig:116 _30 ] [116]) [0 *_30+0 S1 A8])) "function.c":1179 88 {*movqi_internal}
     (nil))
(insn 92 91 93 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 _31 ] [117])
            (const_int 116 [0x74]))) "function.c":1179 9 {*cmpqi_1}
     (nil))
(jump_insn 93 92 94 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "function.c":1179 682 {*jcc}
     (nil)
 -> 131)
;;  succ:       11 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 277 278 279 280
(note 94 93 95 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 11 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 96 95 97 11 (set (reg:SI 1 dx [279])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 97 96 98 11 (set (reg:DI 1 dx [278])
        (sign_extend:DI (reg:SI 1 dx [279]))) "function.c":1179 149 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 11 (parallel [
            (set (reg:DI 1 dx [280])
                (plus:DI (reg:DI 1 dx [278])
                    (const_int 1006 [0x3ee])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 222 {*adddi_1}
     (nil))
(insn 99 98 100 11 (set (reg:SI 0 ax [orig:118 _32 ] [118])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [280])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [277]))
                (const_int 4 [0x4])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 100 99 101 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:118 _32 ] [118]))) "function.c":1179 11 {*cmpsi_1}
     (nil))
(jump_insn 101 100 102 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "function.c":1179 682 {*jcc}
     (nil)
 -> 131)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 281 282 283
(note 102 101 103 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 12 (set (reg/f:DI 0 ax [281])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 104 103 105 12 (set (reg:SI 1 dx [283])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 105 104 106 12 (set (reg:DI 1 dx [282])
        (sign_extend:DI (reg:SI 1 dx [283]))) "function.c":1179 149 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 12 (set (reg:SI 0 ax [orig:119 _33 ] [119])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [282])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [281]))
                (const_int 8056 [0x1f78])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 107 106 108 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:119 _33 ] [119]))) "function.c":1179 11 {*cmpsi_1}
     (nil))
(jump_insn 108 107 109 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "function.c":1179 682 {*jcc}
     (nil)
 -> 131)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126 127 128 129 130 253 284 285 286 287 288
(note 109 108 110 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 13 (set (reg/f:DI 0 ax [284])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (nil))
(insn 111 110 112 13 (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [284])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (nil))
(insn 112 111 113 13 (set (reg:SI 1 dx [orig:121 _35 ] [121])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (const_int 32 [0x20])) [3 _34->coins_carried+0 S4 A64])) "function.c":1181 86 {*movsi_internal}
     (nil))
(insn 113 112 114 13 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (nil))
(insn 114 113 115 13 (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [285])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (nil))
(insn 115 114 116 13 (parallel [
            (set (reg:SI 1 dx [orig:123 _37 ] [123])
                (plus:SI (reg:SI 1 dx [orig:121 _35 ] [121])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1181 221 {*addsi_1}
     (nil))
(insn 116 115 117 13 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:122 _36 ] [122])
                (const_int 32 [0x20])) [3 _36->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:123 _37 ] [123])) "function.c":1181 86 {*movsi_internal}
     (nil))
(insn 117 116 118 13 (set (reg/f:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1182 85 {*movdi_internal}
     (nil))
(insn 118 117 119 13 (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [286])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1182 85 {*movdi_internal}
     (nil))
(insn 119 118 120 13 (set (reg:SI 1 dx [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1182 86 {*movsi_internal}
     (nil))
(insn 120 119 121 13 (set (reg:DI 1 dx [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 1 dx [287]))) "function.c":1182 149 {*extendsidi2_rex64}
     (nil))
(insn 121 120 122 13 (parallel [
            (set (reg:DI 1 dx [orig:126 _40 ] [126])
                (ashift:DI (reg:DI 1 dx [orig:125 _39 ] [125])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1182 551 {*ashldi3_1}
     (nil))
(insn 122 121 123 13 (parallel [
            (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
                (plus:DI (reg/f:DI 0 ax [orig:124 _38 ] [124])
                    (reg:DI 1 dx [orig:126 _40 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1182 222 {*adddi_1}
     (nil))
(insn 123 122 124 13 (set (reg/f:DI 1 dx [orig:128 _42 ] [128])
        (mem/f:DI (reg/f:DI 0 ax [orig:127 _41 ] [127]) [10 *_41+0 S8 A64])) "function.c":1182 85 {*movdi_internal}
     (nil))
(insn 124 123 125 13 (set (reg:SI 0 ax [288])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1182 86 {*movsi_internal}
     (nil))
(insn 125 124 126 13 (set (reg:DI 0 ax [orig:129 _43 ] [129])
        (sign_extend:DI (reg:SI 0 ax [288]))) "function.c":1182 149 {*extendsidi2_rex64}
     (nil))
(insn 126 125 127 13 (parallel [
            (set (reg/f:DI 0 ax [orig:130 _44 ] [130])
                (plus:DI (reg:DI 0 ax [orig:129 _43 ] [129])
                    (reg/f:DI 1 dx [orig:128 _42 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1182 222 {*adddi_1}
     (nil))
(insn 127 126 128 13 (set (mem:QI (reg/f:DI 0 ax [orig:130 _44 ] [130]) [0 *_44+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1182 88 {*movqi_internal}
     (nil))
(insn 128 127 562 13 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1183 85 {*movdi_internal}
     (nil))
(jump_insn 562 128 563 13 (set (pc)
        (label_ref 547)) "function.c":1183 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 563 562 131)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 131 563 132 14 204 (nil) [3 uses])
(note 132 131 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1177 221 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              9 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 289
(code_label 134 133 135 15 203 (nil) [1 uses])
(note 135 134 136 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 15 (set (reg/f:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1177 85 {*movdi_internal}
     (nil))
(insn 137 136 139 15 (set (reg:SI 0 ax [orig:131 _45 ] [131])
        (mem:SI (plus:DI (reg/f:DI 0 ax [289])
                (const_int 16052 [0x3eb4])) [3 serwer_178(D)->skarb.count_treasure_coin+0 S4 A32])) "function.c":1177 86 {*movsi_internal}
     (nil))
(insn 139 137 140 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:131 _45 ] [131]))) "function.c":1177 11 {*cmpsi_1}
     (nil))
(jump_insn 140 139 141 15 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) "function.c":1177 682 {*jcc}
     (nil)
 -> 138)
;;  succ:       10
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 141 140 142 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 564 16 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1187 86 {*movsi_internal}
     (nil))
(jump_insn 564 142 565 16 (set (pc)
        (label_ref 199)) "function.c":1187 683 {jump}
     (nil)
 -> 199)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 565 564 203)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       22
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 134 135 136 137 138 139 290 291 292
(code_label 203 565 145 17 208 (nil) [1 uses])
(note 145 203 146 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 17 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 147 146 148 17 (set (reg/f:DI 0 ax [orig:132 _46 ] [132])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [290])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 148 147 149 17 (set (reg:SI 1 dx [291])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 149 148 150 17 (set (reg:DI 1 dx [orig:133 _47 ] [133])
        (sign_extend:DI (reg:SI 1 dx [291]))) "function.c":1189 149 {*extendsidi2_rex64}
     (nil))
(insn 150 149 151 17 (parallel [
            (set (reg:DI 1 dx [orig:134 _48 ] [134])
                (ashift:DI (reg:DI 1 dx [orig:133 _47 ] [133])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 551 {*ashldi3_1}
     (nil))
(insn 151 150 152 17 (parallel [
            (set (reg/f:DI 0 ax [orig:135 _49 ] [135])
                (plus:DI (reg/f:DI 0 ax [orig:132 _46 ] [132])
                    (reg:DI 1 dx [orig:134 _48 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 222 {*adddi_1}
     (nil))
(insn 152 151 153 17 (set (reg/f:DI 1 dx [orig:136 _50 ] [136])
        (mem/f:DI (reg/f:DI 0 ax [orig:135 _49 ] [135]) [10 *_49+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 153 152 154 17 (set (reg:SI 0 ax [292])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 154 153 155 17 (set (reg:DI 0 ax [orig:137 _51 ] [137])
        (sign_extend:DI (reg:SI 0 ax [292]))) "function.c":1189 149 {*extendsidi2_rex64}
     (nil))
(insn 155 154 156 17 (parallel [
            (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (plus:DI (reg:DI 0 ax [orig:137 _51 ] [137])
                    (reg/f:DI 1 dx [orig:136 _50 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 222 {*adddi_1}
     (nil))
(insn 156 155 157 17 (set (reg:QI 0 ax [orig:139 _53 ] [139])
        (mem:QI (reg/f:DI 0 ax [orig:138 _52 ] [138]) [0 *_52+0 S1 A8])) "function.c":1189 88 {*movqi_internal}
     (nil))
(insn 157 156 158 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:139 _53 ] [139])
            (const_int 84 [0x54]))) "function.c":1189 9 {*cmpqi_1}
     (nil))
(jump_insn 158 157 159 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) "function.c":1189 682 {*jcc}
     (nil)
 -> 196)
;;  succ:       18 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 293 294 295 296
(note 159 158 160 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 18 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 161 160 162 18 (set (reg:SI 1 dx [295])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 162 161 163 18 (set (reg:DI 1 dx [294])
        (sign_extend:DI (reg:SI 1 dx [295]))) "function.c":1189 149 {*extendsidi2_rex64}
     (nil))
(insn 163 162 164 18 (parallel [
            (set (reg:DI 1 dx [296])
                (plus:DI (reg:DI 1 dx [294])
                    (const_int 2006 [0x7d6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 222 {*adddi_1}
     (nil))
(insn 164 163 165 18 (set (reg:SI 0 ax [orig:140 _54 ] [140])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [296])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [293]))
                (const_int 8 [0x8])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A64])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 165 164 166 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:140 _54 ] [140]))) "function.c":1189 11 {*cmpsi_1}
     (nil))
(jump_insn 166 165 167 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) "function.c":1189 682 {*jcc}
     (nil)
 -> 196)
;;  succ:       19 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 297 298 299
(note 167 166 168 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 19 (set (reg/f:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 169 168 170 19 (set (reg:SI 1 dx [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 170 169 171 19 (set (reg:DI 1 dx [298])
        (sign_extend:DI (reg:SI 1 dx [299]))) "function.c":1189 149 {*extendsidi2_rex64}
     (nil))
(insn 171 170 172 19 (set (reg:SI 0 ax [orig:141 _55 ] [141])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [298])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [297]))
                (const_int 16060 [0x3ebc])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 172 171 173 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:141 _55 ] [141]))) "function.c":1189 11 {*cmpsi_1}
     (nil))
(jump_insn 173 172 174 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) "function.c":1189 682 {*jcc}
     (nil)
 -> 196)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 144 145 146 147 148 149 150 151 152 253 300 301 302 303 304
(note 174 173 175 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 20 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (nil))
(insn 176 175 177 20 (set (reg/f:DI 0 ax [orig:142 _56 ] [142])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [300])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (nil))
(insn 177 176 178 20 (set (reg:SI 1 dx [orig:143 _57 ] [143])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:142 _56 ] [142])
                (const_int 32 [0x20])) [3 _56->coins_carried+0 S4 A64])) "function.c":1191 86 {*movsi_internal}
     (nil))
(insn 178 177 179 20 (set (reg/f:DI 0 ax [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (nil))
(insn 179 178 180 20 (set (reg/f:DI 0 ax [orig:144 _58 ] [144])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [301])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (nil))
(insn 180 179 181 20 (parallel [
            (set (reg:SI 1 dx [orig:145 _59 ] [145])
                (plus:SI (reg:SI 1 dx [orig:143 _57 ] [143])
                    (const_int 50 [0x32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1191 221 {*addsi_1}
     (nil))
(insn 181 180 182 20 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:144 _58 ] [144])
                (const_int 32 [0x20])) [3 _58->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:145 _59 ] [145])) "function.c":1191 86 {*movsi_internal}
     (nil))
(insn 182 181 183 20 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1192 85 {*movdi_internal}
     (nil))
(insn 183 182 184 20 (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [302])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1192 85 {*movdi_internal}
     (nil))
(insn 184 183 185 20 (set (reg:SI 1 dx [303])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1192 86 {*movsi_internal}
     (nil))
(insn 185 184 186 20 (set (reg:DI 1 dx [orig:147 _61 ] [147])
        (sign_extend:DI (reg:SI 1 dx [303]))) "function.c":1192 149 {*extendsidi2_rex64}
     (nil))
(insn 186 185 187 20 (parallel [
            (set (reg:DI 1 dx [orig:148 _62 ] [148])
                (ashift:DI (reg:DI 1 dx [orig:147 _61 ] [147])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1192 551 {*ashldi3_1}
     (nil))
(insn 187 186 188 20 (parallel [
            (set (reg/f:DI 0 ax [orig:149 _63 ] [149])
                (plus:DI (reg/f:DI 0 ax [orig:146 _60 ] [146])
                    (reg:DI 1 dx [orig:148 _62 ] [148])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1192 222 {*adddi_1}
     (nil))
(insn 188 187 189 20 (set (reg/f:DI 1 dx [orig:150 _64 ] [150])
        (mem/f:DI (reg/f:DI 0 ax [orig:149 _63 ] [149]) [10 *_63+0 S8 A64])) "function.c":1192 85 {*movdi_internal}
     (nil))
(insn 189 188 190 20 (set (reg:SI 0 ax [304])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1192 86 {*movsi_internal}
     (nil))
(insn 190 189 191 20 (set (reg:DI 0 ax [orig:151 _65 ] [151])
        (sign_extend:DI (reg:SI 0 ax [304]))) "function.c":1192 149 {*extendsidi2_rex64}
     (nil))
(insn 191 190 192 20 (parallel [
            (set (reg/f:DI 0 ax [orig:152 _66 ] [152])
                (plus:DI (reg:DI 0 ax [orig:151 _65 ] [151])
                    (reg/f:DI 1 dx [orig:150 _64 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1192 222 {*adddi_1}
     (nil))
(insn 192 191 193 20 (set (mem:QI (reg/f:DI 0 ax [orig:152 _66 ] [152]) [0 *_66+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1192 88 {*movqi_internal}
     (nil))
(insn 193 192 566 20 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1193 85 {*movdi_internal}
     (nil))
(jump_insn 566 193 567 20 (set (pc)
        (label_ref 547)) "function.c":1193 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 567 566 196)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       17
;;              18
;;              19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 196 567 197 21 207 (nil) [3 uses])
(note 197 196 198 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1187 221 {*addsi_1}
     (nil))
;;  succ:       22 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU,DFS_BACK)
;;              16 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 305
(code_label 199 198 200 22 206 (nil) [1 uses])
(note 200 199 201 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 22 (set (reg/f:DI 0 ax [305])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1187 85 {*movdi_internal}
     (nil))
(insn 202 201 204 22 (set (reg:SI 0 ax [orig:153 _67 ] [153])
        (mem:SI (plus:DI (reg/f:DI 0 ax [305])
                (const_int 24056 [0x5df8])) [3 serwer_178(D)->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1187 86 {*movsi_internal}
     (nil))
(insn 204 202 205 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:153 _67 ] [153]))) "function.c":1187 11 {*cmpsi_1}
     (nil))
(jump_insn 205 204 206 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 203)
            (pc))) "function.c":1187 682 {*jcc}
     (nil)
 -> 203)
;;  succ:       17
;;              23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 206 205 207 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 568 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1197 86 {*movsi_internal}
     (nil))
(jump_insn 568 207 569 23 (set (pc)
        (label_ref 268)) "function.c":1197 683 {jump}
     (nil)
 -> 268)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 569 568 272)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       29
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 306 307 308 309
(code_label 272 569 210 24 211 (nil) [1 uses])
(note 210 272 211 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 24 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1199 85 {*movdi_internal}
     (nil))
(insn 212 211 213 24 (set (reg:SI 1 dx [308])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 213 212 214 24 (set (reg:DI 1 dx [307])
        (sign_extend:DI (reg:SI 1 dx [308]))) "function.c":1199 149 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 24 (parallel [
            (set (reg:DI 1 dx [309])
                (plus:DI (reg:DI 1 dx [307])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1199 222 {*adddi_1}
     (nil))
(insn 215 214 216 24 (set (reg:SI 0 ax [orig:154 _68 ] [154])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [309])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [306])) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 216 215 217 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:154 _68 ] [154])
            (const_int 0 [0]))) "function.c":1199 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 217 216 218 24 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "function.c":1199 682 {*jcc}
     (nil)
 -> 265)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155 310 311 312 313
(note 218 217 219 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 25 (set (reg/f:DI 0 ax [310])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1199 85 {*movdi_internal}
     (nil))
(insn 220 219 221 25 (set (reg:SI 1 dx [312])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 221 220 222 25 (set (reg:DI 1 dx [311])
        (sign_extend:DI (reg:SI 1 dx [312]))) "function.c":1199 149 {*extendsidi2_rex64}
     (nil))
(insn 222 221 223 25 (parallel [
            (set (reg:DI 1 dx [313])
                (plus:DI (reg:DI 1 dx [311])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1199 222 {*adddi_1}
     (nil))
(insn 223 222 224 25 (set (reg:SI 0 ax [orig:155 _69 ] [155])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [313])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [310])) [3 serwer_178(D)->skarb.dropped_coin S4 A64])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 224 223 225 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:155 _69 ] [155]))) "function.c":1199 11 {*cmpsi_1}
     (nil))
(jump_insn 225 224 226 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "function.c":1199 682 {*jcc}
     (nil)
 -> 265)
;;  succ:       26 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 156 314 315 316
(note 226 225 227 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 26 (set (reg/f:DI 0 ax [314])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1199 85 {*movdi_internal}
     (nil))
(insn 228 227 229 26 (set (reg:SI 1 dx [316])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 229 228 230 26 (set (reg:DI 1 dx [315])
        (sign_extend:DI (reg:SI 1 dx [316]))) "function.c":1199 149 {*extendsidi2_rex64}
     (nil))
(insn 230 229 231 26 (set (reg:SI 0 ax [orig:156 _70 ] [156])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [315])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [314]))
                (const_int 24068 [0x5e04])) [3 serwer_178(D)->skarb.dropped_coin S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 231 230 232 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:156 _70 ] [156]))) "function.c":1199 11 {*cmpsi_1}
     (nil))
(jump_insn 232 231 233 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "function.c":1199 682 {*jcc}
     (nil)
 -> 265)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 160 161 162 163 164 165 166 167 168 253 317 318 319 320 321 322 323 324 325 326 327 328 329
(note 233 232 234 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 27 (set (reg/f:DI 0 ax [317])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 235 234 236 27 (set (reg/f:DI 0 ax [orig:157 _71 ] [157])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [317])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 236 235 237 27 (set (reg:SI 2 cx [orig:158 _72 ] [158])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:157 _71 ] [157])
                (const_int 32 [0x20])) [3 _71->coins_carried+0 S4 A64])) "function.c":1201 86 {*movsi_internal}
     (nil))
(insn 237 236 238 27 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 238 237 239 27 (set (reg:SI 1 dx [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1201 86 {*movsi_internal}
     (nil))
(insn 239 238 240 27 (set (reg:DI 1 dx [319])
        (sign_extend:DI (reg:SI 1 dx [320]))) "function.c":1201 149 {*extendsidi2_rex64}
     (nil))
(insn 240 239 241 27 (parallel [
            (set (reg:DI 1 dx [321])
                (plus:DI (reg:DI 1 dx [319])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1201 222 {*adddi_1}
     (nil))
(insn 241 240 242 27 (set (reg:SI 1 dx [orig:159 _73 ] [159])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [321])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [318])) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1201 86 {*movsi_internal}
     (nil))
(insn 242 241 243 27 (set (reg/f:DI 0 ax [322])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 243 242 244 27 (set (reg/f:DI 0 ax [orig:160 _74 ] [160])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [322])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 244 243 245 27 (parallel [
            (set (reg:SI 1 dx [orig:161 _75 ] [161])
                (plus:SI (reg:SI 1 dx [orig:159 _73 ] [159])
                    (reg:SI 2 cx [orig:158 _72 ] [158])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1201 221 {*addsi_1}
     (nil))
(insn 245 244 246 27 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:160 _74 ] [160])
                (const_int 32 [0x20])) [3 _74->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:161 _75 ] [161])) "function.c":1201 86 {*movsi_internal}
     (nil))
(insn 246 245 247 27 (set (reg/f:DI 0 ax [323])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1202 85 {*movdi_internal}
     (nil))
(insn 247 246 248 27 (set (reg:SI 1 dx [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1202 86 {*movsi_internal}
     (nil))
(insn 248 247 249 27 (set (reg:DI 1 dx [324])
        (sign_extend:DI (reg:SI 1 dx [325]))) "function.c":1202 149 {*extendsidi2_rex64}
     (nil))
(insn 249 248 250 27 (parallel [
            (set (reg:DI 1 dx [326])
                (plus:DI (reg:DI 1 dx [324])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1202 222 {*adddi_1}
     (nil))
(insn 250 249 251 27 (set (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [326])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [323])) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])
        (const_int -1 [0xffffffffffffffff])) "function.c":1202 86 {*movsi_internal}
     (nil))
(insn 251 250 252 27 (set (reg/f:DI 0 ax [327])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1203 85 {*movdi_internal}
     (nil))
(insn 252 251 253 27 (set (reg/f:DI 0 ax [orig:162 _76 ] [162])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [327])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1203 85 {*movdi_internal}
     (nil))
(insn 253 252 254 27 (set (reg:SI 1 dx [328])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1203 86 {*movsi_internal}
     (nil))
(insn 254 253 255 27 (set (reg:DI 1 dx [orig:163 _77 ] [163])
        (sign_extend:DI (reg:SI 1 dx [328]))) "function.c":1203 149 {*extendsidi2_rex64}
     (nil))
(insn 255 254 256 27 (parallel [
            (set (reg:DI 1 dx [orig:164 _78 ] [164])
                (ashift:DI (reg:DI 1 dx [orig:163 _77 ] [163])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1203 551 {*ashldi3_1}
     (nil))
(insn 256 255 257 27 (parallel [
            (set (reg/f:DI 0 ax [orig:165 _79 ] [165])
                (plus:DI (reg/f:DI 0 ax [orig:162 _76 ] [162])
                    (reg:DI 1 dx [orig:164 _78 ] [164])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1203 222 {*adddi_1}
     (nil))
(insn 257 256 258 27 (set (reg/f:DI 1 dx [orig:166 _80 ] [166])
        (mem/f:DI (reg/f:DI 0 ax [orig:165 _79 ] [165]) [10 *_79+0 S8 A64])) "function.c":1203 85 {*movdi_internal}
     (nil))
(insn 258 257 259 27 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1203 86 {*movsi_internal}
     (nil))
(insn 259 258 260 27 (set (reg:DI 0 ax [orig:167 _81 ] [167])
        (sign_extend:DI (reg:SI 0 ax [329]))) "function.c":1203 149 {*extendsidi2_rex64}
     (nil))
(insn 260 259 261 27 (parallel [
            (set (reg/f:DI 0 ax [orig:168 _82 ] [168])
                (plus:DI (reg:DI 0 ax [orig:167 _81 ] [167])
                    (reg/f:DI 1 dx [orig:166 _80 ] [166])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1203 222 {*adddi_1}
     (nil))
(insn 261 260 262 27 (set (mem:QI (reg/f:DI 0 ax [orig:168 _82 ] [168]) [0 *_82+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1203 88 {*movqi_internal}
     (nil))
(insn 262 261 570 27 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1204 85 {*movdi_internal}
     (nil))
(jump_insn 570 262 571 27 (set (pc)
        (label_ref 547)) "function.c":1204 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 571 570 265)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       24
;;              25
;;              26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 265 571 266 28 210 (nil) [3 uses])
(note 266 265 267 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1197 221 {*addsi_1}
     (nil))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              23 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 330
(code_label 268 267 269 29 209 (nil) [1 uses])
(note 269 268 270 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 270 269 271 29 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1197 85 {*movdi_internal}
     (nil))
(insn 271 270 273 29 (set (reg:SI 0 ax [orig:169 _83 ] [169])
        (mem:SI (plus:DI (reg/f:DI 0 ax [330])
                (const_int 24060 [0x5dfc])) [3 serwer_178(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1197 86 {*movsi_internal}
     (nil))
(insn 273 271 274 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:169 _83 ] [169]))) "function.c":1197 11 {*cmpsi_1}
     (nil))
(jump_insn 274 273 275 29 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 272)
            (pc))) "function.c":1197 682 {*jcc}
     (nil)
 -> 272)
;;  succ:       24
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 170 171 331 332 333 334
(note 275 274 276 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 30 (set (reg/f:DI 0 ax [331])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1208 85 {*movdi_internal}
     (nil))
(insn 277 276 278 30 (set (reg/f:DI 0 ax [orig:170 _84 ] [170])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [331])
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1208 85 {*movdi_internal}
     (nil))
(insn 278 277 279 30 (set (reg:SI 0 ax [332])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:170 _84 ] [170])
                (const_int 16 [0x10])) [3 _84->y_current+0 S4 A64])) "function.c":1208 86 {*movsi_internal}
     (nil))
(insn 279 278 280 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
        (reg:SI 0 ax [332])) "function.c":1208 86 {*movsi_internal}
     (nil))
(insn 280 279 281 30 (set (reg/f:DI 0 ax [333])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1209 85 {*movdi_internal}
     (nil))
(insn 281 280 282 30 (set (reg/f:DI 0 ax [orig:171 _85 ] [171])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [333])
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1209 85 {*movdi_internal}
     (nil))
(insn 282 281 283 30 (set (reg:SI 0 ax [334])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:171 _85 ] [171])
                (const_int 12 [0xc])) [3 _85->x_current+0 S4 A32])) "function.c":1209 86 {*movsi_internal}
     (nil))
(insn 283 282 284 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
        (reg:SI 0 ax [334])) "function.c":1209 86 {*movsi_internal}
     (nil))
(insn 284 283 572 30 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1211 86 {*movsi_internal}
     (nil))
(jump_insn 572 284 573 30 (set (pc)
        (label_ref 339)) "function.c":1211 683 {jump}
     (nil)
 -> 339)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 573 572 343)
;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       36
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 172 173 174 175 176 177 178 179 335 336 337
(code_label 343 573 287 31 214 (nil) [1 uses])
(note 287 343 288 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 31 (set (reg/f:DI 0 ax [335])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 289 288 290 31 (set (reg/f:DI 0 ax [orig:172 _86 ] [172])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [335])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 290 289 291 31 (set (reg:SI 1 dx [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 291 290 292 31 (set (reg:DI 1 dx [orig:173 _87 ] [173])
        (sign_extend:DI (reg:SI 1 dx [336]))) "function.c":1213 149 {*extendsidi2_rex64}
     (nil))
(insn 292 291 293 31 (parallel [
            (set (reg:DI 1 dx [orig:174 _88 ] [174])
                (ashift:DI (reg:DI 1 dx [orig:173 _87 ] [173])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 551 {*ashldi3_1}
     (nil))
(insn 293 292 294 31 (parallel [
            (set (reg/f:DI 0 ax [orig:175 _89 ] [175])
                (plus:DI (reg/f:DI 0 ax [orig:172 _86 ] [172])
                    (reg:DI 1 dx [orig:174 _88 ] [174])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 222 {*adddi_1}
     (nil))
(insn 294 293 295 31 (set (reg/f:DI 1 dx [orig:176 _90 ] [176])
        (mem/f:DI (reg/f:DI 0 ax [orig:175 _89 ] [175]) [10 *_89+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 295 294 296 31 (set (reg:SI 0 ax [337])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 296 295 297 31 (set (reg:DI 0 ax [orig:177 _91 ] [177])
        (sign_extend:DI (reg:SI 0 ax [337]))) "function.c":1213 149 {*extendsidi2_rex64}
     (nil))
(insn 297 296 298 31 (parallel [
            (set (reg/f:DI 0 ax [orig:178 _92 ] [178])
                (plus:DI (reg:DI 0 ax [orig:177 _91 ] [177])
                    (reg/f:DI 1 dx [orig:176 _90 ] [176])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 222 {*adddi_1}
     (nil))
(insn 298 297 299 31 (set (reg:QI 0 ax [orig:179 _93 ] [179])
        (mem:QI (reg/f:DI 0 ax [orig:178 _92 ] [178]) [0 *_92+0 S1 A8])) "function.c":1213 88 {*movqi_internal}
     (nil))
(insn 299 298 300 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:179 _93 ] [179])
            (const_int 99 [0x63]))) "function.c":1213 9 {*cmpqi_1}
     (nil))
(jump_insn 300 299 301 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) "function.c":1213 682 {*jcc}
     (nil)
 -> 336)
;;  succ:       32 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 180 338 339 340 341
(note 301 300 302 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 32 (set (reg/f:DI 0 ax [338])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 303 302 304 32 (set (reg:SI 1 dx [340])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 304 303 305 32 (set (reg:DI 1 dx [339])
        (sign_extend:DI (reg:SI 1 dx [340]))) "function.c":1213 149 {*extendsidi2_rex64}
     (nil))
(insn 305 304 306 32 (parallel [
            (set (reg:DI 1 dx [341])
                (plus:DI (reg:DI 1 dx [339])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 222 {*adddi_1}
     (nil))
(insn 306 305 307 32 (set (reg:SI 0 ax [orig:180 _94 ] [180])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [341])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [338])) [3 serwer_178(D)->skarb.one_coin S4 A64])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 307 306 308 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:180 _94 ] [180]))) "function.c":1213 11 {*cmpsi_1}
     (nil))
(jump_insn 308 307 309 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) "function.c":1213 682 {*jcc}
     (nil)
 -> 336)
;;  succ:       33 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 181 342 343 344
(note 309 308 310 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 33 (set (reg/f:DI 0 ax [342])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 311 310 312 33 (set (reg:SI 1 dx [344])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 312 311 313 33 (set (reg:DI 1 dx [343])
        (sign_extend:DI (reg:SI 1 dx [344]))) "function.c":1213 149 {*extendsidi2_rex64}
     (nil))
(insn 313 312 314 33 (set (reg:SI 0 ax [orig:181 _95 ] [181])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [343])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [342]))
                (const_int 52 [0x34])) [3 serwer_178(D)->skarb.one_coin S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 314 313 315 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:181 _95 ] [181]))) "function.c":1213 11 {*cmpsi_1}
     (nil))
(jump_insn 315 314 316 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) "function.c":1213 682 {*jcc}
     (nil)
 -> 336)
;;  succ:       34 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182 183 184 185 186 187 188 189 190 191 253 345 346 347 348
(note 316 315 317 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 34 (set (reg/f:DI 0 ax [345])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1215 85 {*movdi_internal}
     (nil))
(insn 318 317 319 34 (set (reg/f:DI 0 ax [orig:182 _96 ] [182])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [345])
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1215 85 {*movdi_internal}
     (nil))
(insn 319 318 320 34 (set (reg:SI 1 dx [orig:183 _97 ] [183])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:182 _96 ] [182])
                (const_int 32 [0x20])) [3 _96->coins_carried+0 S4 A64])) "function.c":1215 86 {*movsi_internal}
     (nil))
(insn 320 319 321 34 (parallel [
            (set (reg:SI 1 dx [orig:184 _98 ] [184])
                (plus:SI (reg:SI 1 dx [orig:183 _97 ] [183])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1215 221 {*addsi_1}
     (nil))
(insn 321 320 322 34 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:182 _96 ] [182])
                (const_int 32 [0x20])) [3 _96->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:184 _98 ] [184])) "function.c":1215 86 {*movsi_internal}
     (nil))
(insn 322 321 323 34 (set (reg/f:DI 0 ax [346])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1216 85 {*movdi_internal}
     (nil))
(insn 323 322 324 34 (set (reg/f:DI 0 ax [orig:185 _99 ] [185])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [346])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1216 85 {*movdi_internal}
     (nil))
(insn 324 323 325 34 (set (reg:SI 1 dx [347])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1216 86 {*movsi_internal}
     (nil))
(insn 325 324 326 34 (set (reg:DI 1 dx [orig:186 _100 ] [186])
        (sign_extend:DI (reg:SI 1 dx [347]))) "function.c":1216 149 {*extendsidi2_rex64}
     (nil))
(insn 326 325 327 34 (parallel [
            (set (reg:DI 1 dx [orig:187 _101 ] [187])
                (ashift:DI (reg:DI 1 dx [orig:186 _100 ] [186])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1216 551 {*ashldi3_1}
     (nil))
(insn 327 326 328 34 (parallel [
            (set (reg/f:DI 0 ax [orig:188 _102 ] [188])
                (plus:DI (reg/f:DI 0 ax [orig:185 _99 ] [185])
                    (reg:DI 1 dx [orig:187 _101 ] [187])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1216 222 {*adddi_1}
     (nil))
(insn 328 327 329 34 (set (reg/f:DI 1 dx [orig:189 _103 ] [189])
        (mem/f:DI (reg/f:DI 0 ax [orig:188 _102 ] [188]) [10 *_102+0 S8 A64])) "function.c":1216 85 {*movdi_internal}
     (nil))
(insn 329 328 330 34 (set (reg:SI 0 ax [348])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1216 86 {*movsi_internal}
     (nil))
(insn 330 329 331 34 (set (reg:DI 0 ax [orig:190 _104 ] [190])
        (sign_extend:DI (reg:SI 0 ax [348]))) "function.c":1216 149 {*extendsidi2_rex64}
     (nil))
(insn 331 330 332 34 (parallel [
            (set (reg/f:DI 0 ax [orig:191 _105 ] [191])
                (plus:DI (reg:DI 0 ax [orig:190 _104 ] [190])
                    (reg/f:DI 1 dx [orig:189 _103 ] [189])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1216 222 {*adddi_1}
     (nil))
(insn 332 331 333 34 (set (mem:QI (reg/f:DI 0 ax [orig:191 _105 ] [191]) [0 *_105+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1216 88 {*movqi_internal}
     (nil))
(insn 333 332 574 34 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1217 85 {*movdi_internal}
     (nil))
(jump_insn 574 333 575 34 (set (pc)
        (label_ref 547)) "function.c":1217 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 575 574 336)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       31
;;              32
;;              33
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 336 575 337 35 213 (nil) [3 uses])
(note 337 336 338 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 338 337 339 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1211 221 {*addsi_1}
     (nil))
;;  succ:       36 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU,DFS_BACK)
;;              30 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 192 349
(code_label 339 338 340 36 212 (nil) [1 uses])
(note 340 339 341 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 341 340 342 36 (set (reg/f:DI 0 ax [349])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1211 85 {*movdi_internal}
     (nil))
(insn 342 341 344 36 (set (reg:SI 0 ax [orig:192 _106 ] [192])
        (mem:SI (plus:DI (reg/f:DI 0 ax [349])
                (const_int 8048 [0x1f70])) [3 serwer_178(D)->skarb.count_one_coin+0 S4 A64])) "function.c":1211 86 {*movsi_internal}
     (nil))
(insn 344 342 345 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:192 _106 ] [192]))) "function.c":1211 11 {*cmpsi_1}
     (nil))
(jump_insn 345 344 346 36 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) "function.c":1211 682 {*jcc}
     (nil)
 -> 343)
;;  succ:       31
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 346 345 347 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 576 37 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1221 86 {*movsi_internal}
     (nil))
(jump_insn 576 347 577 37 (set (pc)
        (label_ref 404)) "function.c":1221 683 {jump}
     (nil)
 -> 404)
;;  succ:       43 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 577 576 408)
;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       43
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 193 194 195 196 197 198 199 200 350 351 352
(code_label 408 577 350 38 217 (nil) [1 uses])
(note 350 408 351 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 38 (set (reg/f:DI 0 ax [350])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 352 351 353 38 (set (reg/f:DI 0 ax [orig:193 _107 ] [193])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [350])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 353 352 354 38 (set (reg:SI 1 dx [351])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 354 353 355 38 (set (reg:DI 1 dx [orig:194 _108 ] [194])
        (sign_extend:DI (reg:SI 1 dx [351]))) "function.c":1223 149 {*extendsidi2_rex64}
     (nil))
(insn 355 354 356 38 (parallel [
            (set (reg:DI 1 dx [orig:195 _109 ] [195])
                (ashift:DI (reg:DI 1 dx [orig:194 _108 ] [194])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 551 {*ashldi3_1}
     (nil))
(insn 356 355 357 38 (parallel [
            (set (reg/f:DI 0 ax [orig:196 _110 ] [196])
                (plus:DI (reg/f:DI 0 ax [orig:193 _107 ] [193])
                    (reg:DI 1 dx [orig:195 _109 ] [195])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 222 {*adddi_1}
     (nil))
(insn 357 356 358 38 (set (reg/f:DI 1 dx [orig:197 _111 ] [197])
        (mem/f:DI (reg/f:DI 0 ax [orig:196 _110 ] [196]) [10 *_110+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 358 357 359 38 (set (reg:SI 0 ax [352])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 359 358 360 38 (set (reg:DI 0 ax [orig:198 _112 ] [198])
        (sign_extend:DI (reg:SI 0 ax [352]))) "function.c":1223 149 {*extendsidi2_rex64}
     (nil))
(insn 360 359 361 38 (parallel [
            (set (reg/f:DI 0 ax [orig:199 _113 ] [199])
                (plus:DI (reg:DI 0 ax [orig:198 _112 ] [198])
                    (reg/f:DI 1 dx [orig:197 _111 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 222 {*adddi_1}
     (nil))
(insn 361 360 362 38 (set (reg:QI 0 ax [orig:200 _114 ] [200])
        (mem:QI (reg/f:DI 0 ax [orig:199 _113 ] [199]) [0 *_113+0 S1 A8])) "function.c":1223 88 {*movqi_internal}
     (nil))
(insn 362 361 363 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:200 _114 ] [200])
            (const_int 116 [0x74]))) "function.c":1223 9 {*cmpqi_1}
     (nil))
(jump_insn 363 362 364 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 401)
            (pc))) "function.c":1223 682 {*jcc}
     (nil)
 -> 401)
;;  succ:       39 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 201 353 354 355 356
(note 364 363 365 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 365 364 366 39 (set (reg/f:DI 0 ax [353])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 366 365 367 39 (set (reg:SI 1 dx [355])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 367 366 368 39 (set (reg:DI 1 dx [354])
        (sign_extend:DI (reg:SI 1 dx [355]))) "function.c":1223 149 {*extendsidi2_rex64}
     (nil))
(insn 368 367 369 39 (parallel [
            (set (reg:DI 1 dx [356])
                (plus:DI (reg:DI 1 dx [354])
                    (const_int 1006 [0x3ee])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 222 {*adddi_1}
     (nil))
(insn 369 368 370 39 (set (reg:SI 0 ax [orig:201 _115 ] [201])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [356])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [353]))
                (const_int 4 [0x4])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 370 369 371 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:201 _115 ] [201]))) "function.c":1223 11 {*cmpsi_1}
     (nil))
(jump_insn 371 370 372 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 401)
            (pc))) "function.c":1223 682 {*jcc}
     (nil)
 -> 401)
;;  succ:       40 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 202 357 358 359
(note 372 371 373 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 373 372 374 40 (set (reg/f:DI 0 ax [357])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 374 373 375 40 (set (reg:SI 1 dx [359])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 375 374 376 40 (set (reg:DI 1 dx [358])
        (sign_extend:DI (reg:SI 1 dx [359]))) "function.c":1223 149 {*extendsidi2_rex64}
     (nil))
(insn 376 375 377 40 (set (reg:SI 0 ax [orig:202 _116 ] [202])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [358])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [357]))
                (const_int 8056 [0x1f78])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 377 376 378 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:202 _116 ] [202]))) "function.c":1223 11 {*cmpsi_1}
     (nil))
(jump_insn 378 377 379 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 401)
            (pc))) "function.c":1223 682 {*jcc}
     (nil)
 -> 401)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203 204 205 206 207 208 209 210 211 212 213 253 360 361 362 363 364
(note 379 378 380 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 381 41 (set (reg/f:DI 0 ax [360])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (nil))
(insn 381 380 382 41 (set (reg/f:DI 0 ax [orig:203 _117 ] [203])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [360])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (nil))
(insn 382 381 383 41 (set (reg:SI 1 dx [orig:204 _118 ] [204])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:203 _117 ] [203])
                (const_int 32 [0x20])) [3 _117->coins_carried+0 S4 A64])) "function.c":1225 86 {*movsi_internal}
     (nil))
(insn 383 382 384 41 (set (reg/f:DI 0 ax [361])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (nil))
(insn 384 383 385 41 (set (reg/f:DI 0 ax [orig:205 _119 ] [205])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [361])
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (nil))
(insn 385 384 386 41 (parallel [
            (set (reg:SI 1 dx [orig:206 _120 ] [206])
                (plus:SI (reg:SI 1 dx [orig:204 _118 ] [204])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1225 221 {*addsi_1}
     (nil))
(insn 386 385 387 41 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:205 _119 ] [205])
                (const_int 32 [0x20])) [3 _119->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:206 _120 ] [206])) "function.c":1225 86 {*movsi_internal}
     (nil))
(insn 387 386 388 41 (set (reg/f:DI 0 ax [362])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1226 85 {*movdi_internal}
     (nil))
(insn 388 387 389 41 (set (reg/f:DI 0 ax [orig:207 _121 ] [207])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [362])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1226 85 {*movdi_internal}
     (nil))
(insn 389 388 390 41 (set (reg:SI 1 dx [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1226 86 {*movsi_internal}
     (nil))
(insn 390 389 391 41 (set (reg:DI 1 dx [orig:208 _122 ] [208])
        (sign_extend:DI (reg:SI 1 dx [363]))) "function.c":1226 149 {*extendsidi2_rex64}
     (nil))
(insn 391 390 392 41 (parallel [
            (set (reg:DI 1 dx [orig:209 _123 ] [209])
                (ashift:DI (reg:DI 1 dx [orig:208 _122 ] [208])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1226 551 {*ashldi3_1}
     (nil))
(insn 392 391 393 41 (parallel [
            (set (reg/f:DI 0 ax [orig:210 _124 ] [210])
                (plus:DI (reg/f:DI 0 ax [orig:207 _121 ] [207])
                    (reg:DI 1 dx [orig:209 _123 ] [209])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1226 222 {*adddi_1}
     (nil))
(insn 393 392 394 41 (set (reg/f:DI 1 dx [orig:211 _125 ] [211])
        (mem/f:DI (reg/f:DI 0 ax [orig:210 _124 ] [210]) [10 *_124+0 S8 A64])) "function.c":1226 85 {*movdi_internal}
     (nil))
(insn 394 393 395 41 (set (reg:SI 0 ax [364])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1226 86 {*movsi_internal}
     (nil))
(insn 395 394 396 41 (set (reg:DI 0 ax [orig:212 _126 ] [212])
        (sign_extend:DI (reg:SI 0 ax [364]))) "function.c":1226 149 {*extendsidi2_rex64}
     (nil))
(insn 396 395 397 41 (parallel [
            (set (reg/f:DI 0 ax [orig:213 _127 ] [213])
                (plus:DI (reg:DI 0 ax [orig:212 _126 ] [212])
                    (reg/f:DI 1 dx [orig:211 _125 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1226 222 {*adddi_1}
     (nil))
(insn 397 396 398 41 (set (mem:QI (reg/f:DI 0 ax [orig:213 _127 ] [213]) [0 *_127+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1226 88 {*movqi_internal}
     (nil))
(insn 398 397 578 41 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1227 85 {*movdi_internal}
     (nil))
(jump_insn 578 398 579 41 (set (pc)
        (label_ref 547)) "function.c":1227 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 579 578 401)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       38
;;              39
;;              40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 401 579 402 42 216 (nil) [3 uses])
(note 402 401 403 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 42 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1221 221 {*addsi_1}
     (nil))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              37 [always] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 214 365
(code_label 404 403 405 43 215 (nil) [1 uses])
(note 405 404 406 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 43 (set (reg/f:DI 0 ax [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1221 85 {*movdi_internal}
     (nil))
(insn 407 406 409 43 (set (reg:SI 0 ax [orig:214 _128 ] [214])
        (mem:SI (plus:DI (reg/f:DI 0 ax [365])
                (const_int 16052 [0x3eb4])) [3 serwer_178(D)->skarb.count_treasure_coin+0 S4 A32])) "function.c":1221 86 {*movsi_internal}
     (nil))
(insn 409 407 410 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:214 _128 ] [214]))) "function.c":1221 11 {*cmpsi_1}
     (nil))
(jump_insn 410 409 411 43 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 408)
            (pc))) "function.c":1221 682 {*jcc}
     (nil)
 -> 408)
;;  succ:       38
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 411 410 412 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 412 411 580 44 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1231 86 {*movsi_internal}
     (nil))
(jump_insn 580 412 581 44 (set (pc)
        (label_ref 469)) "function.c":1231 683 {jump}
     (nil)
 -> 469)
;;  succ:       50 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 581 580 473)
;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       50
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 215 216 217 218 219 220 221 222 366 367 368
(code_label 473 581 415 45 220 (nil) [1 uses])
(note 415 473 416 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 416 415 417 45 (set (reg/f:DI 0 ax [366])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 417 416 418 45 (set (reg/f:DI 0 ax [orig:215 _129 ] [215])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [366])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 418 417 419 45 (set (reg:SI 1 dx [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 419 418 420 45 (set (reg:DI 1 dx [orig:216 _130 ] [216])
        (sign_extend:DI (reg:SI 1 dx [367]))) "function.c":1233 149 {*extendsidi2_rex64}
     (nil))
(insn 420 419 421 45 (parallel [
            (set (reg:DI 1 dx [orig:217 _131 ] [217])
                (ashift:DI (reg:DI 1 dx [orig:216 _130 ] [216])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 551 {*ashldi3_1}
     (nil))
(insn 421 420 422 45 (parallel [
            (set (reg/f:DI 0 ax [orig:218 _132 ] [218])
                (plus:DI (reg/f:DI 0 ax [orig:215 _129 ] [215])
                    (reg:DI 1 dx [orig:217 _131 ] [217])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 222 {*adddi_1}
     (nil))
(insn 422 421 423 45 (set (reg/f:DI 1 dx [orig:219 _133 ] [219])
        (mem/f:DI (reg/f:DI 0 ax [orig:218 _132 ] [218]) [10 *_132+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 423 422 424 45 (set (reg:SI 0 ax [368])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 424 423 425 45 (set (reg:DI 0 ax [orig:220 _134 ] [220])
        (sign_extend:DI (reg:SI 0 ax [368]))) "function.c":1233 149 {*extendsidi2_rex64}
     (nil))
(insn 425 424 426 45 (parallel [
            (set (reg/f:DI 0 ax [orig:221 _135 ] [221])
                (plus:DI (reg:DI 0 ax [orig:220 _134 ] [220])
                    (reg/f:DI 1 dx [orig:219 _133 ] [219])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 222 {*adddi_1}
     (nil))
(insn 426 425 427 45 (set (reg:QI 0 ax [orig:222 _136 ] [222])
        (mem:QI (reg/f:DI 0 ax [orig:221 _135 ] [221]) [0 *_135+0 S1 A8])) "function.c":1233 88 {*movqi_internal}
     (nil))
(insn 427 426 428 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:222 _136 ] [222])
            (const_int 84 [0x54]))) "function.c":1233 9 {*cmpqi_1}
     (nil))
(jump_insn 428 427 429 45 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 466)
            (pc))) "function.c":1233 682 {*jcc}
     (nil)
 -> 466)
;;  succ:       46 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 223 369 370 371 372
(note 429 428 430 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 430 429 431 46 (set (reg/f:DI 0 ax [369])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 431 430 432 46 (set (reg:SI 1 dx [371])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 432 431 433 46 (set (reg:DI 1 dx [370])
        (sign_extend:DI (reg:SI 1 dx [371]))) "function.c":1233 149 {*extendsidi2_rex64}
     (nil))
(insn 433 432 434 46 (parallel [
            (set (reg:DI 1 dx [372])
                (plus:DI (reg:DI 1 dx [370])
                    (const_int 2006 [0x7d6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 222 {*adddi_1}
     (nil))
(insn 434 433 435 46 (set (reg:SI 0 ax [orig:223 _137 ] [223])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [372])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [369]))
                (const_int 8 [0x8])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A64])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 435 434 436 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:223 _137 ] [223]))) "function.c":1233 11 {*cmpsi_1}
     (nil))
(jump_insn 436 435 437 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 466)
            (pc))) "function.c":1233 682 {*jcc}
     (nil)
 -> 466)
;;  succ:       47 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 373 374 375
(note 437 436 438 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 438 437 439 47 (set (reg/f:DI 0 ax [373])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 439 438 440 47 (set (reg:SI 1 dx [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 440 439 441 47 (set (reg:DI 1 dx [374])
        (sign_extend:DI (reg:SI 1 dx [375]))) "function.c":1233 149 {*extendsidi2_rex64}
     (nil))
(insn 441 440 442 47 (set (reg:SI 0 ax [orig:224 _138 ] [224])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [374])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [373]))
                (const_int 16060 [0x3ebc])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 442 441 443 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:224 _138 ] [224]))) "function.c":1233 11 {*cmpsi_1}
     (nil))
(jump_insn 443 442 444 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 466)
            (pc))) "function.c":1233 682 {*jcc}
     (nil)
 -> 466)
;;  succ:       48 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 225 226 227 228 229 230 231 232 233 234 235 253 376 377 378 379 380
(note 444 443 445 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 445 444 446 48 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (nil))
(insn 446 445 447 48 (set (reg/f:DI 0 ax [orig:225 _139 ] [225])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [376])
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (nil))
(insn 447 446 448 48 (set (reg:SI 1 dx [orig:226 _140 ] [226])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:225 _139 ] [225])
                (const_int 32 [0x20])) [3 _139->coins_carried+0 S4 A64])) "function.c":1235 86 {*movsi_internal}
     (nil))
(insn 448 447 449 48 (set (reg/f:DI 0 ax [377])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (nil))
(insn 449 448 450 48 (set (reg/f:DI 0 ax [orig:227 _141 ] [227])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [377])
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (nil))
(insn 450 449 451 48 (parallel [
            (set (reg:SI 1 dx [orig:228 _142 ] [228])
                (plus:SI (reg:SI 1 dx [orig:226 _140 ] [226])
                    (const_int 50 [0x32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1235 221 {*addsi_1}
     (nil))
(insn 451 450 452 48 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:227 _141 ] [227])
                (const_int 32 [0x20])) [3 _141->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:228 _142 ] [228])) "function.c":1235 86 {*movsi_internal}
     (nil))
(insn 452 451 453 48 (set (reg/f:DI 0 ax [378])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1236 85 {*movdi_internal}
     (nil))
(insn 453 452 454 48 (set (reg/f:DI 0 ax [orig:229 _143 ] [229])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [378])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1236 85 {*movdi_internal}
     (nil))
(insn 454 453 455 48 (set (reg:SI 1 dx [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1236 86 {*movsi_internal}
     (nil))
(insn 455 454 456 48 (set (reg:DI 1 dx [orig:230 _144 ] [230])
        (sign_extend:DI (reg:SI 1 dx [379]))) "function.c":1236 149 {*extendsidi2_rex64}
     (nil))
(insn 456 455 457 48 (parallel [
            (set (reg:DI 1 dx [orig:231 _145 ] [231])
                (ashift:DI (reg:DI 1 dx [orig:230 _144 ] [230])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1236 551 {*ashldi3_1}
     (nil))
(insn 457 456 458 48 (parallel [
            (set (reg/f:DI 0 ax [orig:232 _146 ] [232])
                (plus:DI (reg/f:DI 0 ax [orig:229 _143 ] [229])
                    (reg:DI 1 dx [orig:231 _145 ] [231])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1236 222 {*adddi_1}
     (nil))
(insn 458 457 459 48 (set (reg/f:DI 1 dx [orig:233 _147 ] [233])
        (mem/f:DI (reg/f:DI 0 ax [orig:232 _146 ] [232]) [10 *_146+0 S8 A64])) "function.c":1236 85 {*movdi_internal}
     (nil))
(insn 459 458 460 48 (set (reg:SI 0 ax [380])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1236 86 {*movsi_internal}
     (nil))
(insn 460 459 461 48 (set (reg:DI 0 ax [orig:234 _148 ] [234])
        (sign_extend:DI (reg:SI 0 ax [380]))) "function.c":1236 149 {*extendsidi2_rex64}
     (nil))
(insn 461 460 462 48 (parallel [
            (set (reg/f:DI 0 ax [orig:235 _149 ] [235])
                (plus:DI (reg:DI 0 ax [orig:234 _148 ] [234])
                    (reg/f:DI 1 dx [orig:233 _147 ] [233])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1236 222 {*adddi_1}
     (nil))
(insn 462 461 463 48 (set (mem:QI (reg/f:DI 0 ax [orig:235 _149 ] [235]) [0 *_149+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1236 88 {*movqi_internal}
     (nil))
(insn 463 462 582 48 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1237 85 {*movdi_internal}
     (nil))
(jump_insn 582 463 583 48 (set (pc)
        (label_ref 547)) "function.c":1237 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 583 582 466)
;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 50, flags: (RTL, MODIFIED)
;;  pred:       45
;;              46
;;              47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 466 583 467 49 219 (nil) [3 uses])
(note 467 466 468 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 468 467 469 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1231 221 {*addsi_1}
     (nil))
;;  succ:       50 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, maybe hot
;;  prev block 49, next block 51, flags: (RTL, MODIFIED)
;;  pred:       49 (FALLTHRU,DFS_BACK)
;;              44 [always] 
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 381
(code_label 469 468 470 50 218 (nil) [1 uses])
(note 470 469 471 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 471 470 472 50 (set (reg/f:DI 0 ax [381])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1231 85 {*movdi_internal}
     (nil))
(insn 472 471 474 50 (set (reg:SI 0 ax [orig:236 _150 ] [236])
        (mem:SI (plus:DI (reg/f:DI 0 ax [381])
                (const_int 24056 [0x5df8])) [3 serwer_178(D)->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1231 86 {*movsi_internal}
     (nil))
(insn 474 472 475 50 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:236 _150 ] [236]))) "function.c":1231 11 {*cmpsi_1}
     (nil))
(jump_insn 475 474 476 50 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 473)
            (pc))) "function.c":1231 682 {*jcc}
     (nil)
 -> 473)
;;  succ:       45
;;              51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL, MODIFIED)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 476 475 477 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 477 476 584 51 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1241 86 {*movsi_internal}
     (nil))
(jump_insn 584 477 585 51 (set (pc)
        (label_ref 538)) "function.c":1241 683 {jump}
     (nil)
 -> 538)
;;  succ:       57 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 585 584 542)
;; basic block 52, loop depth 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL, MODIFIED)
;;  pred:       57
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 237 382 383 384 385
(code_label 542 585 480 52 223 (nil) [1 uses])
(note 480 542 481 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 481 480 482 52 (set (reg/f:DI 0 ax [382])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1243 85 {*movdi_internal}
     (nil))
(insn 482 481 483 52 (set (reg:SI 1 dx [384])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 483 482 484 52 (set (reg:DI 1 dx [383])
        (sign_extend:DI (reg:SI 1 dx [384]))) "function.c":1243 149 {*extendsidi2_rex64}
     (nil))
(insn 484 483 485 52 (parallel [
            (set (reg:DI 1 dx [385])
                (plus:DI (reg:DI 1 dx [383])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1243 222 {*adddi_1}
     (nil))
(insn 485 484 486 52 (set (reg:SI 0 ax [orig:237 _151 ] [237])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [385])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [382])) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 486 485 487 52 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:237 _151 ] [237])
            (const_int 0 [0]))) "function.c":1243 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 487 486 488 52 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) "function.c":1243 682 {*jcc}
     (nil)
 -> 535)
;;  succ:       53 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, maybe hot
;;  prev block 52, next block 54, flags: (RTL, MODIFIED)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 386 387 388 389
(note 488 487 489 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 53 (set (reg/f:DI 0 ax [386])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1243 85 {*movdi_internal}
     (nil))
(insn 490 489 491 53 (set (reg:SI 1 dx [388])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 491 490 492 53 (set (reg:DI 1 dx [387])
        (sign_extend:DI (reg:SI 1 dx [388]))) "function.c":1243 149 {*extendsidi2_rex64}
     (nil))
(insn 492 491 493 53 (parallel [
            (set (reg:DI 1 dx [389])
                (plus:DI (reg:DI 1 dx [387])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1243 222 {*adddi_1}
     (nil))
(insn 493 492 494 53 (set (reg:SI 0 ax [orig:238 _152 ] [238])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [389])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [386])) [3 serwer_178(D)->skarb.dropped_coin S4 A64])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 494 493 495 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 0 ax [orig:238 _152 ] [238]))) "function.c":1243 11 {*cmpsi_1}
     (nil))
(jump_insn 495 494 496 53 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) "function.c":1243 682 {*jcc}
     (nil)
 -> 535)
;;  succ:       54 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, maybe hot
;;  prev block 53, next block 55, flags: (RTL, MODIFIED)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 390 391 392
(note 496 495 497 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 497 496 498 54 (set (reg/f:DI 0 ax [390])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1243 85 {*movdi_internal}
     (nil))
(insn 498 497 499 54 (set (reg:SI 1 dx [392])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 499 498 500 54 (set (reg:DI 1 dx [391])
        (sign_extend:DI (reg:SI 1 dx [392]))) "function.c":1243 149 {*extendsidi2_rex64}
     (nil))
(insn 500 499 501 54 (set (reg:SI 0 ax [orig:239 _153 ] [239])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [391])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [390]))
                (const_int 24068 [0x5e04])) [3 serwer_178(D)->skarb.dropped_coin S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 501 500 502 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 0 ax [orig:239 _153 ] [239]))) "function.c":1243 11 {*cmpsi_1}
     (nil))
(jump_insn 502 501 503 54 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) "function.c":1243 682 {*jcc}
     (nil)
 -> 535)
;;  succ:       55 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, maybe hot
;;  prev block 54, next block 56, flags: (RTL, MODIFIED)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 241 242 243 244 245 246 247 248 249 250 251 253 393 394 395 396 397 398 399 400 401 402 403 404 405
(note 503 502 504 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 504 503 505 55 (set (reg/f:DI 0 ax [393])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 505 504 506 55 (set (reg/f:DI 0 ax [orig:240 _154 ] [240])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [393])
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 506 505 507 55 (set (reg:SI 2 cx [orig:241 _155 ] [241])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:240 _154 ] [240])
                (const_int 32 [0x20])) [3 _154->coins_carried+0 S4 A64])) "function.c":1245 86 {*movsi_internal}
     (nil))
(insn 507 506 508 55 (set (reg/f:DI 0 ax [394])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 508 507 509 55 (set (reg:SI 1 dx [396])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1245 86 {*movsi_internal}
     (nil))
(insn 509 508 510 55 (set (reg:DI 1 dx [395])
        (sign_extend:DI (reg:SI 1 dx [396]))) "function.c":1245 149 {*extendsidi2_rex64}
     (nil))
(insn 510 509 511 55 (parallel [
            (set (reg:DI 1 dx [397])
                (plus:DI (reg:DI 1 dx [395])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1245 222 {*adddi_1}
     (nil))
(insn 511 510 512 55 (set (reg:SI 1 dx [orig:242 _156 ] [242])
        (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [397])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [394])) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1245 86 {*movsi_internal}
     (nil))
(insn 512 511 513 55 (set (reg/f:DI 0 ax [398])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 513 512 514 55 (set (reg/f:DI 0 ax [orig:243 _157 ] [243])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [398])
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 514 513 515 55 (parallel [
            (set (reg:SI 1 dx [orig:244 _158 ] [244])
                (plus:SI (reg:SI 1 dx [orig:242 _156 ] [242])
                    (reg:SI 2 cx [orig:241 _155 ] [241])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1245 221 {*addsi_1}
     (nil))
(insn 515 514 516 55 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:243 _157 ] [243])
                (const_int 32 [0x20])) [3 _157->coins_carried+0 S4 A64])
        (reg:SI 1 dx [orig:244 _158 ] [244])) "function.c":1245 86 {*movsi_internal}
     (nil))
(insn 516 515 517 55 (set (reg/f:DI 0 ax [399])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1246 85 {*movdi_internal}
     (nil))
(insn 517 516 518 55 (set (reg:SI 1 dx [401])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1246 86 {*movsi_internal}
     (nil))
(insn 518 517 519 55 (set (reg:DI 1 dx [400])
        (sign_extend:DI (reg:SI 1 dx [401]))) "function.c":1246 149 {*extendsidi2_rex64}
     (nil))
(insn 519 518 520 55 (parallel [
            (set (reg:DI 1 dx [402])
                (plus:DI (reg:DI 1 dx [400])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1246 222 {*adddi_1}
     (nil))
(insn 520 519 521 55 (set (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [402])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [399])) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])
        (const_int -1 [0xffffffffffffffff])) "function.c":1246 86 {*movsi_internal}
     (nil))
(insn 521 520 522 55 (set (reg/f:DI 0 ax [403])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1247 85 {*movdi_internal}
     (nil))
(insn 522 521 523 55 (set (reg/f:DI 0 ax [orig:245 _159 ] [245])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [403])
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1247 85 {*movdi_internal}
     (nil))
(insn 523 522 524 55 (set (reg:SI 1 dx [404])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1247 86 {*movsi_internal}
     (nil))
(insn 524 523 525 55 (set (reg:DI 1 dx [orig:246 _160 ] [246])
        (sign_extend:DI (reg:SI 1 dx [404]))) "function.c":1247 149 {*extendsidi2_rex64}
     (nil))
(insn 525 524 526 55 (parallel [
            (set (reg:DI 1 dx [orig:247 _161 ] [247])
                (ashift:DI (reg:DI 1 dx [orig:246 _160 ] [246])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1247 551 {*ashldi3_1}
     (nil))
(insn 526 525 527 55 (parallel [
            (set (reg/f:DI 0 ax [orig:248 _162 ] [248])
                (plus:DI (reg/f:DI 0 ax [orig:245 _159 ] [245])
                    (reg:DI 1 dx [orig:247 _161 ] [247])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1247 222 {*adddi_1}
     (nil))
(insn 527 526 528 55 (set (reg/f:DI 1 dx [orig:249 _163 ] [249])
        (mem/f:DI (reg/f:DI 0 ax [orig:248 _162 ] [248]) [10 *_162+0 S8 A64])) "function.c":1247 85 {*movdi_internal}
     (nil))
(insn 528 527 529 55 (set (reg:SI 0 ax [405])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1247 86 {*movsi_internal}
     (nil))
(insn 529 528 530 55 (set (reg:DI 0 ax [orig:250 _164 ] [250])
        (sign_extend:DI (reg:SI 0 ax [405]))) "function.c":1247 149 {*extendsidi2_rex64}
     (nil))
(insn 530 529 531 55 (parallel [
            (set (reg/f:DI 0 ax [orig:251 _165 ] [251])
                (plus:DI (reg:DI 0 ax [orig:250 _164 ] [250])
                    (reg/f:DI 1 dx [orig:249 _163 ] [249])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1247 222 {*adddi_1}
     (nil))
(insn 531 530 532 55 (set (mem:QI (reg/f:DI 0 ax [orig:251 _165 ] [251]) [0 *_165+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1247 88 {*movqi_internal}
     (nil))
(insn 532 531 586 55 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1248 85 {*movdi_internal}
     (nil))
(jump_insn 586 532 587 55 (set (pc)
        (label_ref 547)) "function.c":1248 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 587 586 535)
;; basic block 56, loop depth 0, maybe hot
;;  prev block 55, next block 57, flags: (RTL, MODIFIED)
;;  pred:       52
;;              53
;;              54
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 535 587 536 56 222 (nil) [3 uses])
(note 536 535 537 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 56 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1241 221 {*addsi_1}
     (nil))
;;  succ:       57 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, maybe hot
;;  prev block 56, next block 58, flags: (RTL, MODIFIED)
;;  pred:       56 (FALLTHRU,DFS_BACK)
;;              51 [always] 
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 252 406
(code_label 538 537 539 57 221 (nil) [1 uses])
(note 539 538 540 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 57 (set (reg/f:DI 0 ax [406])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1241 85 {*movdi_internal}
     (nil))
(insn 541 540 543 57 (set (reg:SI 0 ax [orig:252 _166 ] [252])
        (mem:SI (plus:DI (reg/f:DI 0 ax [406])
                (const_int 24060 [0x5dfc])) [3 serwer_178(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1241 86 {*movsi_internal}
     (nil))
(insn 543 541 544 57 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
            (reg:SI 0 ax [orig:252 _166 ] [252]))) "function.c":1241 11 {*cmpsi_1}
     (nil))
(jump_insn 544 543 545 57 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 542)
            (pc))) "function.c":1241 682 {*jcc}
     (nil)
 -> 542)
;;  succ:       52
;;              58 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, maybe hot
;;  prev block 57, next block 59, flags: (RTL, MODIFIED)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 253
(note 545 544 546 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 546 545 547 58 (set (reg/f:DI 0 ax [orig:253 _175 ] [253])
        (const_int 0 [0])) "function.c":1251 85 {*movdi_internal}
     (nil))
;;  succ:       59 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

;; basic block 59, loop depth 0, maybe hot
;;  prev block 58, next block 1, flags: (RTL, MODIFIED)
;;  pred:       58 (FALLTHRU)
;;              6 [always] 
;;              13 [always] 
;;              20 [always] 
;;              27 [always] 
;;              34 [always] 
;;              41 [always] 
;;              48 [always] 
;;              55 [always] 
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253
;; lr  def 	 0 [ax] 254
(code_label 547 546 548 59 201 (nil) [8 uses])
(note 548 547 553 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 553 548 554 59 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:254 <retval> ] [254])) "function.c":1252 85 {*movdi_internal}
     (nil))
(insn 554 553 588 59 (use (reg/i:DI 0 ax)) "function.c":1252 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 588 554 0 NOTE_INSN_DELETED)

;; Function oboz_random (oboz_random, funcdef_no=25, decl_uid=6257, cgraph_uid=25, symbol_order=28)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 58
	 Choosing alt 0 in insn 58:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 59:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 79: point = 0, n_alt = -1
  BB 4
   Insn 81: point = 0, n_alt = -1
   Insn 65: point = 0, n_alt = 1
   Insn 64: point = 1, n_alt = 0
   Insn 63: point = 2, n_alt = 3
   Insn 62: point = 3, n_alt = 1
   Insn 61: point = 4, n_alt = 0
   Insn 60: point = 5, n_alt = 3
   Insn 59: point = 6, n_alt = 8
   Insn 58: point = 7, n_alt = 0
   Insn 57: point = 9, n_alt = 0
   Insn 56: point = 11, n_alt = 0
   Insn 55: point = 12, n_alt = 3
   Insn 54: point = 14, n_alt = 0
   Insn 53: point = 16, n_alt = 0
   Insn 52: point = 18, n_alt = 1
   Insn 51: point = 20, n_alt = 0
   Insn 50: point = 21, n_alt = 3
   Insn 49: point = 23, n_alt = 3
  BB 3
   Insn 47: point = 24, n_alt = -1
   Insn 46: point = 24, n_alt = 0
   Insn 45: point = 25, n_alt = 4
   Insn 44: point = 27, n_alt = 0
   Insn 43: point = 29, n_alt = 0
   Insn 42: point = 31, n_alt = 0
   Insn 41: point = 32, n_alt = 3
   Insn 40: point = 34, n_alt = 0
   Insn 39: point = 36, n_alt = 0
   Insn 38: point = 38, n_alt = 1
   Insn 37: point = 40, n_alt = 0
   Insn 36: point = 41, n_alt = 3
   Insn 35: point = 43, n_alt = 3
   Insn 34: point = 44, n_alt = 1
   Insn 33: point = 45, n_alt = -2
   Insn 32: point = 46, n_alt = 0
   Insn 31: point = 46, n_alt = -2
   Insn 30: point = 47, n_alt = -2
   Insn 29: point = 48, n_alt = 0
   Insn 28: point = 49, n_alt = 0
   Insn 27: point = 50, n_alt = 1
   Insn 26: point = 50, n_alt = 1
   Insn 25: point = 50, n_alt = 1
   Insn 24: point = 51, n_alt = -2
   Insn 23: point = 52, n_alt = 0
   Insn 22: point = 52, n_alt = -2
   Insn 21: point = 53, n_alt = -2
   Insn 20: point = 54, n_alt = 0
   Insn 19: point = 55, n_alt = 0
   Insn 18: point = 56, n_alt = 1
   Insn 17: point = 56, n_alt = 1
  BB 5
   Insn 83: point = 56, n_alt = -1
  BB 2
   Insn 15: point = 56, n_alt = 1
   Insn 14: point = 56, n_alt = 1
   Insn 13: point = 56, n_alt = 1
   Insn 12: point = 56, n_alt = 1
   Insn 11: point = 56, n_alt = 0
   Insn 10: point = 56, n_alt = -2
   Insn 9: point = 57, n_alt = 0
   Insn 8: point = 59, n_alt = -2
   Insn 7: point = 60, n_alt = 0
   Insn 6: point = 60, n_alt = 2
   Insn 2: point = 60, n_alt = 5
 r87: [58..59]
 r88: [56..57]
 r89: [35..41]
 r90: [37..38]
 r91: [35..36]
 r92: [33..34]
 r93: [28..32]
 r94: [28..29]
 r95: [26..27]
 r96: [24..25]
 r97: [15..21]
 r98: [17..18]
 r99: [15..16]
 r100: [13..14]
 r101: [8..12]
 r102: [8..9]
 r103: [6..7]
 r104: [53..55]
 r105: [52..54]
 r106: [50..51]
 r107: [47..49]
 r108: [46..48]
 r109: [44..45]
 r110: [42..43]
 r111: [39..40]
 r112: [30..31]
 r113: [22..23]
 r114: [19..20]
 r115: [10..11]
 r116: [3..5]
 r117: [3..4]
 r118: [0..2]
 r119: [0..1]
Compressing live ranges: from 60 to 50 - 83%
Ranges after the compression:
 r87: [48..49]
 r88: [46..47]
 r89: [30..35]
 r90: [32..33]
 r91: [30..31]
 r92: [28..29]
 r93: [24..27]
 r94: [24..25]
 r95: [22..23]
 r96: [20..21]
 r97: [12..17]
 r98: [14..15]
 r99: [12..13]
 r100: [10..11]
 r101: [6..9]
 r102: [6..7]
 r103: [4..5]
 r104: [44..45]
 r105: [44..45]
 r106: [42..43]
 r107: [40..41]
 r108: [40..41]
 r109: [38..39]
 r110: [36..37]
 r111: [34..35]
 r112: [26..27]
 r113: [18..19]
 r114: [16..17]
 r115: [8..9]
 r116: [2..3]
 r117: [2..3]
 r118: [0..1]
 r119: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 36
changing reg in insn 40
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 54
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 30
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
deleting insn with uid = 8.
deleting insn with uid = 24.
deleting insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 32.


oboz_random

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={23d,21u} r1={17d,12u} r2={5d} r4={7d,2u} r5={9d,5u} r6={1d,31u} r7={1d,10u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={11d,1u} r18={4d} r19={4d} r20={1d,1u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 432{349d,83u,0e} in 59{55 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1255 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":1256 85 {*movdi_internal}
     (nil))
(call_insn 7 6 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":1256 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 7 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (reg:SI 0 ax [orig:87 _1 ] [87])) "function.c":1256 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "function.c":1256 86 {*movsi_internal}
     (nil))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":1256 689 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 0 [0])) "function.c":1257 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1258 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":1259 86 {*movsi_internal}
     (nil))
(insn 15 14 70 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":1260 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              5 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 104 105 106 107 108 109 110 111 112
(code_label 70 15 16 3 227 (nil) [1 uses])
(note 16 70 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1264 86 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":1264 86 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 1 dx [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1265 86 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 0 ax [105])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1265 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 4 si)
        (reg:SI 1 dx [104])) "function.c":1265 86 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [105])) "function.c":1265 86 {*movsi_internal}
     (nil))
(call_insn 23 22 25 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1265 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 25 23 26 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 ax [106])) "function.c":1265 86 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1268 86 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":1268 86 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:SI 1 dx [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1269 86 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 ax [108])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1269 86 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 4 si)
        (reg:SI 1 dx [107])) "function.c":1269 86 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [108])) "function.c":1269 86 {*movsi_internal}
     (nil))
(call_insn 32 31 34 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1269 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 34 32 35 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 0 ax [109])) "function.c":1269 86 {*movsi_internal}
     (nil))
(insn 35 34 36 3 (set (reg/f:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1271 85 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [110])
                (const_int 16 [0x10])) [9 serwer_34(D)->mapa+0 S8 A64])) "function.c":1271 85 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:SI 1 dx [111])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1271 86 {*movsi_internal}
     (nil))
(insn 38 37 39 3 (set (reg:DI 1 dx [orig:90 _4 ] [90])
        (sign_extend:DI (reg:SI 1 dx [111]))) "function.c":1271 149 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:DI 1 dx [orig:91 _5 ] [91])
                (ashift:DI (reg:DI 1 dx [orig:90 _4 ] [90])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1271 551 {*ashldi3_1}
     (nil))
(insn 40 39 41 3 (parallel [
            (set (reg/f:DI 0 ax [orig:92 _6 ] [92])
                (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                    (reg:DI 1 dx [orig:91 _5 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1271 222 {*adddi_1}
     (nil))
(insn 41 40 42 3 (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
        (mem/f:DI (reg/f:DI 0 ax [orig:92 _6 ] [92]) [10 *_6+0 S8 A64])) "function.c":1271 85 {*movdi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:SI 0 ax [112])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1271 86 {*movsi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:DI 0 ax [orig:94 _8 ] [94])
        (sign_extend:DI (reg:SI 0 ax [112]))) "function.c":1271 149 {*extendsidi2_rex64}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (plus:DI (reg:DI 0 ax [orig:94 _8 ] [94])
                    (reg/f:DI 1 dx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1271 222 {*adddi_1}
     (nil))
(insn 45 44 46 3 (set (reg:QI 0 ax [orig:96 _10 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 _9 ] [95]) [0 *_9+0 S1 A8])) "function.c":1271 88 {*movqi_internal}
     (nil))
(insn 46 45 47 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:96 _10 ] [96])
            (const_int 46 [0x2e]))) "function.c":1271 9 {*cmpqi_1}
     (nil))
(jump_insn 47 46 48 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "function.c":1271 682 {*jcc}
     (nil)
 -> 68)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 102 103 113 114 115 116 117 118 119
(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 4 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1273 85 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [113])
                (const_int 16 [0x10])) [9 serwer_34(D)->mapa+0 S8 A64])) "function.c":1273 85 {*movdi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:SI 1 dx [114])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1273 86 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 1 dx [orig:98 _12 ] [98])
        (sign_extend:DI (reg:SI 1 dx [114]))) "function.c":1273 149 {*extendsidi2_rex64}
     (nil))
(insn 53 52 54 4 (parallel [
            (set (reg:DI 1 dx [orig:99 _13 ] [99])
                (ashift:DI (reg:DI 1 dx [orig:98 _12 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1273 551 {*ashldi3_1}
     (nil))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
                (plus:DI (reg/f:DI 0 ax [orig:97 _11 ] [97])
                    (reg:DI 1 dx [orig:99 _13 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1273 222 {*adddi_1}
     (nil))
(insn 55 54 56 4 (set (reg/f:DI 1 dx [orig:101 _15 ] [101])
        (mem/f:DI (reg/f:DI 0 ax [orig:100 _14 ] [100]) [10 *_14+0 S8 A64])) "function.c":1273 85 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:SI 0 ax [115])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1273 86 {*movsi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [115]))) "function.c":1273 149 {*extendsidi2_rex64}
     (nil))
(insn 58 57 59 4 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (reg/f:DI 1 dx [orig:101 _15 ] [101])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1273 222 {*adddi_1}
     (nil))
(insn 59 58 60 4 (set (mem:QI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [0 *_17+0 S1 A8])
        (const_int 65 [0x41])) "function.c":1273 88 {*movqi_internal}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1274 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:SI 1 dx [117])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1274 86 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [116])
                (const_int 4 [0x4])) [3 serwer_34(D)->x_camp+0 S4 A32])
        (reg:SI 1 dx [117])) "function.c":1274 86 {*movsi_internal}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1275 85 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SI 1 dx [119])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1275 86 {*movsi_internal}
     (nil))
(insn 65 64 81 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 8 [0x8])) [3 serwer_34(D)->y_camp+0 S4 A64])
        (reg:SI 1 dx [119])) "function.c":1275 86 {*movsi_internal}
     (nil))
(jump_insn 81 65 82 4 (set (pc)
        (label_ref 80)) "function.c":1276 683 {jump}
     (nil)
 -> 80)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 82 81 68)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 68 82 69 5 225 (nil) [1 uses])
(note 69 68 83 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 83 69 84 5 (set (pc)
        (label_ref 70)) "function.c":1264 683 {jump}
     (nil)
 -> 70)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 84 83 80)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 80 84 74 6 229 (nil) [1 uses])
(note 74 80 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 74 85 6 (const_int 0 [0]) "function.c":1279 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 85 79 0 NOTE_INSN_DELETED)

;; Function oboz_coins (oboz_coins, funcdef_no=26, decl_uid=6259, cgraph_uid=26, symbol_order=29)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 30
	 Choosing alt 0 in insn 30:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 61
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 65:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
  BB 9
   Insn 77: point = 0, n_alt = -1
  BB 7
   Insn 72: point = 0, n_alt = -1
   Insn 65: point = 0, n_alt = 1
   Insn 64: point = 1, n_alt = 3
   Insn 63: point = 3, n_alt = 3
   Insn 62: point = 4, n_alt = 1
   Insn 61: point = 5, n_alt = 0
   Insn 60: point = 7, n_alt = 3
   Insn 59: point = 9, n_alt = 3
   Insn 58: point = 10, n_alt = 0
   Insn 57: point = 12, n_alt = 3
   Insn 56: point = 14, n_alt = 3
   Insn 55: point = 15, n_alt = 0
   Insn 54: point = 17, n_alt = 3
   Insn 53: point = 19, n_alt = 3
  BB 6
   Insn 51: point = 20, n_alt = -1
   Insn 50: point = 20, n_alt = 0
   Insn 49: point = 21, n_alt = 0
   Insn 48: point = 23, n_alt = 3
   Insn 47: point = 25, n_alt = 3
   Insn 46: point = 26, n_alt = 0
   Insn 45: point = 28, n_alt = 3
  BB 5
   Insn 43: point = 29, n_alt = -1
   Insn 42: point = 29, n_alt = 0
   Insn 41: point = 30, n_alt = 0
   Insn 40: point = 32, n_alt = 3
   Insn 39: point = 34, n_alt = 3
   Insn 38: point = 35, n_alt = 0
   Insn 37: point = 37, n_alt = 3
  BB 4
   Insn 34: point = 38, n_alt = 1
   Insn 33: point = 39, n_alt = 3
   Insn 32: point = 41, n_alt = 3
   Insn 31: point = 42, n_alt = 1
   Insn 30: point = 43, n_alt = 0
   Insn 29: point = 45, n_alt = 3
   Insn 28: point = 47, n_alt = 3
   Insn 27: point = 48, n_alt = 0
   Insn 26: point = 50, n_alt = 3
   Insn 25: point = 52, n_alt = 3
   Insn 24: point = 53, n_alt = 0
   Insn 23: point = 55, n_alt = 3
   Insn 22: point = 57, n_alt = 3
  BB 3
   Insn 20: point = 58, n_alt = -1
   Insn 19: point = 58, n_alt = 0
   Insn 18: point = 59, n_alt = 0
   Insn 17: point = 61, n_alt = 3
   Insn 16: point = 63, n_alt = 3
   Insn 15: point = 64, n_alt = 0
   Insn 14: point = 66, n_alt = 3
  BB 2
   Insn 12: point = 67, n_alt = -1
   Insn 11: point = 67, n_alt = 0
   Insn 10: point = 68, n_alt = 0
   Insn 9: point = 70, n_alt = 3
   Insn 8: point = 72, n_alt = 3
   Insn 7: point = 73, n_alt = 0
   Insn 6: point = 75, n_alt = 3
   Insn 2: point = 76, n_alt = 5
 r87: [67..73]
 r88: [69..70]
 r89: [67..68]
 r90: [58..64]
 r91: [60..61]
 r92: [58..59]
 r93: [54..55]
 r94: [44..53]
 r95: [49..50]
 r96: [44..48]
 r97: [42..45]
 r98: [42..43]
 r99: [38..39]
 r100: [29..35]
 r101: [31..32]
 r102: [29..30]
 r103: [20..26]
 r104: [22..23]
 r105: [20..21]
 r106: [16..17]
 r107: [6..15]
 r108: [11..12]
 r109: [6..10]
 r110: [4..7]
 r111: [4..5]
 r112: [0..1]
 r113: [74..75]
 r114: [71..72]
 r115: [65..66]
 r116: [62..63]
 r117: [56..57]
 r118: [51..52]
 r119: [46..47]
 r120: [40..41]
 r121: [36..37]
 r122: [33..34]
 r123: [27..28]
 r124: [24..25]
 r125: [18..19]
 r126: [13..14]
 r127: [8..9]
 r128: [2..3]
Compressing live ranges: from 76 to 68 - 89%
Ranges after the compression:
 r87: [60..65]
 r88: [62..63]
 r89: [60..61]
 r90: [52..57]
 r91: [54..55]
 r92: [52..53]
 r93: [48..49]
 r94: [40..47]
 r95: [44..45]
 r96: [40..43]
 r97: [38..41]
 r98: [38..39]
 r99: [34..35]
 r100: [26..31]
 r101: [28..29]
 r102: [26..27]
 r103: [18..23]
 r104: [20..21]
 r105: [18..19]
 r106: [14..15]
 r107: [6..13]
 r108: [10..11]
 r109: [6..9]
 r110: [4..7]
 r111: [4..5]
 r112: [0..1]
 r113: [66..67]
 r114: [64..65]
 r115: [58..59]
 r116: [56..57]
 r117: [50..51]
 r118: [46..47]
 r119: [42..43]
 r120: [36..37]
 r121: [32..33]
 r122: [30..31]
 r123: [24..25]
 r124: [22..23]
 r125: [16..17]
 r126: [12..13]
 r127: [8..9]
 r128: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 19
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 50
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 58
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 60
changing reg in insn 63
changing reg in insn 64
starting the processing of deferred insns
ending the processing of deferred insns


oboz_coins

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={33d,32u} r1={9d,8u} r2={3d,2u} r4={1d} r5={1d,1u} r6={1d,26u} r7={1d,9u} r17={6d,4u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 149{66d,83u,0e} in 57{57 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 113 114
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1283 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:87 _1 ] [87])
        (mem:SI (plus:DI (reg/f:DI 0 ax [113])
                (const_int 4 [0x4])) [3 serwer_30(D)->x_camp+0 S4 A32])) "function.c":1284 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [114])
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":1284 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:87 _1 ] [87])
            (reg:SI 0 ax [orig:89 _3 ] [89]))) "function.c":1284 11 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "function.c":1284 682 {*jcc}
     (nil)
 -> 35)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 115 116
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 1 dx [orig:90 _4 ] [90])
        (mem:SI (plus:DI (reg/f:DI 0 ax [115])
                (const_int 8 [0x8])) [3 serwer_30(D)->y_camp+0 S4 A64])) "function.c":1284 86 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [116])
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 ax [orig:92 _6 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1284 86 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:90 _4 ] [90])
            (reg:SI 0 ax [orig:92 _6 ] [92]))) "function.c":1284 11 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "function.c":1284 682 {*jcc}
     (nil)
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 117 118 119 120
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [117])
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 2 cx [orig:94 _8 ] [94])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (const_int 36 [0x24])) [3 _7->coins_brought+0 S4 A32])) "function.c":1285 86 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [118])
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:SI 1 dx [orig:96 _10 ] [96])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (const_int 32 [0x20])) [3 _9->coins_carried+0 S4 A64])) "function.c":1285 86 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg/f:DI 0 ax [orig:97 _11 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [119])
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:SI 1 dx [orig:98 _12 ] [98])
                (plus:SI (reg:SI 1 dx [orig:96 _10 ] [96])
                    (reg:SI 2 cx [orig:94 _8 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1285 221 {*addsi_1}
     (nil))
(insn 31 30 32 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:97 _11 ] [97])
                (const_int 36 [0x24])) [3 _11->coins_brought+0 S4 A32])
        (reg:SI 1 dx [orig:98 _12 ] [98])) "function.c":1285 86 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1286 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [120])
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1286 85 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (const_int 32 [0x20])) [3 _13->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1286 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 121 122
(code_label 35 34 36 5 231 (nil) [2 uses])
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg/f:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 1 dx [orig:100 _14 ] [100])
        (mem:SI (plus:DI (reg/f:DI 0 ax [121])
                (const_int 4 [0x4])) [3 serwer_30(D)->x_camp+0 S4 A32])) "function.c":1289 86 {*movsi_internal}
     (nil))
(insn 39 38 40 5 (set (reg/f:DI 0 ax [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [122])
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:SI 0 ax [orig:102 _16 ] [102])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:101 _15 ] [101])
                (const_int 12 [0xc])) [3 _15->x_current+0 S4 A32])) "function.c":1289 86 {*movsi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:100 _14 ] [100])
            (reg:SI 0 ax [orig:102 _16 ] [102]))) "function.c":1289 11 {*cmpsi_1}
     (nil))
(jump_insn 43 42 44 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 76)
            (pc))) "function.c":1289 682 {*jcc}
     (nil)
 -> 76)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 123 124
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg/f:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:SI 1 dx [orig:103 _17 ] [103])
        (mem:SI (plus:DI (reg/f:DI 0 ax [123])
                (const_int 8 [0x8])) [3 serwer_30(D)->y_camp+0 S4 A64])) "function.c":1289 86 {*movsi_internal}
     (nil))
(insn 47 46 48 6 (set (reg/f:DI 0 ax [124])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (reg/f:DI 0 ax [orig:104 _18 ] [104])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [124])
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:SI 0 ax [orig:105 _19 ] [105])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:104 _18 ] [104])
                (const_int 16 [0x10])) [3 _18->y_current+0 S4 A64])) "function.c":1289 86 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:103 _17 ] [103])
            (reg:SI 0 ax [orig:105 _19 ] [105]))) "function.c":1289 11 {*cmpsi_1}
     (nil))
(jump_insn 51 50 52 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 76)
            (pc))) "function.c":1289 682 {*jcc}
     (nil)
 -> 76)
;;  succ:       7 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 111 112 125 126 127 128
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg/f:DI 0 ax [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [125])
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 55 54 56 7 (set (reg:SI 2 cx [orig:107 _21 ] [107])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (const_int 36 [0x24])) [3 _20->coins_brought+0 S4 A32])) "function.c":1290 86 {*movsi_internal}
     (nil))
(insn 56 55 57 7 (set (reg/f:DI 0 ax [126])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 57 56 58 7 (set (reg/f:DI 0 ax [orig:108 _22 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [126])
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 58 57 59 7 (set (reg:SI 1 dx [orig:109 _23 ] [109])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:108 _22 ] [108])
                (const_int 32 [0x20])) [3 _22->coins_carried+0 S4 A64])) "function.c":1290 86 {*movsi_internal}
     (nil))
(insn 59 58 60 7 (set (reg/f:DI 0 ax [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 60 59 61 7 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [127])
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 61 60 62 7 (parallel [
            (set (reg:SI 1 dx [orig:111 _25 ] [111])
                (plus:SI (reg:SI 1 dx [orig:109 _23 ] [109])
                    (reg:SI 2 cx [orig:107 _21 ] [107])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1290 221 {*addsi_1}
     (nil))
(insn 62 61 63 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (const_int 36 [0x24])) [3 _24->coins_brought+0 S4 A32])
        (reg:SI 1 dx [orig:111 _25 ] [111])) "function.c":1290 86 {*movsi_internal}
     (nil))
(insn 63 62 64 7 (set (reg/f:DI 0 ax [128])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1291 85 {*movdi_internal}
     (nil))
(insn 64 63 65 7 (set (reg/f:DI 0 ax [orig:112 _26 ] [112])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [128])
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1291 85 {*movdi_internal}
     (nil))
(insn 65 64 72 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:112 _26 ] [112])
                (const_int 32 [0x20])) [3 _26->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1291 86 {*movsi_internal}
     (nil))
(insn 72 65 76 7 (const_int 0 [0]) "function.c":1293 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 76 72 75 9 234 (nil) [2 uses])
(note 75 76 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 75 70 9 (const_int 0 [0]) "function.c":1293 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 70 77 71 8 230 (nil) [0 uses])
(note 71 70 78 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 78 71 0 NOTE_INSN_DELETED)

;; Function player_position_random (player_position_random, funcdef_no=27, decl_uid=6261, cgraph_uid=27, symbol_order=30)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 40:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 44
	 Choosing alt 0 in insn 44:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 50
	 Choosing alt 0 in insn 50:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 76:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 77:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 81:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 97:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 105
	 Choosing alt 0 in insn 105:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 107:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 117:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 122:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 124:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6 7
EBB 8
EBB 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 140: point = 0, n_alt = -1
  BB 7
   Insn 146: point = 0, n_alt = -1
   Insn 127: point = 0, n_alt = 1
   Insn 126: point = 1, n_alt = 0
   Insn 125: point = 3, n_alt = 3
   Insn 124: point = 5, n_alt = 3
   Insn 123: point = 6, n_alt = 3
   Insn 122: point = 8, n_alt = 3
   Insn 121: point = 9, n_alt = 1
   Insn 120: point = 10, n_alt = 0
   Insn 119: point = 12, n_alt = 3
   Insn 118: point = 14, n_alt = 3
   Insn 117: point = 15, n_alt = 3
   Insn 116: point = 17, n_alt = 3
  BB 6
   Insn 114: point = 18, n_alt = -1
   Insn 113: point = 18, n_alt = 0
   Insn 112: point = 19, n_alt = 4
   Insn 111: point = 21, n_alt = 0
   Insn 110: point = 23, n_alt = 0
   Insn 109: point = 25, n_alt = 0
   Insn 108: point = 27, n_alt = 3
   Insn 107: point = 29, n_alt = 3
   Insn 106: point = 30, n_alt = 3
   Insn 105: point = 32, n_alt = 0
   Insn 104: point = 34, n_alt = 0
   Insn 103: point = 36, n_alt = 0
   Insn 102: point = 38, n_alt = 0
   Insn 101: point = 40, n_alt = 3
   Insn 100: point = 42, n_alt = 3
   Insn 99: point = 43, n_alt = 3
   Insn 98: point = 45, n_alt = 3
   Insn 97: point = 46, n_alt = 1
   Insn 96: point = 47, n_alt = -2
   Insn 95: point = 48, n_alt = 0
   Insn 94: point = 48, n_alt = -2
   Insn 93: point = 49, n_alt = -2
   Insn 92: point = 50, n_alt = 0
   Insn 91: point = 51, n_alt = 0
   Insn 90: point = 52, n_alt = 3
   Insn 89: point = 54, n_alt = 3
   Insn 88: point = 55, n_alt = 1
   Insn 87: point = 55, n_alt = 1
   Insn 86: point = 55, n_alt = 1
   Insn 85: point = 56, n_alt = -2
   Insn 84: point = 57, n_alt = 0
   Insn 83: point = 57, n_alt = -2
   Insn 82: point = 58, n_alt = -2
   Insn 81: point = 59, n_alt = 0
   Insn 80: point = 60, n_alt = 0
   Insn 79: point = 61, n_alt = 3
   Insn 78: point = 63, n_alt = 3
   Insn 77: point = 64, n_alt = 1
   Insn 76: point = 64, n_alt = 1
  BB 8
   Insn 148: point = 64, n_alt = -1
  BB 4
   Insn 141: point = 64, n_alt = -1
   Insn 66: point = 64, n_alt = 1
   Insn 65: point = 65, n_alt = 0
   Insn 64: point = 67, n_alt = 3
   Insn 63: point = 69, n_alt = 3
   Insn 62: point = 70, n_alt = 3
   Insn 61: point = 72, n_alt = 3
   Insn 60: point = 73, n_alt = 1
   Insn 59: point = 74, n_alt = 0
   Insn 58: point = 76, n_alt = 3
   Insn 57: point = 78, n_alt = 3
   Insn 56: point = 79, n_alt = 3
   Insn 55: point = 81, n_alt = 3
  BB 3
   Insn 53: point = 82, n_alt = -1
   Insn 52: point = 82, n_alt = 0
   Insn 51: point = 83, n_alt = 4
   Insn 50: point = 85, n_alt = 0
   Insn 49: point = 87, n_alt = 0
   Insn 48: point = 89, n_alt = 0
   Insn 47: point = 91, n_alt = 3
   Insn 46: point = 93, n_alt = 3
   Insn 45: point = 94, n_alt = 3
   Insn 44: point = 96, n_alt = 0
   Insn 43: point = 98, n_alt = 0
   Insn 42: point = 100, n_alt = 0
   Insn 41: point = 102, n_alt = 0
   Insn 40: point = 104, n_alt = 3
   Insn 39: point = 106, n_alt = 3
   Insn 38: point = 107, n_alt = 3
   Insn 37: point = 109, n_alt = 3
   Insn 36: point = 110, n_alt = 1
   Insn 35: point = 111, n_alt = -2
   Insn 34: point = 112, n_alt = 0
   Insn 33: point = 112, n_alt = -2
   Insn 32: point = 113, n_alt = -2
   Insn 31: point = 114, n_alt = 0
   Insn 30: point = 115, n_alt = 0
   Insn 29: point = 116, n_alt = 3
   Insn 28: point = 118, n_alt = 3
   Insn 27: point = 119, n_alt = 1
   Insn 26: point = 119, n_alt = 1
   Insn 25: point = 119, n_alt = 1
   Insn 24: point = 120, n_alt = -2
   Insn 23: point = 121, n_alt = 0
   Insn 22: point = 121, n_alt = -2
   Insn 21: point = 122, n_alt = -2
   Insn 20: point = 123, n_alt = 0
   Insn 19: point = 124, n_alt = 0
   Insn 18: point = 125, n_alt = 3
   Insn 17: point = 127, n_alt = 3
   Insn 16: point = 128, n_alt = 1
   Insn 15: point = 128, n_alt = 1
  BB 5
   Insn 143: point = 128, n_alt = -1
  BB 2
   Insn 13: point = 128, n_alt = 1
   Insn 12: point = 128, n_alt = 1
   Insn 11: point = 128, n_alt = 0
   Insn 10: point = 128, n_alt = -2
   Insn 9: point = 129, n_alt = 0
   Insn 8: point = 131, n_alt = -2
   Insn 7: point = 132, n_alt = 0
   Insn 6: point = 132, n_alt = 2
   Insn 2: point = 132, n_alt = 5
 r87: [130..131]
 r88: [128..129]
 r89: [119..125]
 r90: [119..120]
 r91: [110..116]
 r92: [110..111]
 r93: [97..107]
 r94: [103..104]
 r95: [101..102]
 r96: [99..100]
 r97: [97..98]
 r98: [95..96]
 r99: [86..94]
 r100: [90..91]
 r101: [88..89]
 r102: [86..87]
 r103: [84..85]
 r104: [82..83]
 r105: [75..79]
 r106: [73..76]
 r107: [73..74]
 r108: [66..70]
 r109: [64..67]
 r110: [64..65]
 r111: [55..61]
 r112: [55..56]
 r113: [46..52]
 r114: [46..47]
 r115: [33..43]
 r116: [39..40]
 r117: [37..38]
 r118: [35..36]
 r119: [33..34]
 r120: [31..32]
 r121: [22..30]
 r122: [26..27]
 r123: [24..25]
 r124: [22..23]
 r125: [20..21]
 r126: [18..19]
 r127: [11..15]
 r128: [9..12]
 r129: [9..10]
 r130: [2..6]
 r131: [0..3]
 r132: [0..1]
 r133: [126..127]
 r134: [122..124]
 r135: [121..123]
 r136: [117..118]
 r137: [113..115]
 r138: [112..114]
 r139: [108..109]
 r140: [105..106]
 r141: [92..93]
 r142: [80..81]
 r143: [77..78]
 r144: [71..72]
 r145: [68..69]
 r146: [62..63]
 r147: [58..60]
 r148: [57..59]
 r149: [53..54]
 r150: [49..51]
 r151: [48..50]
 r152: [44..45]
 r153: [41..42]
 r154: [28..29]
 r155: [16..17]
 r156: [13..14]
 r157: [7..8]
 r158: [4..5]
Compressing live ranges: from 132 to 112 - 84%
Ranges after the compression:
 r87: [110..111]
 r88: [108..109]
 r89: [102..105]
 r90: [102..103]
 r91: [96..99]
 r92: [96..97]
 r93: [84..93]
 r94: [90..91]
 r95: [88..89]
 r96: [86..87]
 r97: [84..85]
 r98: [82..83]
 r99: [74..81]
 r100: [78..79]
 r101: [76..77]
 r102: [74..75]
 r103: [72..73]
 r104: [70..71]
 r105: [64..67]
 r106: [62..65]
 r107: [62..63]
 r108: [56..59]
 r109: [54..57]
 r110: [54..55]
 r111: [48..51]
 r112: [48..49]
 r113: [42..45]
 r114: [42..43]
 r115: [30..39]
 r116: [36..37]
 r117: [34..35]
 r118: [32..33]
 r119: [30..31]
 r120: [28..29]
 r121: [20..27]
 r122: [24..25]
 r123: [22..23]
 r124: [20..21]
 r125: [18..19]
 r126: [16..17]
 r127: [10..13]
 r128: [8..11]
 r129: [8..9]
 r130: [2..5]
 r131: [0..3]
 r132: [0..1]
 r133: [106..107]
 r134: [104..105]
 r135: [104..105]
 r136: [100..101]
 r137: [98..99]
 r138: [98..99]
 r139: [94..95]
 r140: [92..93]
 r141: [80..81]
 r142: [68..69]
 r143: [66..67]
 r144: [60..61]
 r145: [58..59]
 r146: [52..53]
 r147: [50..51]
 r148: [50..51]
 r149: [46..47]
 r150: [44..45]
 r151: [44..45]
 r152: [40..41]
 r153: [38..39]
 r154: [26..27]
 r155: [14..15]
 r156: [12..13]
 r157: [6..7]
 r158: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 18
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 56
changing reg in insn 59
changing reg in insn 58
changing reg in insn 60
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 65
changing reg in insn 64
changing reg in insn 66
changing reg in insn 65
changing reg in insn 66
changing reg in insn 79
changing reg in insn 86
changing reg in insn 85
changing reg in insn 86
changing reg in insn 90
changing reg in insn 97
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 117
changing reg in insn 120
changing reg in insn 119
changing reg in insn 121
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 126
changing reg in insn 125
changing reg in insn 127
changing reg in insn 126
changing reg in insn 127
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 31
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 46
changing reg in insn 47
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 81
changing reg in insn 83
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 94
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 107
changing reg in insn 108
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
deleting insn with uid = 8.
deleting insn with uid = 24.
deleting insn with uid = 35.
deleting insn with uid = 85.
deleting insn with uid = 96.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 95.


player_position_random

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={54d,52u} r1={23d,16u} r2={7d} r3={4d,4u} r4={11d,4u} r5={13d,7u} r6={1d,46u} r7={1d,15u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={14d,2u} r18={6d} r19={6d} r20={1d,1u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 682{535d,147u,0e} in 111{105 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1297 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":1298 85 {*movdi_internal}
     (nil))
(call_insn 7 6 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":1298 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 7 10 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (reg:SI 0 ax [orig:87 _1 ] [87])) "function.c":1298 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "function.c":1298 86 {*movsi_internal}
     (nil))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":1298 689 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])
        (const_int 0 [0])) "function.c":1299 86 {*movsi_internal}
     (nil))
(insn 13 12 71 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1300 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              5 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 133 134 135 136 137 138 139 140 141
(code_label 71 13 14 3 238 (nil) [1 uses])
(note 14 71 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1304 86 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":1304 86 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1305 85 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 3 bx [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [133])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1305 85 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 1 dx [134])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])) "function.c":1305 86 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 0 ax [135])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])) "function.c":1305 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 4 si)
        (reg:SI 1 dx [134])) "function.c":1305 86 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [135])) "function.c":1305 86 {*movsi_internal}
     (nil))
(call_insn 23 22 25 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1305 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 25 23 26 3 (set (mem:SI (plus:DI (reg/f:DI 3 bx [orig:89 _3 ] [89])
                (const_int 24 [0x18])) [3 _3->y_start+0 S4 A64])
        (reg:SI 0 ax [orig:90 _4 ] [90])) "function.c":1305 86 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1307 86 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":1307 86 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg/f:DI 0 ax [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1308 85 {*movdi_internal}
     (nil))
(insn 29 28 30 3 (set (reg/f:DI 3 bx [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [136])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1308 85 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 1 dx [137])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])) "function.c":1308 86 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:SI 0 ax [138])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])) "function.c":1308 86 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:SI 4 si)
        (reg:SI 1 dx [137])) "function.c":1308 86 {*movsi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:SI 5 di)
        (reg:SI 0 ax [138])) "function.c":1308 86 {*movsi_internal}
     (nil))
(call_insn 34 33 36 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1308 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 36 34 37 3 (set (mem:SI (plus:DI (reg/f:DI 3 bx [orig:91 _5 ] [91])
                (const_int 20 [0x14])) [3 _5->x_start+0 S4 A32])
        (reg:SI 0 ax [orig:92 _6 ] [92])) "function.c":1308 86 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg/f:DI 0 ax [139])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (reg/f:DI 1 dx [orig:93 _7 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [139])
                (const_int 16 [0x10])) [9 serwer_56(D)->mapa+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (set (reg/f:DI 0 ax [orig:94 _8 ] [94])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [140])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (reg:SI 0 ax [orig:95 _9 ] [95])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:94 _8 ] [94])
                (const_int 24 [0x18])) [3 _8->y_start+0 S4 A64])) "function.c":1310 86 {*movsi_internal}
     (nil))
(insn 42 41 43 3 (set (reg:DI 0 ax [orig:96 _10 ] [96])
        (sign_extend:DI (reg:SI 0 ax [orig:95 _9 ] [95]))) "function.c":1310 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 0 ax [orig:97 _11 ] [97])
                (ashift:DI (reg:DI 0 ax [orig:96 _10 ] [96])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1310 551 {*ashldi3_1}
     (nil))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (plus:DI (reg:DI 0 ax [orig:97 _11 ] [97])
                    (reg/f:DI 1 dx [orig:93 _7 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1310 222 {*adddi_1}
     (nil))
(insn 45 44 46 3 (set (reg/f:DI 1 dx [orig:99 _13 ] [99])
        (mem/f:DI (reg/f:DI 0 ax [orig:98 _12 ] [98]) [10 *_12+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 46 45 47 3 (set (reg/f:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 47 46 48 3 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [141])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 48 47 49 3 (set (reg:SI 0 ax [orig:101 _15 ] [101])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:100 _14 ] [100])
                (const_int 20 [0x14])) [3 _14->x_start+0 S4 A32])) "function.c":1310 86 {*movsi_internal}
     (nil))
(insn 49 48 50 3 (set (reg:DI 0 ax [orig:102 _16 ] [102])
        (sign_extend:DI (reg:SI 0 ax [orig:101 _15 ] [101]))) "function.c":1310 149 {*extendsidi2_rex64}
     (nil))
(insn 50 49 51 3 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg:DI 0 ax [orig:102 _16 ] [102])
                    (reg/f:DI 1 dx [orig:99 _13 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1310 222 {*adddi_1}
     (nil))
(insn 51 50 52 3 (set (reg:QI 0 ax [orig:104 _18 ] [104])
        (mem:QI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [0 *_17+0 S1 A8])) "function.c":1310 88 {*movqi_internal}
     (nil))
(insn 52 51 53 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:104 _18 ] [104])
            (const_int 46 [0x2e]))) "function.c":1310 9 {*cmpqi_1}
     (nil))
(jump_insn 53 52 54 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "function.c":1310 682 {*jcc}
     (nil)
 -> 69)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 105 106 107 108 109 110 142 143 144 145
(note 54 53 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 4 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg/f:DI 1 dx [orig:105 _19 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [142])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (reg/f:DI 0 ax [143])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [143])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:SI 1 dx [orig:107 _21 ] [107])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:105 _19 ] [105])
                (const_int 20 [0x14])) [3 _19->x_start+0 S4 A32])) "function.c":1312 86 {*movsi_internal}
     (nil))
(insn 60 59 61 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (const_int 12 [0xc])) [3 _20->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:107 _21 ] [107])) "function.c":1312 86 {*movsi_internal}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg/f:DI 1 dx [orig:108 _22 ] [108])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [144])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [145])
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg:SI 1 dx [orig:110 _24 ] [110])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:108 _22 ] [108])
                (const_int 24 [0x18])) [3 _22->y_start+0 S4 A64])) "function.c":1313 86 {*movsi_internal}
     (nil))
(insn 66 65 141 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (const_int 16 [0x10])) [3 _23->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:110 _24 ] [110])) "function.c":1313 86 {*movsi_internal}
     (nil))
(jump_insn 141 66 142 4 (set (pc)
        (label_ref 74)) "function.c":1314 683 {jump}
     (nil)
 -> 74)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 142 141 69)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 69 142 70 5 236 (nil) [1 uses])
(note 70 69 143 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 143 70 144 5 (set (pc)
        (label_ref 71)) "function.c":1304 683 {jump}
     (nil)
 -> 71)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 144 143 74)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4 [always] 
;;              8 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 146 147 148 149 150 151 152 153 154
(code_label 74 144 75 6 237 (nil) [2 uses])
(note 75 74 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1320 86 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":1320 86 {*movsi_internal}
     (nil))
(insn 78 77 79 6 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1321 85 {*movdi_internal}
     (nil))
(insn 79 78 80 6 (set (reg/f:DI 3 bx [orig:111 _25 ] [111])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [146])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1321 85 {*movdi_internal}
     (nil))
(insn 80 79 81 6 (set (reg:SI 1 dx [147])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])) "function.c":1321 86 {*movsi_internal}
     (nil))
(insn 81 80 82 6 (set (reg:SI 0 ax [148])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])) "function.c":1321 86 {*movsi_internal}
     (nil))
(insn 82 81 83 6 (set (reg:SI 4 si)
        (reg:SI 1 dx [147])) "function.c":1321 86 {*movsi_internal}
     (nil))
(insn 83 82 84 6 (set (reg:SI 5 di)
        (reg:SI 0 ax [148])) "function.c":1321 86 {*movsi_internal}
     (nil))
(call_insn 84 83 86 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1321 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 86 84 87 6 (set (mem:SI (plus:DI (reg/f:DI 3 bx [orig:111 _25 ] [111])
                (const_int 24 [0x18])) [3 _25->y_start+0 S4 A64])
        (reg:SI 0 ax [orig:112 _26 ] [112])) "function.c":1321 86 {*movsi_internal}
     (nil))
(insn 87 86 88 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1323 86 {*movsi_internal}
     (nil))
(insn 88 87 89 6 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":1323 86 {*movsi_internal}
     (nil))
(insn 89 88 90 6 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1324 85 {*movdi_internal}
     (nil))
(insn 90 89 91 6 (set (reg/f:DI 3 bx [orig:113 _27 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [149])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1324 85 {*movdi_internal}
     (nil))
(insn 91 90 92 6 (set (reg:SI 1 dx [150])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [3 upp+0 S4 A32])) "function.c":1324 86 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:SI 0 ax [151])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [3 low+0 S4 A32])) "function.c":1324 86 {*movsi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:SI 4 si)
        (reg:SI 1 dx [150])) "function.c":1324 86 {*movsi_internal}
     (nil))
(insn 94 93 95 6 (set (reg:SI 5 di)
        (reg:SI 0 ax [151])) "function.c":1324 86 {*movsi_internal}
     (nil))
(call_insn 95 94 97 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1324 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 97 95 98 6 (set (mem:SI (plus:DI (reg/f:DI 3 bx [orig:113 _27 ] [113])
                (const_int 20 [0x14])) [3 _27->x_start+0 S4 A32])
        (reg:SI 0 ax [orig:114 _28 ] [114])) "function.c":1324 86 {*movsi_internal}
     (nil))
(insn 98 97 99 6 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 1 dx [orig:115 _29 ] [115])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [152])
                (const_int 16 [0x10])) [9 serwer_56(D)->mapa+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 101 100 102 6 (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [153])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 102 101 103 6 (set (reg:SI 0 ax [orig:117 _31 ] [117])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (const_int 24 [0x18])) [3 _30->y_start+0 S4 A64])) "function.c":1326 86 {*movsi_internal}
     (nil))
(insn 103 102 104 6 (set (reg:DI 0 ax [orig:118 _32 ] [118])
        (sign_extend:DI (reg:SI 0 ax [orig:117 _31 ] [117]))) "function.c":1326 149 {*extendsidi2_rex64}
     (nil))
(insn 104 103 105 6 (parallel [
            (set (reg:DI 0 ax [orig:119 _33 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:118 _32 ] [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1326 551 {*ashldi3_1}
     (nil))
(insn 105 104 106 6 (parallel [
            (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
                (plus:DI (reg:DI 0 ax [orig:119 _33 ] [119])
                    (reg/f:DI 1 dx [orig:115 _29 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1326 222 {*adddi_1}
     (nil))
(insn 106 105 107 6 (set (reg/f:DI 1 dx [orig:121 _35 ] [121])
        (mem/f:DI (reg/f:DI 0 ax [orig:120 _34 ] [120]) [10 *_34+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 107 106 108 6 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 108 107 109 6 (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [154])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 109 108 110 6 (set (reg:SI 0 ax [orig:123 _37 ] [123])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:122 _36 ] [122])
                (const_int 20 [0x14])) [3 _36->x_start+0 S4 A32])) "function.c":1326 86 {*movsi_internal}
     (nil))
(insn 110 109 111 6 (set (reg:DI 0 ax [orig:124 _38 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 _37 ] [123]))) "function.c":1326 149 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 6 (parallel [
            (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (plus:DI (reg:DI 0 ax [orig:124 _38 ] [124])
                    (reg/f:DI 1 dx [orig:121 _35 ] [121])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1326 222 {*adddi_1}
     (nil))
(insn 112 111 113 6 (set (reg:QI 0 ax [orig:126 _40 ] [126])
        (mem:QI (reg/f:DI 0 ax [orig:125 _39 ] [125]) [0 *_39+0 S1 A8])) "function.c":1326 88 {*movqi_internal}
     (nil))
(insn 113 112 114 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:126 _40 ] [126])
            (const_int 46 [0x2e]))) "function.c":1326 9 {*cmpqi_1}
     (nil))
(jump_insn 114 113 115 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 130)
            (pc))) "function.c":1326 682 {*jcc}
     (nil)
 -> 130)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 127 128 129 130 131 132 155 156 157 158
(note 115 114 116 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 7 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (nil))
(insn 117 116 118 7 (set (reg/f:DI 1 dx [orig:127 _41 ] [127])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [155])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (nil))
(insn 118 117 119 7 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (nil))
(insn 119 118 120 7 (set (reg/f:DI 0 ax [orig:128 _42 ] [128])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [156])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (nil))
(insn 120 119 121 7 (set (reg:SI 1 dx [orig:129 _43 ] [129])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:127 _41 ] [127])
                (const_int 20 [0x14])) [3 _41->x_start+0 S4 A32])) "function.c":1328 86 {*movsi_internal}
     (nil))
(insn 121 120 122 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:128 _42 ] [128])
                (const_int 12 [0xc])) [3 _42->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:129 _43 ] [129])) "function.c":1328 86 {*movsi_internal}
     (nil))
(insn 122 121 123 7 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (nil))
(insn 123 122 124 7 (set (reg/f:DI 1 dx [orig:130 _44 ] [130])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [157])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (nil))
(insn 124 123 125 7 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [12 serwer+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (nil))
(insn 125 124 126 7 (set (reg/f:DI 0 ax [orig:131 _45 ] [131])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [158])
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (nil))
(insn 126 125 127 7 (set (reg:SI 1 dx [orig:132 _46 ] [132])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:130 _44 ] [130])
                (const_int 24 [0x18])) [3 _44->y_start+0 S4 A64])) "function.c":1329 86 {*movsi_internal}
     (nil))
(insn 127 126 146 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:131 _45 ] [131])
                (const_int 16 [0x10])) [3 _45->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:132 _46 ] [132])) "function.c":1329 86 {*movsi_internal}
     (nil))
(jump_insn 146 127 147 7 (set (pc)
        (label_ref 145)) "function.c":1330 683 {jump}
     (nil)
 -> 145)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 130)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 130 147 131 8 239 (nil) [1 uses])
(note 131 130 148 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 148 131 149 8 (set (pc)
        (label_ref 74)) "function.c":1320 683 {jump}
     (nil)
 -> 74)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 149 148 145)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 145 149 135 9 242 (nil) [1 uses])
(note 135 145 140 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 140 135 150 9 (const_int 0 [0]) "function.c":1333 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 150 140 0 NOTE_INSN_DELETED)

;; Function bestia_kolizja (bestia_kolizja, funcdef_no=28, decl_uid=6263, cgraph_uid=28, symbol_order=31)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 25:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 34:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 63:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 70:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 79
	 Choosing alt 0 in insn 79:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 83:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 84
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 85:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 96:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 105:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 115:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 116:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 119:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 129:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 131:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 134:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 136:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 137:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 138:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 140:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 144:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 145:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 146:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 147:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 149:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 152:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 154:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 155:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 156:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 157:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 158:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 159:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 161
	 Choosing alt 0 in insn 161:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 166
	 Choosing alt 0 in insn 166:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 167:  (0) m  (1) qn {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6 7
EBB 9
EBB 8

********** Pseudo live ranges #1: **********

  BB 8
  BB 9
   Insn 179: point = 0, n_alt = -1
  BB 7
   Insn 174: point = 0, n_alt = -1
   Insn 167: point = 0, n_alt = 8
   Insn 166: point = 1, n_alt = 0
   Insn 165: point = 3, n_alt = 0
   Insn 164: point = 5, n_alt = 0
   Insn 163: point = 7, n_alt = 3
   Insn 162: point = 8, n_alt = 3
   Insn 161: point = 10, n_alt = 0
   Insn 160: point = 12, n_alt = 0
   Insn 159: point = 14, n_alt = 0
   Insn 158: point = 16, n_alt = 0
   Insn 157: point = 18, n_alt = 3
   Insn 156: point = 19, n_alt = 3
   Insn 155: point = 21, n_alt = 3
   Insn 154: point = 22, n_alt = 1
   Insn 153: point = 23, n_alt = 3
   Insn 152: point = 24, n_alt = 3
   Insn 151: point = 26, n_alt = 0
   Insn 150: point = 28, n_alt = 3
   Insn 149: point = 29, n_alt = 1
   Insn 148: point = 30, n_alt = 0
   Insn 147: point = 32, n_alt = 3
   Insn 146: point = 34, n_alt = 3
   Insn 145: point = 35, n_alt = 3
   Insn 144: point = 37, n_alt = 3
   Insn 143: point = 38, n_alt = 1
   Insn 142: point = 39, n_alt = 0
   Insn 141: point = 41, n_alt = 3
   Insn 140: point = 43, n_alt = 3
   Insn 139: point = 44, n_alt = 3
   Insn 138: point = 46, n_alt = 3
   Insn 137: point = 47, n_alt = 1
   Insn 136: point = 48, n_alt = 3
   Insn 135: point = 50, n_alt = 3
   Insn 134: point = 51, n_alt = 1
   Insn 133: point = 52, n_alt = 0
   Insn 132: point = 54, n_alt = 1
   Insn 131: point = 56, n_alt = 3
   Insn 130: point = 57, n_alt = 0
   Insn 129: point = 59, n_alt = 0
   Insn 128: point = 61, n_alt = 3
   Insn 127: point = 62, n_alt = 3
   Insn 126: point = 64, n_alt = 3
   Insn 125: point = 65, n_alt = 1
   Insn 124: point = 66, n_alt = 1
   Insn 123: point = 68, n_alt = 3
   Insn 122: point = 69, n_alt = 0
   Insn 121: point = 71, n_alt = 0
   Insn 120: point = 73, n_alt = 3
   Insn 119: point = 74, n_alt = 3
   Insn 118: point = 76, n_alt = 3
   Insn 117: point = 77, n_alt = 1
   Insn 116: point = 78, n_alt = 0
   Insn 115: point = 80, n_alt = 1
   Insn 114: point = 82, n_alt = 3
   Insn 113: point = 83, n_alt = 0
   Insn 112: point = 85, n_alt = 0
   Insn 111: point = 87, n_alt = 3
   Insn 110: point = 88, n_alt = 3
   Insn 109: point = 90, n_alt = 3
   Insn 108: point = 91, n_alt = 1
   Insn 107: point = 92, n_alt = 0
   Insn 106: point = 94, n_alt = 0
   Insn 105: point = 95, n_alt = 3
   Insn 104: point = 97, n_alt = 3
  BB 6
   Insn 102: point = 98, n_alt = -1
   Insn 101: point = 98, n_alt = 0
   Insn 100: point = 99, n_alt = 0
   Insn 99: point = 101, n_alt = 3
   Insn 98: point = 103, n_alt = 3
   Insn 97: point = 104, n_alt = 0
   Insn 96: point = 106, n_alt = 3
  BB 5
   Insn 94: point = 107, n_alt = -1
   Insn 93: point = 107, n_alt = 0
   Insn 92: point = 108, n_alt = 0
   Insn 91: point = 110, n_alt = 3
   Insn 90: point = 112, n_alt = 3
   Insn 89: point = 113, n_alt = 0
   Insn 88: point = 115, n_alt = 3
  BB 4
   Insn 85: point = 116, n_alt = 8
   Insn 84: point = 117, n_alt = 0
   Insn 83: point = 119, n_alt = 0
   Insn 82: point = 121, n_alt = 0
   Insn 81: point = 123, n_alt = 3
   Insn 80: point = 124, n_alt = 3
   Insn 79: point = 126, n_alt = 0
   Insn 78: point = 128, n_alt = 0
   Insn 77: point = 130, n_alt = 0
   Insn 76: point = 132, n_alt = 0
   Insn 75: point = 134, n_alt = 3
   Insn 74: point = 135, n_alt = 3
   Insn 73: point = 137, n_alt = 3
   Insn 72: point = 138, n_alt = 1
   Insn 71: point = 139, n_alt = 3
   Insn 70: point = 140, n_alt = 3
   Insn 69: point = 142, n_alt = 0
   Insn 68: point = 144, n_alt = 3
   Insn 67: point = 145, n_alt = 1
   Insn 66: point = 146, n_alt = 0
   Insn 65: point = 148, n_alt = 3
   Insn 64: point = 150, n_alt = 3
   Insn 63: point = 151, n_alt = 3
   Insn 62: point = 153, n_alt = 3
   Insn 61: point = 154, n_alt = 1
   Insn 60: point = 155, n_alt = 0
   Insn 59: point = 157, n_alt = 3
   Insn 58: point = 159, n_alt = 3
   Insn 57: point = 160, n_alt = 3
   Insn 56: point = 162, n_alt = 3
   Insn 55: point = 163, n_alt = 1
   Insn 54: point = 164, n_alt = 3
   Insn 53: point = 166, n_alt = 3
   Insn 52: point = 167, n_alt = 1
   Insn 51: point = 168, n_alt = 0
   Insn 50: point = 170, n_alt = 1
   Insn 49: point = 172, n_alt = 3
   Insn 48: point = 173, n_alt = 0
   Insn 47: point = 175, n_alt = 0
   Insn 46: point = 177, n_alt = 3
   Insn 45: point = 178, n_alt = 3
   Insn 44: point = 180, n_alt = 3
   Insn 43: point = 181, n_alt = 1
   Insn 42: point = 182, n_alt = 1
   Insn 41: point = 184, n_alt = 3
   Insn 40: point = 185, n_alt = 0
   Insn 39: point = 187, n_alt = 0
   Insn 38: point = 189, n_alt = 3
   Insn 37: point = 190, n_alt = 3
   Insn 36: point = 192, n_alt = 3
   Insn 35: point = 193, n_alt = 1
   Insn 34: point = 194, n_alt = 0
   Insn 33: point = 196, n_alt = 1
   Insn 32: point = 198, n_alt = 3
   Insn 31: point = 199, n_alt = 0
   Insn 30: point = 201, n_alt = 0
   Insn 29: point = 203, n_alt = 3
   Insn 28: point = 204, n_alt = 3
   Insn 27: point = 206, n_alt = 3
   Insn 26: point = 207, n_alt = 1
   Insn 25: point = 208, n_alt = 0
   Insn 24: point = 210, n_alt = 0
   Insn 23: point = 211, n_alt = 3
   Insn 22: point = 213, n_alt = 3
  BB 3
   Insn 20: point = 214, n_alt = -1
   Insn 19: point = 214, n_alt = 0
   Insn 18: point = 215, n_alt = 0
   Insn 17: point = 217, n_alt = 3
   Insn 16: point = 219, n_alt = 3
   Insn 15: point = 220, n_alt = 0
   Insn 14: point = 222, n_alt = 3
  BB 2
   Insn 12: point = 223, n_alt = -1
   Insn 11: point = 223, n_alt = 0
   Insn 10: point = 224, n_alt = 0
   Insn 9: point = 226, n_alt = 3
   Insn 8: point = 228, n_alt = 3
   Insn 7: point = 229, n_alt = 0
   Insn 6: point = 231, n_alt = 3
   Insn 2: point = 232, n_alt = 5
 r87: [223..229]
 r88: [225..226]
 r89: [223..224]
 r90: [214..220]
 r91: [216..217]
 r92: [214..215]
 r93: [207..211]
 r94: [209..210]
 r95: [207..208]
 r96: [200..204]
 r97: [197..201]
 r98: [193..199]
 r99: [186..190]
 r100: [183..187]
 r101: [181..185]
 r102: [174..178]
 r103: [171..175]
 r104: [167..173]
 r105: [163..164]
 r106: [156..160]
 r107: [154..157]
 r108: [154..155]
 r109: [147..151]
 r110: [145..148]
 r111: [145..146]
 r112: [141..142]
 r113: [138..140]
 r114: [127..135]
 r115: [131..132]
 r116: [129..130]
 r117: [127..128]
 r118: [125..126]
 r119: [118..124]
 r120: [120..121]
 r121: [118..119]
 r122: [116..117]
 r123: [107..113]
 r124: [109..110]
 r125: [107..108]
 r126: [98..104]
 r127: [100..101]
 r128: [98..99]
 r129: [91..95]
 r130: [93..94]
 r131: [91..92]
 r132: [84..88]
 r133: [81..85]
 r134: [77..83]
 r135: [70..74]
 r136: [67..71]
 r137: [65..69]
 r138: [58..62]
 r139: [55..59]
 r140: [51..57]
 r141: [47..48]
 r142: [40..44]
 r143: [38..41]
 r144: [38..39]
 r145: [31..35]
 r146: [29..32]
 r147: [29..30]
 r148: [25..26]
 r149: [22..24]
 r150: [11..19]
 r151: [15..16]
 r152: [13..14]
 r153: [11..12]
 r154: [9..10]
 r155: [2..8]
 r156: [4..5]
 r157: [2..3]
 r158: [0..1]
 r159: [230..231]
 r160: [227..228]
 r161: [221..222]
 r162: [218..219]
 r163: [212..213]
 r164: [205..206]
 r165: [202..203]
 r166: [193..198]
 r167: [195..196]
 r168: [193..194]
 r169: [191..192]
 r170: [188..189]
 r171: [181..184]
 r172: [181..182]
 r173: [179..180]
 r174: [176..177]
 r175: [167..172]
 r176: [169..170]
 r177: [167..168]
 r178: [165..166]
 r179: [161..162]
 r180: [158..159]
 r181: [152..153]
 r182: [149..150]
 r183: [143..144]
 r184: [138..139]
 r185: [136..137]
 r186: [133..134]
 r187: [122..123]
 r188: [114..115]
 r189: [111..112]
 r190: [105..106]
 r191: [102..103]
 r192: [96..97]
 r193: [89..90]
 r194: [86..87]
 r195: [77..82]
 r196: [79..80]
 r197: [77..78]
 r198: [75..76]
 r199: [72..73]
 r200: [65..68]
 r201: [65..66]
 r202: [63..64]
 r203: [60..61]
 r204: [51..56]
 r205: [53..54]
 r206: [51..52]
 r207: [49..50]
 r208: [45..46]
 r209: [42..43]
 r210: [36..37]
 r211: [33..34]
 r212: [27..28]
 r213: [22..23]
 r214: [20..21]
 r215: [17..18]
 r216: [6..7]
Compressing live ranges: from 232 to 204 - 87%
Ranges after the compression:
 r87: [196..201]
 r88: [198..199]
 r89: [196..197]
 r90: [188..193]
 r91: [190..191]
 r92: [188..189]
 r93: [182..185]
 r94: [184..185]
 r95: [182..183]
 r96: [176..179]
 r97: [174..177]
 r98: [170..175]
 r99: [164..167]
 r100: [162..165]
 r101: [160..163]
 r102: [154..157]
 r103: [152..155]
 r104: [148..153]
 r105: [144..145]
 r106: [138..141]
 r107: [136..139]
 r108: [136..137]
 r109: [130..133]
 r110: [128..131]
 r111: [128..129]
 r112: [124..125]
 r113: [122..123]
 r114: [112..119]
 r115: [116..117]
 r116: [114..115]
 r117: [112..113]
 r118: [110..111]
 r119: [104..109]
 r120: [106..107]
 r121: [104..105]
 r122: [102..103]
 r123: [94..99]
 r124: [96..97]
 r125: [94..95]
 r126: [86..91]
 r127: [88..89]
 r128: [86..87]
 r129: [80..83]
 r130: [82..83]
 r131: [80..81]
 r132: [74..77]
 r133: [72..75]
 r134: [68..73]
 r135: [62..65]
 r136: [60..63]
 r137: [58..61]
 r138: [52..55]
 r139: [50..53]
 r140: [46..51]
 r141: [42..43]
 r142: [36..39]
 r143: [34..37]
 r144: [34..35]
 r145: [28..31]
 r146: [26..29]
 r147: [26..27]
 r148: [22..23]
 r149: [20..21]
 r150: [10..17]
 r151: [14..15]
 r152: [12..13]
 r153: [10..11]
 r154: [8..9]
 r155: [2..7]
 r156: [4..5]
 r157: [2..3]
 r158: [0..1]
 r159: [202..203]
 r160: [200..201]
 r161: [194..195]
 r162: [192..193]
 r163: [186..187]
 r164: [180..181]
 r165: [178..179]
 r166: [170..175]
 r167: [172..173]
 r168: [170..171]
 r169: [168..169]
 r170: [166..167]
 r171: [160..163]
 r172: [160..161]
 r173: [158..159]
 r174: [156..157]
 r175: [148..153]
 r176: [150..151]
 r177: [148..149]
 r178: [146..147]
 r179: [142..143]
 r180: [140..141]
 r181: [134..135]
 r182: [132..133]
 r183: [126..127]
 r184: [122..123]
 r185: [120..121]
 r186: [118..119]
 r187: [108..109]
 r188: [100..101]
 r189: [98..99]
 r190: [92..93]
 r191: [90..91]
 r192: [84..85]
 r193: [78..79]
 r194: [76..77]
 r195: [68..73]
 r196: [70..71]
 r197: [68..69]
 r198: [66..67]
 r199: [64..65]
 r200: [58..61]
 r201: [58..59]
 r202: [56..57]
 r203: [54..55]
 r204: [46..51]
 r205: [48..49]
 r206: [46..47]
 r207: [44..45]
 r208: [40..41]
 r209: [38..39]
 r210: [32..33]
 r211: [30..31]
 r212: [24..25]
 r213: [20..21]
 r214: [18..19]
 r215: [16..17]
 r216: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 19
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 35
changing reg in insn 37
changing reg in insn 40
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 43
changing reg in insn 45
changing reg in insn 48
changing reg in insn 47
changing reg in insn 50
changing reg in insn 48
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 60
changing reg in insn 59
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 66
changing reg in insn 65
changing reg in insn 67
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 89
changing reg in insn 93
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 100
changing reg in insn 101
changing reg in insn 105
changing reg in insn 108
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 113
changing reg in insn 112
changing reg in insn 115
changing reg in insn 113
changing reg in insn 117
changing reg in insn 119
changing reg in insn 122
changing reg in insn 121
changing reg in insn 124
changing reg in insn 122
changing reg in insn 125
changing reg in insn 127
changing reg in insn 130
changing reg in insn 129
changing reg in insn 132
changing reg in insn 130
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 142
changing reg in insn 141
changing reg in insn 143
changing reg in insn 142
changing reg in insn 143
changing reg in insn 145
changing reg in insn 148
changing reg in insn 147
changing reg in insn 149
changing reg in insn 148
changing reg in insn 149
changing reg in insn 151
changing reg in insn 152
changing reg in insn 152
changing reg in insn 154
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 43
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 81
changing reg in insn 82
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 104
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 114
changing reg in insn 117
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 125
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 134
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 150
changing reg in insn 151
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 163
changing reg in insn 164
starting the processing of deferred insns
ending the processing of deferred insns


bestia_kolizja

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={81d,82u} r1={37d,36u} r2={15d,14u} r4={1d} r5={1d,1u} r6={1d,58u} r7={1d,9u} r17={18d,4u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 371{166d,205u,0e} in 159{159 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 159 160
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1337 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx [orig:87 _1 ] [87])
        (mem:SI (plus:DI (reg/f:DI 0 ax [159])
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1338 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:88 _2 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 ax [orig:89 _3 ] [89])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:88 _2 ] [88])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":1338 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:87 _1 ] [87])
            (reg:SI 0 ax [orig:89 _3 ] [89]))) "function.c":1338 11 {*cmpsi_1}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "function.c":1338 682 {*jcc}
     (nil)
 -> 86)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 161 162
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 1 dx [orig:90 _4 ] [90])
        (mem:SI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1338 86 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [162])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [162])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 ax [orig:92 _6 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1338 86 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:90 _4 ] [90])
            (reg:SI 0 ax [orig:92 _6 ] [92]))) "function.c":1338 11 {*cmpsi_1}
     (nil))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "function.c":1338 682 {*jcc}
     (nil)
 -> 86)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 0 ax [163])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1340 85 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [163])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1340 85 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 1 dx [orig:94 _8 ] [94])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (const_int 28 [0x1c])) [3 _7->deaths+0 S4 A32])) "function.c":1340 86 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:SI 1 dx [orig:95 _9 ] [95])
                (plus:SI (reg:SI 1 dx [orig:94 _8 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1340 221 {*addsi_1}
     (nil))
(insn 26 25 27 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (const_int 28 [0x1c])) [3 _7->deaths+0 S4 A32])
        (reg:SI 1 dx [orig:95 _9 ] [95])) "function.c":1340 86 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [164])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg/f:DI 1 dx [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 2 cx [orig:97 _11 ] [97])
        (mem:SI (plus:DI (reg/f:DI 1 dx [165])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1342 86 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 1 dx [orig:98 _12 ] [98])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (const_int 16 [0x10])) [3 _10->y_current+0 S4 A64])) "function.c":1342 86 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 2 cx [167])
        (sign_extend:DI (reg:SI 2 cx [orig:97 _11 ] [97]))) "function.c":1342 149 {*extendsidi2_rex64}
     (nil))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 2 cx [168])
                (plus:DI (reg:DI 2 cx [167])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1342 222 {*adddi_1}
     (nil))
(insn 35 34 36 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 2 cx [168])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [166])) [3 serwer_76(D)->skarb.dropped_coin S4 A64])
        (reg:SI 1 dx [orig:98 _12 ] [98])) "function.c":1342 86 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg/f:DI 0 ax [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 0 ax [orig:99 _13 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [169])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg/f:DI 1 dx [170])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:SI 1 dx [orig:100 _14 ] [100])
        (mem:SI (plus:DI (reg/f:DI 1 dx [170])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1343 86 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:SI 2 cx [orig:101 _15 ] [101])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:99 _13 ] [99])
                (const_int 12 [0xc])) [3 _13->x_current+0 S4 A32])) "function.c":1343 86 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 1 dx [172])
        (sign_extend:DI (reg:SI 1 dx [orig:100 _14 ] [100]))) "function.c":1343 149 {*extendsidi2_rex64}
     (nil))
(insn 43 42 44 4 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [172])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [171]))
                (const_int 24068 [0x5e04])) [3 serwer_76(D)->skarb.dropped_coin S4 A32])
        (reg:SI 2 cx [orig:101 _15 ] [101])) "function.c":1343 86 {*movsi_internal}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 0 ax [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 0 ax [orig:102 _16 ] [102])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [173])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg/f:DI 1 dx [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SI 2 cx [orig:103 _17 ] [103])
        (mem:SI (plus:DI (reg/f:DI 1 dx [174])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1345 86 {*movsi_internal}
     (nil))
(insn 48 47 49 4 (set (reg:SI 1 dx [orig:104 _18 ] [104])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:102 _16 ] [102])
                (const_int 32 [0x20])) [3 _16->coins_carried+0 S4 A64])) "function.c":1345 86 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 2 cx [176])
        (sign_extend:DI (reg:SI 2 cx [orig:103 _17 ] [103]))) "function.c":1345 149 {*extendsidi2_rex64}
     (nil))
(insn 51 50 52 4 (parallel [
            (set (reg:DI 2 cx [177])
                (plus:DI (reg:DI 2 cx [176])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1345 222 {*adddi_1}
     (nil))
(insn 52 51 53 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 2 cx [177])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [175])) [3 serwer_76(D)->skarb.value_all_dropped_coin S4 A32])
        (reg:SI 1 dx [orig:104 _18 ] [104])) "function.c":1345 86 {*movsi_internal}
     (nil))
(insn 53 52 54 4 (set (reg/f:DI 0 ax [178])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1347 85 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (set (reg/f:DI 0 ax [orig:105 _19 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [178])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1347 85 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:105 _19 ] [105])
                (const_int 32 [0x20])) [3 _19->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1347 86 {*movsi_internal}
     (nil))
(insn 56 55 57 4 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (reg/f:DI 1 dx [orig:106 _20 ] [106])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [179])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [180])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (nil))
(insn 60 59 61 4 (set (reg:SI 1 dx [orig:108 _22 ] [108])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:106 _20 ] [106])
                (const_int 20 [0x14])) [3 _20->x_start+0 S4 A32])) "function.c":1349 86 {*movsi_internal}
     (nil))
(insn 61 60 62 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (const_int 12 [0xc])) [3 _21->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:108 _22 ] [108])) "function.c":1349 86 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (reg/f:DI 0 ax [181])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 1 dx [orig:109 _23 ] [109])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [181])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [182])
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (reg:SI 1 dx [orig:111 _25 ] [111])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:109 _23 ] [109])
                (const_int 24 [0x18])) [3 _23->y_start+0 S4 A64])) "function.c":1350 86 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                (const_int 16 [0x10])) [3 _24->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:111 _25 ] [111])) "function.c":1350 86 {*movsi_internal}
     (nil))
(insn 68 67 69 4 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1352 85 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:SI 0 ax [orig:112 _26 ] [112])
        (mem:SI (plus:DI (reg/f:DI 0 ax [183])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1352 86 {*movsi_internal}
     (nil))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 1 dx [orig:113 _27 ] [113])
                (plus:SI (reg:SI 0 ax [orig:112 _26 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1352 221 {*addsi_1}
     (nil))
(insn 71 70 72 4 (set (reg/f:DI 0 ax [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1352 85 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [184])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])
        (reg:SI 1 dx [orig:113 _27 ] [113])) "function.c":1352 86 {*movsi_internal}
     (nil))
(insn 73 72 74 4 (set (reg/f:DI 0 ax [185])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg/f:DI 1 dx [orig:114 _28 ] [114])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [185])
                (const_int 16 [0x10])) [9 serwer_76(D)->mapa+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 75 74 76 4 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:SI 0 ax [orig:115 _29 ] [115])
        (mem:SI (plus:DI (reg/f:DI 0 ax [186])
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1354 86 {*movsi_internal}
     (nil))
(insn 77 76 78 4 (set (reg:DI 0 ax [orig:116 _30 ] [116])
        (sign_extend:DI (reg:SI 0 ax [orig:115 _29 ] [115]))) "function.c":1354 149 {*extendsidi2_rex64}
     (nil))
(insn 78 77 79 4 (parallel [
            (set (reg:DI 0 ax [orig:117 _31 ] [117])
                (ashift:DI (reg:DI 0 ax [orig:116 _30 ] [116])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1354 551 {*ashldi3_1}
     (nil))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 0 ax [orig:118 _32 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _31 ] [117])
                    (reg/f:DI 1 dx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1354 222 {*adddi_1}
     (nil))
(insn 80 79 81 4 (set (reg/f:DI 1 dx [orig:119 _33 ] [119])
        (mem/f:DI (reg/f:DI 0 ax [orig:118 _32 ] [118]) [10 *_32+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 81 80 82 4 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:SI 0 ax [orig:120 _34 ] [120])
        (mem:SI (plus:DI (reg/f:DI 0 ax [187])
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1354 86 {*movsi_internal}
     (nil))
(insn 83 82 84 4 (set (reg:DI 0 ax [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 0 ax [orig:120 _34 ] [120]))) "function.c":1354 149 {*extendsidi2_rex64}
     (nil))
(insn 84 83 85 4 (parallel [
            (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
                (plus:DI (reg:DI 0 ax [orig:121 _35 ] [121])
                    (reg/f:DI 1 dx [orig:119 _33 ] [119])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1354 222 {*adddi_1}
     (nil))
(insn 85 84 86 4 (set (mem:QI (reg/f:DI 0 ax [orig:122 _36 ] [122]) [0 *_36+0 S1 A8])
        (const_int 68 [0x44])) "function.c":1354 88 {*movqi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 188 189
(code_label 86 85 87 5 244 (nil) [2 uses])
(note 87 86 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 5 (set (reg/f:DI 0 ax [188])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 89 88 90 5 (set (reg:SI 1 dx [orig:123 _37 ] [123])
        (mem:SI (plus:DI (reg/f:DI 0 ax [188])
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1357 86 {*movsi_internal}
     (nil))
(insn 90 89 91 5 (set (reg/f:DI 0 ax [189])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 91 90 92 5 (set (reg/f:DI 0 ax [orig:124 _38 ] [124])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [189])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 92 91 93 5 (set (reg:SI 0 ax [orig:125 _39 ] [125])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:124 _38 ] [124])
                (const_int 12 [0xc])) [3 _38->x_current+0 S4 A32])) "function.c":1357 86 {*movsi_internal}
     (nil))
(insn 93 92 94 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:123 _37 ] [123])
            (reg:SI 0 ax [orig:125 _39 ] [125]))) "function.c":1357 11 {*cmpsi_1}
     (nil))
(jump_insn 94 93 95 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 178)
            (pc))) "function.c":1357 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126 127 128 190 191
(note 95 94 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 6 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 97 96 98 6 (set (reg:SI 1 dx [orig:126 _40 ] [126])
        (mem:SI (plus:DI (reg/f:DI 0 ax [190])
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1357 86 {*movsi_internal}
     (nil))
(insn 98 97 99 6 (set (reg/f:DI 0 ax [191])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 0 ax [orig:127 _41 ] [127])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [191])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (set (reg:SI 0 ax [orig:128 _42 ] [128])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:127 _41 ] [127])
                (const_int 16 [0x10])) [3 _41->y_current+0 S4 A64])) "function.c":1357 86 {*movsi_internal}
     (nil))
(insn 101 100 102 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:126 _40 ] [126])
            (reg:SI 0 ax [orig:128 _42 ] [128]))) "function.c":1357 11 {*cmpsi_1}
     (nil))
(jump_insn 102 101 103 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 178)
            (pc))) "function.c":1357 682 {*jcc}
     (nil)
 -> 178)
;;  succ:       7 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216
(note 103 102 104 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 7 (set (reg/f:DI 0 ax [192])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1359 85 {*movdi_internal}
     (nil))
(insn 105 104 106 7 (set (reg/f:DI 0 ax [orig:129 _43 ] [129])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [192])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1359 85 {*movdi_internal}
     (nil))
(insn 106 105 107 7 (set (reg:SI 1 dx [orig:130 _44 ] [130])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:129 _43 ] [129])
                (const_int 28 [0x1c])) [3 _43->deaths+0 S4 A32])) "function.c":1359 86 {*movsi_internal}
     (nil))
(insn 107 106 108 7 (parallel [
            (set (reg:SI 1 dx [orig:131 _45 ] [131])
                (plus:SI (reg:SI 1 dx [orig:130 _44 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1359 221 {*addsi_1}
     (nil))
(insn 108 107 109 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:129 _43 ] [129])
                (const_int 28 [0x1c])) [3 _43->deaths+0 S4 A32])
        (reg:SI 1 dx [orig:131 _45 ] [131])) "function.c":1359 86 {*movsi_internal}
     (nil))
(insn 109 108 110 7 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (nil))
(insn 110 109 111 7 (set (reg/f:DI 0 ax [orig:132 _46 ] [132])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [193])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (nil))
(insn 111 110 112 7 (set (reg/f:DI 1 dx [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (nil))
(insn 112 111 113 7 (set (reg:SI 2 cx [orig:133 _47 ] [133])
        (mem:SI (plus:DI (reg/f:DI 1 dx [194])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1361 86 {*movsi_internal}
     (nil))
(insn 113 112 114 7 (set (reg:SI 1 dx [orig:134 _48 ] [134])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:132 _46 ] [132])
                (const_int 16 [0x10])) [3 _46->y_current+0 S4 A64])) "function.c":1361 86 {*movsi_internal}
     (nil))
(insn 114 113 115 7 (set (reg/f:DI 0 ax [195])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (nil))
(insn 115 114 116 7 (set (reg:DI 2 cx [196])
        (sign_extend:DI (reg:SI 2 cx [orig:133 _47 ] [133]))) "function.c":1361 149 {*extendsidi2_rex64}
     (nil))
(insn 116 115 117 7 (parallel [
            (set (reg:DI 2 cx [197])
                (plus:DI (reg:DI 2 cx [196])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1361 222 {*adddi_1}
     (nil))
(insn 117 116 118 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 2 cx [197])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [195])) [3 serwer_76(D)->skarb.dropped_coin S4 A64])
        (reg:SI 1 dx [orig:134 _48 ] [134])) "function.c":1361 86 {*movsi_internal}
     (nil))
(insn 118 117 119 7 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (nil))
(insn 119 118 120 7 (set (reg/f:DI 0 ax [orig:135 _49 ] [135])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [198])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (nil))
(insn 120 119 121 7 (set (reg/f:DI 1 dx [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (nil))
(insn 121 120 122 7 (set (reg:SI 1 dx [orig:136 _50 ] [136])
        (mem:SI (plus:DI (reg/f:DI 1 dx [199])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1362 86 {*movsi_internal}
     (nil))
(insn 122 121 123 7 (set (reg:SI 2 cx [orig:137 _51 ] [137])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:135 _49 ] [135])
                (const_int 12 [0xc])) [3 _49->x_current+0 S4 A32])) "function.c":1362 86 {*movsi_internal}
     (nil))
(insn 123 122 124 7 (set (reg/f:DI 0 ax [200])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (nil))
(insn 124 123 125 7 (set (reg:DI 1 dx [201])
        (sign_extend:DI (reg:SI 1 dx [orig:136 _50 ] [136]))) "function.c":1362 149 {*extendsidi2_rex64}
     (nil))
(insn 125 124 126 7 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [201])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [200]))
                (const_int 24068 [0x5e04])) [3 serwer_76(D)->skarb.dropped_coin S4 A32])
        (reg:SI 2 cx [orig:137 _51 ] [137])) "function.c":1362 86 {*movsi_internal}
     (nil))
(insn 126 125 127 7 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (nil))
(insn 127 126 128 7 (set (reg/f:DI 0 ax [orig:138 _52 ] [138])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [202])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (nil))
(insn 128 127 129 7 (set (reg/f:DI 1 dx [203])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (nil))
(insn 129 128 130 7 (set (reg:SI 2 cx [orig:139 _53 ] [139])
        (mem:SI (plus:DI (reg/f:DI 1 dx [203])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1364 86 {*movsi_internal}
     (nil))
(insn 130 129 131 7 (set (reg:SI 1 dx [orig:140 _54 ] [140])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:138 _52 ] [138])
                (const_int 32 [0x20])) [3 _52->coins_carried+0 S4 A64])) "function.c":1364 86 {*movsi_internal}
     (nil))
(insn 131 130 132 7 (set (reg/f:DI 0 ax [204])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (nil))
(insn 132 131 133 7 (set (reg:DI 2 cx [205])
        (sign_extend:DI (reg:SI 2 cx [orig:139 _53 ] [139]))) "function.c":1364 149 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 7 (parallel [
            (set (reg:DI 2 cx [206])
                (plus:DI (reg:DI 2 cx [205])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1364 222 {*adddi_1}
     (nil))
(insn 134 133 135 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 2 cx [206])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [204])) [3 serwer_76(D)->skarb.value_all_dropped_coin S4 A32])
        (reg:SI 1 dx [orig:140 _54 ] [140])) "function.c":1364 86 {*movsi_internal}
     (nil))
(insn 135 134 136 7 (set (reg/f:DI 0 ax [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1366 85 {*movdi_internal}
     (nil))
(insn 136 135 137 7 (set (reg/f:DI 0 ax [orig:141 _55 ] [141])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [207])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1366 85 {*movdi_internal}
     (nil))
(insn 137 136 138 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:141 _55 ] [141])
                (const_int 32 [0x20])) [3 _55->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1366 86 {*movsi_internal}
     (nil))
(insn 138 137 139 7 (set (reg/f:DI 0 ax [208])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (nil))
(insn 139 138 140 7 (set (reg/f:DI 1 dx [orig:142 _56 ] [142])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [208])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (nil))
(insn 140 139 141 7 (set (reg/f:DI 0 ax [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (nil))
(insn 141 140 142 7 (set (reg/f:DI 0 ax [orig:143 _57 ] [143])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [209])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (nil))
(insn 142 141 143 7 (set (reg:SI 1 dx [orig:144 _58 ] [144])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:142 _56 ] [142])
                (const_int 20 [0x14])) [3 _56->x_start+0 S4 A32])) "function.c":1368 86 {*movsi_internal}
     (nil))
(insn 143 142 144 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:143 _57 ] [143])
                (const_int 12 [0xc])) [3 _57->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:144 _58 ] [144])) "function.c":1368 86 {*movsi_internal}
     (nil))
(insn 144 143 145 7 (set (reg/f:DI 0 ax [210])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (nil))
(insn 145 144 146 7 (set (reg/f:DI 1 dx [orig:145 _59 ] [145])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [210])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (nil))
(insn 146 145 147 7 (set (reg/f:DI 0 ax [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (nil))
(insn 147 146 148 7 (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [211])
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (nil))
(insn 148 147 149 7 (set (reg:SI 1 dx [orig:147 _61 ] [147])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:145 _59 ] [145])
                (const_int 24 [0x18])) [3 _59->y_start+0 S4 A64])) "function.c":1369 86 {*movsi_internal}
     (nil))
(insn 149 148 150 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:146 _60 ] [146])
                (const_int 16 [0x10])) [3 _60->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:147 _61 ] [147])) "function.c":1369 86 {*movsi_internal}
     (nil))
(insn 150 149 151 7 (set (reg/f:DI 0 ax [212])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1371 85 {*movdi_internal}
     (nil))
(insn 151 150 152 7 (set (reg:SI 0 ax [orig:148 _62 ] [148])
        (mem:SI (plus:DI (reg/f:DI 0 ax [212])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1371 86 {*movsi_internal}
     (nil))
(insn 152 151 153 7 (parallel [
            (set (reg:SI 1 dx [orig:149 _63 ] [149])
                (plus:SI (reg:SI 0 ax [orig:148 _62 ] [148])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1371 221 {*addsi_1}
     (nil))
(insn 153 152 154 7 (set (reg/f:DI 0 ax [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1371 85 {*movdi_internal}
     (nil))
(insn 154 153 155 7 (set (mem:SI (plus:DI (reg/f:DI 0 ax [213])
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])
        (reg:SI 1 dx [orig:149 _63 ] [149])) "function.c":1371 86 {*movsi_internal}
     (nil))
(insn 155 154 156 7 (set (reg/f:DI 0 ax [214])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 156 155 157 7 (set (reg/f:DI 1 dx [orig:150 _64 ] [150])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [214])
                (const_int 16 [0x10])) [9 serwer_76(D)->mapa+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 157 156 158 7 (set (reg/f:DI 0 ax [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 158 157 159 7 (set (reg:SI 0 ax [orig:151 _65 ] [151])
        (mem:SI (plus:DI (reg/f:DI 0 ax [215])
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1373 86 {*movsi_internal}
     (nil))
(insn 159 158 160 7 (set (reg:DI 0 ax [orig:152 _66 ] [152])
        (sign_extend:DI (reg:SI 0 ax [orig:151 _65 ] [151]))) "function.c":1373 149 {*extendsidi2_rex64}
     (nil))
(insn 160 159 161 7 (parallel [
            (set (reg:DI 0 ax [orig:153 _67 ] [153])
                (ashift:DI (reg:DI 0 ax [orig:152 _66 ] [152])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1373 551 {*ashldi3_1}
     (nil))
(insn 161 160 162 7 (parallel [
            (set (reg/f:DI 0 ax [orig:154 _68 ] [154])
                (plus:DI (reg:DI 0 ax [orig:153 _67 ] [153])
                    (reg/f:DI 1 dx [orig:150 _64 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1373 222 {*adddi_1}
     (nil))
(insn 162 161 163 7 (set (reg/f:DI 1 dx [orig:155 _69 ] [155])
        (mem/f:DI (reg/f:DI 0 ax [orig:154 _68 ] [154]) [10 *_68+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 163 162 164 7 (set (reg/f:DI 0 ax [216])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 164 163 165 7 (set (reg:SI 0 ax [orig:156 _70 ] [156])
        (mem:SI (plus:DI (reg/f:DI 0 ax [216])
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1373 86 {*movsi_internal}
     (nil))
(insn 165 164 166 7 (set (reg:DI 0 ax [orig:157 _71 ] [157])
        (sign_extend:DI (reg:SI 0 ax [orig:156 _70 ] [156]))) "function.c":1373 149 {*extendsidi2_rex64}
     (nil))
(insn 166 165 167 7 (parallel [
            (set (reg/f:DI 0 ax [orig:158 _72 ] [158])
                (plus:DI (reg:DI 0 ax [orig:157 _71 ] [157])
                    (reg/f:DI 1 dx [orig:155 _69 ] [155])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1373 222 {*adddi_1}
     (nil))
(insn 167 166 174 7 (set (mem:QI (reg/f:DI 0 ax [orig:158 _72 ] [158]) [0 *_72+0 S1 A8])
        (const_int 68 [0x44])) "function.c":1373 88 {*movqi_internal}
     (nil))
(insn 174 167 178 7 (const_int 0 [0]) "function.c":1375 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6
;;              7 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 178 174 177 9 247 (nil) [2 uses])
(note 177 178 179 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 179 177 172 9 (const_int 0 [0]) "function.c":1375 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 172 179 173 8 243 (nil) [0 uses])
(note 173 172 180 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 180 173 0 NOTE_INSN_DELETED)

;; Function player_kolizja (player_kolizja, funcdef_no=29, decl_uid=6265, cgraph_uid=29, symbol_order=32)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rm {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 51:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 59
	 Choosing alt 0 in insn 59:  (0) =r  (1) %0  (2) rme {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 62:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 64:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 70:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 74:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 81:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 85:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 87:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 88:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 91:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 94:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 96:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 110: point = 0, n_alt = -1
  BB 4
   Insn 105: point = 0, n_alt = -1
   Insn 98: point = 0, n_alt = 1
   Insn 97: point = 1, n_alt = 3
   Insn 96: point = 2, n_alt = 3
   Insn 95: point = 4, n_alt = 0
   Insn 94: point = 6, n_alt = 3
   Insn 93: point = 7, n_alt = 1
   Insn 92: point = 8, n_alt = 0
   Insn 91: point = 10, n_alt = 3
   Insn 90: point = 12, n_alt = 3
   Insn 89: point = 13, n_alt = 3
   Insn 88: point = 15, n_alt = 3
   Insn 87: point = 16, n_alt = 1
   Insn 86: point = 17, n_alt = 0
   Insn 85: point = 19, n_alt = 3
   Insn 84: point = 21, n_alt = 3
   Insn 83: point = 22, n_alt = 3
   Insn 82: point = 24, n_alt = 3
   Insn 81: point = 25, n_alt = 1
   Insn 80: point = 26, n_alt = 0
   Insn 79: point = 28, n_alt = 3
   Insn 78: point = 30, n_alt = 3
   Insn 77: point = 31, n_alt = 3
   Insn 76: point = 33, n_alt = 3
   Insn 75: point = 34, n_alt = 1
   Insn 74: point = 35, n_alt = 0
   Insn 73: point = 37, n_alt = 3
   Insn 72: point = 39, n_alt = 3
   Insn 71: point = 40, n_alt = 3
   Insn 70: point = 42, n_alt = 3
   Insn 69: point = 43, n_alt = 1
   Insn 68: point = 44, n_alt = 3
   Insn 67: point = 46, n_alt = 3
   Insn 66: point = 47, n_alt = 1
   Insn 65: point = 48, n_alt = 3
   Insn 64: point = 50, n_alt = 3
   Insn 63: point = 51, n_alt = 1
   Insn 62: point = 52, n_alt = 0
   Insn 61: point = 54, n_alt = 1
   Insn 60: point = 56, n_alt = 3
   Insn 59: point = 57, n_alt = 0
   Insn 58: point = 59, n_alt = 0
   Insn 57: point = 61, n_alt = 3
   Insn 56: point = 62, n_alt = 0
   Insn 55: point = 64, n_alt = 3
   Insn 54: point = 66, n_alt = 3
   Insn 53: point = 67, n_alt = 0
   Insn 52: point = 69, n_alt = 3
   Insn 51: point = 71, n_alt = 3
   Insn 50: point = 72, n_alt = 1
   Insn 49: point = 73, n_alt = 1
   Insn 48: point = 75, n_alt = 3
   Insn 47: point = 76, n_alt = 0
   Insn 46: point = 78, n_alt = 0
   Insn 45: point = 80, n_alt = 3
   Insn 44: point = 81, n_alt = 3
   Insn 43: point = 83, n_alt = 3
   Insn 42: point = 84, n_alt = 1
   Insn 41: point = 85, n_alt = 0
   Insn 40: point = 87, n_alt = 1
   Insn 39: point = 89, n_alt = 3
   Insn 38: point = 90, n_alt = 0
   Insn 37: point = 92, n_alt = 0
   Insn 36: point = 94, n_alt = 3
   Insn 35: point = 95, n_alt = 3
   Insn 34: point = 97, n_alt = 3
   Insn 33: point = 98, n_alt = 1
   Insn 32: point = 99, n_alt = 0
   Insn 31: point = 101, n_alt = 0
   Insn 30: point = 102, n_alt = 3
   Insn 29: point = 104, n_alt = 3
   Insn 28: point = 105, n_alt = 1
   Insn 27: point = 106, n_alt = 0
   Insn 26: point = 108, n_alt = 0
   Insn 25: point = 109, n_alt = 3
   Insn 24: point = 111, n_alt = 3
  BB 3
   Insn 22: point = 112, n_alt = -1
   Insn 21: point = 112, n_alt = 0
   Insn 20: point = 113, n_alt = 0
   Insn 19: point = 115, n_alt = 3
   Insn 18: point = 117, n_alt = 3
   Insn 17: point = 118, n_alt = 0
   Insn 16: point = 120, n_alt = 3
   Insn 15: point = 122, n_alt = 3
  BB 2
   Insn 13: point = 123, n_alt = -1
   Insn 12: point = 123, n_alt = 0
   Insn 11: point = 124, n_alt = 0
   Insn 10: point = 126, n_alt = 3
   Insn 9: point = 128, n_alt = 3
   Insn 8: point = 129, n_alt = 0
   Insn 7: point = 131, n_alt = 3
   Insn 6: point = 133, n_alt = 3
   Insn 2: point = 134, n_alt = 5
 r87: [130..131]
 r88: [123..129]
 r89: [125..126]
 r90: [123..124]
 r91: [119..120]
 r92: [112..118]
 r93: [114..115]
 r94: [112..113]
 r95: [105..109]
 r96: [107..108]
 r97: [105..106]
 r98: [98..102]
 r99: [100..101]
 r100: [98..99]
 r101: [91..95]
 r102: [88..92]
 r103: [84..90]
 r104: [77..81]
 r105: [74..78]
 r106: [72..76]
 r107: [68..69]
 r108: [58..67]
 r109: [63..64]
 r110: [58..62]
 r111: [55..59]
 r112: [51..57]
 r113: [47..48]
 r114: [43..44]
 r115: [36..40]
 r116: [34..37]
 r117: [34..35]
 r118: [27..31]
 r119: [25..28]
 r120: [25..26]
 r121: [18..22]
 r122: [16..19]
 r123: [16..17]
 r124: [9..13]
 r125: [7..10]
 r126: [7..8]
 r127: [3..4]
 r128: [0..2]
 r129: [132..133]
 r130: [127..128]
 r131: [121..122]
 r132: [116..117]
 r133: [110..111]
 r134: [103..104]
 r135: [96..97]
 r136: [93..94]
 r137: [84..89]
 r138: [86..87]
 r139: [84..85]
 r140: [82..83]
 r141: [79..80]
 r142: [72..75]
 r143: [72..73]
 r144: [70..71]
 r145: [65..66]
 r146: [60..61]
 r147: [51..56]
 r148: [53..54]
 r149: [51..52]
 r150: [49..50]
 r151: [45..46]
 r152: [41..42]
 r153: [38..39]
 r154: [32..33]
 r155: [29..30]
 r156: [23..24]
 r157: [20..21]
 r158: [14..15]
 r159: [11..12]
 r160: [5..6]
 r161: [0..1]
Compressing live ranges: from 134 to 118 - 88%
Ranges after the compression:
 r87: [114..115]
 r88: [108..113]
 r89: [110..111]
 r90: [108..109]
 r91: [104..105]
 r92: [98..103]
 r93: [100..101]
 r94: [98..99]
 r95: [92..95]
 r96: [94..95]
 r97: [92..93]
 r98: [86..89]
 r99: [88..89]
 r100: [86..87]
 r101: [80..83]
 r102: [78..81]
 r103: [74..79]
 r104: [68..71]
 r105: [66..69]
 r106: [64..67]
 r107: [60..61]
 r108: [52..59]
 r109: [56..57]
 r110: [52..55]
 r111: [50..53]
 r112: [46..51]
 r113: [42..43]
 r114: [38..39]
 r115: [32..35]
 r116: [30..33]
 r117: [30..31]
 r118: [24..27]
 r119: [22..25]
 r120: [22..23]
 r121: [16..19]
 r122: [14..17]
 r123: [14..15]
 r124: [8..11]
 r125: [6..9]
 r126: [6..7]
 r127: [2..3]
 r128: [0..1]
 r129: [116..117]
 r130: [112..113]
 r131: [106..107]
 r132: [102..103]
 r133: [96..97]
 r134: [90..91]
 r135: [84..85]
 r136: [82..83]
 r137: [74..79]
 r138: [76..77]
 r139: [74..75]
 r140: [72..73]
 r141: [70..71]
 r142: [64..67]
 r143: [64..65]
 r144: [62..63]
 r145: [58..59]
 r146: [54..55]
 r147: [46..51]
 r148: [48..49]
 r149: [46..47]
 r150: [44..45]
 r151: [40..41]
 r152: [36..37]
 r153: [34..35]
 r154: [28..29]
 r155: [26..27]
 r156: [20..21]
 r157: [18..19]
 r158: [12..13]
 r159: [10..11]
 r160: [4..5]
 r161: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 33
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 38
changing reg in insn 37
changing reg in insn 40
changing reg in insn 38
changing reg in insn 42
changing reg in insn 44
changing reg in insn 47
changing reg in insn 46
changing reg in insn 49
changing reg in insn 47
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 61
changing reg in insn 59
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 74
changing reg in insn 73
changing reg in insn 75
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 79
changing reg in insn 81
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 86
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 87
changing reg in insn 89
changing reg in insn 92
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 63
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 95
changing reg in insn 97
changing reg in insn 98
starting the processing of deferred insns
ending the processing of deferred insns


player_kolizja

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={46d,47u} r1={24d,23u} r2={7d,6u} r4={2d,1u} r5={1d,1u} r6={1d,35u} r7={1d,6u} r17={8d,2u} r20={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 223{101d,122u,0e} in 94{94 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 129 130
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1379 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:87 _1 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [129])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 1 dx [orig:88 _2 ] [88])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:87 _1 ] [87])
                (const_int 12 [0xc])) [3 _1->x_current+0 S4 A32])) "function.c":1380 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:89 _3 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [130])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 ax [orig:90 _4 ] [90])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:89 _3 ] [89])
                (const_int 12 [0xc])) [3 _3->x_current+0 S4 A32])) "function.c":1380 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:88 _2 ] [88])
            (reg:SI 0 ax [orig:90 _4 ] [90]))) "function.c":1380 11 {*cmpsi_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 109)
            (pc))) "function.c":1380 682 {*jcc}
     (nil)
 -> 109)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 131 132
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 0 ax [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 0 ax [orig:91 _5 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [131])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:SI 1 dx [orig:92 _6 ] [92])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:91 _5 ] [91])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1380 86 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 0 ax [132])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [132])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 0 ax [orig:94 _8 ] [94])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (const_int 16 [0x10])) [3 _7->y_current+0 S4 A64])) "function.c":1380 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:92 _6 ] [92])
            (reg:SI 0 ax [orig:94 _8 ] [94]))) "function.c":1380 11 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 109)
            (pc))) "function.c":1380 682 {*jcc}
     (nil)
 -> 109)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg/f:DI 0 ax [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1382 85 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 0 ax [orig:95 _9 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [133])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1382 85 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 1 dx [orig:96 _10 ] [96])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (const_int 28 [0x1c])) [3 _9->deaths+0 S4 A32])) "function.c":1382 86 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:SI 1 dx [orig:97 _11 ] [97])
                (plus:SI (reg:SI 1 dx [orig:96 _10 ] [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1382 221 {*addsi_1}
     (nil))
(insn 28 27 29 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:95 _9 ] [95])
                (const_int 28 [0x1c])) [3 _9->deaths+0 S4 A32])
        (reg:SI 1 dx [orig:97 _11 ] [97])) "function.c":1382 86 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg/f:DI 0 ax [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1383 85 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg/f:DI 0 ax [orig:98 _12 ] [98])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [134])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1383 85 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 1 dx [orig:99 _13 ] [99])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (const_int 28 [0x1c])) [3 _12->deaths+0 S4 A32])) "function.c":1383 86 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 1 dx [orig:100 _14 ] [100])
                (plus:SI (reg:SI 1 dx [orig:99 _13 ] [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1383 221 {*addsi_1}
     (nil))
(insn 33 32 34 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:98 _12 ] [98])
                (const_int 28 [0x1c])) [3 _12->deaths+0 S4 A32])
        (reg:SI 1 dx [orig:100 _14 ] [100])) "function.c":1383 86 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg/f:DI 0 ax [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg/f:DI 0 ax [orig:101 _15 ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [135])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (nil))
(insn 36 35 37 4 (set (reg/f:DI 1 dx [136])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:SI 2 cx [orig:102 _16 ] [102])
        (mem:SI (plus:DI (reg/f:DI 1 dx [136])
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1385 86 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:SI 1 dx [orig:103 _17 ] [103])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:101 _15 ] [101])
                (const_int 16 [0x10])) [3 _15->y_current+0 S4 A64])) "function.c":1385 86 {*movsi_internal}
     (nil))
(insn 39 38 40 4 (set (reg/f:DI 0 ax [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 2 cx [138])
        (sign_extend:DI (reg:SI 2 cx [orig:102 _16 ] [102]))) "function.c":1385 149 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 2 cx [139])
                (plus:DI (reg:DI 2 cx [138])
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1385 222 {*adddi_1}
     (nil))
(insn 42 41 43 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 2 cx [139])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [137])) [3 serwer_45(D)->skarb.dropped_coin S4 A64])
        (reg:SI 1 dx [orig:103 _17 ] [103])) "function.c":1385 86 {*movsi_internal}
     (nil))
(insn 43 42 44 4 (set (reg/f:DI 0 ax [140])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 0 ax [orig:104 _18 ] [104])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [140])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 1 dx [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 1 dx [orig:105 _19 ] [105])
        (mem:SI (plus:DI (reg/f:DI 1 dx [141])
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1386 86 {*movsi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SI 2 cx [orig:106 _20 ] [106])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:104 _18 ] [104])
                (const_int 12 [0xc])) [3 _18->x_current+0 S4 A32])) "function.c":1386 86 {*movsi_internal}
     (nil))
(insn 48 47 49 4 (set (reg/f:DI 0 ax [142])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DI 1 dx [143])
        (sign_extend:DI (reg:SI 1 dx [orig:105 _19 ] [105]))) "function.c":1386 149 {*extendsidi2_rex64}
     (nil))
(insn 50 49 51 4 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [143])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [142]))
                (const_int 24068 [0x5e04])) [3 serwer_45(D)->skarb.dropped_coin S4 A32])
        (reg:SI 2 cx [orig:106 _20 ] [106])) "function.c":1386 86 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (set (reg/f:DI 0 ax [144])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg/f:DI 0 ax [orig:107 _21 ] [107])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [144])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 53 52 54 4 (set (reg:SI 4 si [orig:108 _22 ] [108])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:107 _21 ] [107])
                (const_int 32 [0x20])) [3 _21->coins_carried+0 S4 A64])) "function.c":1387 86 {*movsi_internal}
     (nil))
(insn 54 53 55 4 (set (reg/f:DI 0 ax [145])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg/f:DI 0 ax [orig:109 _23 ] [109])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [145])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg:SI 2 cx [orig:110 _24 ] [110])
        (mem:SI (plus:DI (reg/f:DI 0 ax [orig:109 _23 ] [109])
                (const_int 32 [0x20])) [3 _23->coins_carried+0 S4 A64])) "function.c":1387 86 {*movsi_internal}
     (nil))
(insn 57 56 58 4 (set (reg/f:DI 0 ax [146])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:SI 1 dx [orig:111 _25 ] [111])
        (mem:SI (plus:DI (reg/f:DI 0 ax [146])
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1387 86 {*movsi_internal}
     (nil))
(insn 59 58 60 4 (parallel [
            (set (reg:SI 2 cx [orig:112 _26 ] [112])
                (plus:SI (reg:SI 2 cx [orig:110 _24 ] [110])
                    (reg:SI 4 si [orig:108 _22 ] [108])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1387 221 {*addsi_1}
     (nil))
(insn 60 59 61 4 (set (reg/f:DI 0 ax [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 1 dx [148])
        (sign_extend:DI (reg:SI 1 dx [orig:111 _25 ] [111]))) "function.c":1387 149 {*extendsidi2_rex64}
     (nil))
(insn 62 61 63 4 (parallel [
            (set (reg:DI 1 dx [149])
                (plus:DI (reg:DI 1 dx [148])
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1387 222 {*adddi_1}
     (nil))
(insn 63 62 64 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 1 dx [149])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [147])) [3 serwer_45(D)->skarb.value_all_dropped_coin S4 A32])
        (reg:SI 2 cx [orig:112 _26 ] [112])) "function.c":1387 86 {*movsi_internal}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 0 ax [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1389 85 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [150])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1389 85 {*movdi_internal}
     (nil))
(insn 66 65 67 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (const_int 32 [0x20])) [3 _27->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1389 86 {*movsi_internal}
     (nil))
(insn 67 66 68 4 (set (reg/f:DI 0 ax [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1390 85 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg/f:DI 0 ax [orig:114 _28 ] [114])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [151])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1390 85 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:114 _28 ] [114])
                (const_int 32 [0x20])) [3 _28->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1390 86 {*movsi_internal}
     (nil))
(insn 70 69 71 4 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg/f:DI 1 dx [orig:115 _29 ] [115])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [152])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (reg/f:DI 0 ax [153])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [153])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg:SI 1 dx [orig:117 _31 ] [117])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:115 _29 ] [115])
                (const_int 20 [0x14])) [3 _29->x_start+0 S4 A32])) "function.c":1392 86 {*movsi_internal}
     (nil))
(insn 75 74 76 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (const_int 12 [0xc])) [3 _30->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:117 _31 ] [117])) "function.c":1392 86 {*movsi_internal}
     (nil))
(insn 76 75 77 4 (set (reg/f:DI 0 ax [154])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 1 dx [orig:118 _32 ] [118])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [154])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (nil))
(insn 78 77 79 4 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (set (reg/f:DI 0 ax [orig:119 _33 ] [119])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [155])
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (nil))
(insn 80 79 81 4 (set (reg:SI 1 dx [orig:120 _34 ] [120])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:118 _32 ] [118])
                (const_int 24 [0x18])) [3 _32->y_start+0 S4 A64])) "function.c":1393 86 {*movsi_internal}
     (nil))
(insn 81 80 82 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:119 _33 ] [119])
                (const_int 16 [0x10])) [3 _33->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:120 _34 ] [120])) "function.c":1393 86 {*movsi_internal}
     (nil))
(insn 82 81 83 4 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (reg/f:DI 1 dx [orig:121 _35 ] [121])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [156])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (nil))
(insn 84 83 85 4 (set (reg/f:DI 0 ax [157])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (nil))
(insn 85 84 86 4 (set (reg/f:DI 0 ax [orig:122 _36 ] [122])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [157])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (nil))
(insn 86 85 87 4 (set (reg:SI 1 dx [orig:123 _37 ] [123])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:121 _35 ] [121])
                (const_int 20 [0x14])) [3 _35->x_start+0 S4 A32])) "function.c":1395 86 {*movsi_internal}
     (nil))
(insn 87 86 88 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:122 _36 ] [122])
                (const_int 12 [0xc])) [3 _36->x_current+0 S4 A32])
        (reg:SI 1 dx [orig:123 _37 ] [123])) "function.c":1395 86 {*movsi_internal}
     (nil))
(insn 88 87 89 4 (set (reg/f:DI 0 ax [158])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 1 dx [orig:124 _38 ] [124])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [158])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (nil))
(insn 90 89 91 4 (set (reg/f:DI 0 ax [159])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (set (reg/f:DI 0 ax [orig:125 _39 ] [125])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [159])
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (nil))
(insn 92 91 93 4 (set (reg:SI 1 dx [orig:126 _40 ] [126])
        (mem:SI (plus:DI (reg/f:DI 1 dx [orig:124 _38 ] [124])
                (const_int 24 [0x18])) [3 _38->y_start+0 S4 A64])) "function.c":1396 86 {*movsi_internal}
     (nil))
(insn 93 92 94 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [orig:125 _39 ] [125])
                (const_int 16 [0x10])) [3 _39->y_current+0 S4 A64])
        (reg:SI 1 dx [orig:126 _40 ] [126])) "function.c":1396 86 {*movsi_internal}
     (nil))
(insn 94 93 95 4 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1398 85 {*movdi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:SI 0 ax [orig:127 _41 ] [127])
        (mem:SI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1398 86 {*movsi_internal}
     (nil))
(insn 96 95 97 4 (parallel [
            (set (reg:SI 1 dx [orig:128 _42 ] [128])
                (plus:SI (reg:SI 0 ax [orig:127 _41 ] [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1398 221 {*addsi_1}
     (nil))
(insn 97 96 98 4 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1398 85 {*movdi_internal}
     (nil))
(insn 98 97 105 4 (set (mem:SI (plus:DI (reg/f:DI 0 ax [161])
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])
        (reg:SI 1 dx [orig:128 _42 ] [128])) "function.c":1398 86 {*movsi_internal}
     (nil))
(insn 105 98 109 4 (const_int 0 [0]) "function.c":1401 718 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3
;;              4 [always]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 109 105 108 6 251 (nil) [2 uses])
(note 108 109 110 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 110 108 103 6 (const_int 0 [0]) "function.c":1401 718 {nop}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 103 110 104 5 248 (nil) [0 uses])
(note 104 103 111 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 111 104 0 NOTE_INSN_DELETED)

;; Function skarbunio (skarbunio, funcdef_no=30, decl_uid=6267, cgraph_uid=30, symbol_order=33)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 8:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 20:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 32:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 41
	 Choosing alt 0 in insn 41:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 50:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 62:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 64:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 68
	 Choosing alt 0 in insn 68:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 69:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 81:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 90:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 92:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 96:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 105:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 106:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 109:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 117:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 119:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 122:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 125:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 126:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 128:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 130:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 132:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 138
	 Choosing alt 0 in insn 138:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 139:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 151:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 157:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 160:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 162:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 166:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 171:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 175:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 176:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 177:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 179:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 180:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 181
	 Choosing alt 0 in insn 181:  (0) =r  (1) %0  (2) rme {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 182:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 188:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 189:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 190:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 191:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 193:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 195:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 196:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 198:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 201:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 204:  (0) =r  (1) %0  (2) rme {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 205:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 207:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 208
	 Choosing alt 0 in insn 208:  (0) =r  (1) %0  (2) rme {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 209:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 219:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 220:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 221:  (0) r  (1) r  (2) le {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 222:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 223:  (0) m  (1) re {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9 10
EBB 11
EBB 12 13
EBB 14 15
EBB 16
EBB 18
EBB 17

********** Pseudo live ranges #1: **********

  BB 17
  BB 18
   Insn 248: point = 0, n_alt = -1
  BB 15
   Insn 242: point = 0, n_alt = -1
   Insn 230: point = 0, n_alt = -1
   Insn 223: point = 0, n_alt = 1
   Insn 222: point = 1, n_alt = 3
   Insn 221: point = 2, n_alt = 3
   Insn 220: point = 4, n_alt = 0
   Insn 219: point = 6, n_alt = 3
   Insn 233: point = 7, n_alt = -1
   Insn 209: point = 7, n_alt = 8
   Insn 208: point = 8, n_alt = 0
   Insn 207: point = 10, n_alt = 0
   Insn 206: point = 12, n_alt = 0
   Insn 205: point = 13, n_alt = 3
   Insn 204: point = 15, n_alt = 0
   Insn 203: point = 17, n_alt = 0
   Insn 202: point = 19, n_alt = 1
   Insn 201: point = 21, n_alt = 0
   Insn 200: point = 22, n_alt = 3
   Insn 199: point = 24, n_alt = 3
   Insn 198: point = 25, n_alt = 1
   Insn 197: point = 26, n_alt = 0
   Insn 196: point = 27, n_alt = 1
   Insn 195: point = 29, n_alt = 3
   Insn 194: point = 30, n_alt = 0
   Insn 193: point = 32, n_alt = 3
   Insn 192: point = 33, n_alt = 1
   Insn 191: point = 34, n_alt = 0
   Insn 190: point = 35, n_alt = 3
   Insn 189: point = 37, n_alt = 1
   Insn 188: point = 39, n_alt = 3
   Insn 187: point = 40, n_alt = 0
   Insn 186: point = 42, n_alt = 3
  BB 14
   Insn 184: point = 43, n_alt = -1
   Insn 183: point = 43, n_alt = 0
   Insn 182: point = 44, n_alt = 4
   Insn 181: point = 46, n_alt = 0
   Insn 180: point = 48, n_alt = 0
   Insn 179: point = 50, n_alt = 0
   Insn 178: point = 51, n_alt = 3
   Insn 177: point = 53, n_alt = 0
   Insn 176: point = 55, n_alt = 0
   Insn 175: point = 57, n_alt = 1
   Insn 174: point = 59, n_alt = 0
   Insn 173: point = 60, n_alt = 3
   Insn 172: point = 62, n_alt = 3
   Insn 171: point = 63, n_alt = 1
   Insn 170: point = 64, n_alt = -2
   Insn 169: point = 65, n_alt = 0
   Insn 168: point = 65, n_alt = 0
   Insn 167: point = 65, n_alt = 0
   Insn 166: point = 65, n_alt = 1
   Insn 165: point = 66, n_alt = -2
   Insn 164: point = 67, n_alt = 0
   Insn 163: point = 67, n_alt = 0
   Insn 162: point = 67, n_alt = 0
  BB 16
   Insn 244: point = 67, n_alt = -1
  BB 13
   Insn 160: point = 67, n_alt = 8
  BB 12
   Insn 158: point = 67, n_alt = -1
   Insn 157: point = 67, n_alt = 0
   Insn 156: point = 68, n_alt = 4
  BB 10
   Insn 238: point = 69, n_alt = -1
   Insn 153: point = 69, n_alt = 1
   Insn 152: point = 70, n_alt = 3
   Insn 151: point = 71, n_alt = 3
   Insn 150: point = 73, n_alt = 0
   Insn 149: point = 75, n_alt = 3
   Insn 232: point = 76, n_alt = -1
   Insn 139: point = 76, n_alt = 8
   Insn 138: point = 77, n_alt = 0
   Insn 137: point = 79, n_alt = 0
   Insn 136: point = 81, n_alt = 0
   Insn 135: point = 82, n_alt = 3
   Insn 134: point = 84, n_alt = 0
   Insn 133: point = 86, n_alt = 0
   Insn 132: point = 88, n_alt = 1
   Insn 131: point = 90, n_alt = 0
   Insn 130: point = 91, n_alt = 3
   Insn 129: point = 93, n_alt = 3
   Insn 128: point = 94, n_alt = 1
   Insn 127: point = 95, n_alt = 0
   Insn 126: point = 96, n_alt = 1
   Insn 125: point = 98, n_alt = 3
   Insn 124: point = 99, n_alt = 0
   Insn 123: point = 101, n_alt = 3
   Insn 122: point = 102, n_alt = 1
   Insn 121: point = 103, n_alt = 0
   Insn 120: point = 104, n_alt = 3
   Insn 119: point = 106, n_alt = 1
   Insn 118: point = 108, n_alt = 3
   Insn 117: point = 109, n_alt = 0
   Insn 116: point = 111, n_alt = 3
  BB 9
   Insn 114: point = 112, n_alt = -1
   Insn 113: point = 112, n_alt = 0
   Insn 112: point = 113, n_alt = 4
   Insn 111: point = 115, n_alt = 0
   Insn 110: point = 117, n_alt = 0
   Insn 109: point = 119, n_alt = 0
   Insn 108: point = 120, n_alt = 3
   Insn 107: point = 122, n_alt = 0
   Insn 106: point = 124, n_alt = 0
   Insn 105: point = 126, n_alt = 1
   Insn 104: point = 128, n_alt = 0
   Insn 103: point = 129, n_alt = 3
   Insn 102: point = 131, n_alt = 3
   Insn 101: point = 132, n_alt = 1
   Insn 100: point = 133, n_alt = -2
   Insn 99: point = 134, n_alt = 0
   Insn 98: point = 134, n_alt = 0
   Insn 97: point = 134, n_alt = 0
   Insn 96: point = 134, n_alt = 1
   Insn 95: point = 135, n_alt = -2
   Insn 94: point = 136, n_alt = 0
   Insn 93: point = 136, n_alt = 0
   Insn 92: point = 136, n_alt = 0
  BB 11
   Insn 240: point = 136, n_alt = -1
  BB 8
   Insn 90: point = 136, n_alt = 8
  BB 7
   Insn 88: point = 136, n_alt = -1
   Insn 87: point = 136, n_alt = 0
   Insn 86: point = 137, n_alt = 4
  BB 5
   Insn 234: point = 138, n_alt = -1
   Insn 83: point = 138, n_alt = 1
   Insn 82: point = 139, n_alt = 3
   Insn 81: point = 140, n_alt = 3
   Insn 80: point = 142, n_alt = 0
   Insn 79: point = 144, n_alt = 3
   Insn 231: point = 145, n_alt = -1
   Insn 69: point = 145, n_alt = 8
   Insn 68: point = 146, n_alt = 0
   Insn 67: point = 148, n_alt = 0
   Insn 66: point = 150, n_alt = 0
   Insn 65: point = 151, n_alt = 3
   Insn 64: point = 153, n_alt = 0
   Insn 63: point = 155, n_alt = 0
   Insn 62: point = 157, n_alt = 1
   Insn 61: point = 159, n_alt = 0
   Insn 60: point = 160, n_alt = 3
   Insn 59: point = 162, n_alt = 3
   Insn 58: point = 163, n_alt = 1
   Insn 57: point = 164, n_alt = 0
   Insn 56: point = 165, n_alt = 1
   Insn 55: point = 167, n_alt = 3
   Insn 54: point = 168, n_alt = 0
   Insn 53: point = 170, n_alt = 3
   Insn 52: point = 171, n_alt = 1
   Insn 51: point = 172, n_alt = 0
   Insn 50: point = 173, n_alt = 3
   Insn 49: point = 175, n_alt = 1
   Insn 48: point = 177, n_alt = 3
   Insn 47: point = 178, n_alt = 0
   Insn 46: point = 180, n_alt = 3
  BB 4
   Insn 44: point = 181, n_alt = -1
   Insn 43: point = 181, n_alt = 0
   Insn 42: point = 182, n_alt = 4
   Insn 41: point = 184, n_alt = 0
   Insn 40: point = 186, n_alt = 0
   Insn 39: point = 188, n_alt = 0
   Insn 38: point = 189, n_alt = 3
   Insn 37: point = 191, n_alt = 0
   Insn 36: point = 193, n_alt = 0
   Insn 35: point = 195, n_alt = 1
   Insn 34: point = 197, n_alt = 0
   Insn 33: point = 198, n_alt = 3
   Insn 32: point = 200, n_alt = 3
   Insn 31: point = 201, n_alt = 1
   Insn 30: point = 202, n_alt = -2
   Insn 29: point = 203, n_alt = 0
   Insn 28: point = 203, n_alt = 0
   Insn 27: point = 203, n_alt = 0
   Insn 26: point = 203, n_alt = 1
   Insn 25: point = 204, n_alt = -2
   Insn 24: point = 205, n_alt = 0
   Insn 23: point = 205, n_alt = 0
   Insn 22: point = 205, n_alt = 0
  BB 6
   Insn 236: point = 205, n_alt = -1
  BB 3
   Insn 20: point = 205, n_alt = 8
  BB 2
   Insn 18: point = 205, n_alt = -1
   Insn 17: point = 205, n_alt = 0
   Insn 16: point = 206, n_alt = 4
   Insn 15: point = 207, n_alt = 1
   Insn 14: point = 207, n_alt = 1
   Insn 13: point = 207, n_alt = 0
   Insn 12: point = 207, n_alt = -2
   Insn 11: point = 208, n_alt = 0
   Insn 10: point = 210, n_alt = -2
   Insn 9: point = 211, n_alt = 0
   Insn 8: point = 211, n_alt = 2
   Insn 7: point = 211, n_alt = 5
   Insn 6: point = 212, n_alt = 3
   Insn 2: point = 213, n_alt = 5
 r87: [209..210]
 r88: [207..208]
 r89: [205..206]
 r90: [192..198]
 r91: [194..195]
 r92: [192..193]
 r93: [190..191]
 r94: [185..189]
 r95: [185..186]
 r96: [183..184]
 r97: [181..182]
 r98: [176..178]
 r99: [166..168]
 r100: [154..160]
 r101: [156..157]
 r102: [154..155]
 r103: [152..153]
 r104: [147..151]
 r105: [147..148]
 r106: [145..146]
 r107: [141..142]
 r108: [138..140]
 r109: [136..137]
 r110: [123..129]
 r111: [125..126]
 r112: [123..124]
 r113: [121..122]
 r114: [116..120]
 r115: [116..117]
 r116: [114..115]
 r117: [112..113]
 r118: [107..109]
 r119: [97..99]
 r120: [85..91]
 r121: [87..88]
 r122: [85..86]
 r123: [83..84]
 r124: [78..82]
 r125: [78..79]
 r126: [76..77]
 r127: [72..73]
 r128: [69..71]
 r129: [67..68]
 r130: [54..60]
 r131: [56..57]
 r132: [54..55]
 r133: [52..53]
 r134: [47..51]
 r135: [47..48]
 r136: [45..46]
 r137: [43..44]
 r138: [38..40]
 r139: [28..30]
 r140: [16..22]
 r141: [18..19]
 r142: [16..17]
 r143: [14..15]
 r144: [9..13]
 r145: [9..10]
 r146: [7..8]
 r147: [3..4]
 r148: [0..2]
 r149: [211..212]
 r150: [203..204]
 r151: [201..202]
 r152: [199..200]
 r153: [196..197]
 r154: [187..188]
 r155: [179..180]
 r156: [171..177]
 r157: [174..175]
 r158: [171..173]
 r159: [171..172]
 r160: [169..170]
 r161: [163..167]
 r162: [163..165]
 r163: [163..164]
 r164: [161..162]
 r165: [158..159]
 r166: [149..150]
 r167: [143..144]
 r168: [138..139]
 r169: [134..135]
 r170: [132..133]
 r171: [130..131]
 r172: [127..128]
 r173: [118..119]
 r174: [110..111]
 r175: [102..108]
 r176: [105..106]
 r177: [102..104]
 r178: [102..103]
 r179: [100..101]
 r180: [94..98]
 r181: [94..96]
 r182: [94..95]
 r183: [92..93]
 r184: [89..90]
 r185: [80..81]
 r186: [74..75]
 r187: [69..70]
 r188: [65..66]
 r189: [63..64]
 r190: [61..62]
 r191: [58..59]
 r192: [49..50]
 r193: [41..42]
 r194: [33..39]
 r195: [36..37]
 r196: [33..35]
 r197: [33..34]
 r198: [31..32]
 r199: [25..29]
 r200: [25..27]
 r201: [25..26]
 r202: [23..24]
 r203: [20..21]
 r204: [11..12]
 r205: [5..6]
 r206: [0..1]
Compressing live ranges: from 213 to 186 - 87%
Ranges after the compression:
 r87: [182..183]
 r88: [180..181]
 r89: [178..179]
 r90: [166..171]
 r91: [168..169]
 r92: [166..167]
 r93: [164..165]
 r94: [160..163]
 r95: [160..161]
 r96: [158..159]
 r97: [156..157]
 r98: [152..153]
 r99: [144..145]
 r100: [134..139]
 r101: [136..137]
 r102: [134..135]
 r103: [132..133]
 r104: [128..131]
 r105: [128..129]
 r106: [126..127]
 r107: [122..123]
 r108: [120..121]
 r109: [118..119]
 r110: [106..111]
 r111: [108..109]
 r112: [106..107]
 r113: [104..105]
 r114: [100..103]
 r115: [100..101]
 r116: [98..99]
 r117: [96..97]
 r118: [92..93]
 r119: [84..85]
 r120: [74..79]
 r121: [76..77]
 r122: [74..75]
 r123: [72..73]
 r124: [68..71]
 r125: [68..69]
 r126: [66..67]
 r127: [62..63]
 r128: [60..61]
 r129: [58..59]
 r130: [46..51]
 r131: [48..49]
 r132: [46..47]
 r133: [44..45]
 r134: [40..43]
 r135: [40..41]
 r136: [38..39]
 r137: [36..37]
 r138: [32..33]
 r139: [24..25]
 r140: [14..19]
 r141: [16..17]
 r142: [14..15]
 r143: [12..13]
 r144: [8..11]
 r145: [8..9]
 r146: [6..7]
 r147: [2..3]
 r148: [0..1]
 r149: [184..185]
 r150: [176..177]
 r151: [174..175]
 r152: [172..173]
 r153: [170..171]
 r154: [162..163]
 r155: [154..155]
 r156: [148..153]
 r157: [150..151]
 r158: [148..149]
 r159: [148..149]
 r160: [146..147]
 r161: [142..145]
 r162: [142..143]
 r163: [142..143]
 r164: [140..141]
 r165: [138..139]
 r166: [130..131]
 r167: [124..125]
 r168: [120..121]
 r169: [116..117]
 r170: [114..115]
 r171: [112..113]
 r172: [110..111]
 r173: [102..103]
 r174: [94..95]
 r175: [88..93]
 r176: [90..91]
 r177: [88..89]
 r178: [88..89]
 r179: [86..87]
 r180: [82..85]
 r181: [82..83]
 r182: [82..83]
 r183: [80..81]
 r184: [78..79]
 r185: [70..71]
 r186: [64..65]
 r187: [60..61]
 r188: [56..57]
 r189: [54..55]
 r190: [52..53]
 r191: [50..51]
 r192: [42..43]
 r193: [34..35]
 r194: [28..33]
 r195: [30..31]
 r196: [28..29]
 r197: [28..29]
 r198: [26..27]
 r199: [22..25]
 r200: [22..23]
 r201: [22..23]
 r202: [20..21]
 r203: [18..19]
 r204: [10..11]
 r205: [4..5]
 r206: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 33
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 49
changing reg in insn 54
changing reg in insn 56
changing reg in insn 60
changing reg in insn 64
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 86
changing reg in insn 87
changing reg in insn 103
changing reg in insn 107
changing reg in insn 105
changing reg in insn 106
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 117
changing reg in insn 119
changing reg in insn 124
changing reg in insn 126
changing reg in insn 130
changing reg in insn 134
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 156
changing reg in insn 157
changing reg in insn 173
changing reg in insn 177
changing reg in insn 175
changing reg in insn 176
changing reg in insn 176
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 182
changing reg in insn 183
changing reg in insn 187
changing reg in insn 189
changing reg in insn 194
changing reg in insn 196
changing reg in insn 200
changing reg in insn 204
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 205
changing reg in insn 205
changing reg in insn 207
changing reg in insn 208
changing reg in insn 209
changing reg in insn 220
changing reg in insn 221
changing reg in insn 221
changing reg in insn 223
changing reg in insn 6
changing reg in insn 7
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 56
changing reg in insn 58
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 109
changing reg in insn 110
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 122
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 122
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 128
changing reg in insn 126
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 136
changing reg in insn 137
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 165
changing reg in insn 166
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 179
changing reg in insn 180
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 192
changing reg in insn 189
changing reg in insn 190
changing reg in insn 190
changing reg in insn 192
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 198
changing reg in insn 196
changing reg in insn 198
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 206
changing reg in insn 207
changing reg in insn 219
changing reg in insn 220
changing reg in insn 222
changing reg in insn 223
deleting insn with uid = 10.
deleting insn with uid = 25.
deleting insn with uid = 30.
deleting insn with uid = 95.
deleting insn with uid = 100.
deleting insn with uid = 165.
deleting insn with uid = 170.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 169.


skarbunio

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={74d,72u} r1={51d,42u} r2={15d,6u} r4={15d,6u} r5={17d,9u} r6={1d,71u} r7={1d,26u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={38d,6u} r18={8d} r19={8d} r20={1d,1u} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 990{751d,239u,0e} in 183{175 regular + 8 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 149
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":1405 85 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 0 ax [149])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [19 pom+0 S8 A64])) "function.c":1406 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg/f:DI 0 ax [149])) "function.c":1406 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":1407 85 {*movdi_internal}
     (nil))
(call_insn 9 8 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":1407 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 9 12 2 (set (reg:SI 0 ax [orig:88 _2 ] [88])
        (reg:SI 0 ax [orig:87 _1 ] [87])) "function.c":1407 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [orig:88 _2 ] [88])) "function.c":1407 86 {*movsi_internal}
     (nil))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":1407 689 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":1408 86 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":1409 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:QI 0 ax [orig:89 END.133_3 ] [89])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":1411 88 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 END.133_3 ] [89])
            (const_int 99 [0x63]))) "function.c":1411 9 {*cmpqi_1}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "function.c":1411 682 {*jcc}
     (nil)
 -> 84)
;;  succ:       3 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 74 3 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":1413 88 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;;              6 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 92 93 94 95 96 97 150 151 152 153 154
(code_label 74 20 21 4 256 (nil) [1 uses])
(note 21 74 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":1416 86 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1416 86 {*movsi_internal}
     (nil))
(call_insn 24 23 26 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1416 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 26 24 27 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 0 ax [150])) "function.c":1416 86 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:SI 4 si)
        (const_int 29 [0x1d])) "function.c":1417 86 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1417 86 {*movsi_internal}
     (nil))
(call_insn 29 28 31 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1417 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 31 29 32 4 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 ax [151])) "function.c":1417 86 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg/f:DI 0 ax [152])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1418 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 0 ax [orig:90 _4 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [152])
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1418 85 {*movdi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:SI 1 dx [153])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1418 86 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 1 dx [orig:91 _5 ] [91])
        (sign_extend:DI (reg:SI 1 dx [153]))) "function.c":1418 149 {*extendsidi2_rex64}
     (nil))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 1 dx [orig:92 _6 ] [92])
                (ashift:DI (reg:DI 1 dx [orig:91 _5 ] [91])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1418 551 {*ashldi3_1}
     (nil))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _7 ] [93])
                (plus:DI (reg/f:DI 0 ax [orig:90 _4 ] [90])
                    (reg:DI 1 dx [orig:92 _6 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1418 222 {*adddi_1}
     (nil))
(insn 38 37 39 4 (set (reg/f:DI 1 dx [orig:94 _8 ] [94])
        (mem/f:DI (reg/f:DI 0 ax [orig:93 _7 ] [93]) [10 *_7+0 S8 A64])) "function.c":1418 85 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:SI 0 ax [154])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1418 86 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 0 ax [orig:95 _9 ] [95])
        (sign_extend:DI (reg:SI 0 ax [154]))) "function.c":1418 149 {*extendsidi2_rex64}
     (nil))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 0 ax [orig:96 _10 ] [96])
                (plus:DI (reg:DI 0 ax [orig:95 _9 ] [95])
                    (reg/f:DI 1 dx [orig:94 _8 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1418 222 {*adddi_1}
     (nil))
(insn 42 41 43 4 (set (reg:QI 0 ax [orig:97 _11 ] [97])
        (mem:QI (reg/f:DI 0 ax [orig:96 _10 ] [96]) [0 *_10+0 S1 A8])) "function.c":1418 88 {*movqi_internal}
     (nil))
(insn 43 42 44 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _11 ] [97])
            (const_int 46 [0x2e]))) "function.c":1418 9 {*cmpqi_1}
     (nil))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) "function.c":1418 682 {*jcc}
     (nil)
 -> 72)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 101 102 103 104 105 106 107 108 155 156 157 158 159 160 161 162 163 164 165 166 167 168
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg/f:DI 0 ax [155])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1420 85 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 1 dx [orig:98 _12 ] [98])
        (mem:SI (plus:DI (reg/f:DI 0 ax [155])
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])) "function.c":1420 86 {*movsi_internal}
     (nil))
(insn 48 47 49 5 (set (reg/f:DI 0 ax [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1420 85 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 1 dx [157])
        (sign_extend:DI (reg:SI 1 dx [orig:98 _12 ] [98]))) "function.c":1420 149 {*extendsidi2_rex64}
     (nil))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 2 cx [158])
                (plus:DI (reg:DI 1 dx [157])
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1420 222 {*adddi_1}
     (nil))
(insn 51 50 52 5 (set (reg:SI 1 dx [159])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1420 86 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (set (mem:SI (plus:DI (mult:DI (reg:DI 2 cx [158])
                    (const_int 8 [0x8]))
                (reg/f:DI 0 ax [156])) [3 serwer_70->skarb.one_coin S4 A64])
        (reg:SI 1 dx [159])) "function.c":1420 86 {*movsi_internal}
     (nil))
(insn 53 52 54 5 (set (reg/f:DI 0 ax [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1421 85 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:SI 1 dx [orig:99 _13 ] [99])
        (mem:SI (plus:DI (reg/f:DI 0 ax [160])
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])) "function.c":1421 86 {*movsi_internal}
     (nil))
(insn 55 54 56 5 (set (reg/f:DI 0 ax [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1421 85 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:DI 1 dx [162])
        (sign_extend:DI (reg:SI 1 dx [orig:99 _13 ] [99]))) "function.c":1421 149 {*extendsidi2_rex64}
     (nil))
(insn 57 56 58 5 (set (reg:SI 2 cx [163])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1421 86 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [162])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [161]))
                (const_int 52 [0x34])) [3 serwer_70->skarb.one_coin S4 A32])
        (reg:SI 2 cx [163])) "function.c":1421 86 {*movsi_internal}
     (nil))
(insn 59 58 60 5 (set (reg/f:DI 0 ax [164])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1422 85 {*movdi_internal}
     (nil))
(insn 60 59 61 5 (set (reg/f:DI 0 ax [orig:100 _14 ] [100])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [164])
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1422 85 {*movdi_internal}
     (nil))
(insn 61 60 62 5 (set (reg:SI 1 dx [165])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1422 86 {*movsi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:DI 1 dx [orig:101 _15 ] [101])
        (sign_extend:DI (reg:SI 1 dx [165]))) "function.c":1422 149 {*extendsidi2_rex64}
     (nil))
(insn 63 62 64 5 (parallel [
            (set (reg:DI 1 dx [orig:102 _16 ] [102])
                (ashift:DI (reg:DI 1 dx [orig:101 _15 ] [101])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1422 551 {*ashldi3_1}
     (nil))
(insn 64 63 65 5 (parallel [
            (set (reg/f:DI 0 ax [orig:103 _17 ] [103])
                (plus:DI (reg/f:DI 0 ax [orig:100 _14 ] [100])
                    (reg:DI 1 dx [orig:102 _16 ] [102])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1422 222 {*adddi_1}
     (nil))
(insn 65 64 66 5 (set (reg/f:DI 1 dx [orig:104 _18 ] [104])
        (mem/f:DI (reg/f:DI 0 ax [orig:103 _17 ] [103]) [10 *_17+0 S8 A64])) "function.c":1422 85 {*movdi_internal}
     (nil))
(insn 66 65 67 5 (set (reg:SI 0 ax [166])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1422 86 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:DI 0 ax [orig:105 _19 ] [105])
        (sign_extend:DI (reg:SI 0 ax [166]))) "function.c":1422 149 {*extendsidi2_rex64}
     (nil))
(insn 68 67 69 5 (parallel [
            (set (reg/f:DI 0 ax [orig:106 _20 ] [106])
                (plus:DI (reg:DI 0 ax [orig:105 _19 ] [105])
                    (reg/f:DI 1 dx [orig:104 _18 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1422 222 {*adddi_1}
     (nil))
(insn 69 68 231 5 (set (mem:QI (reg/f:DI 0 ax [orig:106 _20 ] [106]) [0 *_20+0 S1 A8])
        (const_int 99 [0x63])) "function.c":1422 88 {*movqi_internal}
     (nil))
(insn 231 69 79 5 (const_int 0 [0]) "function.c":1423 718 {nop}
     (nil))
(insn 79 231 80 5 (set (reg/f:DI 0 ax [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1426 85 {*movdi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:SI 0 ax [orig:107 _21 ] [107])
        (mem:SI (plus:DI (reg/f:DI 0 ax [167])
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])) "function.c":1426 86 {*movsi_internal}
     (nil))
(insn 81 80 82 5 (parallel [
            (set (reg:SI 1 dx [orig:108 _22 ] [108])
                (plus:SI (reg:SI 0 ax [orig:107 _21 ] [107])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1426 221 {*addsi_1}
     (nil))
(insn 82 81 83 5 (set (reg/f:DI 0 ax [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1426 85 {*movdi_internal}
     (nil))
(insn 83 82 234 5 (set (mem:SI (plus:DI (reg/f:DI 0 ax [168])
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])
        (reg:SI 1 dx [orig:108 _22 ] [108])) "function.c":1426 86 {*movsi_internal}
     (nil))
(jump_insn 234 83 235 5 (set (pc)
        (label_ref 84)) 683 {jump}
     (nil)
 -> 84)
;;  succ:       7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 235 234 72)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 72 235 73 6 254 (nil) [1 uses])
(note 73 72 236 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 236 73 237 6 (set (pc)
        (label_ref 74)) "function.c":1416 683 {jump}
     (nil)
 -> 74)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 237 236 84)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       2
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109
(code_label 84 237 85 7 253 (nil) [2 uses])
(note 85 84 86 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 7 (set (reg:QI 0 ax [orig:109 END.134_23 ] [109])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":1429 88 {*movqi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:109 END.134_23 ] [109])
            (const_int 116 [0x74]))) "function.c":1429 9 {*cmpqi_1}
     (nil))
(jump_insn 88 87 89 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) "function.c":1429 682 {*jcc}
     (nil)
 -> 154)
;;  succ:       8 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 89 88 90 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 144 8 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":1431 88 {*movqi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;;              11 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 111 112 113 114 115 116 117 169 170 171 172 173
(code_label 144 90 91 9 260 (nil) [1 uses])
(note 91 144 92 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 9 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":1434 86 {*movsi_internal}
     (nil))
(insn 93 92 94 9 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1434 86 {*movsi_internal}
     (nil))
(call_insn 94 93 96 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1434 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 96 94 97 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 0 ax [169])) "function.c":1434 86 {*movsi_internal}
     (nil))
(insn 97 96 98 9 (set (reg:SI 4 si)
        (const_int 29 [0x1d])) "function.c":1435 86 {*movsi_internal}
     (nil))
(insn 98 97 99 9 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1435 86 {*movsi_internal}
     (nil))
(call_insn 99 98 101 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1435 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 101 99 102 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 ax [170])) "function.c":1435 86 {*movsi_internal}
     (nil))
(insn 102 101 103 9 (set (reg/f:DI 0 ax [171])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1436 85 {*movdi_internal}
     (nil))
(insn 103 102 104 9 (set (reg/f:DI 0 ax [orig:110 _24 ] [110])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [171])
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1436 85 {*movdi_internal}
     (nil))
(insn 104 103 105 9 (set (reg:SI 1 dx [172])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1436 86 {*movsi_internal}
     (nil))
(insn 105 104 106 9 (set (reg:DI 1 dx [orig:111 _25 ] [111])
        (sign_extend:DI (reg:SI 1 dx [172]))) "function.c":1436 149 {*extendsidi2_rex64}
     (nil))
(insn 106 105 107 9 (parallel [
            (set (reg:DI 1 dx [orig:112 _26 ] [112])
                (ashift:DI (reg:DI 1 dx [orig:111 _25 ] [111])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1436 551 {*ashldi3_1}
     (nil))
(insn 107 106 108 9 (parallel [
            (set (reg/f:DI 0 ax [orig:113 _27 ] [113])
                (plus:DI (reg/f:DI 0 ax [orig:110 _24 ] [110])
                    (reg:DI 1 dx [orig:112 _26 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1436 222 {*adddi_1}
     (nil))
(insn 108 107 109 9 (set (reg/f:DI 1 dx [orig:114 _28 ] [114])
        (mem/f:DI (reg/f:DI 0 ax [orig:113 _27 ] [113]) [10 *_27+0 S8 A64])) "function.c":1436 85 {*movdi_internal}
     (nil))
(insn 109 108 110 9 (set (reg:SI 0 ax [173])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1436 86 {*movsi_internal}
     (nil))
(insn 110 109 111 9 (set (reg:DI 0 ax [orig:115 _29 ] [115])
        (sign_extend:DI (reg:SI 0 ax [173]))) "function.c":1436 149 {*extendsidi2_rex64}
     (nil))
(insn 111 110 112 9 (parallel [
            (set (reg/f:DI 0 ax [orig:116 _30 ] [116])
                (plus:DI (reg:DI 0 ax [orig:115 _29 ] [115])
                    (reg/f:DI 1 dx [orig:114 _28 ] [114])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1436 222 {*adddi_1}
     (nil))
(insn 112 111 113 9 (set (reg:QI 0 ax [orig:117 _31 ] [117])
        (mem:QI (reg/f:DI 0 ax [orig:116 _30 ] [116]) [0 *_30+0 S1 A8])) "function.c":1436 88 {*movqi_internal}
     (nil))
(insn 113 112 114 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:117 _31 ] [117])
            (const_int 46 [0x2e]))) "function.c":1436 9 {*cmpqi_1}
     (nil))
(jump_insn 114 113 115 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) "function.c":1436 682 {*jcc}
     (nil)
 -> 142)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 123 124 125 126 127 128 174 175 176 177 178 179 180 181 182 183 184 185 186 187
(note 115 114 116 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 10 (set (reg/f:DI 0 ax [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1438 85 {*movdi_internal}
     (nil))
(insn 117 116 118 10 (set (reg:SI 1 dx [orig:118 _32 ] [118])
        (mem:SI (plus:DI (reg/f:DI 0 ax [174])
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])) "function.c":1438 86 {*movsi_internal}
     (nil))
(insn 118 117 119 10 (set (reg/f:DI 0 ax [175])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1438 85 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (reg:DI 1 dx [176])
        (sign_extend:DI (reg:SI 1 dx [orig:118 _32 ] [118]))) "function.c":1438 149 {*extendsidi2_rex64}
     (nil))
(insn 120 119 121 10 (parallel [
            (set (reg:DI 2 cx [177])
                (plus:DI (reg:DI 1 dx [176])
                    (const_int 1006 [0x3ee])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1438 222 {*adddi_1}
     (nil))
(insn 121 120 122 10 (set (reg:SI 1 dx [178])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1438 86 {*movsi_internal}
     (nil))
(insn 122 121 123 10 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 2 cx [177])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [175]))
                (const_int 4 [0x4])) [3 serwer_70->skarb.treasure_coin S4 A32])
        (reg:SI 1 dx [178])) "function.c":1438 86 {*movsi_internal}
     (nil))
(insn 123 122 124 10 (set (reg/f:DI 0 ax [179])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1439 85 {*movdi_internal}
     (nil))
(insn 124 123 125 10 (set (reg:SI 1 dx [orig:119 _33 ] [119])
        (mem:SI (plus:DI (reg/f:DI 0 ax [179])
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])) "function.c":1439 86 {*movsi_internal}
     (nil))
(insn 125 124 126 10 (set (reg/f:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1439 85 {*movdi_internal}
     (nil))
(insn 126 125 127 10 (set (reg:DI 1 dx [181])
        (sign_extend:DI (reg:SI 1 dx [orig:119 _33 ] [119]))) "function.c":1439 149 {*extendsidi2_rex64}
     (nil))
(insn 127 126 128 10 (set (reg:SI 2 cx [182])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1439 86 {*movsi_internal}
     (nil))
(insn 128 127 129 10 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [181])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [180]))
                (const_int 8056 [0x1f78])) [3 serwer_70->skarb.treasure_coin S4 A32])
        (reg:SI 2 cx [182])) "function.c":1439 86 {*movsi_internal}
     (nil))
(insn 129 128 130 10 (set (reg/f:DI 0 ax [183])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1440 85 {*movdi_internal}
     (nil))
(insn 130 129 131 10 (set (reg/f:DI 0 ax [orig:120 _34 ] [120])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [183])
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1440 85 {*movdi_internal}
     (nil))
(insn 131 130 132 10 (set (reg:SI 1 dx [184])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1440 86 {*movsi_internal}
     (nil))
(insn 132 131 133 10 (set (reg:DI 1 dx [orig:121 _35 ] [121])
        (sign_extend:DI (reg:SI 1 dx [184]))) "function.c":1440 149 {*extendsidi2_rex64}
     (nil))
(insn 133 132 134 10 (parallel [
            (set (reg:DI 1 dx [orig:122 _36 ] [122])
                (ashift:DI (reg:DI 1 dx [orig:121 _35 ] [121])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1440 551 {*ashldi3_1}
     (nil))
(insn 134 133 135 10 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _37 ] [123])
                (plus:DI (reg/f:DI 0 ax [orig:120 _34 ] [120])
                    (reg:DI 1 dx [orig:122 _36 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1440 222 {*adddi_1}
     (nil))
(insn 135 134 136 10 (set (reg/f:DI 1 dx [orig:124 _38 ] [124])
        (mem/f:DI (reg/f:DI 0 ax [orig:123 _37 ] [123]) [10 *_37+0 S8 A64])) "function.c":1440 85 {*movdi_internal}
     (nil))
(insn 136 135 137 10 (set (reg:SI 0 ax [185])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1440 86 {*movsi_internal}
     (nil))
(insn 137 136 138 10 (set (reg:DI 0 ax [orig:125 _39 ] [125])
        (sign_extend:DI (reg:SI 0 ax [185]))) "function.c":1440 149 {*extendsidi2_rex64}
     (nil))
(insn 138 137 139 10 (parallel [
            (set (reg/f:DI 0 ax [orig:126 _40 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 _39 ] [125])
                    (reg/f:DI 1 dx [orig:124 _38 ] [124])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1440 222 {*adddi_1}
     (nil))
(insn 139 138 232 10 (set (mem:QI (reg/f:DI 0 ax [orig:126 _40 ] [126]) [0 *_40+0 S1 A8])
        (const_int 116 [0x74])) "function.c":1440 88 {*movqi_internal}
     (nil))
(insn 232 139 149 10 (const_int 0 [0]) "function.c":1441 718 {nop}
     (nil))
(insn 149 232 150 10 (set (reg/f:DI 0 ax [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1444 85 {*movdi_internal}
     (nil))
(insn 150 149 151 10 (set (reg:SI 0 ax [orig:127 _41 ] [127])
        (mem:SI (plus:DI (reg/f:DI 0 ax [186])
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])) "function.c":1444 86 {*movsi_internal}
     (nil))
(insn 151 150 152 10 (parallel [
            (set (reg:SI 1 dx [orig:128 _42 ] [128])
                (plus:SI (reg:SI 0 ax [orig:127 _41 ] [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1444 221 {*addsi_1}
     (nil))
(insn 152 151 153 10 (set (reg/f:DI 0 ax [187])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1444 85 {*movdi_internal}
     (nil))
(insn 153 152 238 10 (set (mem:SI (plus:DI (reg/f:DI 0 ax [187])
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])
        (reg:SI 1 dx [orig:128 _42 ] [128])) "function.c":1444 86 {*movsi_internal}
     (nil))
(jump_insn 238 153 239 10 (set (pc)
        (label_ref 154)) 683 {jump}
     (nil)
 -> 154)
;;  succ:       12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 239 238 142)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 142 239 143 11 258 (nil) [1 uses])
(note 143 142 240 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 240 143 241 11 (set (pc)
        (label_ref 144)) "function.c":1434 683 {jump}
     (nil)
 -> 144)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 241 240 154)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       7
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129
(code_label 154 241 155 12 257 (nil) [2 uses])
(note 155 154 156 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 12 (set (reg:QI 0 ax [orig:129 END.135_43 ] [129])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":1447 88 {*movqi_internal}
     (nil))
(insn 157 156 158 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:129 END.135_43 ] [129])
            (const_int 84 [0x54]))) "function.c":1447 9 {*cmpqi_1}
     (nil))
(jump_insn 158 157 159 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "function.c":1447 682 {*jcc}
     (nil)
 -> 247)
;;  succ:       13 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 159 158 160 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 214 13 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":1449 88 {*movqi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              16 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 130 131 132 133 134 135 136 137 188 189 190 191 192
(code_label 214 160 161 14 264 (nil) [1 uses])
(note 161 214 162 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 14 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":1452 86 {*movsi_internal}
     (nil))
(insn 163 162 164 14 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1452 86 {*movsi_internal}
     (nil))
(call_insn 164 163 166 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1452 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 166 164 167 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 0 ax [188])) "function.c":1452 86 {*movsi_internal}
     (nil))
(insn 167 166 168 14 (set (reg:SI 4 si)
        (const_int 29 [0x1d])) "function.c":1453 86 {*movsi_internal}
     (nil))
(insn 168 167 169 14 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1453 86 {*movsi_internal}
     (nil))
(call_insn 169 168 171 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1453 700 {*call_value}
     (nil)
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 171 169 172 14 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 ax [189])) "function.c":1453 86 {*movsi_internal}
     (nil))
(insn 172 171 173 14 (set (reg/f:DI 0 ax [190])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1454 85 {*movdi_internal}
     (nil))
(insn 173 172 174 14 (set (reg/f:DI 0 ax [orig:130 _44 ] [130])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [190])
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1454 85 {*movdi_internal}
     (nil))
(insn 174 173 175 14 (set (reg:SI 1 dx [191])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1454 86 {*movsi_internal}
     (nil))
(insn 175 174 176 14 (set (reg:DI 1 dx [orig:131 _45 ] [131])
        (sign_extend:DI (reg:SI 1 dx [191]))) "function.c":1454 149 {*extendsidi2_rex64}
     (nil))
(insn 176 175 177 14 (parallel [
            (set (reg:DI 1 dx [orig:132 _46 ] [132])
                (ashift:DI (reg:DI 1 dx [orig:131 _45 ] [131])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1454 551 {*ashldi3_1}
     (nil))
(insn 177 176 178 14 (parallel [
            (set (reg/f:DI 0 ax [orig:133 _47 ] [133])
                (plus:DI (reg/f:DI 0 ax [orig:130 _44 ] [130])
                    (reg:DI 1 dx [orig:132 _46 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1454 222 {*adddi_1}
     (nil))
(insn 178 177 179 14 (set (reg/f:DI 1 dx [orig:134 _48 ] [134])
        (mem/f:DI (reg/f:DI 0 ax [orig:133 _47 ] [133]) [10 *_47+0 S8 A64])) "function.c":1454 85 {*movdi_internal}
     (nil))
(insn 179 178 180 14 (set (reg:SI 0 ax [192])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1454 86 {*movsi_internal}
     (nil))
(insn 180 179 181 14 (set (reg:DI 0 ax [orig:135 _49 ] [135])
        (sign_extend:DI (reg:SI 0 ax [192]))) "function.c":1454 149 {*extendsidi2_rex64}
     (nil))
(insn 181 180 182 14 (parallel [
            (set (reg/f:DI 0 ax [orig:136 _50 ] [136])
                (plus:DI (reg:DI 0 ax [orig:135 _49 ] [135])
                    (reg/f:DI 1 dx [orig:134 _48 ] [134])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1454 222 {*adddi_1}
     (nil))
(insn 182 181 183 14 (set (reg:QI 0 ax [orig:137 _51 ] [137])
        (mem:QI (reg/f:DI 0 ax [orig:136 _50 ] [136]) [0 *_50+0 S1 A8])) "function.c":1454 88 {*movqi_internal}
     (nil))
(insn 183 182 184 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:137 _51 ] [137])
            (const_int 46 [0x2e]))) "function.c":1454 9 {*cmpqi_1}
     (nil))
(jump_insn 184 183 185 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 212)
            (pc))) "function.c":1454 682 {*jcc}
     (nil)
 -> 212)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 141 142 143 144 145 146 147 148 193 194 195 196 197 198 199 200 201 202 203 204 205 206
(note 185 184 186 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 15 (set (reg/f:DI 0 ax [193])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1456 85 {*movdi_internal}
     (nil))
(insn 187 186 188 15 (set (reg:SI 1 dx [orig:138 _52 ] [138])
        (mem:SI (plus:DI (reg/f:DI 0 ax [193])
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1456 86 {*movsi_internal}
     (nil))
(insn 188 187 189 15 (set (reg/f:DI 0 ax [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1456 85 {*movdi_internal}
     (nil))
(insn 189 188 190 15 (set (reg:DI 1 dx [195])
        (sign_extend:DI (reg:SI 1 dx [orig:138 _52 ] [138]))) "function.c":1456 149 {*extendsidi2_rex64}
     (nil))
(insn 190 189 191 15 (parallel [
            (set (reg:DI 2 cx [196])
                (plus:DI (reg:DI 1 dx [195])
                    (const_int 2006 [0x7d6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1456 222 {*adddi_1}
     (nil))
(insn 191 190 192 15 (set (reg:SI 1 dx [197])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1456 86 {*movsi_internal}
     (nil))
(insn 192 191 193 15 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 2 cx [196])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [194]))
                (const_int 8 [0x8])) [3 serwer_70->skarb.large_treasure_coin S4 A64])
        (reg:SI 1 dx [197])) "function.c":1456 86 {*movsi_internal}
     (nil))
(insn 193 192 194 15 (set (reg/f:DI 0 ax [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1457 85 {*movdi_internal}
     (nil))
(insn 194 193 195 15 (set (reg:SI 1 dx [orig:139 _53 ] [139])
        (mem:SI (plus:DI (reg/f:DI 0 ax [198])
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1457 86 {*movsi_internal}
     (nil))
(insn 195 194 196 15 (set (reg/f:DI 0 ax [199])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1457 85 {*movdi_internal}
     (nil))
(insn 196 195 197 15 (set (reg:DI 1 dx [200])
        (sign_extend:DI (reg:SI 1 dx [orig:139 _53 ] [139]))) "function.c":1457 149 {*extendsidi2_rex64}
     (nil))
(insn 197 196 198 15 (set (reg:SI 2 cx [201])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1457 86 {*movsi_internal}
     (nil))
(insn 198 197 199 15 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [200])
                        (const_int 8 [0x8]))
                    (reg/f:DI 0 ax [199]))
                (const_int 16060 [0x3ebc])) [3 serwer_70->skarb.large_treasure_coin S4 A32])
        (reg:SI 2 cx [201])) "function.c":1457 86 {*movsi_internal}
     (nil))
(insn 199 198 200 15 (set (reg/f:DI 0 ax [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1458 85 {*movdi_internal}
     (nil))
(insn 200 199 201 15 (set (reg/f:DI 0 ax [orig:140 _54 ] [140])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [202])
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1458 85 {*movdi_internal}
     (nil))
(insn 201 200 202 15 (set (reg:SI 1 dx [203])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1458 86 {*movsi_internal}
     (nil))
(insn 202 201 203 15 (set (reg:DI 1 dx [orig:141 _55 ] [141])
        (sign_extend:DI (reg:SI 1 dx [203]))) "function.c":1458 149 {*extendsidi2_rex64}
     (nil))
(insn 203 202 204 15 (parallel [
            (set (reg:DI 1 dx [orig:142 _56 ] [142])
                (ashift:DI (reg:DI 1 dx [orig:141 _55 ] [141])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1458 551 {*ashldi3_1}
     (nil))
(insn 204 203 205 15 (parallel [
            (set (reg/f:DI 0 ax [orig:143 _57 ] [143])
                (plus:DI (reg/f:DI 0 ax [orig:140 _54 ] [140])
                    (reg:DI 1 dx [orig:142 _56 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1458 222 {*adddi_1}
     (nil))
(insn 205 204 206 15 (set (reg/f:DI 1 dx [orig:144 _58 ] [144])
        (mem/f:DI (reg/f:DI 0 ax [orig:143 _57 ] [143]) [10 *_57+0 S8 A64])) "function.c":1458 85 {*movdi_internal}
     (nil))
(insn 206 205 207 15 (set (reg:SI 0 ax [204])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1458 86 {*movsi_internal}
     (nil))
(insn 207 206 208 15 (set (reg:DI 0 ax [orig:145 _59 ] [145])
        (sign_extend:DI (reg:SI 0 ax [204]))) "function.c":1458 149 {*extendsidi2_rex64}
     (nil))
(insn 208 207 209 15 (parallel [
            (set (reg/f:DI 0 ax [orig:146 _60 ] [146])
                (plus:DI (reg:DI 0 ax [orig:145 _59 ] [145])
                    (reg/f:DI 1 dx [orig:144 _58 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1458 222 {*adddi_1}
     (nil))
(insn 209 208 233 15 (set (mem:QI (reg/f:DI 0 ax [orig:146 _60 ] [146]) [0 *_60+0 S1 A8])
        (const_int 84 [0x54])) "function.c":1458 88 {*movqi_internal}
     (nil))
(insn 233 209 219 15 (const_int 0 [0]) "function.c":1459 718 {nop}
     (nil))
(insn 219 233 220 15 (set (reg/f:DI 0 ax [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1462 85 {*movdi_internal}
     (nil))
(insn 220 219 221 15 (set (reg:SI 0 ax [orig:147 _61 ] [147])
        (mem:SI (plus:DI (reg/f:DI 0 ax [205])
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1462 86 {*movsi_internal}
     (nil))
(insn 221 220 222 15 (parallel [
            (set (reg:SI 1 dx [orig:148 _62 ] [148])
                (plus:SI (reg:SI 0 ax [orig:147 _61 ] [147])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1462 221 {*addsi_1}
     (nil))
(insn 222 221 223 15 (set (reg/f:DI 0 ax [206])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1462 85 {*movdi_internal}
     (nil))
(insn 223 222 230 15 (set (mem:SI (plus:DI (reg/f:DI 0 ax [206])
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])
        (reg:SI 1 dx [orig:148 _62 ] [148])) "function.c":1462 86 {*movsi_internal}
     (nil))
(insn 230 223 242 15 (const_int 0 [0]) "function.c":1465 718 {nop}
     (nil))
(jump_insn 242 230 243 15 (set (pc)
        (label_ref:DI 247)) "function.c":1465 683 {jump}
     (nil)
 -> 247)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 243 242 212)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 18, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 212 243 213 16 262 (nil) [1 uses])
(note 213 212 244 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(jump_insn 244 213 245 16 (set (pc)
        (label_ref 214)) "function.c":1452 683 {jump}
     (nil)
 -> 214)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 245 244 247)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 16, next block 17, flags: (RTL, MODIFIED)
;;  pred:       12
;;              15 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 247 245 246 18 266 (nil) [2 uses])
(note 246 247 248 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 248 246 228 18 (const_int 0 [0]) "function.c":1465 718 {nop}
     (nil))
;;  succ:       17 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 18, next block 1, flags: (RTL, MODIFIED)
;;  pred:       18 [always]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 228 248 229 17 252 (nil) [0 uses])
(note 229 228 249 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 249 229 0 NOTE_INSN_DELETED)
