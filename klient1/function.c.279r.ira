
;; Function pobierz_plansze (pobierz_plansze, funcdef_no=6, decl_uid=6214, cgraph_uid=6, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 15 n_edges 18 count 15 (    1)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 2
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 10 9 8
;;
;; Loop 3
;;  header 10, latch 9
;;  depth 2, outer 2
;;  nodes: 10 9
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;; 2 succs { 3 4 }
;; 3 succs { 14 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 12 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 9 11 }
;; 11 succs { 12 }
;; 12 succs { 8 13 }
;; 13 succs { 14 }
;; 14 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 90.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r115: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r115,l0) best DIREG, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best DIREG, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r108,l0) best AREG, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r105,l0) best AREG, allocno GENERAL_REGS
    r104: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r104,l0) best AREG, allocno GENERAL_REGS
    r103: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r103,l0) best AREG, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best AREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:18000 NO_REX_SSE_REGS:18000 SSE_REGS:18000 MMX_REGS:31000 INT_SSE_REGS:31000 ALL_REGS:418000 MEM:12000
  a2(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a4(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a10(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a11(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a12(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a15(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a17(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a18(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a20(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a21(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a22(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a23(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a25(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a26(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a28(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000

   Insn 99(l0): point = 0
   Insn 98(l0): point = 2
   Insn 94(l0): point = 4
   Insn 91(l0): point = 7
   Insn 90(l0): point = 9
   Insn 89(l0): point = 11
   Insn 88(l0): point = 13
   Insn 87(l0): point = 15
   Insn 86(l0): point = 17
   Insn 85(l0): point = 19
   Insn 84(l0): point = 21
   Insn 83(l0): point = 23
   Insn 107(l0): point = 26
   Insn 47(l0): point = 28
   Insn 81(l0): point = 31
   Insn 80(l0): point = 33
   Insn 76(l0): point = 36
   Insn 75(l0): point = 38
   Insn 74(l0): point = 40
   Insn 73(l0): point = 42
   Insn 71(l0): point = 45
   Insn 70(l0): point = 47
   Insn 66(l0): point = 50
   Insn 65(l0): point = 52
   Insn 64(l0): point = 54
   Insn 63(l0): point = 56
   Insn 62(l0): point = 58
   Insn 61(l0): point = 60
   Insn 60(l0): point = 62
   Insn 59(l0): point = 64
   Insn 58(l0): point = 66
   Insn 57(l0): point = 68
   Insn 56(l0): point = 70
   Insn 55(l0): point = 72
   Insn 54(l0): point = 74
   Insn 53(l0): point = 76
   Insn 52(l0): point = 78
   Insn 51(l0): point = 80
   Insn 105(l0): point = 83
   Insn 43(l0): point = 85
   Insn 36(l0): point = 88
   Insn 35(l0): point = 90
   Insn 34(l0): point = 92
   Insn 33(l0): point = 94
   Insn 32(l0): point = 96
   Insn 31(l0): point = 98
   Insn 30(l0): point = 100
   Insn 29(l0): point = 102
   Insn 28(l0): point = 104
   Insn 27(l0): point = 106
   Insn 26(l0): point = 108
   Insn 41(l0): point = 111
   Insn 40(l0): point = 113
   Insn 103(l0): point = 116
   Insn 22(l0): point = 118
   Insn 21(l0): point = 120
   Insn 20(l0): point = 122
   Insn 19(l0): point = 124
   Insn 18(l0): point = 126
   Insn 101(l0): point = 129
   Insn 13(l0): point = 131
   Insn 11(l0): point = 134
   Insn 10(l0): point = 136
   Insn 9(l0): point = 138
   Insn 8(l0): point = 140
   Insn 7(l0): point = 142
   Insn 6(l0): point = 144
   Insn 5(l0): point = 146
 a0(r103): [3..4]
 a1(r102): [129..131] [5..7]
 a2(r115): [12..13]
 a3(r101): [16..17]
 a4(r100): [18..19]
 a5(r99): [20..21]
 a6(r114): [22..23]
 a7(r113): [41..42]
 a8(r97): [53..56]
 a9(r98): [53..54]
 a10(r91): [55..74]
 a11(r96): [57..58]
 a12(r95): [57..62]
 a13(r112): [59..60]
 a14(r94): [63..64]
 a15(r111): [65..66]
 a16(r93): [65..68]
 a17(r92): [69..70]
 a18(r110): [71..72]
 a19(r109): [79..80]
 a20(r89): [91..100]
 a21(r90): [91..92]
 a22(r108): [93..94]
 a23(r107): [101..102]
 a24(r88): [101..104]
 a25(r87): [105..106]
 a26(r106): [107..108]
 a27(r105): [121..122]
 a28(r104): [139..140]
Compressing live ranges: from 149 to 50 - 33%
Ranges after the compression:
 a0(r103): [0..1]
 a1(r102): [46..47] [2..3]
 a2(r115): [4..5]
 a3(r101): [6..7]
 a4(r100): [8..9]
 a5(r99): [10..11]
 a6(r114): [12..13]
 a7(r113): [14..15]
 a8(r97): [16..19]
 a9(r98): [16..17]
 a10(r91): [18..31]
 a11(r96): [20..21]
 a12(r95): [20..23]
 a13(r112): [22..23]
 a14(r94): [24..25]
 a15(r111): [26..27]
 a16(r93): [26..27]
 a17(r92): [28..29]
 a18(r110): [30..31]
 a19(r109): [32..33]
 a20(r89): [34..37]
 a21(r90): [34..35]
 a22(r108): [36..37]
 a23(r107): [38..39]
 a24(r88): [38..39]
 a25(r87): [40..41]
 a26(r106): [42..43]
 a27(r105): [44..45]
 a28(r104): [48..49]
  pref0:a2(r115)<-hr5@500
  pref1:a7(r113)<-hr5@500
  pref2:a19(r109)<-hr5@500
  pref3:a22(r108)<-hr0@500
  pref4:a27(r105)<-hr0@500
  pref5:a28(r104)<-hr0@500
  pref6:a0(r103)<-hr0@500
  pref7:a10(r91)<-hr0@500
  regions=1, blocks=15, points=50
    allocnos=29 (big 0), copies=0, conflicts=0, ranges=30
Disposition:
   25:r87  l0     0   24:r88  l0     1   20:r89  l0     3   21:r90  l0     0
   10:r91  l0     2   17:r92  l0     0   16:r93  l0     1   14:r94  l0     0
   12:r95  l0     1   11:r96  l0     0    8:r97  l0     0    9:r98  l0     1
    5:r99  l0     0    4:r100 l0     0    3:r101 l0     0    1:r102 l0     0
    0:r103 l0     0   28:r104 l0     0   27:r105 l0     0   26:r106 l0     0
   23:r107 l0     0   22:r108 l0     0   19:r109 l0     0   18:r110 l0     0
   15:r111 l0     0   13:r112 l0     0    7:r113 l0     0    6:r114 l0     0
    2:r115 l0     0
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


pobierz_plansze

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={8d,6u} r1={7d} r2={7d} r4={8d,1u} r5={13d,6u} r6={1d,14u} r7={1d,20u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,13u} r17={20d,4u} r18={6d} r19={6d} r20={1d,39u,3e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r87={1d,1u} r88={1d,1u,1e} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u,1e} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={2d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} 
;;    total ref usage 640{503d,132u,5e} in 68{62 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f7cd0e9c900 *.LC0>)) "function.c":58 85 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f7cd0e9c990 *.LC1>)) "function.c":58 85 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f7cd131f700 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "function.c":58 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 8 7 9 2 (set (reg:DI 104)
        (reg:DI 0 ax)) "function.c":58 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [8 fp+0 S8 A64])
        (reg:DI 104)) "function.c":58 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 104)
        (nil)))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [8 fp+0 S8 A64])
            (const_int 0 [0]))) "function.c":59 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "function.c":59 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 16)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 102
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 101 3 (set (reg/f:DI 102 [ _19 ])
        (const_int 0 [0])) "function.c":61 85 {*movdi_internal}
     (nil))
(jump_insn 101 13 102 3 (set (pc)
        (label_ref 92)) "function.c":61 683 {jump}
     (nil)
 -> 92)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102

(barrier 102 101 16)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 105
(code_label 16 102 17 4 2 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:DI 5 di)
        (const_int 200 [0xc8])) "function.c":63 85 {*movdi_internal}
     (nil))
(call_insn 19 18 20 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7cd1261c00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "function.c":63 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 19 21 4 (set (reg/f:DI 105)
        (reg:DI 0 ax)) "function.c":63 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 105)
            (nil))))
(insn 21 20 22 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])
        (reg/f:DI 105)) "function.c":63 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105)
        (nil)))
(insn 22 21 103 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":64 86 {*movsi_internal}
     (nil))
(jump_insn 103 22 104 4 (set (pc)
        (label_ref 37)) "function.c":64 683 {jump}
     (nil)
 -> 37)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 104 103 39)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       6
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 106 107 108
(code_label 39 104 25 5 5 (nil) [1 uses])
(note 25 39 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 106)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":66 86 {*movsi_internal}
     (nil))
(insn 27 26 28 5 (set (reg:DI 87 [ _1 ])
        (sign_extend:DI (reg:SI 106))) "function.c":66 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 28 27 29 5 (parallel [
            (set (reg:DI 88 [ _2 ])
                (ashift:DI (reg:DI 87 [ _1 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":66 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 87 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 29 28 30 5 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])) "function.c":66 85 {*movdi_internal}
     (nil))
(insn 30 29 31 5 (parallel [
            (set (reg/f:DI 89 [ _3 ])
                (plus:DI (reg:DI 88 [ _2 ])
                    (reg/f:DI 107)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":66 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (expr_list:REG_DEAD (reg:DI 88 [ _2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])
                        (reg:DI 88 [ _2 ]))
                    (nil))))))
(insn 31 30 32 5 (set (reg:DI 5 di)
        (const_int 35 [0x23])) "function.c":66 85 {*movdi_internal}
     (nil))
(call_insn 32 31 33 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f7cd1261c00 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "function.c":66 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 33 32 34 5 (set (reg/f:DI 108)
        (reg:DI 0 ax)) "function.c":66 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 108)
            (nil))))
(insn 34 33 35 5 (set (reg/f:DI 90 [ _4 ])
        (reg/f:DI 108)) "function.c":66 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108)
        (nil)))
(insn 35 34 36 5 (set (mem/f:DI (reg/f:DI 89 [ _3 ]) [10 *_3+0 S8 A64])
        (reg/f:DI 90 [ _4 ])) "function.c":66 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
        (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
            (nil))))
(insn 36 35 37 5 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":64 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              4 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 37 36 38 6 4 (nil) [1 uses])
(note 38 37 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 38 41 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 20 [0x14]))) "function.c":64 11 {*cmpsi_1}
     (nil))
(jump_insn 41 40 42 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "function.c":64 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 39)
;;  succ:       5
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 105 7 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":68 86 {*movsi_internal}
     (nil))
(jump_insn 105 43 106 7 (set (pc)
        (label_ref 77)) "function.c":68 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 79)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       12
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 79 106 46 8 9 (nil) [1 uses])
(note 46 79 47 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 107 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":70 86 {*movsi_internal}
     (nil))
(jump_insn 107 47 108 8 (set (pc)
        (label_ref 67)) "function.c":70 683 {jump}
     (nil)
 -> 67)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 108 107 69)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       10
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 95 96 97 98 109 110 111 112
(code_label 69 108 50 9 8 (nil) [1 uses])
(note 50 69 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 9 (set (reg:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [8 fp+0 S8 A64])) "function.c":72 85 {*movdi_internal}
     (nil))
(insn 52 51 53 9 (set (reg:DI 5 di)
        (reg:DI 109)) "function.c":72 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(call_insn 53 52 54 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getc") [flags 0x41]  <function_decl 0x7f7cd1324200 getc>) [0 getc S1 A8])
            (const_int 0 [0]))) "function.c":72 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 54 53 55 9 (set (reg:SI 91 [ _5 ])
        (reg:SI 0 ax)) "function.c":72 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 55 54 56 9 (set (reg:SI 110)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "function.c":72 86 {*movsi_internal}
     (nil))
(insn 56 55 57 9 (set (reg:DI 92 [ _6 ])
        (sign_extend:DI (reg:SI 110))) "function.c":72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 110)
        (nil)))
(insn 57 56 58 9 (parallel [
            (set (reg:DI 93 [ _7 ])
                (ashift:DI (reg:DI 92 [ _6 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":72 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 92 [ _6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 58 57 59 9 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])) "function.c":72 85 {*movdi_internal}
     (nil))
(insn 59 58 60 9 (parallel [
            (set (reg/f:DI 94 [ _8 ])
                (plus:DI (reg:DI 93 [ _7 ])
                    (reg/f:DI 111)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":72 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 111)
        (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])
                        (reg:DI 93 [ _7 ]))
                    (nil))))))
(insn 60 59 61 9 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (reg/f:DI 94 [ _8 ]) [10 *_8+0 S8 A64])) "function.c":72 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _8 ])
        (nil)))
(insn 61 60 62 9 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 j+0 S4 A32])) "function.c":72 86 {*movsi_internal}
     (nil))
(insn 62 61 63 9 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 112))) "function.c":72 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 112)
        (nil)))
(insn 63 62 64 9 (parallel [
            (set (reg/f:DI 97 [ _11 ])
                (plus:DI (reg/f:DI 95 [ _9 ])
                    (reg:DI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":72 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 64 63 65 9 (set (reg:QI 98 [ _12 ])
        (subreg:QI (reg:SI 91 [ _5 ]) 0)) "function.c":72 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ _5 ])
        (nil)))
(insn 65 64 66 9 (set (mem:QI (reg/f:DI 97 [ _11 ]) [0 *_11+0 S1 A8])
        (reg:QI 98 [ _12 ])) "function.c":72 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 98 [ _12 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
            (nil))))
(insn 66 65 67 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":70 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              8 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 67 66 68 10 7 (nil) [1 uses])
(note 68 67 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 68 71 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 j+0 S4 A32])
            (const_int 30 [0x1e]))) "function.c":70 11 {*cmpsi_1}
     (nil))
(jump_insn 71 70 72 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "function.c":70 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 69)
;;  succ:       9
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 113
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 11 (set (reg:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [8 fp+0 S8 A64])) "function.c":74 85 {*movdi_internal}
     (nil))
(insn 74 73 75 11 (set (reg:DI 5 di)
        (reg:DI 113)) "function.c":74 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 113)
        (nil)))
(call_insn 75 74 76 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getc") [flags 0x41]  <function_decl 0x7f7cd1324200 getc>) [0 getc S1 A8])
            (const_int 0 [0]))) "function.c":74 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 76 75 77 11 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":68 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       12 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU,DFS_BACK)
;;              7 [always] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 77 76 78 12 6 (nil) [1 uses])
(note 78 77 80 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 80 78 81 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
            (const_int 20 [0x14]))) "function.c":68 11 {*cmpsi_1}
     (nil))
(jump_insn 81 80 82 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "function.c":68 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 79)
;;  succ:       8
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 100 101 102 114 115
(note 82 81 83 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 13 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])) "function.c":76 85 {*movdi_internal}
     (nil))
(insn 84 83 85 13 (parallel [
            (set (reg/f:DI 99 [ _13 ])
                (plus:DI (reg/f:DI 114)
                    (const_int 160 [0xa0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":76 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 114)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])
                    (const_int 160 [0xa0]))
                (nil)))))
(insn 85 84 86 13 (set (reg/f:DI 100 [ _14 ])
        (mem/f:DI (reg/f:DI 99 [ _13 ]) [10 *_13+0 S8 A64])) "function.c":76 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
        (nil)))
(insn 86 85 87 13 (parallel [
            (set (reg/f:DI 101 [ _15 ])
                (plus:DI (reg/f:DI 100 [ _14 ])
                    (const_int 30 [0x1e])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":76 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _14 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 87 86 88 13 (set (mem:QI (reg/f:DI 101 [ _15 ]) [0 *_15+0 S1 A8])
        (const_int 77 [0x4d])) "function.c":76 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 88 87 89 13 (set (reg:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [8 fp+0 S8 A64])) "function.c":77 85 {*movdi_internal}
     (nil))
(insn 89 88 90 13 (set (reg:DI 5 di)
        (reg:DI 115)) "function.c":77 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 115)
        (nil)))
(call_insn 90 89 91 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f7cd131f400 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "function.c":77 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 91 90 92 13 (set (reg/f:DI 102 [ _19 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [9 tab+0 S8 A64])) "function.c":78 85 {*movdi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;;              3 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 102
;; lr  def 	 0 [ax] 103
(code_label 92 91 93 14 3 (nil) [1 uses])
(note 93 92 94 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 98 14 (set (reg/f:DI 103 [ <retval> ])
        (reg/f:DI 102 [ _19 ])) 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _19 ])
        (nil)))
(insn 98 94 99 14 (set (reg/i:DI 0 ax)
        (reg/f:DI 103 [ <retval> ])) "function.c":79 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ <retval> ])
        (nil)))
(insn 99 98 0 14 (use (reg/i:DI 0 ax)) "function.c":79 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function drukuj_plansze (drukuj_plansze, funcdef_no=7, decl_uid=6216, cgraph_uid=7, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 21 n_edges 29 count 21 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
;;
;; Loop 1
;;  header 19, latch 18
;;  depth 1, outer 0
;;  nodes: 19 18 17 16 3 15 5 10 12 14 13 11 9 8 7 6 4
;;
;; Loop 2
;;  header 17, latch 16
;;  depth 2, outer 1
;;  nodes: 17 16 15 5 10 12 14 13 11 9 8 7 6 4
;; 2 succs { 19 }
;; 3 succs { 17 }
;; 4 succs { 5 6 }
;; 5 succs { 16 }
;; 6 succs { 10 7 }
;; 7 succs { 10 8 }
;; 8 succs { 10 9 }
;; 9 succs { 10 11 }
;; 10 succs { 16 }
;; 11 succs { 12 13 }
;; 12 succs { 16 }
;; 13 succs { 14 15 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 17 }
;; 17 succs { 4 18 }
;; 18 succs { 19 }
;; 19 succs { 3 20 }
;; 20 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 141.
verify found no changes in insn with uid = 163.
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 222.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a110 (r168,l0) best SIREG, allocno GENERAL_REGS
    r167: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a111 (r167,l0) best DREG, allocno GENERAL_REGS
    r166: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r166,l0) best SIREG, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r151,l0) best DIREG, allocno GENERAL_REGS
    r150: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r150,l0) best SIREG, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r142,l0) best DIREG, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a44 (r134,l0) best DIREG, allocno GENERAL_REGS
    r133: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r133,l0) best SIREG, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r125,l0) best DIREG, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a97 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a98 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a109 (r87,l0) best DIREG, allocno GENERAL_REGS

  a0(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a1(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a2(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a4(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a7(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a9(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a12(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a14(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a15(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a19(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a24(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a25(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a26(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a28(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a29(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a30(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a31(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a35(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a36(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a37(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a38(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a39(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a41(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a42(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a43(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a44(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a45(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a46(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a47(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a48(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a49(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a50(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a52(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a53(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a54(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a55(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a57(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a58(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a59(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a60(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a61(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a62(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a63(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a65(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a66(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a67(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a68(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a69(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a70(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a71(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a72(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a73(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a75(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a77(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a78(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a79(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a80(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a81(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a82(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a83(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a84(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a85(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a86(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a88(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a89(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a92(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a93(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a94(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a95(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a97(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a98(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a99(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a100(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a101(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a102(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a103(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a104(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a105(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a106(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a107(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a108(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a109(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a110(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a111(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 243(l0): point = 0
   Insn 246(l0): point = 3
   Insn 23(l0): point = 5
   Insn 237(l0): point = 8
   Insn 236(l0): point = 10
   Insn 232(l0): point = 13
   Insn 230(l0): point = 16
   Insn 229(l0): point = 18
   Insn 225(l0): point = 21
   Insn 222(l0): point = 24
   Insn 221(l0): point = 26
   Insn 220(l0): point = 28
   Insn 219(l0): point = 30
   Insn 218(l0): point = 32
   Insn 217(l0): point = 34
   Insn 216(l0): point = 36
   Insn 215(l0): point = 38
   Insn 214(l0): point = 40
   Insn 213(l0): point = 42
   Insn 212(l0): point = 44
   Insn 211(l0): point = 46
   Insn 210(l0): point = 48
   Insn 209(l0): point = 50
   Insn 208(l0): point = 52
   Insn 248(l0): point = 55
   Insn 59(l0): point = 57
   Insn 58(l0): point = 59
   Insn 57(l0): point = 61
   Insn 56(l0): point = 63
   Insn 55(l0): point = 65
   Insn 54(l0): point = 67
   Insn 53(l0): point = 69
   Insn 52(l0): point = 71
   Insn 51(l0): point = 73
   Insn 50(l0): point = 75
   Insn 49(l0): point = 77
   Insn 48(l0): point = 79
   Insn 47(l0): point = 81
   Insn 250(l0): point = 84
   Insn 141(l0): point = 86
   Insn 140(l0): point = 88
   Insn 139(l0): point = 90
   Insn 138(l0): point = 92
   Insn 137(l0): point = 94
   Insn 136(l0): point = 96
   Insn 135(l0): point = 98
   Insn 134(l0): point = 100
   Insn 133(l0): point = 102
   Insn 132(l0): point = 104
   Insn 131(l0): point = 106
   Insn 130(l0): point = 108
   Insn 129(l0): point = 110
   Insn 128(l0): point = 112
   Insn 127(l0): point = 114
   Insn 126(l0): point = 116
   Insn 125(l0): point = 118
   Insn 124(l0): point = 120
   Insn 123(l0): point = 122
   Insn 122(l0): point = 124
   Insn 121(l0): point = 126
   Insn 120(l0): point = 128
   Insn 119(l0): point = 130
   Insn 118(l0): point = 132
   Insn 117(l0): point = 134
   Insn 252(l0): point = 137
   Insn 183(l0): point = 139
   Insn 182(l0): point = 141
   Insn 181(l0): point = 143
   Insn 180(l0): point = 145
   Insn 179(l0): point = 147
   Insn 178(l0): point = 149
   Insn 177(l0): point = 151
   Insn 176(l0): point = 153
   Insn 175(l0): point = 155
   Insn 174(l0): point = 157
   Insn 173(l0): point = 159
   Insn 172(l0): point = 161
   Insn 171(l0): point = 163
   Insn 170(l0): point = 165
   Insn 169(l0): point = 167
   Insn 168(l0): point = 169
   Insn 167(l0): point = 171
   Insn 166(l0): point = 173
   Insn 165(l0): point = 175
   Insn 164(l0): point = 177
   Insn 163(l0): point = 179
   Insn 162(l0): point = 181
   Insn 161(l0): point = 183
   Insn 160(l0): point = 185
   Insn 159(l0): point = 187
   Insn 254(l0): point = 190
   Insn 203(l0): point = 192
   Insn 202(l0): point = 194
   Insn 201(l0): point = 196
   Insn 199(l0): point = 199
   Insn 198(l0): point = 201
   Insn 197(l0): point = 203
   Insn 196(l0): point = 205
   Insn 195(l0): point = 207
   Insn 194(l0): point = 209
   Insn 193(l0): point = 211
   Insn 192(l0): point = 213
   Insn 191(l0): point = 215
   Insn 190(l0): point = 217
   Insn 189(l0): point = 219
   Insn 188(l0): point = 221
   Insn 157(l0): point = 224
   Insn 156(l0): point = 226
   Insn 155(l0): point = 228
   Insn 154(l0): point = 230
   Insn 153(l0): point = 232
   Insn 152(l0): point = 234
   Insn 151(l0): point = 236
   Insn 150(l0): point = 238
   Insn 149(l0): point = 240
   Insn 148(l0): point = 242
   Insn 147(l0): point = 244
   Insn 146(l0): point = 246
   Insn 114(l0): point = 249
   Insn 113(l0): point = 251
   Insn 112(l0): point = 253
   Insn 111(l0): point = 255
   Insn 110(l0): point = 257
   Insn 109(l0): point = 259
   Insn 108(l0): point = 261
   Insn 107(l0): point = 263
   Insn 106(l0): point = 265
   Insn 105(l0): point = 267
   Insn 104(l0): point = 269
   Insn 103(l0): point = 271
   Insn 101(l0): point = 274
   Insn 100(l0): point = 276
   Insn 99(l0): point = 278
   Insn 98(l0): point = 280
   Insn 97(l0): point = 282
   Insn 96(l0): point = 284
   Insn 95(l0): point = 286
   Insn 94(l0): point = 288
   Insn 93(l0): point = 290
   Insn 92(l0): point = 292
   Insn 91(l0): point = 294
   Insn 90(l0): point = 296
   Insn 88(l0): point = 299
   Insn 87(l0): point = 301
   Insn 86(l0): point = 303
   Insn 85(l0): point = 305
   Insn 84(l0): point = 307
   Insn 83(l0): point = 309
   Insn 82(l0): point = 311
   Insn 81(l0): point = 313
   Insn 80(l0): point = 315
   Insn 79(l0): point = 317
   Insn 78(l0): point = 319
   Insn 77(l0): point = 321
   Insn 75(l0): point = 324
   Insn 74(l0): point = 326
   Insn 73(l0): point = 328
   Insn 72(l0): point = 330
   Insn 71(l0): point = 332
   Insn 70(l0): point = 334
   Insn 69(l0): point = 336
   Insn 68(l0): point = 338
   Insn 67(l0): point = 340
   Insn 66(l0): point = 342
   Insn 65(l0): point = 344
   Insn 64(l0): point = 346
   Insn 45(l0): point = 349
   Insn 44(l0): point = 351
   Insn 43(l0): point = 353
   Insn 42(l0): point = 355
   Insn 41(l0): point = 357
   Insn 40(l0): point = 359
   Insn 39(l0): point = 361
   Insn 38(l0): point = 363
   Insn 37(l0): point = 365
   Insn 36(l0): point = 367
   Insn 35(l0): point = 369
   Insn 34(l0): point = 371
   Insn 33(l0): point = 373
   Insn 32(l0): point = 375
   Insn 31(l0): point = 377
   Insn 30(l0): point = 379
   Insn 29(l0): point = 381
   Insn 28(l0): point = 383
   Insn 27(l0): point = 385
   Insn 244(l0): point = 388
   Insn 19(l0): point = 390
   Insn 18(l0): point = 392
   Insn 17(l0): point = 394
   Insn 16(l0): point = 396
   Insn 15(l0): point = 398
   Insn 14(l0): point = 400
   Insn 13(l0): point = 402
   Insn 12(l0): point = 404
   Insn 11(l0): point = 406
   Insn 10(l0): point = 408
   Insn 9(l0): point = 410
   Insn 8(l0): point = 412
   Insn 7(l0): point = 414
   Insn 6(l0): point = 416
   Insn 2(l0): point = 418
 a0(r166): [31..32]
 a1(r165): [33..34]
 a2(r164): [35..36]
 a3(r163): [37..38]
 a4(r162): [37..42]
 a5(r198): [39..40]
 a6(r161): [43..44]
 a7(r197): [45..46]
 a8(r160): [45..48]
 a9(r159): [49..50]
 a10(r196): [51..52]
 a11(r158): [202..203]
 a12(r157): [204..205]
 a13(r156): [206..207]
 a14(r155): [206..211]
 a15(r195): [208..209]
 a16(r154): [212..213]
 a17(r194): [214..215]
 a18(r153): [214..217]
 a19(r152): [218..219]
 a20(r193): [220..221]
 a21(r151): [142..147]
 a22(r150): [156..157]
 a23(r149): [158..159]
 a24(r148): [160..161]
 a25(r147): [162..163]
 a26(r146): [162..167]
 a27(r192): [164..165]
 a28(r145): [168..169]
 a29(r191): [170..171]
 a30(r144): [170..173]
 a31(r143): [174..175]
 a32(r190): [176..177]
 a33(r142): [182..187]
 a34(r141): [227..228]
 a35(r140): [229..230]
 a36(r139): [231..232]
 a37(r138): [231..236]
 a38(r189): [233..234]
 a39(r137): [237..238]
 a40(r188): [239..240]
 a41(r136): [239..242]
 a42(r135): [243..244]
 a43(r187): [245..246]
 a44(r134): [89..94]
 a45(r133): [103..104]
 a46(r132): [105..106]
 a47(r131): [107..108]
 a48(r130): [109..110]
 a49(r129): [109..114]
 a50(r186): [111..112]
 a51(r128): [115..116]
 a52(r185): [117..118]
 a53(r127): [117..120]
 a54(r126): [121..122]
 a55(r184): [123..124]
 a56(r125): [129..134]
 a57(r124): [252..253]
 a58(r123): [254..255]
 a59(r122): [256..257]
 a60(r121): [256..261]
 a61(r183): [258..259]
 a62(r120): [262..263]
 a63(r182): [264..265]
 a64(r119): [264..267]
 a65(r118): [268..269]
 a66(r181): [270..271]
 a67(r117): [277..278]
 a68(r116): [279..280]
 a69(r115): [281..282]
 a70(r114): [281..286]
 a71(r180): [283..284]
 a72(r113): [287..288]
 a73(r179): [289..290]
 a74(r112): [289..292]
 a75(r111): [293..294]
 a76(r178): [295..296]
 a77(r110): [302..303]
 a78(r109): [304..305]
 a79(r108): [306..307]
 a80(r107): [306..311]
 a81(r177): [308..309]
 a82(r106): [312..313]
 a83(r176): [314..315]
 a84(r105): [314..317]
 a85(r104): [318..319]
 a86(r175): [320..321]
 a87(r103): [327..328]
 a88(r102): [329..330]
 a89(r101): [331..332]
 a90(r100): [331..336]
 a91(r174): [333..334]
 a92(r99): [337..338]
 a93(r173): [339..340]
 a94(r98): [339..342]
 a95(r97): [343..344]
 a96(r172): [345..346]
 a97(r96): [60..65]
 a98(r95): [76..81]
 a99(r94): [352..353]
 a100(r93): [354..355]
 a101(r92): [356..357]
 a102(r91): [356..361]
 a103(r171): [358..359]
 a104(r90): [362..363]
 a105(r170): [364..365]
 a106(r89): [364..367]
 a107(r88): [368..369]
 a108(r169): [370..371]
 a109(r87): [376..385]
 a110(r168): [378..381]
 a111(r167): [380..383]
Compressing live ranges: from 421 to 180 - 42%
Ranges after the compression:
 a0(r166): [0..1]
 a1(r165): [2..3]
 a2(r164): [4..5]
 a3(r163): [6..7]
 a4(r162): [6..9]
 a5(r198): [8..9]
 a6(r161): [10..11]
 a7(r197): [12..13]
 a8(r160): [12..13]
 a9(r159): [14..15]
 a10(r196): [16..17]
 a11(r158): [66..67]
 a12(r157): [68..69]
 a13(r156): [70..71]
 a14(r155): [70..73]
 a15(r195): [72..73]
 a16(r154): [74..75]
 a17(r194): [76..77]
 a18(r153): [76..77]
 a19(r152): [78..79]
 a20(r193): [80..81]
 a21(r151): [44..45]
 a22(r150): [46..47]
 a23(r149): [48..49]
 a24(r148): [50..51]
 a25(r147): [52..53]
 a26(r146): [52..55]
 a27(r192): [54..55]
 a28(r145): [56..57]
 a29(r191): [58..59]
 a30(r144): [58..59]
 a31(r143): [60..61]
 a32(r190): [62..63]
 a33(r142): [64..65]
 a34(r141): [82..83]
 a35(r140): [84..85]
 a36(r139): [86..87]
 a37(r138): [86..89]
 a38(r189): [88..89]
 a39(r137): [90..91]
 a40(r188): [92..93]
 a41(r136): [92..93]
 a42(r135): [94..95]
 a43(r187): [96..97]
 a44(r134): [22..23]
 a45(r133): [24..25]
 a46(r132): [26..27]
 a47(r131): [28..29]
 a48(r130): [30..31]
 a49(r129): [30..33]
 a50(r186): [32..33]
 a51(r128): [34..35]
 a52(r185): [36..37]
 a53(r127): [36..37]
 a54(r126): [38..39]
 a55(r184): [40..41]
 a56(r125): [42..43]
 a57(r124): [98..99]
 a58(r123): [100..101]
 a59(r122): [102..103]
 a60(r121): [102..105]
 a61(r183): [104..105]
 a62(r120): [106..107]
 a63(r182): [108..109]
 a64(r119): [108..109]
 a65(r118): [110..111]
 a66(r181): [112..113]
 a67(r117): [114..115]
 a68(r116): [116..117]
 a69(r115): [118..119]
 a70(r114): [118..121]
 a71(r180): [120..121]
 a72(r113): [122..123]
 a73(r179): [124..125]
 a74(r112): [124..125]
 a75(r111): [126..127]
 a76(r178): [128..129]
 a77(r110): [130..131]
 a78(r109): [132..133]
 a79(r108): [134..135]
 a80(r107): [134..137]
 a81(r177): [136..137]
 a82(r106): [138..139]
 a83(r176): [140..141]
 a84(r105): [140..141]
 a85(r104): [142..143]
 a86(r175): [144..145]
 a87(r103): [146..147]
 a88(r102): [148..149]
 a89(r101): [150..151]
 a90(r100): [150..153]
 a91(r174): [152..153]
 a92(r99): [154..155]
 a93(r173): [156..157]
 a94(r98): [156..157]
 a95(r97): [158..159]
 a96(r172): [160..161]
 a97(r96): [18..19]
 a98(r95): [20..21]
 a99(r94): [162..163]
 a100(r93): [164..165]
 a101(r92): [166..167]
 a102(r91): [166..169]
 a103(r171): [168..169]
 a104(r90): [170..171]
 a105(r170): [172..173]
 a106(r89): [172..173]
 a107(r88): [174..175]
 a108(r169): [176..177]
 a109(r87): [178..179]
 a110(r168): [178..179]
 a111(r167): [178..179]
  pref0:a110(r168)<-hr4@500
  pref1:a111(r167)<-hr1@500
  pref2:a0(r166)<-hr4@500
  pref3:a21(r151)<-hr5@500
  pref4:a22(r150)<-hr4@500
  pref5:a33(r142)<-hr5@500
  pref6:a44(r134)<-hr5@500
  pref7:a45(r133)<-hr4@500
  pref8:a56(r125)<-hr5@500
  pref9:a97(r96)<-hr5@500
  pref10:a98(r95)<-hr5@500
  pref11:a109(r87)<-hr5@500
  regions=1, blocks=21, points=180
    allocnos=112 (big 0), copies=0, conflicts=0, ranges=112
Disposition:
  109:r87  l0     0  107:r88  l0     0  106:r89  l0     1  104:r90  l0     0
  102:r91  l0     1  101:r92  l0     0  100:r93  l0     0   99:r94  l0     0
   98:r95  l0     0   97:r96  l0     0   95:r97  l0     0   94:r98  l0     1
   92:r99  l0     0   90:r100 l0     1   89:r101 l0     0   88:r102 l0     0
   87:r103 l0     0   85:r104 l0     0   84:r105 l0     1   82:r106 l0     0
   80:r107 l0     1   79:r108 l0     0   78:r109 l0     0   77:r110 l0     0
   75:r111 l0     0   74:r112 l0     1   72:r113 l0     0   70:r114 l0     1
   69:r115 l0     0   68:r116 l0     0   67:r117 l0     0   65:r118 l0     0
   64:r119 l0     1   62:r120 l0     0   60:r121 l0     1   59:r122 l0     0
   58:r123 l0     0   57:r124 l0     0   56:r125 l0     0   54:r126 l0     0
   53:r127 l0     1   51:r128 l0     0   49:r129 l0     1   48:r130 l0     0
   47:r131 l0     0   46:r132 l0     0   45:r133 l0     0   44:r134 l0     0
   42:r135 l0     0   41:r136 l0     1   39:r137 l0     0   37:r138 l0     1
   36:r139 l0     0   35:r140 l0     0   34:r141 l0     0   33:r142 l0     0
   31:r143 l0     0   30:r144 l0     1   28:r145 l0     0   26:r146 l0     1
   25:r147 l0     0   24:r148 l0     0   23:r149 l0     0   22:r150 l0     0
   21:r151 l0     0   19:r152 l0     0   18:r153 l0     1   16:r154 l0     0
   14:r155 l0     1   13:r156 l0     0   12:r157 l0     0   11:r158 l0     0
    9:r159 l0     0    8:r160 l0     1    6:r161 l0     0    4:r162 l0     1
    3:r163 l0     0    2:r164 l0     0    1:r165 l0     0    0:r166 l0     0
  111:r167 l0     1  110:r168 l0     2  108:r169 l0     0  105:r170 l0     0
  103:r171 l0     0   96:r172 l0     0   93:r173 l0     0   91:r174 l0     0
   86:r175 l0     0   83:r176 l0     0   81:r177 l0     0   76:r178 l0     0
   73:r179 l0     0   71:r180 l0     0   66:r181 l0     0   63:r182 l0     0
   61:r183 l0     0   55:r184 l0     0   52:r185 l0     0   50:r186 l0     0
   43:r187 l0     0   40:r188 l0     0   38:r189 l0     0   32:r190 l0     0
   29:r191 l0     0   27:r192 l0     0   20:r193 l0     0   17:r194 l0     0
   15:r195 l0     0   10:r196 l0     0    7:r197 l0     0    5:r198 l0     0
+++Costs: overall -12000, reg -12000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


drukuj_plansze

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={22d,5u} r1={27d,10u} r2={17d} r4={30d,13u} r5={32d,16u} r6={1d,20u} r7={1d,36u} r8={16d} r9={16d} r10={16d} r11={16d} r12={16d} r13={16d} r14={16d} r15={16d} r16={1d,19u} r17={57d,9u} r18={16d} r19={16d} r20={1d,61u,10e} r21={17d} r22={17d} r23={17d} r24={17d} r25={17d} r26={17d} r27={17d} r28={17d} r29={16d} r30={16d} r31={16d} r32={16d} r33={16d} r34={16d} r35={16d} r36={16d} r37={17d} r38={17d} r39={16d} r40={16d} r45={16d} r46={16d} r47={16d} r48={16d} r49={16d} r50={16d} r51={16d} r52={16d} r53={16d} r54={16d} r55={16d} r56={16d} r57={16d} r58={16d} r59={16d} r60={16d} r61={16d} r62={16d} r63={16d} r64={16d} r65={16d} r66={16d} r67={16d} r68={16d} r69={16d} r70={16d} r71={16d} r72={16d} r73={16d} r74={16d} r75={16d} r76={16d} r77={16d} r78={16d} r79={16d} r80={16d} r87={1d,1u} r88={1d,1u} r89={1d,1u,1e} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u,1e} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u,1e} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u,1e} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u,1e} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u,1e} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u,1e} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u,1e} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u,1e} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u,1e} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} 
;;    total ref usage 1688{1367d,301u,20e} in 201{185 regular + 16 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
        (reg:DI 5 di [ tab ])) "function.c":82 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ tab ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("start_color") [flags 0x41]  <function_decl 0x7f7cd10bd300 start_color>) [0 start_color S1 A8])
            (const_int 0 [0]))) "function.c":83 700 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":85 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":85 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":85 86 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":85 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 11 10 12 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":86 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":86 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":86 86 {*movsi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":86 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "function.c":87 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":87 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 5 di)
        (const_int 11 [0xb])) "function.c":87 86 {*movsi_internal}
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":87 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 19 18 244 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":89 86 {*movsi_internal}
     (nil))
(jump_insn 244 19 245 2 (set (pc)
        (label_ref 233)) "function.c":89 683 {jump}
     (nil)
 -> 233)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 245 244 235)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       19
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 235 245 22 3 20 (nil) [1 uses])
(note 22 235 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 246 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":91 86 {*movsi_internal}
     (nil))
(jump_insn 246 23 247 3 (set (pc)
        (label_ref 226)) "function.c":91 683 {jump}
     (nil)
 -> 226)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 247 246 228)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       17
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 167 168 169 170 171
(code_label 228 247 26 4 19 (nil) [1 uses])
(note 26 228 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 4 (set (reg/f:DI 87 [ stdscr.0_1 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":93 85 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:SI 167)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":93 86 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:SI 168)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":93 86 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 1 dx)
        (reg:SI 167)) "function.c":93 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 167)
        (nil)))
(insn 31 30 32 4 (set (reg:SI 4 si)
        (reg:SI 168)) "function.c":93 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 168)
        (nil)))
(insn 32 31 33 4 (set (reg:DI 5 di)
        (reg/f:DI 87 [ stdscr.0_1 ])) "function.c":93 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ stdscr.0_1 ])
        (nil)))
(call_insn 33 32 34 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":93 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 34 33 35 4 (set (reg:SI 169)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":94 86 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 88 [ _2 ])
        (sign_extend:DI (reg:SI 169))) "function.c":94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 169)
        (nil)))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 89 [ _3 ])
                (ashift:DI (reg:DI 88 [ _2 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":94 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 37 36 38 4 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":94 85 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:DI 90 [ _4 ])
                (plus:DI (reg:DI 89 [ _3 ])
                    (reg/f:DI 170)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":94 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (expr_list:REG_DEAD (reg:DI 89 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 89 [ _3 ]))
                    (nil))))))
(insn 39 38 40 4 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (reg/f:DI 90 [ _4 ]) [10 *_4+0 S8 A64])) "function.c":94 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
        (nil)))
(insn 40 39 41 4 (set (reg:SI 171)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":94 86 {*movsi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 92 [ _6 ])
        (sign_extend:DI (reg:SI 171))) "function.c":94 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 171)
        (nil)))
(insn 42 41 43 4 (parallel [
            (set (reg/f:DI 93 [ _7 ])
                (plus:DI (reg/f:DI 91 [ _5 ])
                    (reg:DI 92 [ _6 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":94 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 92 [ _6 ])
        (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 43 42 44 4 (set (reg:QI 94 [ _8 ])
        (mem:QI (reg/f:DI 93 [ _7 ]) [0 *_7+0 S1 A8])) "function.c":94 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
        (nil)))
(insn 44 43 45 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 94 [ _8 ])
            (const_int 77 [0x4d]))) "function.c":94 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 94 [ _8 ])
        (nil)))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "function.c":94 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 62)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 96
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:DI 95 [ stdscr.1_9 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":96 85 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":96 85 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":96 86 {*movsi_internal}
     (nil))
(insn 50 49 51 5 (set (reg:DI 5 di)
        (reg/f:DI 95 [ stdscr.1_9 ])) "function.c":96 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ stdscr.1_9 ])
        (nil)))
(call_insn 51 50 52 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":96 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 52 51 53 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":97 85 {*movdi_internal}
     (nil))
(insn 53 52 54 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":97 88 {*movqi_internal}
     (nil))
(call_insn 54 53 55 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":97 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 55 54 56 5 (set (reg/f:DI 96 [ stdscr.2_10 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":98 85 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":98 85 {*movdi_internal}
     (nil))
(insn 57 56 58 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":98 86 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (reg:DI 5 di)
        (reg/f:DI 96 [ stdscr.2_10 ])) "function.c":98 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ stdscr.2_10 ])
        (nil)))
(call_insn 59 58 248 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":98 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 248 59 249 5 (set (pc)
        (label_ref 223)) 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 249 248 62)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 102 103 172 173 174
(code_label 62 249 63 6 13 (nil) [1 uses])
(note 63 62 64 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 6 (set (reg:SI 172)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 65 64 66 6 (set (reg:DI 97 [ _11 ])
        (sign_extend:DI (reg:SI 172))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 66 65 67 6 (parallel [
            (set (reg:DI 98 [ _12 ])
                (ashift:DI (reg:DI 97 [ _11 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 67 66 68 6 (set (reg/f:DI 173)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 68 67 69 6 (parallel [
            (set (reg/f:DI 99 [ _13 ])
                (plus:DI (reg:DI 98 [ _12 ])
                    (reg/f:DI 173)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 173)
        (expr_list:REG_DEAD (reg:DI 98 [ _12 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 98 [ _12 ]))
                    (nil))))))
(insn 69 68 70 6 (set (reg/f:DI 100 [ _14 ])
        (mem/f:DI (reg/f:DI 99 [ _13 ]) [10 *_13+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
        (nil)))
(insn 70 69 71 6 (set (reg:SI 174)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 71 70 72 6 (set (reg:DI 101 [ _15 ])
        (sign_extend:DI (reg:SI 174))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 174)
        (nil)))
(insn 72 71 73 6 (parallel [
            (set (reg/f:DI 102 [ _16 ])
                (plus:DI (reg/f:DI 100 [ _14 ])
                    (reg:DI 101 [ _15 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 101 [ _15 ])
        (expr_list:REG_DEAD (reg/f:DI 100 [ _14 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 73 72 74 6 (set (reg:QI 103 [ _17 ])
        (mem:QI (reg/f:DI 102 [ _16 ]) [0 *_16+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _16 ])
        (nil)))
(insn 74 73 75 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 103 [ _17 ])
            (const_int 99 [0x63]))) "function.c":100 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 103 [ _17 ])
        (nil)))
(jump_insn 75 74 76 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":100 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 115)
;;  succ:       10
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 104 105 106 107 108 109 110 175 176 177
(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 7 (set (reg:SI 175)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 78 77 79 7 (set (reg:DI 104 [ _18 ])
        (sign_extend:DI (reg:SI 175))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 175)
        (nil)))
(insn 79 78 80 7 (parallel [
            (set (reg:DI 105 [ _19 ])
                (ashift:DI (reg:DI 104 [ _18 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 104 [ _18 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 80 79 81 7 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 81 80 82 7 (parallel [
            (set (reg/f:DI 106 [ _20 ])
                (plus:DI (reg:DI 105 [ _19 ])
                    (reg/f:DI 176)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (expr_list:REG_DEAD (reg:DI 105 [ _19 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 105 [ _19 ]))
                    (nil))))))
(insn 82 81 83 7 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (reg/f:DI 106 [ _20 ]) [10 *_20+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 83 82 84 7 (set (reg:SI 177)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 84 83 85 7 (set (reg:DI 108 [ _22 ])
        (sign_extend:DI (reg:SI 177))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 177)
        (nil)))
(insn 85 84 86 7 (parallel [
            (set (reg/f:DI 109 [ _23 ])
                (plus:DI (reg/f:DI 107 [ _21 ])
                    (reg:DI 108 [ _22 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 108 [ _22 ])
        (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 86 85 87 7 (set (reg:QI 110 [ _24 ])
        (mem:QI (reg/f:DI 109 [ _23 ]) [0 *_23+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ _23 ])
        (nil)))
(insn 87 86 88 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 110 [ _24 ])
            (const_int 116 [0x74]))) "function.c":100 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 110 [ _24 ])
        (nil)))
(jump_insn 88 87 89 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":100 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 115)
;;  succ:       10
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111 112 113 114 115 116 117 178 179 180
(note 89 88 90 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 8 (set (reg:SI 178)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 91 90 92 8 (set (reg:DI 111 [ _25 ])
        (sign_extend:DI (reg:SI 178))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 178)
        (nil)))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 112 [ _26 ])
                (ashift:DI (reg:DI 111 [ _25 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 111 [ _25 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 93 92 94 8 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 94 93 95 8 (parallel [
            (set (reg/f:DI 113 [ _27 ])
                (plus:DI (reg:DI 112 [ _26 ])
                    (reg/f:DI 179)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 112 [ _26 ]))
                    (nil))))))
(insn 95 94 96 8 (set (reg/f:DI 114 [ _28 ])
        (mem/f:DI (reg/f:DI 113 [ _27 ]) [10 *_27+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 96 95 97 8 (set (reg:SI 180)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 97 96 98 8 (set (reg:DI 115 [ _29 ])
        (sign_extend:DI (reg:SI 180))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 180)
        (nil)))
(insn 98 97 99 8 (parallel [
            (set (reg/f:DI 116 [ _30 ])
                (plus:DI (reg/f:DI 114 [ _28 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 99 98 100 8 (set (reg:QI 117 [ _31 ])
        (mem:QI (reg/f:DI 116 [ _30 ]) [0 *_30+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
        (nil)))
(insn 100 99 101 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 117 [ _31 ])
            (const_int 84 [0x54]))) "function.c":100 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 117 [ _31 ])
        (nil)))
(jump_insn 101 100 102 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":100 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 115)
;;  succ:       10
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 123 124 181 182 183
(note 102 101 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 9 (set (reg:SI 181)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 104 103 105 9 (set (reg:DI 118 [ _32 ])
        (sign_extend:DI (reg:SI 181))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 181)
        (nil)))
(insn 105 104 106 9 (parallel [
            (set (reg:DI 119 [ _33 ])
                (ashift:DI (reg:DI 118 [ _32 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 106 105 107 9 (set (reg/f:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (nil))
(insn 107 106 108 9 (parallel [
            (set (reg/f:DI 120 [ _34 ])
                (plus:DI (reg:DI 119 [ _33 ])
                    (reg/f:DI 182)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 182)
        (expr_list:REG_DEAD (reg:DI 119 [ _33 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 119 [ _33 ]))
                    (nil))))))
(insn 108 107 109 9 (set (reg/f:DI 121 [ _35 ])
        (mem/f:DI (reg/f:DI 120 [ _34 ]) [10 *_34+0 S8 A64])) "function.c":100 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120 [ _34 ])
        (nil)))
(insn 109 108 110 9 (set (reg:SI 183)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":100 86 {*movsi_internal}
     (nil))
(insn 110 109 111 9 (set (reg:DI 122 [ _36 ])
        (sign_extend:DI (reg:SI 183))) "function.c":100 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 183)
        (nil)))
(insn 111 110 112 9 (parallel [
            (set (reg/f:DI 123 [ _37 ])
                (plus:DI (reg/f:DI 121 [ _35 ])
                    (reg:DI 122 [ _36 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":100 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ _36 ])
        (expr_list:REG_DEAD (reg/f:DI 121 [ _35 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 112 111 113 9 (set (reg:QI 124 [ _38 ])
        (mem:QI (reg/f:DI 123 [ _37 ]) [0 *_37+0 S1 A8])) "function.c":100 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ _37 ])
        (nil)))
(insn 113 112 114 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 124 [ _38 ])
            (const_int 68 [0x44]))) "function.c":100 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 124 [ _38 ])
        (nil)))
(jump_insn 114 113 115 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 144)
            (pc))) "function.c":100 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 144)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       6
;;              7
;;              8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 125 126 127 128 129 130 131 132 133 134 184 185 186
(code_label 115 114 116 10 15 (nil) [3 uses])
(note 116 115 117 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 10 (set (reg/f:DI 125 [ stdscr.3_39 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":102 85 {*movdi_internal}
     (nil))
(insn 118 117 119 10 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":102 85 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":102 86 {*movsi_internal}
     (nil))
(insn 120 119 121 10 (set (reg:DI 5 di)
        (reg/f:DI 125 [ stdscr.3_39 ])) "function.c":102 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ stdscr.3_39 ])
        (nil)))
(call_insn 121 120 122 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":102 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 122 121 123 10 (set (reg:SI 184)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":103 86 {*movsi_internal}
     (nil))
(insn 123 122 124 10 (set (reg:DI 126 [ _40 ])
        (sign_extend:DI (reg:SI 184))) "function.c":103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 184)
        (nil)))
(insn 124 123 125 10 (parallel [
            (set (reg:DI 127 [ _41 ])
                (ashift:DI (reg:DI 126 [ _40 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":103 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 126 [ _40 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 125 124 126 10 (set (reg/f:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":103 85 {*movdi_internal}
     (nil))
(insn 126 125 127 10 (parallel [
            (set (reg/f:DI 128 [ _42 ])
                (plus:DI (reg:DI 127 [ _41 ])
                    (reg/f:DI 185)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":103 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (expr_list:REG_DEAD (reg:DI 127 [ _41 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 127 [ _41 ]))
                    (nil))))))
(insn 127 126 128 10 (set (reg/f:DI 129 [ _43 ])
        (mem/f:DI (reg/f:DI 128 [ _42 ]) [10 *_42+0 S8 A64])) "function.c":103 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 128 [ _42 ])
        (nil)))
(insn 128 127 129 10 (set (reg:SI 186)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":103 86 {*movsi_internal}
     (nil))
(insn 129 128 130 10 (set (reg:DI 130 [ _44 ])
        (sign_extend:DI (reg:SI 186))) "function.c":103 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(insn 130 129 131 10 (parallel [
            (set (reg/f:DI 131 [ _45 ])
                (plus:DI (reg/f:DI 129 [ _43 ])
                    (reg:DI 130 [ _44 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":103 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _44 ])
        (expr_list:REG_DEAD (reg/f:DI 129 [ _43 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 131 130 132 10 (set (reg:QI 132 [ _46 ])
        (mem:QI (reg/f:DI 131 [ _45 ]) [0 *_45+0 S1 A8])) "function.c":103 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ _45 ])
        (nil)))
(insn 132 131 133 10 (set (reg:SI 133 [ _47 ])
        (sign_extend:SI (reg:QI 132 [ _46 ]))) "function.c":103 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 132 [ _46 ])
        (nil)))
(insn 133 132 134 10 (set (reg:SI 4 si)
        (reg:SI 133 [ _47 ])) "function.c":103 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 133 [ _47 ])
        (nil)))
(insn 134 133 135 10 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":103 85 {*movdi_internal}
     (nil))
(insn 135 134 136 10 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":103 88 {*movqi_internal}
     (nil))
(call_insn 136 135 137 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":103 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 137 136 138 10 (set (reg/f:DI 134 [ stdscr.4_48 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":104 85 {*movdi_internal}
     (nil))
(insn 138 137 139 10 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":104 85 {*movdi_internal}
     (nil))
(insn 139 138 140 10 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":104 86 {*movsi_internal}
     (nil))
(insn 140 139 141 10 (set (reg:DI 5 di)
        (reg/f:DI 134 [ stdscr.4_48 ])) "function.c":104 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ stdscr.4_48 ])
        (nil)))
(call_insn 141 140 250 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":104 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 250 141 251 10 (set (pc)
        (label_ref 223)) "function.c":104 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 251 250 144)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 135 136 137 138 139 140 141 187 188 189
(code_label 144 251 145 11 16 (nil) [1 uses])
(note 145 144 146 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 11 (set (reg:SI 187)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":106 86 {*movsi_internal}
     (nil))
(insn 147 146 148 11 (set (reg:DI 135 [ _49 ])
        (sign_extend:DI (reg:SI 187))) "function.c":106 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(insn 148 147 149 11 (parallel [
            (set (reg:DI 136 [ _50 ])
                (ashift:DI (reg:DI 135 [ _49 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":106 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 135 [ _49 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 149 148 150 11 (set (reg/f:DI 188)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":106 85 {*movdi_internal}
     (nil))
(insn 150 149 151 11 (parallel [
            (set (reg/f:DI 137 [ _51 ])
                (plus:DI (reg:DI 136 [ _50 ])
                    (reg/f:DI 188)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":106 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 188)
        (expr_list:REG_DEAD (reg:DI 136 [ _50 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 136 [ _50 ]))
                    (nil))))))
(insn 151 150 152 11 (set (reg/f:DI 138 [ _52 ])
        (mem/f:DI (reg/f:DI 137 [ _51 ]) [10 *_51+0 S8 A64])) "function.c":106 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137 [ _51 ])
        (nil)))
(insn 152 151 153 11 (set (reg:SI 189)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":106 86 {*movsi_internal}
     (nil))
(insn 153 152 154 11 (set (reg:DI 139 [ _53 ])
        (sign_extend:DI (reg:SI 189))) "function.c":106 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 189)
        (nil)))
(insn 154 153 155 11 (parallel [
            (set (reg/f:DI 140 [ _54 ])
                (plus:DI (reg/f:DI 138 [ _52 ])
                    (reg:DI 139 [ _53 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":106 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 139 [ _53 ])
        (expr_list:REG_DEAD (reg/f:DI 138 [ _52 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 155 154 156 11 (set (reg:QI 141 [ _55 ])
        (mem:QI (reg/f:DI 140 [ _54 ]) [0 *_54+0 S1 A8])) "function.c":106 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140 [ _54 ])
        (nil)))
(insn 156 155 157 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 141 [ _55 ])
            (const_int 65 [0x41]))) "function.c":106 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 141 [ _55 ])
        (nil)))
(jump_insn 157 156 158 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 186)
            (pc))) "function.c":106 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 186)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 142 143 144 145 146 147 148 149 150 151 190 191 192
(note 158 157 159 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 12 (set (reg/f:DI 142 [ stdscr.5_56 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":108 85 {*movdi_internal}
     (nil))
(insn 160 159 161 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":108 85 {*movdi_internal}
     (nil))
(insn 161 160 162 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":108 86 {*movsi_internal}
     (nil))
(insn 162 161 163 12 (set (reg:DI 5 di)
        (reg/f:DI 142 [ stdscr.5_56 ])) "function.c":108 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ stdscr.5_56 ])
        (nil)))
(call_insn 163 162 164 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":108 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 164 163 165 12 (set (reg:SI 190)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":109 86 {*movsi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:DI 143 [ _57 ])
        (sign_extend:DI (reg:SI 190))) "function.c":109 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 190)
        (nil)))
(insn 166 165 167 12 (parallel [
            (set (reg:DI 144 [ _58 ])
                (ashift:DI (reg:DI 143 [ _57 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":109 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 143 [ _57 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 167 166 168 12 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":109 85 {*movdi_internal}
     (nil))
(insn 168 167 169 12 (parallel [
            (set (reg/f:DI 145 [ _59 ])
                (plus:DI (reg:DI 144 [ _58 ])
                    (reg/f:DI 191)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":109 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (expr_list:REG_DEAD (reg:DI 144 [ _58 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 144 [ _58 ]))
                    (nil))))))
(insn 169 168 170 12 (set (reg/f:DI 146 [ _60 ])
        (mem/f:DI (reg/f:DI 145 [ _59 ]) [10 *_59+0 S8 A64])) "function.c":109 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145 [ _59 ])
        (nil)))
(insn 170 169 171 12 (set (reg:SI 192)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":109 86 {*movsi_internal}
     (nil))
(insn 171 170 172 12 (set (reg:DI 147 [ _61 ])
        (sign_extend:DI (reg:SI 192))) "function.c":109 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 192)
        (nil)))
(insn 172 171 173 12 (parallel [
            (set (reg/f:DI 148 [ _62 ])
                (plus:DI (reg/f:DI 146 [ _60 ])
                    (reg:DI 147 [ _61 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":109 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 147 [ _61 ])
        (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 173 172 174 12 (set (reg:QI 149 [ _63 ])
        (mem:QI (reg/f:DI 148 [ _62 ]) [0 *_62+0 S1 A8])) "function.c":109 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ _62 ])
        (nil)))
(insn 174 173 175 12 (set (reg:SI 150 [ _64 ])
        (sign_extend:SI (reg:QI 149 [ _63 ]))) "function.c":109 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 149 [ _63 ])
        (nil)))
(insn 175 174 176 12 (set (reg:SI 4 si)
        (reg:SI 150 [ _64 ])) "function.c":109 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 150 [ _64 ])
        (nil)))
(insn 176 175 177 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":109 85 {*movdi_internal}
     (nil))
(insn 177 176 178 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":109 88 {*movqi_internal}
     (nil))
(call_insn 178 177 179 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":109 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 179 178 180 12 (set (reg/f:DI 151 [ stdscr.6_65 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":110 85 {*movdi_internal}
     (nil))
(insn 180 179 181 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":110 85 {*movdi_internal}
     (nil))
(insn 181 180 182 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":110 86 {*movsi_internal}
     (nil))
(insn 182 181 183 12 (set (reg:DI 5 di)
        (reg/f:DI 151 [ stdscr.6_65 ])) "function.c":110 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 151 [ stdscr.6_65 ])
        (nil)))
(call_insn 183 182 252 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":110 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 252 183 253 12 (set (pc)
        (label_ref 223)) 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 253 252 186)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 154 155 156 157 158 193 194 195
(code_label 186 253 187 13 17 (nil) [1 uses])
(note 187 186 188 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 188 187 189 13 (set (reg:SI 193)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":112 86 {*movsi_internal}
     (nil))
(insn 189 188 190 13 (set (reg:DI 152 [ _66 ])
        (sign_extend:DI (reg:SI 193))) "function.c":112 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 193)
        (nil)))
(insn 190 189 191 13 (parallel [
            (set (reg:DI 153 [ _67 ])
                (ashift:DI (reg:DI 152 [ _66 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":112 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 152 [ _66 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 191 190 192 13 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":112 85 {*movdi_internal}
     (nil))
(insn 192 191 193 13 (parallel [
            (set (reg/f:DI 154 [ _68 ])
                (plus:DI (reg:DI 153 [ _67 ])
                    (reg/f:DI 194)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":112 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (expr_list:REG_DEAD (reg:DI 153 [ _67 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 153 [ _67 ]))
                    (nil))))))
(insn 193 192 194 13 (set (reg/f:DI 155 [ _69 ])
        (mem/f:DI (reg/f:DI 154 [ _68 ]) [10 *_68+0 S8 A64])) "function.c":112 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ _68 ])
        (nil)))
(insn 194 193 195 13 (set (reg:SI 195)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":112 86 {*movsi_internal}
     (nil))
(insn 195 194 196 13 (set (reg:DI 156 [ _70 ])
        (sign_extend:DI (reg:SI 195))) "function.c":112 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 195)
        (nil)))
(insn 196 195 197 13 (parallel [
            (set (reg/f:DI 157 [ _71 ])
                (plus:DI (reg/f:DI 155 [ _69 ])
                    (reg:DI 156 [ _70 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":112 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 156 [ _70 ])
        (expr_list:REG_DEAD (reg/f:DI 155 [ _69 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 197 196 198 13 (set (reg:QI 158 [ _72 ])
        (mem:QI (reg/f:DI 157 [ _71 ]) [0 *_71+0 S1 A8])) "function.c":112 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _71 ])
        (nil)))
(insn 198 197 199 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 158 [ _72 ])
            (const_int 46 [0x2e]))) "function.c":112 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 158 [ _72 ])
        (nil)))
(jump_insn 199 198 200 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 206)
            (pc))) "function.c":112 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 206)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 200 199 201 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":114 85 {*movdi_internal}
     (nil))
(insn 202 201 203 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":114 88 {*movqi_internal}
     (nil))
(call_insn 203 202 254 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":114 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 254 203 255 14 (set (pc)
        (label_ref 223)) 683 {jump}
     (nil)
 -> 223)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 255 254 206)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 159 160 161 162 163 164 165 166 196 197 198
(code_label 206 255 207 15 18 (nil) [1 uses])
(note 207 206 208 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 208 207 209 15 (set (reg:SI 196)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":118 86 {*movsi_internal}
     (nil))
(insn 209 208 210 15 (set (reg:DI 159 [ _73 ])
        (sign_extend:DI (reg:SI 196))) "function.c":118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 196)
        (nil)))
(insn 210 209 211 15 (parallel [
            (set (reg:DI 160 [ _74 ])
                (ashift:DI (reg:DI 159 [ _73 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":118 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 159 [ _73 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 211 210 212 15 (set (reg/f:DI 197)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])) "function.c":118 85 {*movdi_internal}
     (nil))
(insn 212 211 213 15 (parallel [
            (set (reg/f:DI 161 [ _75 ])
                (plus:DI (reg:DI 160 [ _74 ])
                    (reg/f:DI 197)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":118 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 197)
        (expr_list:REG_DEAD (reg:DI 160 [ _74 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                                (const_int -24 [0xffffffffffffffe8])) [9 tab+0 S8 A64])
                        (reg:DI 160 [ _74 ]))
                    (nil))))))
(insn 213 212 214 15 (set (reg/f:DI 162 [ _76 ])
        (mem/f:DI (reg/f:DI 161 [ _75 ]) [10 *_75+0 S8 A64])) "function.c":118 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161 [ _75 ])
        (nil)))
(insn 214 213 215 15 (set (reg:SI 198)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":118 86 {*movsi_internal}
     (nil))
(insn 215 214 216 15 (set (reg:DI 163 [ _77 ])
        (sign_extend:DI (reg:SI 198))) "function.c":118 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 198)
        (nil)))
(insn 216 215 217 15 (parallel [
            (set (reg/f:DI 164 [ _78 ])
                (plus:DI (reg/f:DI 162 [ _76 ])
                    (reg:DI 163 [ _77 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":118 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 163 [ _77 ])
        (expr_list:REG_DEAD (reg/f:DI 162 [ _76 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 217 216 218 15 (set (reg:QI 165 [ _79 ])
        (mem:QI (reg/f:DI 164 [ _78 ]) [0 *_78+0 S1 A8])) "function.c":118 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164 [ _78 ])
        (nil)))
(insn 218 217 219 15 (set (reg:SI 166 [ _80 ])
        (sign_extend:SI (reg:QI 165 [ _79 ]))) "function.c":118 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 165 [ _79 ])
        (nil)))
(insn 219 218 220 15 (set (reg:SI 4 si)
        (reg:SI 166 [ _80 ])) "function.c":118 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 166 [ _80 ])
        (nil)))
(insn 220 219 221 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":118 85 {*movdi_internal}
     (nil))
(insn 221 220 222 15 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":118 88 {*movqi_internal}
     (nil))
(call_insn 222 221 223 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":118 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;;              5 [always] 
;;              10 [always] 
;;              12 [always] 
;;              14 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 223 222 224 16 14 (nil) [4 uses])
(note 224 223 225 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":91 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 226 225 227 17 12 (nil) [1 uses])
(note 227 226 229 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 229 227 230 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 30 [0x1e]))) "function.c":91 11 {*cmpsi_1}
     (nil))
(jump_insn 230 229 231 17 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 228)
            (pc))) "function.c":91 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 228)
;;  succ:       4
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 231 230 232 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 232 231 233 18 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":89 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       19 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 233 232 234 19 11 (nil) [1 uses])
(note 234 233 236 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 236 234 237 19 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 20 [0x14]))) "function.c":89 11 {*cmpsi_1}
     (nil))
(jump_insn 237 236 238 19 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 235)
            (pc))) "function.c":89 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 235)
;;  succ:       3
;;              20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 1, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 238 237 243 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 243 238 0 20 (const_int 0 [0]) "function.c":122 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function druk_info_plansza_s (druk_info_plansza_s, funcdef_no=8, decl_uid=6218, cgraph_uid=8, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 75.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 150.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 203.
verify found no changes in insn with uid = 208.
verify found no changes in insn with uid = 211.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 224.
verify found no changes in insn with uid = 229.
verify found no changes in insn with uid = 232.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 240.
verify found no changes in insn with uid = 245.
verify found no changes in insn with uid = 250.
verify found no changes in insn with uid = 253.
verify found no changes in insn with uid = 258.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 268.
verify found no changes in insn with uid = 271.
verify found no changes in insn with uid = 276.
verify found no changes in insn with uid = 279.
verify found no changes in insn with uid = 284.
verify found no changes in insn with uid = 287.
verify found no changes in insn with uid = 292.
verify found no changes in insn with uid = 295.
verify found no changes in insn with uid = 300.
verify found no changes in insn with uid = 305.
verify found no changes in insn with uid = 308.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 316.
verify found no changes in insn with uid = 321.
verify found no changes in insn with uid = 326.
verify found no changes in insn with uid = 329.
verify found no changes in insn with uid = 334.
verify found no changes in insn with uid = 337.
verify found no changes in insn with uid = 342.
verify found no changes in insn with uid = 347.
verify found no changes in insn with uid = 350.
verify found no changes in insn with uid = 355.
verify found no changes in insn with uid = 358.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r153,l0) best DIREG, allocno GENERAL_REGS
    r152: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r152,l0) best DIREG, allocno GENERAL_REGS
    r151: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r151,l0) best DIREG, allocno GENERAL_REGS
    r150: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r150,l0) best DIREG, allocno GENERAL_REGS
    r149: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r149,l0) best DIREG, allocno GENERAL_REGS
    r148: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r148,l0) best DIREG, allocno GENERAL_REGS
    r147: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r147,l0) best DIREG, allocno GENERAL_REGS
    r146: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r146,l0) best DIREG, allocno GENERAL_REGS
    r145: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r145,l0) best DIREG, allocno GENERAL_REGS
    r144: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r144,l0) best DIREG, allocno GENERAL_REGS
    r143: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r143,l0) best DIREG, allocno GENERAL_REGS
    r142: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r142,l0) best DIREG, allocno GENERAL_REGS
    r141: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r141,l0) best DIREG, allocno GENERAL_REGS
    r140: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r140,l0) best DIREG, allocno GENERAL_REGS
    r139: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r139,l0) best DIREG, allocno GENERAL_REGS
    r138: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r138,l0) best DIREG, allocno GENERAL_REGS
    r137: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r137,l0) best DIREG, allocno GENERAL_REGS
    r136: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r136,l0) best DIREG, allocno GENERAL_REGS
    r135: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r135,l0) best DIREG, allocno GENERAL_REGS
    r134: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r134,l0) best DIREG, allocno GENERAL_REGS
    r133: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r133,l0) best DIREG, allocno GENERAL_REGS
    r132: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r132,l0) best DIREG, allocno GENERAL_REGS
    r131: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r131,l0) best DIREG, allocno GENERAL_REGS
    r130: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r130,l0) best DIREG, allocno GENERAL_REGS
    r129: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r129,l0) best SIREG, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r127,l0) best DREG, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r125,l0) best DIREG, allocno GENERAL_REGS
    r124: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r124,l0) best SIREG, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r122,l0) best DREG, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a38 (r120,l0) best DIREG, allocno GENERAL_REGS
    r119: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a39 (r119,l0) best DIREG, allocno GENERAL_REGS
    r118: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r118,l0) best SIREG, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r116,l0) best DREG, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r113,l0) best SIREG, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a48 (r111,l0) best DREG, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r109,l0) best CREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a59 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a60 (r104,l0) best SIREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a61 (r102,l0) best DREG, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a66 (r100,l0) best DIREG, allocno GENERAL_REGS
    r99: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a67 (r99,l0) best SIREG, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a68 (r97,l0) best DREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a73 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a74 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a75 (r93,l0) best SIREG, allocno GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a77 (r92,l0) best DIREG, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a78 (r91,l0) best SIREG, allocno GENERAL_REGS
    r90: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r90,l0) best DREG, allocno GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a82 (r89,l0) best DIREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a83 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a84 (r87,l0) best DIREG, allocno GENERAL_REGS

  a0(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a1(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a4(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a15(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a17(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a20(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a23(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a26(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a38(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a39(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a40(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a41(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a42(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a46(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a47(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a49(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a50(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a52(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a56(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a57(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a60(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a61(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a62(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a64(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a65(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a67(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a68(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a69(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a70(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a71(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a72(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a73(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a75(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a76(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a77(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a78(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a79(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a80(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a81(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a83(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:-1000 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a84(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 363(l0): point = 0
   Insn 358(l0): point = 2
   Insn 357(l0): point = 4
   Insn 356(l0): point = 6
   Insn 355(l0): point = 8
   Insn 354(l0): point = 10
   Insn 353(l0): point = 12
   Insn 352(l0): point = 14
   Insn 351(l0): point = 16
   Insn 350(l0): point = 18
   Insn 349(l0): point = 20
   Insn 348(l0): point = 22
   Insn 347(l0): point = 24
   Insn 346(l0): point = 26
   Insn 345(l0): point = 28
   Insn 344(l0): point = 30
   Insn 343(l0): point = 32
   Insn 342(l0): point = 34
   Insn 341(l0): point = 36
   Insn 340(l0): point = 38
   Insn 339(l0): point = 40
   Insn 338(l0): point = 42
   Insn 337(l0): point = 44
   Insn 336(l0): point = 46
   Insn 335(l0): point = 48
   Insn 334(l0): point = 50
   Insn 333(l0): point = 52
   Insn 332(l0): point = 54
   Insn 331(l0): point = 56
   Insn 330(l0): point = 58
   Insn 329(l0): point = 60
   Insn 328(l0): point = 62
   Insn 327(l0): point = 64
   Insn 326(l0): point = 66
   Insn 325(l0): point = 68
   Insn 324(l0): point = 70
   Insn 323(l0): point = 72
   Insn 322(l0): point = 74
   Insn 321(l0): point = 76
   Insn 320(l0): point = 78
   Insn 319(l0): point = 80
   Insn 318(l0): point = 82
   Insn 317(l0): point = 84
   Insn 316(l0): point = 86
   Insn 315(l0): point = 88
   Insn 314(l0): point = 90
   Insn 313(l0): point = 92
   Insn 312(l0): point = 94
   Insn 311(l0): point = 96
   Insn 310(l0): point = 98
   Insn 309(l0): point = 100
   Insn 308(l0): point = 102
   Insn 307(l0): point = 104
   Insn 306(l0): point = 106
   Insn 305(l0): point = 108
   Insn 304(l0): point = 110
   Insn 303(l0): point = 112
   Insn 302(l0): point = 114
   Insn 301(l0): point = 116
   Insn 300(l0): point = 118
   Insn 299(l0): point = 120
   Insn 298(l0): point = 122
   Insn 297(l0): point = 124
   Insn 296(l0): point = 126
   Insn 295(l0): point = 128
   Insn 294(l0): point = 130
   Insn 293(l0): point = 132
   Insn 292(l0): point = 134
   Insn 291(l0): point = 136
   Insn 290(l0): point = 138
   Insn 289(l0): point = 140
   Insn 288(l0): point = 142
   Insn 287(l0): point = 144
   Insn 286(l0): point = 146
   Insn 285(l0): point = 148
   Insn 284(l0): point = 150
   Insn 283(l0): point = 152
   Insn 282(l0): point = 154
   Insn 281(l0): point = 156
   Insn 280(l0): point = 158
   Insn 279(l0): point = 160
   Insn 278(l0): point = 162
   Insn 277(l0): point = 164
   Insn 276(l0): point = 166
   Insn 275(l0): point = 168
   Insn 274(l0): point = 170
   Insn 273(l0): point = 172
   Insn 272(l0): point = 174
   Insn 271(l0): point = 176
   Insn 270(l0): point = 178
   Insn 269(l0): point = 180
   Insn 268(l0): point = 182
   Insn 267(l0): point = 184
   Insn 266(l0): point = 186
   Insn 265(l0): point = 188
   Insn 264(l0): point = 190
   Insn 263(l0): point = 192
   Insn 262(l0): point = 194
   Insn 261(l0): point = 196
   Insn 260(l0): point = 198
   Insn 259(l0): point = 200
   Insn 258(l0): point = 202
   Insn 257(l0): point = 204
   Insn 256(l0): point = 206
   Insn 255(l0): point = 208
   Insn 254(l0): point = 210
   Insn 253(l0): point = 212
   Insn 252(l0): point = 214
   Insn 251(l0): point = 216
   Insn 250(l0): point = 218
   Insn 249(l0): point = 220
   Insn 248(l0): point = 222
   Insn 247(l0): point = 224
   Insn 246(l0): point = 226
   Insn 245(l0): point = 228
   Insn 244(l0): point = 230
   Insn 243(l0): point = 232
   Insn 242(l0): point = 234
   Insn 241(l0): point = 236
   Insn 240(l0): point = 238
   Insn 239(l0): point = 240
   Insn 238(l0): point = 242
   Insn 237(l0): point = 244
   Insn 236(l0): point = 246
   Insn 235(l0): point = 248
   Insn 234(l0): point = 250
   Insn 233(l0): point = 252
   Insn 232(l0): point = 254
   Insn 231(l0): point = 256
   Insn 230(l0): point = 258
   Insn 229(l0): point = 260
   Insn 228(l0): point = 262
   Insn 227(l0): point = 264
   Insn 226(l0): point = 266
   Insn 225(l0): point = 268
   Insn 224(l0): point = 270
   Insn 223(l0): point = 272
   Insn 222(l0): point = 274
   Insn 221(l0): point = 276
   Insn 220(l0): point = 278
   Insn 219(l0): point = 280
   Insn 218(l0): point = 282
   Insn 217(l0): point = 284
   Insn 216(l0): point = 286
   Insn 215(l0): point = 288
   Insn 214(l0): point = 290
   Insn 213(l0): point = 292
   Insn 212(l0): point = 294
   Insn 211(l0): point = 296
   Insn 210(l0): point = 298
   Insn 209(l0): point = 300
   Insn 208(l0): point = 302
   Insn 207(l0): point = 304
   Insn 206(l0): point = 306
   Insn 205(l0): point = 308
   Insn 204(l0): point = 310
   Insn 203(l0): point = 312
   Insn 202(l0): point = 314
   Insn 201(l0): point = 316
   Insn 200(l0): point = 318
   Insn 199(l0): point = 320
   Insn 198(l0): point = 322
   Insn 197(l0): point = 324
   Insn 196(l0): point = 326
   Insn 195(l0): point = 328
   Insn 194(l0): point = 330
   Insn 193(l0): point = 332
   Insn 192(l0): point = 334
   Insn 191(l0): point = 336
   Insn 190(l0): point = 338
   Insn 189(l0): point = 340
   Insn 188(l0): point = 342
   Insn 187(l0): point = 344
   Insn 186(l0): point = 346
   Insn 185(l0): point = 348
   Insn 184(l0): point = 350
   Insn 183(l0): point = 352
   Insn 182(l0): point = 354
   Insn 181(l0): point = 356
   Insn 180(l0): point = 358
   Insn 179(l0): point = 360
   Insn 178(l0): point = 362
   Insn 177(l0): point = 364
   Insn 176(l0): point = 366
   Insn 175(l0): point = 368
   Insn 174(l0): point = 370
   Insn 173(l0): point = 372
   Insn 172(l0): point = 374
   Insn 171(l0): point = 376
   Insn 170(l0): point = 378
   Insn 169(l0): point = 380
   Insn 168(l0): point = 382
   Insn 167(l0): point = 384
   Insn 166(l0): point = 386
   Insn 165(l0): point = 388
   Insn 164(l0): point = 390
   Insn 163(l0): point = 392
   Insn 162(l0): point = 394
   Insn 161(l0): point = 396
   Insn 160(l0): point = 398
   Insn 159(l0): point = 400
   Insn 158(l0): point = 402
   Insn 157(l0): point = 404
   Insn 156(l0): point = 406
   Insn 155(l0): point = 408
   Insn 154(l0): point = 410
   Insn 153(l0): point = 412
   Insn 152(l0): point = 414
   Insn 151(l0): point = 416
   Insn 150(l0): point = 418
   Insn 149(l0): point = 420
   Insn 148(l0): point = 422
   Insn 147(l0): point = 424
   Insn 146(l0): point = 426
   Insn 145(l0): point = 428
   Insn 144(l0): point = 430
   Insn 143(l0): point = 432
   Insn 142(l0): point = 434
   Insn 141(l0): point = 436
   Insn 140(l0): point = 438
   Insn 139(l0): point = 440
   Insn 138(l0): point = 442
   Insn 137(l0): point = 444
   Insn 136(l0): point = 446
   Insn 135(l0): point = 448
   Insn 134(l0): point = 450
   Insn 133(l0): point = 452
   Insn 132(l0): point = 454
   Insn 131(l0): point = 456
   Insn 130(l0): point = 458
   Insn 129(l0): point = 460
   Insn 128(l0): point = 462
   Insn 127(l0): point = 464
   Insn 126(l0): point = 466
   Insn 125(l0): point = 468
   Insn 124(l0): point = 470
   Insn 123(l0): point = 472
   Insn 122(l0): point = 474
   Insn 121(l0): point = 476
   Insn 120(l0): point = 478
   Insn 119(l0): point = 480
   Insn 118(l0): point = 482
   Insn 117(l0): point = 484
   Insn 116(l0): point = 486
   Insn 115(l0): point = 488
   Insn 114(l0): point = 490
   Insn 113(l0): point = 492
   Insn 112(l0): point = 494
   Insn 111(l0): point = 496
   Insn 110(l0): point = 498
   Insn 109(l0): point = 500
   Insn 108(l0): point = 502
   Insn 107(l0): point = 504
   Insn 106(l0): point = 506
   Insn 105(l0): point = 508
   Insn 104(l0): point = 510
   Insn 103(l0): point = 512
   Insn 102(l0): point = 514
   Insn 101(l0): point = 516
   Insn 100(l0): point = 518
   Insn 99(l0): point = 520
   Insn 98(l0): point = 522
   Insn 97(l0): point = 524
   Insn 96(l0): point = 526
   Insn 95(l0): point = 528
   Insn 94(l0): point = 530
   Insn 93(l0): point = 532
   Insn 92(l0): point = 534
   Insn 91(l0): point = 536
   Insn 90(l0): point = 538
   Insn 89(l0): point = 540
   Insn 88(l0): point = 542
   Insn 87(l0): point = 544
   Insn 86(l0): point = 546
   Insn 85(l0): point = 548
   Insn 84(l0): point = 550
   Insn 83(l0): point = 552
   Insn 82(l0): point = 554
   Insn 81(l0): point = 556
   Insn 80(l0): point = 558
   Insn 79(l0): point = 560
   Insn 78(l0): point = 562
   Insn 77(l0): point = 564
   Insn 76(l0): point = 566
   Insn 75(l0): point = 568
   Insn 74(l0): point = 570
   Insn 73(l0): point = 572
   Insn 72(l0): point = 574
   Insn 71(l0): point = 576
   Insn 70(l0): point = 578
   Insn 69(l0): point = 580
   Insn 68(l0): point = 582
   Insn 67(l0): point = 584
   Insn 66(l0): point = 586
   Insn 65(l0): point = 588
   Insn 64(l0): point = 590
   Insn 63(l0): point = 592
   Insn 62(l0): point = 594
   Insn 61(l0): point = 596
   Insn 60(l0): point = 598
   Insn 59(l0): point = 600
   Insn 58(l0): point = 602
   Insn 57(l0): point = 604
   Insn 56(l0): point = 606
   Insn 55(l0): point = 608
   Insn 54(l0): point = 610
   Insn 53(l0): point = 612
   Insn 52(l0): point = 614
   Insn 51(l0): point = 616
   Insn 50(l0): point = 618
   Insn 49(l0): point = 620
   Insn 48(l0): point = 622
   Insn 47(l0): point = 624
   Insn 46(l0): point = 626
   Insn 45(l0): point = 628
   Insn 44(l0): point = 630
   Insn 43(l0): point = 632
   Insn 42(l0): point = 634
   Insn 41(l0): point = 636
   Insn 40(l0): point = 638
   Insn 39(l0): point = 640
   Insn 38(l0): point = 642
   Insn 37(l0): point = 644
   Insn 36(l0): point = 646
   Insn 35(l0): point = 648
   Insn 34(l0): point = 650
   Insn 33(l0): point = 652
   Insn 32(l0): point = 654
   Insn 31(l0): point = 656
   Insn 30(l0): point = 658
   Insn 29(l0): point = 660
   Insn 28(l0): point = 662
   Insn 27(l0): point = 664
   Insn 26(l0): point = 666
   Insn 25(l0): point = 668
   Insn 24(l0): point = 670
   Insn 23(l0): point = 672
   Insn 22(l0): point = 674
   Insn 21(l0): point = 676
   Insn 20(l0): point = 678
   Insn 19(l0): point = 680
   Insn 18(l0): point = 682
   Insn 17(l0): point = 684
   Insn 16(l0): point = 686
   Insn 15(l0): point = 688
   Insn 14(l0): point = 690
   Insn 13(l0): point = 692
   Insn 12(l0): point = 694
   Insn 11(l0): point = 696
   Insn 10(l0): point = 698
   Insn 9(l0): point = 700
   Insn 8(l0): point = 702
   Insn 7(l0): point = 704
   Insn 6(l0): point = 706
   Insn 2(l0): point = 708
 a0(r154): [11..16]
 a1(r153): [27..32]
 a2(r152): [37..42]
 a3(r151): [53..58]
 a4(r150): [69..74]
 a5(r149): [79..84]
 a6(r148): [95..100]
 a7(r147): [111..116]
 a8(r146): [121..126]
 a9(r145): [137..142]
 a10(r144): [153..158]
 a11(r143): [169..174]
 a12(r142): [185..190]
 a13(r141): [195..200]
 a14(r140): [205..210]
 a15(r139): [221..226]
 a16(r138): [231..236]
 a17(r137): [247..252]
 a18(r136): [263..268]
 a19(r135): [279..284]
 a20(r134): [289..294]
 a21(r133): [305..310]
 a22(r132): [321..326]
 a23(r131): [331..336]
 a24(r130): [347..352]
 a25(r129): [361..364]
 a26(r127): [363..370]
 a27(r128): [365..366]
 a28(r171): [367..368]
 a29(r126): [371..372]
 a30(r170): [373..374]
 a31(r125): [379..384]
 a32(r124): [393..396]
 a33(r122): [395..402]
 a34(r123): [397..398]
 a35(r169): [399..400]
 a36(r121): [403..404]
 a37(r168): [405..406]
 a38(r120): [411..416]
 a39(r119): [427..432]
 a40(r118): [441..444]
 a41(r116): [443..450]
 a42(r117): [445..446]
 a43(r167): [447..448]
 a44(r115): [451..452]
 a45(r166): [453..454]
 a46(r114): [459..464]
 a47(r113): [473..480]
 a48(r111): [475..486]
 a49(r109): [477..492]
 a50(r107): [479..498]
 a51(r112): [481..482]
 a52(r165): [483..484]
 a53(r110): [487..488]
 a54(r164): [489..490]
 a55(r108): [493..494]
 a56(r163): [495..496]
 a57(r106): [499..500]
 a58(r162): [501..502]
 a59(r105): [507..512]
 a60(r104): [521..524]
 a61(r102): [523..530]
 a62(r103): [525..526]
 a63(r161): [527..528]
 a64(r101): [531..532]
 a65(r160): [533..534]
 a66(r100): [539..544]
 a67(r99): [553..556]
 a68(r97): [555..562]
 a69(r98): [557..558]
 a70(r159): [559..560]
 a71(r96): [563..564]
 a72(r158): [565..566]
 a73(r95): [571..576]
 a74(r94): [587..592]
 a75(r93): [601..602]
 a76(r157): [603..604]
 a77(r92): [609..614]
 a78(r91): [623..626]
 a79(r90): [625..630]
 a80(r156): [627..628]
 a81(r155): [631..632]
 a82(r89): [637..642]
 a83(r88): [651..652]
 a84(r87): [659..664]
Compressing live ranges: from 711 to 152 - 21%
Ranges after the compression:
 a0(r154): [0..1]
 a1(r153): [2..3]
 a2(r152): [4..5]
 a3(r151): [6..7]
 a4(r150): [8..9]
 a5(r149): [10..11]
 a6(r148): [12..13]
 a7(r147): [14..15]
 a8(r146): [16..17]
 a9(r145): [18..19]
 a10(r144): [20..21]
 a11(r143): [22..23]
 a12(r142): [24..25]
 a13(r141): [26..27]
 a14(r140): [28..29]
 a15(r139): [30..31]
 a16(r138): [32..33]
 a17(r137): [34..35]
 a18(r136): [36..37]
 a19(r135): [38..39]
 a20(r134): [40..41]
 a21(r133): [42..43]
 a22(r132): [44..45]
 a23(r131): [46..47]
 a24(r130): [48..49]
 a25(r129): [50..51]
 a26(r127): [50..55]
 a27(r128): [52..53]
 a28(r171): [54..55]
 a29(r126): [56..57]
 a30(r170): [58..59]
 a31(r125): [60..61]
 a32(r124): [62..63]
 a33(r122): [62..67]
 a34(r123): [64..65]
 a35(r169): [66..67]
 a36(r121): [68..69]
 a37(r168): [70..71]
 a38(r120): [72..73]
 a39(r119): [74..75]
 a40(r118): [76..77]
 a41(r116): [76..81]
 a42(r117): [78..79]
 a43(r167): [80..81]
 a44(r115): [82..83]
 a45(r166): [84..85]
 a46(r114): [86..87]
 a47(r113): [88..89]
 a48(r111): [88..93]
 a49(r109): [88..97]
 a50(r107): [88..101]
 a51(r112): [90..91]
 a52(r165): [92..93]
 a53(r110): [94..95]
 a54(r164): [96..97]
 a55(r108): [98..99]
 a56(r163): [100..101]
 a57(r106): [102..103]
 a58(r162): [104..105]
 a59(r105): [106..107]
 a60(r104): [108..109]
 a61(r102): [108..113]
 a62(r103): [110..111]
 a63(r161): [112..113]
 a64(r101): [114..115]
 a65(r160): [116..117]
 a66(r100): [118..119]
 a67(r99): [120..121]
 a68(r97): [120..125]
 a69(r98): [122..123]
 a70(r159): [124..125]
 a71(r96): [126..127]
 a72(r158): [128..129]
 a73(r95): [130..131]
 a74(r94): [132..133]
 a75(r93): [134..135]
 a76(r157): [136..137]
 a77(r92): [138..139]
 a78(r91): [140..141]
 a79(r90): [140..143]
 a80(r156): [142..143]
 a81(r155): [144..145]
 a82(r89): [146..147]
 a83(r88): [148..149]
 a84(r87): [150..151]
  pref0:a0(r154)<-hr5@500
  pref1:a1(r153)<-hr5@500
  pref2:a2(r152)<-hr5@500
  pref3:a3(r151)<-hr5@500
  pref4:a4(r150)<-hr5@500
  pref5:a5(r149)<-hr5@500
  pref6:a6(r148)<-hr5@500
  pref7:a7(r147)<-hr5@500
  pref8:a8(r146)<-hr5@500
  pref9:a9(r145)<-hr5@500
  pref10:a10(r144)<-hr5@500
  pref11:a11(r143)<-hr5@500
  pref12:a12(r142)<-hr5@500
  pref13:a13(r141)<-hr5@500
  pref14:a14(r140)<-hr5@500
  pref15:a15(r139)<-hr5@500
  pref16:a16(r138)<-hr5@500
  pref17:a17(r137)<-hr5@500
  pref18:a18(r136)<-hr5@500
  pref19:a19(r135)<-hr5@500
  pref20:a20(r134)<-hr5@500
  pref21:a21(r133)<-hr5@500
  pref22:a22(r132)<-hr5@500
  pref23:a23(r131)<-hr5@500
  pref24:a24(r130)<-hr5@500
  pref25:a25(r129)<-hr4@500
  pref26:a26(r127)<-hr1@500
  pref27:a31(r125)<-hr5@500
  pref28:a32(r124)<-hr4@500
  pref29:a33(r122)<-hr1@500
  pref30:a38(r120)<-hr5@500
  pref31:a39(r119)<-hr5@500
  pref32:a40(r118)<-hr4@500
  pref33:a41(r116)<-hr1@500
  pref34:a46(r114)<-hr5@500
  pref35:a47(r113)<-hr4@500
  pref36:a48(r111)<-hr1@500
  pref37:a49(r109)<-hr2@500
  pref38:a59(r105)<-hr5@500
  pref39:a60(r104)<-hr4@500
  pref40:a61(r102)<-hr1@500
  pref41:a66(r100)<-hr5@500
  pref42:a67(r99)<-hr4@500
  pref43:a68(r97)<-hr1@500
  pref44:a73(r95)<-hr5@500
  pref45:a74(r94)<-hr5@500
  pref46:a75(r93)<-hr4@500
  pref47:a77(r92)<-hr5@500
  pref48:a78(r91)<-hr4@500
  pref49:a79(r90)<-hr1@500
  pref50:a82(r89)<-hr5@500
  pref51:a83(r88)<-hr0@500
  pref52:a84(r87)<-hr5@500
  regions=1, blocks=3, points=152
    allocnos=85 (big 0), copies=0, conflicts=0, ranges=85
Disposition:
   84:r87  l0     0   83:r88  l0     0   82:r89  l0     0   79:r90  l0     1
   78:r91  l0     0   77:r92  l0     0   75:r93  l0     0   74:r94  l0     0
   73:r95  l0     0   71:r96  l0     0   68:r97  l0     1   69:r98  l0     0
   67:r99  l0     0   66:r100 l0     0   64:r101 l0     0   61:r102 l0     1
   62:r103 l0     0   60:r104 l0     0   59:r105 l0     0   57:r106 l0     0
   50:r107 l0     4   55:r108 l0     0   49:r109 l0     2   53:r110 l0     0
   48:r111 l0     1   51:r112 l0     0   47:r113 l0     0   46:r114 l0     0
   44:r115 l0     0   41:r116 l0     1   42:r117 l0     0   40:r118 l0     0
   39:r119 l0     0   38:r120 l0     0   36:r121 l0     0   33:r122 l0     1
   34:r123 l0     0   32:r124 l0     0   31:r125 l0     0   29:r126 l0     0
   26:r127 l0     1   27:r128 l0     0   25:r129 l0     0   24:r130 l0     0
   23:r131 l0     0   22:r132 l0     0   21:r133 l0     0   20:r134 l0     0
   19:r135 l0     0   18:r136 l0     0   17:r137 l0     0   16:r138 l0     0
   15:r139 l0     0   14:r140 l0     0   13:r141 l0     0   12:r142 l0     0
   11:r143 l0     0   10:r144 l0     0    9:r145 l0     0    8:r146 l0     0
    7:r147 l0     0    6:r148 l0     0    5:r149 l0     0    4:r150 l0     0
    3:r151 l0     0    2:r152 l0     0    1:r153 l0     0    0:r154 l0     0
   81:r155 l0     0   80:r156 l0     0   76:r157 l0     0   72:r158 l0     0
   70:r159 l0     0   65:r160 l0     0   63:r161 l0     0   58:r162 l0     0
   56:r163 l0     0   54:r164 l0     0   52:r165 l0     0   45:r166 l0     0
   43:r167 l0     0   37:r168 l0     0   35:r169 l0     0   30:r170 l0     0
   28:r171 l0     0
+++Costs: overall -53000, reg -53000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


druk_info_plansza_s

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8]
;;  ref usage 	r0={100d,29u} r1={120d,48u} r2={73d,1u} r4={122d,50u} r5={141d,70u} r6={1d,2u} r7={1d,73u} r8={71d} r9={71d} r10={71d} r11={71d} r12={71d} r13={71d} r14={71d} r15={71d} r16={1d,1u} r17={73d} r18={71d} r19={71d} r20={1d,20u} r21={72d} r22={72d} r23={72d} r24={72d} r25={72d} r26={72d} r27={72d} r28={72d} r29={71d} r30={71d} r31={71d} r32={71d} r33={71d} r34={71d} r35={71d} r36={71d} r37={73d,1u} r38={72d} r39={71d} r40={71d} r45={71d} r46={71d} r47={71d} r48={71d} r49={71d} r50={71d} r51={71d} r52={71d} r53={71d} r54={71d} r55={71d} r56={71d} r57={71d} r58={71d} r59={71d} r60={71d} r61={71d} r62={71d} r63={71d} r64={71d} r65={71d} r66={71d} r67={71d} r68={71d} r69={71d} r70={71d} r71={71d} r72={71d} r73={71d} r74={71d} r75={71d} r76={71d} r77={71d} r78={71d} r79={71d} r80={71d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} 
;;    total ref usage 5795{5415d,380u,0e} in 355{284 regular + 71 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":126 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("start_color") [flags 0x41]  <function_decl 0x7f7cd10bd300 start_color>) [0 start_color S1 A8])
            (const_int 0 [0]))) "function.c":127 700 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":128 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":128 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":128 86 {*movsi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":128 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 11 10 12 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":129 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":129 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "function.c":129 86 {*movsi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":129 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 15 14 16 2 (set (reg:SI 1 dx)
        (const_int 5 [0x5])) "function.c":130 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":130 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 5 di)
        (const_int 6 [0x6])) "function.c":130 86 {*movsi_internal}
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":130 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 19 18 20 2 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "function.c":131 86 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":131 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 5 di)
        (const_int 11 [0xb])) "function.c":131 86 {*movsi_internal}
     (nil))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":131 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 23 22 24 2 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "function.c":132 86 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":132 86 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 5 di)
        (const_int 12 [0xc])) "function.c":132 86 {*movsi_internal}
     (nil))
(call_insn 26 25 27 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":132 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 27 26 28 2 (set (reg/f:DI 87 [ stdscr.7_1 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":134 85 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":134 86 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:SI 4 si)
        (const_int 2 [0x2])) "function.c":134 86 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ stdscr.7_1 ])) "function.c":134 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ stdscr.7_1 ])
        (nil)))
(call_insn 31 30 32 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":134 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(call_insn 32 31 33 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":135 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 33 32 34 2 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "function.c":135 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 34 33 35 2 (set (reg:SI 4 si)
        (reg:SI 88 [ _2 ])) "function.c":135 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f7cd0ee26c0 *.LC5>)) "function.c":135 85 {*movdi_internal}
     (nil))
(insn 36 35 37 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":135 88 {*movqi_internal}
     (nil))
(call_insn 37 36 38 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":135 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 38 37 39 2 (set (reg/f:DI 89 [ stdscr.8_3 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":137 85 {*movdi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":137 86 {*movsi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:SI 4 si)
        (const_int 3 [0x3])) "function.c":137 86 {*movsi_internal}
     (nil))
(insn 41 40 42 2 (set (reg:DI 5 di)
        (reg/f:DI 89 [ stdscr.8_3 ])) "function.c":137 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ stdscr.8_3 ])
        (nil)))
(call_insn 42 41 43 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":137 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 43 42 44 2 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":138 85 {*movdi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 155)
                (const_int 8 [0x8])) [3 serwer_80(D)->y_camp+0 S4 A64])) "function.c":138 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (nil)))
(insn 45 44 46 2 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":138 85 {*movdi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SI 91 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 156)
                (const_int 4 [0x4])) [3 serwer_80(D)->x_camp+0 S4 A32])) "function.c":138 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (nil)))
(insn 47 46 48 2 (set (reg:SI 1 dx)
        (reg:SI 90 [ _4 ])) "function.c":138 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
        (nil)))
(insn 48 47 49 2 (set (reg:SI 4 si)
        (reg:SI 91 [ _5 ])) "function.c":138 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ _5 ])
        (nil)))
(insn 49 48 50 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f7cd0ee2750 *.LC6>)) "function.c":138 85 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":138 88 {*movqi_internal}
     (nil))
(call_insn 51 50 52 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":138 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 52 51 53 2 (set (reg/f:DI 92 [ stdscr.9_6 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":140 85 {*movdi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":140 86 {*movsi_internal}
     (nil))
(insn 54 53 55 2 (set (reg:SI 4 si)
        (const_int 4 [0x4])) "function.c":140 86 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:DI 5 di)
        (reg/f:DI 92 [ stdscr.9_6 ])) "function.c":140 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ stdscr.9_6 ])
        (nil)))
(call_insn 56 55 57 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":140 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 57 56 58 2 (set (reg/f:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":141 85 {*movdi_internal}
     (nil))
(insn 58 57 59 2 (set (reg:SI 93 [ _7 ])
        (mem:SI (plus:DI (reg/f:DI 157)
                (const_int 12 [0xc])) [3 serwer_80(D)->runda+0 S4 A32])) "function.c":141 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157)
        (nil)))
(insn 59 58 60 2 (set (reg:SI 4 si)
        (reg:SI 93 [ _7 ])) "function.c":141 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ _7 ])
        (nil)))
(insn 60 59 61 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f7cd0ee27e0 *.LC7>)) "function.c":141 85 {*movdi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":141 88 {*movqi_internal}
     (nil))
(call_insn 62 61 63 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":141 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 63 62 64 2 (set (reg/f:DI 94 [ stdscr.10_8 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":143 85 {*movdi_internal}
     (nil))
(insn 64 63 65 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":143 86 {*movsi_internal}
     (nil))
(insn 65 64 66 2 (set (reg:SI 4 si)
        (const_int 5 [0x5])) "function.c":143 86 {*movsi_internal}
     (nil))
(insn 66 65 67 2 (set (reg:DI 5 di)
        (reg/f:DI 94 [ stdscr.10_8 ])) "function.c":143 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ stdscr.10_8 ])
        (nil)))
(call_insn 67 66 68 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":143 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 68 67 69 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f7cd0ee2870 *.LC8>)) "function.c":144 85 {*movdi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":144 88 {*movqi_internal}
     (nil))
(call_insn 70 69 71 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":144 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 71 70 72 2 (set (reg/f:DI 95 [ stdscr.11_9 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":146 85 {*movdi_internal}
     (nil))
(insn 72 71 73 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":146 86 {*movsi_internal}
     (nil))
(insn 73 72 74 2 (set (reg:SI 4 si)
        (const_int 6 [0x6])) "function.c":146 86 {*movsi_internal}
     (nil))
(insn 74 73 75 2 (set (reg:DI 5 di)
        (reg/f:DI 95 [ stdscr.11_9 ])) "function.c":146 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ stdscr.11_9 ])
        (nil)))
(call_insn 75 74 76 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":146 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 76 75 77 2 (set (reg/f:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 77 76 78 2 (set (reg/f:DI 96 [ _10 ])
        (mem/f:DI (plus:DI (reg/f:DI 158)
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158)
        (nil)))
(insn 78 77 79 2 (set (reg:SI 97 [ _11 ])
        (mem:SI (reg/f:DI 96 [ _10 ]) [3 _10->PID+0 S4 A64])) "function.c":147 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _10 ])
        (nil)))
(insn 79 78 80 2 (set (reg/f:DI 159)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 80 79 81 2 (set (reg/f:DI 98 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 159)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":147 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 159)
        (nil)))
(insn 81 80 82 2 (set (reg:SI 99 [ _13 ])
        (mem:SI (reg/f:DI 98 [ _12 ]) [3 _12->PID+0 S4 A64])) "function.c":147 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
        (nil)))
(insn 82 81 83 2 (set (reg:SI 1 dx)
        (reg:SI 97 [ _11 ])) "function.c":147 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
        (nil)))
(insn 83 82 84 2 (set (reg:SI 4 si)
        (reg:SI 99 [ _13 ])) "function.c":147 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (nil)))
(insn 84 83 85 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f7cd0e9c870 *.LC9>)) "function.c":147 85 {*movdi_internal}
     (nil))
(insn 85 84 86 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":147 88 {*movqi_internal}
     (nil))
(call_insn 86 85 87 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":147 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 87 86 88 2 (set (reg/f:DI 100 [ stdscr.12_14 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":149 85 {*movdi_internal}
     (nil))
(insn 88 87 89 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":149 86 {*movsi_internal}
     (nil))
(insn 89 88 90 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":149 86 {*movsi_internal}
     (nil))
(insn 90 89 91 2 (set (reg:DI 5 di)
        (reg/f:DI 100 [ stdscr.12_14 ])) "function.c":149 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ stdscr.12_14 ])
        (nil)))
(call_insn 91 90 92 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":149 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 92 91 93 2 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 93 92 94 2 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 160)
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (nil)))
(insn 94 93 95 2 (parallel [
            (set (reg/f:DI 102 [ _16 ])
                (plus:DI (reg/f:DI 101 [ _15 ])
                    (const_int 41 [0x29])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":150 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 95 94 96 2 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 96 95 97 2 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (plus:DI (reg/f:DI 161)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":150 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (nil)))
(insn 97 96 98 2 (parallel [
            (set (reg/f:DI 104 [ _18 ])
                (plus:DI (reg/f:DI 103 [ _17 ])
                    (const_int 41 [0x29])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":150 222 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 98 97 99 2 (set (reg:DI 1 dx)
        (reg/f:DI 102 [ _16 ])) "function.c":150 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _16 ])
        (nil)))
(insn 99 98 100 2 (set (reg:DI 4 si)
        (reg/f:DI 104 [ _18 ])) "function.c":150 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
        (nil)))
(insn 100 99 101 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f7cd0ee2900 *.LC10>)) "function.c":150 85 {*movdi_internal}
     (nil))
(insn 101 100 102 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":150 88 {*movqi_internal}
     (nil))
(call_insn 102 101 103 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":150 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 103 102 104 2 (set (reg/f:DI 105 [ stdscr.13_19 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":152 85 {*movdi_internal}
     (nil))
(insn 104 103 105 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":152 86 {*movsi_internal}
     (nil))
(insn 105 104 106 2 (set (reg:SI 4 si)
        (const_int 8 [0x8])) "function.c":152 86 {*movsi_internal}
     (nil))
(insn 106 105 107 2 (set (reg:DI 5 di)
        (reg/f:DI 105 [ stdscr.13_19 ])) "function.c":152 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ stdscr.13_19 ])
        (nil)))
(call_insn 107 106 108 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":152 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 108 107 109 2 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 109 108 110 2 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (plus:DI (reg/f:DI 162)
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (nil)))
(insn 110 109 111 2 (set (reg:SI 107 [ _21 ])
        (mem:SI (plus:DI (reg/f:DI 106 [ _20 ])
                (const_int 16 [0x10])) [3 _20->y_current+0 S4 A64])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 111 110 112 2 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 112 111 113 2 (set (reg/f:DI 108 [ _22 ])
        (mem/f:DI (plus:DI (reg/f:DI 163)
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (nil)))
(insn 113 112 114 2 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 108 [ _22 ])
                (const_int 12 [0xc])) [3 _22->x_current+0 S4 A32])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 114 113 115 2 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 115 114 116 2 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (plus:DI (reg/f:DI 164)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (nil)))
(insn 116 115 117 2 (set (reg:SI 111 [ _25 ])
        (mem:SI (plus:DI (reg/f:DI 110 [ _24 ])
                (const_int 16 [0x10])) [3 _24->y_current+0 S4 A64])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
        (nil)))
(insn 117 116 118 2 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 118 117 119 2 (set (reg/f:DI 112 [ _26 ])
        (mem/f:DI (plus:DI (reg/f:DI 165)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":153 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 119 118 120 2 (set (reg:SI 113 [ _27 ])
        (mem:SI (plus:DI (reg/f:DI 112 [ _26 ])
                (const_int 12 [0xc])) [3 _26->x_current+0 S4 A32])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ _26 ])
        (nil)))
(insn 120 119 121 2 (set (reg:SI 37 r8)
        (reg:SI 107 [ _21 ])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 107 [ _21 ])
        (nil)))
(insn 121 120 122 2 (set (reg:SI 2 cx)
        (reg:SI 109 [ _23 ])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (nil)))
(insn 122 121 123 2 (set (reg:SI 1 dx)
        (reg:SI 111 [ _25 ])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
        (nil)))
(insn 123 122 124 2 (set (reg:SI 4 si)
        (reg:SI 113 [ _27 ])) "function.c":153 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 113 [ _27 ])
        (nil)))
(insn 124 123 125 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7f7cd0ee2990 *.LC11>)) "function.c":153 85 {*movdi_internal}
     (nil))
(insn 125 124 126 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":153 88 {*movqi_internal}
     (nil))
(call_insn 126 125 127 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":153 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (expr_list:REG_UNUSED (reg:SI 0 ax)
                            (nil)))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (expr_list:SI (use (reg:SI 37 r8))
                            (nil))))))))
(insn 127 126 128 2 (set (reg/f:DI 114 [ stdscr.14_28 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":155 85 {*movdi_internal}
     (nil))
(insn 128 127 129 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":155 86 {*movsi_internal}
     (nil))
(insn 129 128 130 2 (set (reg:SI 4 si)
        (const_int 9 [0x9])) "function.c":155 86 {*movsi_internal}
     (nil))
(insn 130 129 131 2 (set (reg:DI 5 di)
        (reg/f:DI 114 [ stdscr.14_28 ])) "function.c":155 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ stdscr.14_28 ])
        (nil)))
(call_insn 131 130 132 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":155 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 132 131 133 2 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 133 132 134 2 (set (reg/f:DI 115 [ _29 ])
        (mem/f:DI (plus:DI (reg/f:DI 166)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (nil)))
(insn 134 133 135 2 (set (reg:SI 116 [ _30 ])
        (mem:SI (plus:DI (reg/f:DI 115 [ _29 ])
                (const_int 28 [0x1c])) [3 _29->deaths+0 S4 A32])) "function.c":156 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
        (nil)))
(insn 135 134 136 2 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 136 135 137 2 (set (reg/f:DI 117 [ _31 ])
        (mem/f:DI (plus:DI (reg/f:DI 167)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":156 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 137 136 138 2 (set (reg:SI 118 [ _32 ])
        (mem:SI (plus:DI (reg/f:DI 117 [ _31 ])
                (const_int 28 [0x1c])) [3 _31->deaths+0 S4 A32])) "function.c":156 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117 [ _31 ])
        (nil)))
(insn 138 137 139 2 (set (reg:SI 1 dx)
        (reg:SI 116 [ _30 ])) "function.c":156 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 116 [ _30 ])
        (nil)))
(insn 139 138 140 2 (set (reg:SI 4 si)
        (reg:SI 118 [ _32 ])) "function.c":156 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 118 [ _32 ])
        (nil)))
(insn 140 139 141 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f7cd0ee2a20 *.LC12>)) "function.c":156 85 {*movdi_internal}
     (nil))
(insn 141 140 142 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":156 88 {*movqi_internal}
     (nil))
(call_insn 142 141 143 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":156 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 143 142 144 2 (set (reg/f:DI 119 [ stdscr.15_33 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":158 85 {*movdi_internal}
     (nil))
(insn 144 143 145 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":158 86 {*movsi_internal}
     (nil))
(insn 145 144 146 2 (set (reg:SI 4 si)
        (const_int 11 [0xb])) "function.c":158 86 {*movsi_internal}
     (nil))
(insn 146 145 147 2 (set (reg:DI 5 di)
        (reg/f:DI 119 [ stdscr.15_33 ])) "function.c":158 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ stdscr.15_33 ])
        (nil)))
(call_insn 147 146 148 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":158 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 148 147 149 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f7cd0ee2ab0 *.LC13>)) "function.c":159 85 {*movdi_internal}
     (nil))
(insn 149 148 150 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":159 88 {*movqi_internal}
     (nil))
(call_insn 150 149 151 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":159 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 151 150 152 2 (set (reg/f:DI 120 [ stdscr.16_34 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":161 85 {*movdi_internal}
     (nil))
(insn 152 151 153 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":161 86 {*movsi_internal}
     (nil))
(insn 153 152 154 2 (set (reg:SI 4 si)
        (const_int 12 [0xc])) "function.c":161 86 {*movsi_internal}
     (nil))
(insn 154 153 155 2 (set (reg:DI 5 di)
        (reg/f:DI 120 [ stdscr.16_34 ])) "function.c":161 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120 [ stdscr.16_34 ])
        (nil)))
(call_insn 155 154 156 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":161 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 156 155 157 2 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 157 156 158 2 (set (reg/f:DI 121 [ _35 ])
        (mem/f:DI (plus:DI (reg/f:DI 168)
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (nil)))
(insn 158 157 159 2 (set (reg:SI 122 [ _36 ])
        (mem:SI (plus:DI (reg/f:DI 121 [ _35 ])
                (const_int 32 [0x20])) [3 _35->coins_carried+0 S4 A64])) "function.c":162 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121 [ _35 ])
        (nil)))
(insn 159 158 160 2 (set (reg/f:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 160 159 161 2 (set (reg/f:DI 123 [ _37 ])
        (mem/f:DI (plus:DI (reg/f:DI 169)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":162 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 161 160 162 2 (set (reg:SI 124 [ _38 ])
        (mem:SI (plus:DI (reg/f:DI 123 [ _37 ])
                (const_int 32 [0x20])) [3 _37->coins_carried+0 S4 A64])) "function.c":162 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ _37 ])
        (nil)))
(insn 162 161 163 2 (set (reg:SI 1 dx)
        (reg:SI 122 [ _36 ])) "function.c":162 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122 [ _36 ])
        (nil)))
(insn 163 162 164 2 (set (reg:SI 4 si)
        (reg:SI 124 [ _38 ])) "function.c":162 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 124 [ _38 ])
        (nil)))
(insn 164 163 165 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f7cd0ee2b40 *.LC14>)) "function.c":162 85 {*movdi_internal}
     (nil))
(insn 165 164 166 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":162 88 {*movqi_internal}
     (nil))
(call_insn 166 165 167 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":162 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 167 166 168 2 (set (reg/f:DI 125 [ stdscr.17_39 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":164 85 {*movdi_internal}
     (nil))
(insn 168 167 169 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":164 86 {*movsi_internal}
     (nil))
(insn 169 168 170 2 (set (reg:SI 4 si)
        (const_int 13 [0xd])) "function.c":164 86 {*movsi_internal}
     (nil))
(insn 170 169 171 2 (set (reg:DI 5 di)
        (reg/f:DI 125 [ stdscr.17_39 ])) "function.c":164 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ stdscr.17_39 ])
        (nil)))
(call_insn 171 170 172 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":164 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 172 171 173 2 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 173 172 174 2 (set (reg/f:DI 126 [ _40 ])
        (mem/f:DI (plus:DI (reg/f:DI 170)
                (const_int 40 [0x28])) [14 serwer_80(D)->player2+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (nil)))
(insn 174 173 175 2 (set (reg:SI 127 [ _41 ])
        (mem:SI (plus:DI (reg/f:DI 126 [ _40 ])
                (const_int 36 [0x24])) [3 _40->coins_brought+0 S4 A32])) "function.c":165 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 126 [ _40 ])
        (nil)))
(insn 175 174 176 2 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 176 175 177 2 (set (reg/f:DI 128 [ _42 ])
        (mem/f:DI (plus:DI (reg/f:DI 171)
                (const_int 32 [0x20])) [14 serwer_80(D)->player1+0 S8 A64])) "function.c":165 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (nil)))
(insn 177 176 178 2 (set (reg:SI 129 [ _43 ])
        (mem:SI (plus:DI (reg/f:DI 128 [ _42 ])
                (const_int 36 [0x24])) [3 _42->coins_brought+0 S4 A32])) "function.c":165 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 128 [ _42 ])
        (nil)))
(insn 178 177 179 2 (set (reg:SI 1 dx)
        (reg:SI 127 [ _41 ])) "function.c":165 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 127 [ _41 ])
        (nil)))
(insn 179 178 180 2 (set (reg:SI 4 si)
        (reg:SI 129 [ _43 ])) "function.c":165 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 129 [ _43 ])
        (nil)))
(insn 180 179 181 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f7cd0ee2bd0 *.LC15>)) "function.c":165 85 {*movdi_internal}
     (nil))
(insn 181 180 182 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":165 88 {*movqi_internal}
     (nil))
(call_insn 182 181 183 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":165 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 183 182 184 2 (set (reg/f:DI 130 [ stdscr.18_44 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":167 85 {*movdi_internal}
     (nil))
(insn 184 183 185 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":167 86 {*movsi_internal}
     (nil))
(insn 185 184 186 2 (set (reg:SI 4 si)
        (const_int 14 [0xe])) "function.c":167 86 {*movsi_internal}
     (nil))
(insn 186 185 187 2 (set (reg:DI 5 di)
        (reg/f:DI 130 [ stdscr.18_44 ])) "function.c":167 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ stdscr.18_44 ])
        (nil)))
(call_insn 187 186 188 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":167 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 188 187 189 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f7cd0ee2c60 *.LC16>)) "function.c":168 85 {*movdi_internal}
     (nil))
(insn 189 188 190 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":168 88 {*movqi_internal}
     (nil))
(call_insn 190 189 191 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":168 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 191 190 192 2 (set (reg/f:DI 131 [ stdscr.19_45 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":170 85 {*movdi_internal}
     (nil))
(insn 192 191 193 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":170 86 {*movsi_internal}
     (nil))
(insn 193 192 194 2 (set (reg:SI 4 si)
        (const_int 15 [0xf])) "function.c":170 86 {*movsi_internal}
     (nil))
(insn 194 193 195 2 (set (reg:DI 5 di)
        (reg/f:DI 131 [ stdscr.19_45 ])) "function.c":170 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ stdscr.19_45 ])
        (nil)))
(call_insn 195 194 196 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":170 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 196 195 197 2 (set (reg/f:DI 132 [ stdscr.20_46 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":171 85 {*movdi_internal}
     (nil))
(insn 197 196 198 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":171 85 {*movdi_internal}
     (nil))
(insn 198 197 199 2 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":171 86 {*movsi_internal}
     (nil))
(insn 199 198 200 2 (set (reg:DI 5 di)
        (reg/f:DI 132 [ stdscr.20_46 ])) "function.c":171 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ stdscr.20_46 ])
        (nil)))
(call_insn 200 199 201 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":171 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 201 200 202 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f7cd0ee2cf0 *.LC17>)) "function.c":172 85 {*movdi_internal}
     (nil))
(insn 202 201 203 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":172 88 {*movqi_internal}
     (nil))
(call_insn 203 202 204 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":172 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 204 203 205 2 (set (reg/f:DI 133 [ stdscr.21_47 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":173 85 {*movdi_internal}
     (nil))
(insn 205 204 206 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":173 85 {*movdi_internal}
     (nil))
(insn 206 205 207 2 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":173 86 {*movsi_internal}
     (nil))
(insn 207 206 208 2 (set (reg:DI 5 di)
        (reg/f:DI 133 [ stdscr.21_47 ])) "function.c":173 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133 [ stdscr.21_47 ])
        (nil)))
(call_insn 208 207 209 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":173 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 209 208 210 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f7cd0ee2d80 *.LC18>)) "function.c":174 85 {*movdi_internal}
     (nil))
(insn 210 209 211 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":174 88 {*movqi_internal}
     (nil))
(call_insn 211 210 212 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":174 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 212 211 213 2 (set (reg/f:DI 134 [ stdscr.22_48 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":176 85 {*movdi_internal}
     (nil))
(insn 213 212 214 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":176 86 {*movsi_internal}
     (nil))
(insn 214 213 215 2 (set (reg:SI 4 si)
        (const_int 16 [0x10])) "function.c":176 86 {*movsi_internal}
     (nil))
(insn 215 214 216 2 (set (reg:DI 5 di)
        (reg/f:DI 134 [ stdscr.22_48 ])) "function.c":176 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ stdscr.22_48 ])
        (nil)))
(call_insn 216 215 217 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":176 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 217 216 218 2 (set (reg/f:DI 135 [ stdscr.23_49 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":177 85 {*movdi_internal}
     (nil))
(insn 218 217 219 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":177 85 {*movdi_internal}
     (nil))
(insn 219 218 220 2 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":177 86 {*movsi_internal}
     (nil))
(insn 220 219 221 2 (set (reg:DI 5 di)
        (reg/f:DI 135 [ stdscr.23_49 ])) "function.c":177 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ stdscr.23_49 ])
        (nil)))
(call_insn 221 220 222 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":177 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 222 221 223 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":178 85 {*movdi_internal}
     (nil))
(insn 223 222 224 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":178 88 {*movqi_internal}
     (nil))
(call_insn 224 223 225 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":178 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 225 224 226 2 (set (reg/f:DI 136 [ stdscr.24_50 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":179 85 {*movdi_internal}
     (nil))
(insn 226 225 227 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":179 85 {*movdi_internal}
     (nil))
(insn 227 226 228 2 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":179 86 {*movsi_internal}
     (nil))
(insn 228 227 229 2 (set (reg:DI 5 di)
        (reg/f:DI 136 [ stdscr.24_50 ])) "function.c":179 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136 [ stdscr.24_50 ])
        (nil)))
(call_insn 229 228 230 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":179 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 230 229 231 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f7cd0ee2e10 *.LC19>)) "function.c":180 85 {*movdi_internal}
     (nil))
(insn 231 230 232 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":180 88 {*movqi_internal}
     (nil))
(call_insn 232 231 233 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":180 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 233 232 234 2 (set (reg/f:DI 137 [ stdscr.25_51 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":182 85 {*movdi_internal}
     (nil))
(insn 234 233 235 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":182 86 {*movsi_internal}
     (nil))
(insn 235 234 236 2 (set (reg:SI 4 si)
        (const_int 17 [0x11])) "function.c":182 86 {*movsi_internal}
     (nil))
(insn 236 235 237 2 (set (reg:DI 5 di)
        (reg/f:DI 137 [ stdscr.25_51 ])) "function.c":182 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137 [ stdscr.25_51 ])
        (nil)))
(call_insn 237 236 238 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":182 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 238 237 239 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f7cd0ee2ea0 *.LC20>)) "function.c":183 85 {*movdi_internal}
     (nil))
(insn 239 238 240 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":183 88 {*movqi_internal}
     (nil))
(call_insn 240 239 241 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":183 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 241 240 242 2 (set (reg/f:DI 138 [ stdscr.26_52 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":185 85 {*movdi_internal}
     (nil))
(insn 242 241 243 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":185 86 {*movsi_internal}
     (nil))
(insn 243 242 244 2 (set (reg:SI 4 si)
        (const_int 18 [0x12])) "function.c":185 86 {*movsi_internal}
     (nil))
(insn 244 243 245 2 (set (reg:DI 5 di)
        (reg/f:DI 138 [ stdscr.26_52 ])) "function.c":185 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ stdscr.26_52 ])
        (nil)))
(call_insn 245 244 246 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":185 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 246 245 247 2 (set (reg/f:DI 139 [ stdscr.27_53 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":186 85 {*movdi_internal}
     (nil))
(insn 247 246 248 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":186 85 {*movdi_internal}
     (nil))
(insn 248 247 249 2 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":186 86 {*movsi_internal}
     (nil))
(insn 249 248 250 2 (set (reg:DI 5 di)
        (reg/f:DI 139 [ stdscr.27_53 ])) "function.c":186 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 139 [ stdscr.27_53 ])
        (nil)))
(call_insn 250 249 251 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":186 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 251 250 252 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f7cd0ee2f30 *.LC21>)) "function.c":187 85 {*movdi_internal}
     (nil))
(insn 252 251 253 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":187 88 {*movqi_internal}
     (nil))
(call_insn 253 252 254 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":187 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 254 253 255 2 (set (reg/f:DI 140 [ stdscr.28_54 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":188 85 {*movdi_internal}
     (nil))
(insn 255 254 256 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":188 85 {*movdi_internal}
     (nil))
(insn 256 255 257 2 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":188 86 {*movsi_internal}
     (nil))
(insn 257 256 258 2 (set (reg:DI 5 di)
        (reg/f:DI 140 [ stdscr.28_54 ])) "function.c":188 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140 [ stdscr.28_54 ])
        (nil)))
(call_insn 258 257 259 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":188 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 259 258 260 2 (set (reg/f:DI 141 [ stdscr.29_55 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":191 85 {*movdi_internal}
     (nil))
(insn 260 259 261 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":191 86 {*movsi_internal}
     (nil))
(insn 261 260 262 2 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":191 86 {*movsi_internal}
     (nil))
(insn 262 261 263 2 (set (reg:DI 5 di)
        (reg/f:DI 141 [ stdscr.29_55 ])) "function.c":191 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141 [ stdscr.29_55 ])
        (nil)))
(call_insn 263 262 264 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":191 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 264 263 265 2 (set (reg/f:DI 142 [ stdscr.30_56 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":192 85 {*movdi_internal}
     (nil))
(insn 265 264 266 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":192 85 {*movdi_internal}
     (nil))
(insn 266 265 267 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":192 86 {*movsi_internal}
     (nil))
(insn 267 266 268 2 (set (reg:DI 5 di)
        (reg/f:DI 142 [ stdscr.30_56 ])) "function.c":192 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ stdscr.30_56 ])
        (nil)))
(call_insn 268 267 269 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":192 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 269 268 270 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f7cd0ef3000 *.LC22>)) "function.c":193 85 {*movdi_internal}
     (nil))
(insn 270 269 271 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":193 88 {*movqi_internal}
     (nil))
(call_insn 271 270 272 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":193 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 272 271 273 2 (set (reg/f:DI 143 [ stdscr.31_57 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":194 85 {*movdi_internal}
     (nil))
(insn 273 272 274 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":194 85 {*movdi_internal}
     (nil))
(insn 274 273 275 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":194 86 {*movsi_internal}
     (nil))
(insn 275 274 276 2 (set (reg:DI 5 di)
        (reg/f:DI 143 [ stdscr.31_57 ])) "function.c":194 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143 [ stdscr.31_57 ])
        (nil)))
(call_insn 276 275 277 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":194 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 277 276 278 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f7cd0ef3090 *.LC23>)) "function.c":195 85 {*movdi_internal}
     (nil))
(insn 278 277 279 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":195 88 {*movqi_internal}
     (nil))
(call_insn 279 278 280 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":195 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 280 279 281 2 (set (reg/f:DI 144 [ stdscr.32_58 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":196 85 {*movdi_internal}
     (nil))
(insn 281 280 282 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":196 85 {*movdi_internal}
     (nil))
(insn 282 281 283 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":196 86 {*movsi_internal}
     (nil))
(insn 283 282 284 2 (set (reg:DI 5 di)
        (reg/f:DI 144 [ stdscr.32_58 ])) "function.c":196 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 144 [ stdscr.32_58 ])
        (nil)))
(call_insn 284 283 285 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":196 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 285 284 286 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f7cd0ef3120 *.LC24>)) "function.c":197 85 {*movdi_internal}
     (nil))
(insn 286 285 287 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":197 88 {*movqi_internal}
     (nil))
(call_insn 287 286 288 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":197 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 288 287 289 2 (set (reg/f:DI 145 [ stdscr.33_59 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":198 85 {*movdi_internal}
     (nil))
(insn 289 288 290 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":198 85 {*movdi_internal}
     (nil))
(insn 290 289 291 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":198 86 {*movsi_internal}
     (nil))
(insn 291 290 292 2 (set (reg:DI 5 di)
        (reg/f:DI 145 [ stdscr.33_59 ])) "function.c":198 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145 [ stdscr.33_59 ])
        (nil)))
(call_insn 292 291 293 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":198 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 293 292 294 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f7cd0ef31b0 *.LC25>)) "function.c":199 85 {*movdi_internal}
     (nil))
(insn 294 293 295 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":199 88 {*movqi_internal}
     (nil))
(call_insn 295 294 296 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":199 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 296 295 297 2 (set (reg/f:DI 146 [ stdscr.34_60 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":201 85 {*movdi_internal}
     (nil))
(insn 297 296 298 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":201 86 {*movsi_internal}
     (nil))
(insn 298 297 299 2 (set (reg:SI 4 si)
        (const_int 20 [0x14])) "function.c":201 86 {*movsi_internal}
     (nil))
(insn 299 298 300 2 (set (reg:DI 5 di)
        (reg/f:DI 146 [ stdscr.34_60 ])) "function.c":201 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ stdscr.34_60 ])
        (nil)))
(call_insn 300 299 301 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":201 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 301 300 302 2 (set (reg/f:DI 147 [ stdscr.35_61 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":202 85 {*movdi_internal}
     (nil))
(insn 302 301 303 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":202 85 {*movdi_internal}
     (nil))
(insn 303 302 304 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":202 86 {*movsi_internal}
     (nil))
(insn 304 303 305 2 (set (reg:DI 5 di)
        (reg/f:DI 147 [ stdscr.35_61 ])) "function.c":202 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ stdscr.35_61 ])
        (nil)))
(call_insn 305 304 306 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":202 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 306 305 307 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f7cd0ef3240 *.LC26>)) "function.c":203 85 {*movdi_internal}
     (nil))
(insn 307 306 308 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":203 88 {*movqi_internal}
     (nil))
(call_insn 308 307 309 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":203 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 309 308 310 2 (set (reg/f:DI 148 [ stdscr.36_62 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":204 85 {*movdi_internal}
     (nil))
(insn 310 309 311 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":204 85 {*movdi_internal}
     (nil))
(insn 311 310 312 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":204 86 {*movsi_internal}
     (nil))
(insn 312 311 313 2 (set (reg:DI 5 di)
        (reg/f:DI 148 [ stdscr.36_62 ])) "function.c":204 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ stdscr.36_62 ])
        (nil)))
(call_insn 313 312 314 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":204 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 314 313 315 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f7cd0ef32d0 *.LC27>)) "function.c":205 85 {*movdi_internal}
     (nil))
(insn 315 314 316 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":205 88 {*movqi_internal}
     (nil))
(call_insn 316 315 317 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":205 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 317 316 318 2 (set (reg/f:DI 149 [ stdscr.37_63 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":207 85 {*movdi_internal}
     (nil))
(insn 318 317 319 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":207 86 {*movsi_internal}
     (nil))
(insn 319 318 320 2 (set (reg:SI 4 si)
        (const_int 21 [0x15])) "function.c":207 86 {*movsi_internal}
     (nil))
(insn 320 319 321 2 (set (reg:DI 5 di)
        (reg/f:DI 149 [ stdscr.37_63 ])) "function.c":207 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149 [ stdscr.37_63 ])
        (nil)))
(call_insn 321 320 322 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":207 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 322 321 323 2 (set (reg/f:DI 150 [ stdscr.38_64 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":208 85 {*movdi_internal}
     (nil))
(insn 323 322 324 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":208 85 {*movdi_internal}
     (nil))
(insn 324 323 325 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":208 86 {*movsi_internal}
     (nil))
(insn 325 324 326 2 (set (reg:DI 5 di)
        (reg/f:DI 150 [ stdscr.38_64 ])) "function.c":208 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150 [ stdscr.38_64 ])
        (nil)))
(call_insn 326 325 327 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":208 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 327 326 328 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f7cd0ef3360 *.LC28>)) "function.c":209 85 {*movdi_internal}
     (nil))
(insn 328 327 329 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":209 88 {*movqi_internal}
     (nil))
(call_insn 329 328 330 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":209 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 330 329 331 2 (set (reg/f:DI 151 [ stdscr.39_65 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":210 85 {*movdi_internal}
     (nil))
(insn 331 330 332 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":210 85 {*movdi_internal}
     (nil))
(insn 332 331 333 2 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":210 86 {*movsi_internal}
     (nil))
(insn 333 332 334 2 (set (reg:DI 5 di)
        (reg/f:DI 151 [ stdscr.39_65 ])) "function.c":210 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 151 [ stdscr.39_65 ])
        (nil)))
(call_insn 334 333 335 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":210 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 335 334 336 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f7cd0ef33f0 *.LC29>)) "function.c":211 85 {*movdi_internal}
     (nil))
(insn 336 335 337 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":211 88 {*movqi_internal}
     (nil))
(call_insn 337 336 338 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":211 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 338 337 339 2 (set (reg/f:DI 152 [ stdscr.40_66 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":213 85 {*movdi_internal}
     (nil))
(insn 339 338 340 2 (set (reg:SI 1 dx)
        (const_int 35 [0x23])) "function.c":213 86 {*movsi_internal}
     (nil))
(insn 340 339 341 2 (set (reg:SI 4 si)
        (const_int 22 [0x16])) "function.c":213 86 {*movsi_internal}
     (nil))
(insn 341 340 342 2 (set (reg:DI 5 di)
        (reg/f:DI 152 [ stdscr.40_66 ])) "function.c":213 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ stdscr.40_66 ])
        (nil)))
(call_insn 342 341 343 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":213 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 343 342 344 2 (set (reg/f:DI 153 [ stdscr.41_67 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":214 85 {*movdi_internal}
     (nil))
(insn 344 343 345 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":214 85 {*movdi_internal}
     (nil))
(insn 345 344 346 2 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":214 86 {*movsi_internal}
     (nil))
(insn 346 345 347 2 (set (reg:DI 5 di)
        (reg/f:DI 153 [ stdscr.41_67 ])) "function.c":214 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 153 [ stdscr.41_67 ])
        (nil)))
(call_insn 347 346 348 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":214 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 348 347 349 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":215 85 {*movdi_internal}
     (nil))
(insn 349 348 350 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":215 88 {*movqi_internal}
     (nil))
(call_insn 350 349 351 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":215 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 351 350 352 2 (set (reg/f:DI 154 [ stdscr.42_68 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":216 85 {*movdi_internal}
     (nil))
(insn 352 351 353 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":216 85 {*movdi_internal}
     (nil))
(insn 353 352 354 2 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":216 86 {*movsi_internal}
     (nil))
(insn 354 353 355 2 (set (reg:DI 5 di)
        (reg/f:DI 154 [ stdscr.42_68 ])) "function.c":216 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ stdscr.42_68 ])
        (nil)))
(call_insn 355 354 356 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":216 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 356 355 357 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f7cd0ef3510 *.LC31>)) "function.c":217 85 {*movdi_internal}
     (nil))
(insn 357 356 358 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":217 88 {*movqi_internal}
     (nil))
(call_insn 358 357 363 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":217 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 363 358 0 2 (const_int 0 [0]) "function.c":222 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function bestia (bestia, funcdef_no=9, decl_uid=6221, cgraph_uid=9, symbol_order=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 27 n_edges 38 count 27 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 26 22 23 24 25
;;
;; Loop 1
;;  header 3, latch 25
;;  depth 1, outer 0
;;  nodes: 3 25 10 24 22 23 14 17 18 19 26 20 15 12 11 21 16 13 7 8 9 6 5 4
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 7 }
;; 6 succs { 9 7 }
;; 7 succs { 8 10 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 25 }
;; 11 succs { 12 19 }
;; 12 succs { 13 15 }
;; 13 succs { 14 18 }
;; 14 succs { 22 }
;; 15 succs { 16 20 }
;; 16 succs { 17 21 }
;; 17 succs { 22 }
;; 18 succs { 22 }
;; 19 succs { 22 }
;; 20 succs { 22 }
;; 21 succs { 26 }
;; 26 succs { 22 }
;; 22 succs { 23 24 }
;; 23 succs { 24 }
;; 24 succs { 25 }
;; 25 succs { 3 }
Building IRA IR
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 114.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 138.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r120: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r120,l0) best DIREG, allocno GENERAL_REGS
    r119: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r119,l0) best DIREG, allocno GENERAL_REGS
    r118: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r118,l0) best DIREG, allocno GENERAL_REGS
    r117: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best DIREG, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r104,l0) best DIREG, allocno GENERAL_REGS
    r103: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r103,l0) best AREG, allocno GENERAL_REGS
    r102: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r102,l0) best AREG, allocno GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r101,l0) best DIREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a1(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a4(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a15(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a20(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a29(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a30(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a31(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 42(l0): point = 0
   Insn 41(l0): point = 2
   Insn 40(l0): point = 4
   Insn 39(l0): point = 6
   Insn 38(l0): point = 8
   Insn 37(l0): point = 10
   Insn 36(l0): point = 12
   Insn 35(l0): point = 14
   Insn 34(l0): point = 16
   Insn 33(l0): point = 18
   Insn 32(l0): point = 20
   Insn 169(l0): point = 23
   Insn 86(l0): point = 26
   Insn 85(l0): point = 28
   Insn 70(l0): point = 31
   Insn 69(l0): point = 33
   Insn 68(l0): point = 35
   Insn 67(l0): point = 37
   Insn 66(l0): point = 39
   Insn 65(l0): point = 41
   Insn 64(l0): point = 43
   Insn 78(l0): point = 46
   Insn 77(l0): point = 48
   Insn 76(l0): point = 50
   Insn 75(l0): point = 52
   Insn 74(l0): point = 54
   Insn 73(l0): point = 56
   Insn 72(l0): point = 58
   Insn 82(l0): point = 61
   Insn 81(l0): point = 63
   Insn 61(l0): point = 66
   Insn 60(l0): point = 68
   Insn 59(l0): point = 70
   Insn 58(l0): point = 72
   Insn 57(l0): point = 74
   Insn 56(l0): point = 76
   Insn 55(l0): point = 78
   Insn 53(l0): point = 81
   Insn 52(l0): point = 83
   Insn 51(l0): point = 85
   Insn 50(l0): point = 87
   Insn 49(l0): point = 89
   Insn 48(l0): point = 91
   Insn 47(l0): point = 93
   Insn 44(l0): point = 96
   Insn 147(l0): point = 99
   Insn 142(l0): point = 102
   Insn 141(l0): point = 104
   Insn 158(l0): point = 107
   Insn 161(l0): point = 110
   Insn 163(l0): point = 113
   Insn 114(l0): point = 115
   Insn 113(l0): point = 117
   Insn 112(l0): point = 119
   Insn 111(l0): point = 121
   Insn 95(l0): point = 124
   Insn 94(l0): point = 126
   Insn 165(l0): point = 129
   Insn 122(l0): point = 131
   Insn 121(l0): point = 133
   Insn 120(l0): point = 135
   Insn 119(l0): point = 137
   Insn 172(l0): point = 140
   Insn 138(l0): point = 143
   Insn 137(l0): point = 145
   Insn 136(l0): point = 147
   Insn 135(l0): point = 149
   Insn 105(l0): point = 152
   Insn 104(l0): point = 154
   Insn 167(l0): point = 157
   Insn 130(l0): point = 159
   Insn 129(l0): point = 161
   Insn 128(l0): point = 163
   Insn 127(l0): point = 165
   Insn 102(l0): point = 168
   Insn 101(l0): point = 170
   Insn 92(l0): point = 173
   Insn 91(l0): point = 175
   Insn 89(l0): point = 178
   Insn 88(l0): point = 180
   Insn 144(l0): point = 183
   Insn 30(l0): point = 186
   Insn 29(l0): point = 188
   Insn 28(l0): point = 190
   Insn 27(l0): point = 192
   Insn 26(l0): point = 194
   Insn 25(l0): point = 196
   Insn 24(l0): point = 198
   Insn 23(l0): point = 200
   Insn 22(l0): point = 202
   Insn 21(l0): point = 204
   Insn 20(l0): point = 206
   Insn 19(l0): point = 208
   Insn 18(l0): point = 210
   Insn 17(l0): point = 212
   Insn 16(l0): point = 214
   Insn 15(l0): point = 216
   Insn 14(l0): point = 218
   Insn 13(l0): point = 220
   Insn 12(l0): point = 222
   Insn 11(l0): point = 224
   Insn 10(l0): point = 226
   Insn 9(l0): point = 228
   Insn 8(l0): point = 230
   Insn 7(l0): point = 232
   Insn 6(l0): point = 234
   Insn 2(l0): point = 236
 a0(r120): [146..149]
 a1(r119): [162..165]
 a2(r118): [134..137]
 a3(r117): [118..121]
 a4(r98): [49..50]
 a5(r96): [49..56]
 a6(r97): [51..52]
 a7(r116): [53..54]
 a8(r115): [57..58]
 a9(r95): [34..35]
 a10(r93): [34..41]
 a11(r94): [36..37]
 a12(r114): [38..39]
 a13(r113): [42..43]
 a14(r92): [69..70]
 a15(r90): [69..76]
 a16(r91): [71..72]
 a17(r112): [73..74]
 a18(r111): [77..78]
 a19(r89): [84..85]
 a20(r87): [84..91]
 a21(r88): [86..87]
 a22(r110): [88..89]
 a23(r109): [92..93]
 a24(r108): [5..6]
 a25(r107): [7..8]
 a26(r106): [11..12]
 a27(r105): [13..14]
 a28(r104): [19..20]
 a29(r103): [187..188]
 a30(r102): [203..204]
 a31(r101): [221..222]
 a32(r100): [225..226]
Compressing live ranges: from 239 to 58 - 24%
Ranges after the compression:
 a0(r120): [46..47]
 a1(r119): [48..49]
 a2(r118): [44..45]
 a3(r117): [42..43]
 a4(r98): [18..19]
 a5(r96): [18..23]
 a6(r97): [20..21]
 a7(r116): [22..23]
 a8(r115): [24..25]
 a9(r95): [10..11]
 a10(r93): [10..15]
 a11(r94): [12..13]
 a12(r114): [14..15]
 a13(r113): [16..17]
 a14(r92): [26..27]
 a15(r90): [26..31]
 a16(r91): [28..29]
 a17(r112): [30..31]
 a18(r111): [32..33]
 a19(r89): [34..35]
 a20(r87): [34..39]
 a21(r88): [36..37]
 a22(r110): [38..39]
 a23(r109): [40..41]
 a24(r108): [0..1]
 a25(r107): [2..3]
 a26(r106): [4..5]
 a27(r105): [6..7]
 a28(r104): [8..9]
 a29(r103): [50..51]
 a30(r102): [52..53]
 a31(r101): [54..55]
 a32(r100): [56..57]
  pref0:a0(r120)<-hr5@500
  pref1:a1(r119)<-hr5@500
  pref2:a2(r118)<-hr5@500
  pref3:a3(r117)<-hr5@500
  pref4:a28(r104)<-hr5@500
  pref5:a29(r103)<-hr0@500
  pref6:a30(r102)<-hr0@500
  pref7:a31(r101)<-hr5@500
  regions=1, blocks=27, points=58
    allocnos=33 (big 0), copies=0, conflicts=0, ranges=33
Disposition:
   20:r87  l0     1   21:r88  l0     0   19:r89  l0     0   15:r90  l0     1
   16:r91  l0     0   14:r92  l0     0   10:r93  l0     1   11:r94  l0     0
    9:r95  l0     0    5:r96  l0     1    6:r97  l0     0    4:r98  l0     0
   32:r100 l0     0   31:r101 l0     0   30:r102 l0     0   29:r103 l0     0
   28:r104 l0     0   27:r105 l0     0   26:r106 l0     0   25:r107 l0     0
   24:r108 l0     0   23:r109 l0     0   22:r110 l0     0   18:r111 l0     0
   17:r112 l0     0   13:r113 l0     0   12:r114 l0     0    8:r115 l0     0
    7:r116 l0     0    3:r117 l0     0    2:r118 l0     0    1:r119 l0     0
    0:r120 l0     0
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


bestia

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,5u} r1={11d,2u} r2={11d,2u} r4={15d,6u} r5={17d,9u} r6={1d,26u} r7={1d,34u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1d,25u} r17={21d,12u} r18={8d} r19={8d} r20={1d,67u} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} 
;;    total ref usage 882{661d,221u,0e} in 107{99 regular + 8 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 100 101 102 103
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":228 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ pom ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":229 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":230 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
        (const_int 0 [0])) "function.c":231 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
        (const_int 0 [0])) "function.c":232 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])) "function.c":234 85 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg/f:DI 100)) "function.c":234 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100)
        (nil)))
(insn 12 11 13 2 (set (reg:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":235 85 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg:DI 101)) "function.c":235 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil)))
(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("bestia_move_random") [flags 0x3]  <function_decl 0x7f7cd1178400 bestia_move_random>) [0 bestia_move_random S1 A8])
        (const_int 0 [0])) "function.c":235 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":236 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":236 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":236 86 {*movsi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f7cd0ef3870 *.LC32>)) "function.c":236 85 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":236 88 {*movqi_internal}
     (nil))
(call_insn 20 19 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":236 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 21 20 22 2 (set (reg:DI 102)
        (reg:DI 0 ax)) "function.c":236 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 22 21 23 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [18 sem_bestia1+0 S8 A64])
        (reg:DI 102)) "function.c":236 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(insn 23 22 24 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":237 86 {*movsi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":237 86 {*movsi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":237 86 {*movsi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f7cd0ef3900 *.LC33>)) "function.c":237 85 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":237 88 {*movqi_internal}
     (nil))
(call_insn 28 27 29 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":237 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 29 28 30 2 (set (reg:DI 103)
        (reg:DI 0 ax)) "function.c":237 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 30 29 150 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_bestia2+0 S8 A64])
        (reg:DI 103)) "function.c":237 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 103)
        (nil)))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              25 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 104 105 106 107 108
(code_label 150 30 31 3 37 (nil) [1 uses])
(note 31 150 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 3 (set (reg:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [18 sem_bestia1+0 S8 A64])) "function.c":241 85 {*movdi_internal}
     (nil))
(insn 33 32 34 3 (set (reg:DI 5 di)
        (reg:DI 104)) "function.c":241 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 104)
        (nil)))
(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":241 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 35 34 36 3 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":242 85 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:SI 106)
        (mem:SI (plus:DI (reg/f:DI 105)
                (const_int 36064 [0x8ce0])) [3 serwer_29->bestia.x+0 S4 A64])) "function.c":242 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105)
        (nil)))
(insn 37 36 38 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_pom+0 S4 A32])
        (reg:SI 106)) "function.c":242 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 38 37 39 3 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":243 85 {*movdi_internal}
     (nil))
(insn 39 38 40 3 (set (reg:SI 108)
        (mem:SI (plus:DI (reg/f:DI 107)
                (const_int 36068 [0x8ce4])) [3 serwer_29->bestia.y+0 S4 A32])) "function.c":243 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (nil)))
(insn 40 39 41 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y_pom+0 S4 A32])
        (reg:SI 108)) "function.c":243 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108)
        (nil)))
(insn 41 40 42 3 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
            (const_int 0 [0]))) "function.c":245 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 42 41 43 3 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "function.c":245 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil))
 -> 45)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":247 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 109 110
(code_label 45 44 46 5 25 (nil) [1 uses])
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:SI 87 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 109)
                (const_int 36064 [0x8ce0])) [3 serwer_29->bestia.x+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109)
        (nil)))
(insn 49 48 50 5 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 50 49 51 5 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 110)
                (const_int 32 [0x20])) [14 serwer_29->player1+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110)
        (nil)))
(insn 51 50 52 5 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 52 51 53 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (reg:SI 89 [ _3 ]))) "function.c":250 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
            (nil))))
(jump_insn 53 52 54 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "function.c":250 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 62)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 111 112
(note 54 53 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 6 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 56 55 57 6 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 111)
                (const_int 36068 [0x8ce4])) [3 serwer_29->bestia.y+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111)
        (nil)))
(insn 57 56 58 6 (set (reg/f:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 58 57 59 6 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 112)
                (const_int 32 [0x20])) [14 serwer_29->player1+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112)
        (nil)))
(insn 59 58 60 6 (set (reg:SI 92 [ _6 ])
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 60 59 61 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ _4 ])
            (reg:SI 92 [ _6 ]))) "function.c":250 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
            (nil))))
(jump_insn 61 60 62 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "function.c":250 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 79)
;;  succ:       9
;;              7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 113 114
(code_label 62 61 63 7 26 (nil) [1 uses])
(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 7 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 65 64 66 7 (set (reg:SI 93 [ _7 ])
        (mem:SI (plus:DI (reg/f:DI 113)
                (const_int 36064 [0x8ce0])) [3 serwer_29->bestia.x+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113)
        (nil)))
(insn 66 65 67 7 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 67 66 68 7 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (plus:DI (reg/f:DI 114)
                (const_int 40 [0x28])) [14 serwer_29->player2+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114)
        (nil)))
(insn 68 67 69 7 (set (reg:SI 95 [ _9 ])
        (mem:SI (plus:DI (reg/f:DI 94 [ _8 ])
                (const_int 12 [0xc])) [3 _8->x_current+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _8 ])
        (nil)))
(insn 69 68 70 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 93 [ _7 ])
            (reg:SI 95 [ _9 ]))) "function.c":250 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 95 [ _9 ])
        (expr_list:REG_DEAD (reg:SI 93 [ _7 ])
            (nil))))
(jump_insn 70 69 71 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "function.c":250 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 83)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96 97 98 115 116
(note 71 70 72 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 8 (set (reg/f:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 73 72 74 8 (set (reg:SI 96 [ _10 ])
        (mem:SI (plus:DI (reg/f:DI 115)
                (const_int 36068 [0x8ce4])) [3 serwer_29->bestia.y+0 S4 A32])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115)
        (nil)))
(insn 74 73 75 8 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (nil))
(insn 75 74 76 8 (set (reg/f:DI 97 [ _11 ])
        (mem/f:DI (plus:DI (reg/f:DI 116)
                (const_int 40 [0x28])) [14 serwer_29->player2+0 S8 A64])) "function.c":250 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (nil)))
(insn 76 75 77 8 (set (reg:SI 98 [ _12 ])
        (mem:SI (plus:DI (reg/f:DI 97 [ _11 ])
                (const_int 16 [0x10])) [3 _11->y_current+0 S4 A64])) "function.c":250 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
        (nil)))
(insn 77 76 78 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 96 [ _10 ])
            (reg:SI 98 [ _12 ]))) "function.c":250 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (expr_list:REG_DEAD (reg:SI 96 [ _10 ])
            (nil))))
(jump_insn 78 77 79 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "function.c":250 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 83)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       6
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 79 78 80 9 27 (nil) [1 uses])
(note 80 79 81 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
        (const_int 1 [0x1])) "function.c":252 86 {*movsi_internal}
     (nil))
(insn 82 81 83 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
        (const_int 0 [0])) "function.c":253 86 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       7
;;              8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 83 82 84 10 28 (nil) [2 uses])
(note 84 83 85 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
            (const_int 0 [0]))) "function.c":261 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 86 85 87 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) "function.c":261 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 148)
;;  succ:       11 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 2 [0x2]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 89 88 90 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) "function.c":263 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 117)
;;  succ:       12 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 2 [0x2]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 92 91 93 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "function.c":263 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 99)
;;  succ:       13 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 93 92 94 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 94 93 95 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 1 [0x1]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 95 94 157 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "function.c":263 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 109)
;;  succ:       14 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 157 95 158 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 158 157 159 14 (set (pc)
        (label_ref 139)) "function.c":263 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 159 158 99)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       12
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 99 159 100 15 31 (nil) [1 uses])
(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 3 [0x3]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 102 101 103 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) "function.c":263 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 125)
;;  succ:       16 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 103 102 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":263 11 {*cmpsi_1}
     (nil))
(jump_insn 105 104 160 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 133)
            (pc))) "function.c":263 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 133)
;;  succ:       17 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 160 105 161 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(jump_insn 161 160 162 17 (set (pc)
        (label_ref 139)) "function.c":263 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 162 161 109)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       13
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117
(code_label 109 162 110 18 32 (nil) [1 uses])
(note 110 109 111 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 18 (set (reg:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":266 85 {*movdi_internal}
     (nil))
(insn 112 111 113 18 (set (reg:SI 4 si)
        (const_int 100 [0x64])) "function.c":266 86 {*movsi_internal}
     (nil))
(insn 113 112 114 18 (set (reg:DI 5 di)
        (reg:DI 117)) "function.c":266 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 117)
        (nil)))
(call_insn 114 113 163 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":266 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 163 114 164 18 (set (pc)
        (label_ref 139)) "function.c":267 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 164 163 117)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       11
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 118
(code_label 117 164 118 19 30 (nil) [1 uses])
(note 118 117 119 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 119 118 120 19 (set (reg:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":269 85 {*movdi_internal}
     (nil))
(insn 120 119 121 19 (set (reg:SI 4 si)
        (const_int 97 [0x61])) "function.c":269 86 {*movsi_internal}
     (nil))
(insn 121 120 122 19 (set (reg:DI 5 di)
        (reg:DI 118)) "function.c":269 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 118)
        (nil)))
(call_insn 122 121 165 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":269 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 165 122 166 19 (set (pc)
        (label_ref 139)) "function.c":270 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 166 165 125)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       15
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 119
(code_label 125 166 126 20 34 (nil) [1 uses])
(note 126 125 127 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 20 (set (reg:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":272 85 {*movdi_internal}
     (nil))
(insn 128 127 129 20 (set (reg:SI 4 si)
        (const_int 119 [0x77])) "function.c":272 86 {*movsi_internal}
     (nil))
(insn 129 128 130 20 (set (reg:DI 5 di)
        (reg:DI 119)) "function.c":272 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 119)
        (nil)))
(call_insn 130 129 167 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":272 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 167 130 168 20 (set (pc)
        (label_ref 139)) "function.c":273 683 {jump}
     (nil)
 -> 139)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 168 167 133)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 26, flags: (RTL)
;;  pred:       16
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 120
(code_label 133 168 134 21 35 (nil) [1 uses])
(note 134 133 135 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 135 134 136 21 (set (reg:DI 120)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":275 85 {*movdi_internal}
     (nil))
(insn 136 135 137 21 (set (reg:SI 4 si)
        (const_int 115 [0x73])) "function.c":275 86 {*movsi_internal}
     (nil))
(insn 137 136 138 21 (set (reg:DI 5 di)
        (reg:DI 120)) "function.c":275 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 120)
        (nil)))
(call_insn 138 137 171 21 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("bestia_move") [flags 0x3]  <function_decl 0x7f7cd1178900 bestia_move>) [0 bestia_move S1 A8])
            (const_int 0 [0]))) "function.c":275 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 21, next block 22, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 171 138 172 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 172 171 139 26 (const_int 0 [0]) "function.c":276 718 {nop}
     (nil))
;;  succ:       22 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 26, next block 23, flags: (RTL)
;;  pred:       14 [always] 
;;              17 [always] 
;;              18 [always] 
;;              19 [always] 
;;              26 [always]  (FALLTHRU)
;;              20 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 139 172 140 22 33 (nil) [5 uses])
(note 140 139 141 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
            (const_int 0 [0]))) "function.c":278 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 142 141 143 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) "function.c":278 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 145)
;;  succ:       23 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 143 142 144 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 144 143 145 23 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 found+0 S4 A32])
        (const_int 1 [0x1])) "function.c":280 86 {*movsi_internal}
     (nil))
;;  succ:       24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       22
;;              23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 145 144 146 24 36 (nil) [1 uses])
(note 146 145 147 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 24 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzak+0 S4 A32])
        (const_int 0 [0])) "function.c":282 86 {*movsi_internal}
     (nil))
;;  succ:       25 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 1, flags: (RTL)
;;  pred:       10
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 148 147 149 25 29 (nil) [1 uses])
(note 149 148 169 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(jump_insn 169 149 170 25 (set (pc)
        (label_ref 150)) "function.c":241 683 {jump}
     (nil)
 -> 150)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 170 169 0)

;; Function quit_quit (quit_quit, funcdef_no=10, decl_uid=6223, cgraph_uid=10, symbol_order=13)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 12 count 10 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 3, latch 8
;;  depth 1, outer 0
;;  nodes: 3 8 6 7 5
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 9 }
;; 5 succs { 7 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 3 }
;; 9 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r100,l0) best AREG, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r98,l0) best AREG, allocno GENERAL_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r87,l0) best DIREG, allocno GENERAL_REGS

  a0(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a3(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a4(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a5(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a7(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a8(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000
  a9(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a11(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a13(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 66(l0): point = 0
   Insn 65(l0): point = 2
   Insn 61(l0): point = 4
   Insn 69(l0): point = 7
   Insn 39(l0): point = 9
   Insn 37(l0): point = 12
   Insn 36(l0): point = 14
   Insn 35(l0): point = 16
   Insn 34(l0): point = 18
   Insn 33(l0): point = 20
   Insn 32(l0): point = 22
   Insn 31(l0): point = 24
   Insn 30(l0): point = 26
   Insn 29(l0): point = 28
   Insn 28(l0): point = 30
   Insn 27(l0): point = 32
   Insn 26(l0): point = 34
   Insn 71(l0): point = 37
   Insn 50(l0): point = 40
   Insn 49(l0): point = 42
   Insn 48(l0): point = 44
   Insn 53(l0): point = 47
   Insn 46(l0): point = 50
   Insn 45(l0): point = 52
   Insn 44(l0): point = 54
   Insn 24(l0): point = 57
   Insn 23(l0): point = 59
   Insn 22(l0): point = 61
   Insn 21(l0): point = 63
   Insn 20(l0): point = 65
   Insn 19(l0): point = 67
   Insn 18(l0): point = 69
   Insn 17(l0): point = 71
   Insn 16(l0): point = 73
   Insn 15(l0): point = 75
   Insn 14(l0): point = 77
   Insn 13(l0): point = 79
   Insn 12(l0): point = 81
   Insn 11(l0): point = 83
   Insn 10(l0): point = 85
   Insn 9(l0): point = 87
   Insn 8(l0): point = 89
   Insn 7(l0): point = 91
   Insn 6(l0): point = 93
   Insn 2(l0): point = 95
 a0(r95): [3..4]
 a1(r94): [5..9]
 a2(r93): [43..44]
 a3(r92): [53..54]
 a4(r91): [15..16]
 a5(r101): [19..20]
 a6(r90): [19..22]
 a7(r89): [25..26]
 a8(r88): [27..28]
 a9(r87): [33..34]
 a10(r100): [58..59]
 a11(r99): [72..75]
 a12(r98): [78..79]
 a13(r97): [84..89]
 a14(r96): [92..93]
Compressing live ranges: from 98 to 28 - 28%
Ranges after the compression:
 a0(r95): [0..1]
 a1(r94): [2..3]
 a2(r93): [14..15]
 a3(r92): [16..17]
 a4(r91): [4..5]
 a5(r101): [6..7]
 a6(r90): [6..7]
 a7(r89): [8..9]
 a8(r88): [10..11]
 a9(r87): [12..13]
 a10(r100): [18..19]
 a11(r99): [20..21]
 a12(r98): [22..23]
 a13(r97): [24..25]
 a14(r96): [26..27]
  pref0:a10(r100)<-hr0@500
  pref1:a12(r98)<-hr0@500
  pref2:a13(r97)<-hr5@500
  pref3:a0(r95)<-hr0@500
  pref4:a8(r88)<-hr0@500
  pref5:a9(r87)<-hr5@500
  regions=1, blocks=10, points=28
    allocnos=15 (big 0), copies=0, conflicts=0, ranges=15
Disposition:
    9:r87  l0     0    8:r88  l0     0    7:r89  l0     0    6:r90  l0     1
    4:r91  l0     0    3:r92  l0     0    2:r93  l0     0    1:r94  l0     0
    0:r95  l0     0   14:r96  l0     0   13:r97  l0     0   12:r98  l0     0
   11:r99  l0     0   10:r100 l0     0    5:r101 l0     0
+++Costs: overall -6000, reg -6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


quit_quit

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={5d,5u} r1={6d,2u} r2={5d,1u} r4={6d,2u} r5={7d,4u} r6={1d,9u} r7={1d,12u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,8u} r17={6d,3u} r18={3d} r19={3d} r20={1d,17u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={5d,1u} r38={5d,1u} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} 
;;    total ref usage 344{264d,80u,0e} in 45{42 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 98 99 100
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":291 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ pom ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [19 pom+0 S8 A64])) "function.c":292 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [10 q+0 S8 A64])
        (reg/f:DI 96)) "function.c":292 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (nil)))
(insn 8 7 9 2 (set (reg:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [10 q+0 S8 A64])) "function.c":293 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":293 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (const_int 66 [0x42])) "function.c":293 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg:DI 97)) "function.c":293 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_open") [flags 0x41]  <function_decl 0x7f7cd133cb00 shm_open>) [0 shm_open S1 A8])
            (const_int 0 [0]))) "function.c":293 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 13 12 14 2 (set (reg:SI 98)
        (reg:SI 0 ax)) "function.c":293 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 fd+0 S4 A32])
        (reg:SI 98)) "function.c":293 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98)
        (nil)))
(insn 15 14 16 2 (set (reg:SI 99)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 fd+0 S4 A32])) "function.c":294 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 38 r9)
        (const_int 0 [0])) "function.c":294 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:SI 37 r8)
        (reg:SI 99)) "function.c":294 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99)
        (nil)))
(insn 18 17 19 2 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "function.c":294 86 {*movsi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":294 86 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":294 85 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":294 85 {*movdi_internal}
     (nil))
(call_insn 22 21 23 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("mmap") [flags 0x41]  <function_decl 0x7f7cd133c000 mmap>) [0 mmap S1 A8])
            (const_int 0 [0]))) "function.c":294 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 23 22 24 2 (set (reg:DI 100)
        (reg:DI 0 ax)) "function.c":294 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 24 23 56 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [14 playerinfo+0 S8 A64])
        (reg:DI 100)) "function.c":294 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              8 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 101
(code_label 56 24 25 3 43 (nil) [1 uses])
(note 25 56 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg/f:DI 87 [ stdscr.43_1 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":298 85 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (reg/f:DI 87 [ stdscr.43_1 ])) "function.c":298 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ stdscr.43_1 ])
        (nil)))
(call_insn 28 27 29 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wgetch") [flags 0x41]  <function_decl 0x7f7cd10c9100 wgetch>) [0 wgetch S1 A8])
            (const_int 0 [0]))) "function.c":298 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 3 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "function.c":298 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 30 29 31 3 (set (reg:QI 89 [ _3 ])
        (subreg:QI (reg:SI 88 [ _2 ]) 0)) "function.c":298 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(insn 31 30 32 3 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (reg:QI 89 [ _3 ])) "function.c":298 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 89 [ _3 ])
        (nil)))
(insn 32 31 33 3 (set (reg:QI 90 [ END.44_4 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":299 88 {*movqi_internal}
     (nil))
(insn 33 32 34 3 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [14 playerinfo+0 S8 A64])) "function.c":299 85 {*movdi_internal}
     (nil))
(insn 34 33 35 3 (set (mem:QI (plus:DI (reg/f:DI 101)
                (const_int 40 [0x28])) [0 playerinfo_16->request+0 S1 A64])
        (reg:QI 90 [ END.44_4 ])) "function.c":299 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (expr_list:REG_DEAD (reg:QI 90 [ END.44_4 ])
            (nil))))
(insn 35 34 36 3 (set (reg:QI 91 [ END.45_5 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":301 88 {*movqi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 91 [ END.45_5 ])
            (const_int 113 [0x71]))) "function.c":301 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 91 [ END.45_5 ])
        (nil)))
(jump_insn 37 36 38 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) "function.c":301 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 42)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 94
(note 38 37 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 69 4 (set (reg/f:DI 94 [ _20 ])
        (const_int 0 [0])) "function.c":303 85 {*movdi_internal}
     (nil))
(jump_insn 69 39 70 4 (set (pc)
        (label_ref 68)) "function.c":303 683 {jump}
     (nil)
 -> 68)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94

(barrier 70 69 42)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92
(code_label 42 70 43 5 39 (nil) [1 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:QI 92 [ END.46_6 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":305 88 {*movqi_internal}
     (nil))
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 92 [ END.46_6 ])
            (const_int 98 [0x62]))) "function.c":305 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 92 [ END.46_6 ])
        (nil)))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) "function.c":305 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 51)
;;  succ:       7
;;              6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (reg:QI 93 [ END.47_7 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":305 88 {*movqi_internal}
     (nil))
(insn 49 48 50 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 93 [ END.47_7 ])
            (const_int 66 [0x42]))) "function.c":305 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 93 [ END.47_7 ])
        (nil)))
(jump_insn 50 49 51 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "function.c":305 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 54)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 51 50 52 7 41 (nil) [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])
        (const_int 1 [0x1])) "function.c":307 88 {*movqi_internal}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 54 53 55 8 42 (nil) [1 uses])
(note 55 54 71 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 71 55 72 8 (set (pc)
        (label_ref 56)) "function.c":298 683 {jump}
     (nil)
 -> 56)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 72 71 68)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL)
;;  pred:       4 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94
;; lr  def 	 0 [ax] 95
(code_label 68 72 60 9 44 (nil) [1 uses])
(note 60 68 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 61 60 65 9 (set (reg/f:DI 95 [ <retval> ])
        (reg/f:DI 94 [ _20 ])) "function.c":303 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _20 ])
        (nil)))
(insn 65 61 66 9 (set (reg/i:DI 0 ax)
        (reg/f:DI 95 [ <retval> ])) "function.c":310 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ <retval> ])
        (nil)))
(insn 66 65 0 9 (use (reg/i:DI 0 ax)) "function.c":310 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function serwer_serwer (serwer_serwer, funcdef_no=11, decl_uid=6225, cgraph_uid=11, symbol_order=14)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 50 n_edges 71 count 50 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
;;
;; Loop 1
;;  header 6, latch 48
;;  depth 1, outer 0
;;  nodes: 6 48 44 43 42 41 39 40 37 38 34 35 36 32 33 23 24 25 31 30 27 29 28 26 21 22 19 20 11 12 18 17 14 16 15 13 10 9 7 8
;;
;; Loop 2
;;  header 10, latch 9
;;  depth 2, outer 1
;;  nodes: 10 9 7 8
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 10 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 7 11 }
;; 11 succs { 12 19 }
;; 12 succs { 13 19 }
;; 13 succs { 14 15 }
;; 14 succs { 18 }
;; 15 succs { 16 17 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 19 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 24 32 }
;; 24 succs { 25 32 }
;; 25 succs { 26 32 }
;; 26 succs { 27 28 }
;; 27 succs { 31 }
;; 28 succs { 29 30 }
;; 29 succs { 31 }
;; 30 succs { 31 }
;; 31 succs { 32 }
;; 32 succs { 33 34 }
;; 33 succs { 34 }
;; 34 succs { 35 37 }
;; 35 succs { 36 37 }
;; 36 succs { 37 }
;; 37 succs { 38 39 }
;; 38 succs { 39 }
;; 39 succs { 40 41 }
;; 40 succs { 41 }
;; 41 succs { 42 43 }
;; 42 succs { 44 }
;; 43 succs { 44 }
;; 44 succs { 45 48 }
;; 45 succs { 46 47 }
;; 46 succs { 47 }
;; 47 succs { 49 }
;; 48 succs { 6 }
;; 49 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 113.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 157.
verify found no changes in insn with uid = 170.
verify found no changes in insn with uid = 179.
verify found no changes in insn with uid = 184.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 192.
verify found no changes in insn with uid = 195.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 216.
verify found no changes in insn with uid = 225.
verify found no changes in insn with uid = 241.
verify found no changes in insn with uid = 263.
verify found no changes in insn with uid = 266.
verify found no changes in insn with uid = 271.
verify found no changes in insn with uid = 290.
verify found no changes in insn with uid = 301.
verify found no changes in insn with uid = 306.
verify found no changes in insn with uid = 309.
verify found no changes in insn with uid = 314.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 320.
verify found no changes in insn with uid = 333.
verify found no changes in insn with uid = 346.
verify found no changes in insn with uid = 351.
verify found no changes in insn with uid = 354.
verify found no changes in insn with uid = 359.
verify found no changes in insn with uid = 370.
verify found no changes in insn with uid = 373.
verify found no changes in insn with uid = 376.
verify found no changes in insn with uid = 393.
verify found no changes in insn with uid = 396.
verify found no changes in insn with uid = 402.
verify found no changes in insn with uid = 405.
verify found no changes in insn with uid = 414.
verify found no changes in insn with uid = 430.
verify found no changes in insn with uid = 452.
verify found no changes in insn with uid = 455.
verify found no changes in insn with uid = 460.
verify found no changes in insn with uid = 479.
verify found no changes in insn with uid = 490.
verify found no changes in insn with uid = 495.
verify found no changes in insn with uid = 498.
verify found no changes in insn with uid = 503.
verify found no changes in insn with uid = 506.
verify found no changes in insn with uid = 509.
verify found no changes in insn with uid = 532.
verify found no changes in insn with uid = 542.
verify found no changes in insn with uid = 545.
verify found no changes in insn with uid = 552.
verify found no changes in insn with uid = 557.
verify found no changes in insn with uid = 560.
verify found no changes in insn with uid = 565.
verify found no changes in insn with uid = 568.
verify found no changes in insn with uid = 573.
verify found no changes in insn with uid = 576.
verify found no changes in insn with uid = 579.
verify found no changes in insn with uid = 582.
verify found no changes in insn with uid = 587.
verify found no changes in insn with uid = 594.
verify found no changes in insn with uid = 597.
verify found no changes in insn with uid = 604.
verify found no changes in insn with uid = 611.
verify found no changes in insn with uid = 614.
verify found no changes in insn with uid = 627.
verify found no changes in insn with uid = 630.
verify found no changes in insn with uid = 633.
verify found no changes in insn with uid = 640.
verify found no changes in insn with uid = 648.
verify found no changes in insn with uid = 654.
verify found no changes in insn with uid = 658.
verify found no changes in insn with uid = 660.
verify found no changes in insn with uid = 662.
verify found no changes in insn with uid = 664.
verify found no changes in insn with uid = 666.
verify found no changes in insn with uid = 668.
verify found no changes in insn with uid = 670.
verify found no changes in insn with uid = 678.
verify found no changes in insn with uid = 680.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r302: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r302,l0) best DIREG, allocno GENERAL_REGS
    r301: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r301,l0) best DIREG, allocno GENERAL_REGS
    r300: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r300,l0) best DIREG, allocno GENERAL_REGS
    r299: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r299,l0) best DIREG, allocno GENERAL_REGS
    r298: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r298,l0) best DIREG, allocno GENERAL_REGS
    r297: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r297,l0) best DIREG, allocno GENERAL_REGS
    r296: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r296,l0) best DIREG, allocno GENERAL_REGS
    r295: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r295,l0) best DIREG, allocno GENERAL_REGS
    r294: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r294,l0) best DIREG, allocno GENERAL_REGS
    r293: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r293,l0) best DIREG, allocno GENERAL_REGS
    r292: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r292,l0) best DIREG, allocno GENERAL_REGS
    r291: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r291,l0) best DIREG, allocno GENERAL_REGS
    r290: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r290,l0) best DIREG, allocno GENERAL_REGS
    r289: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r289,l0) best DIREG, allocno GENERAL_REGS
    r288: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a39 (r288,l0) best DIREG, allocno GENERAL_REGS
    r287: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r287,l0) best CREG, allocno GENERAL_REGS
    r286: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a42 (r286,l0) best DIREG, allocno GENERAL_REGS
    r285: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a43 (r285,l0) best DIREG, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r283,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a85 (r278,l0) best SIREG, allocno GENERAL_REGS
    r277: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a86 (r277,l0) best DREG, allocno GENERAL_REGS
    r276: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a87 (r276,l0) best AREG, allocno GENERAL_REGS
    r275: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a88 (r275,l0) best DIREG, allocno GENERAL_REGS
    r274: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a89 (r274,l0) best DIREG, allocno GENERAL_REGS
    r273: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a90 (r273,l0) best DIREG, allocno GENERAL_REGS
    r272: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a91 (r272,l0) best DIREG, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a98 (r269,l0) best DIREG, allocno GENERAL_REGS
    r268: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a99 (r268,l0) best DIREG, allocno GENERAL_REGS
    r267: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a115 (r267,l0) best DIREG, allocno GENERAL_REGS
    r266: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a116 (r266,l0) best DIREG, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a158 (r259,l0) best SIREG, allocno GENERAL_REGS
    r258: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a159 (r258,l0) best DREG, allocno GENERAL_REGS
    r257: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a160 (r257,l0) best AREG, allocno GENERAL_REGS
    r256: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a161 (r256,l0) best DIREG, allocno GENERAL_REGS
    r255: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a162 (r255,l0) best DIREG, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a167 (r252,l0) best DIREG, allocno GENERAL_REGS
    r251: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a168 (r251,l0) best DIREG, allocno GENERAL_REGS
    r250: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a176 (r250,l0) best DIREG, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a196 (r240,l0) best DIREG, allocno GENERAL_REGS
    r239: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a204 (r239,l0) best DIREG, allocno GENERAL_REGS
    r238: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a208 (r238,l0) best DIREG, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a210 (r236,l0) best AREG, allocno GENERAL_REGS
    r235: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a211 (r235,l0) best AREG, allocno GENERAL_REGS
    r234: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a212 (r234,l0) best AREG, allocno GENERAL_REGS
    r233: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a213 (r233,l0) best AREG, allocno GENERAL_REGS
    r232: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a214 (r232,l0) best AREG, allocno GENERAL_REGS
    r231: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a215 (r231,l0) best AREG, allocno GENERAL_REGS
    r230: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r230,l0) best AREG, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r226,l0) best DIREG, allocno GENERAL_REGS
    r225: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r225,l0) best DIREG, allocno GENERAL_REGS
    r224: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r224,l0) best DIREG, allocno GENERAL_REGS
    r223: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r223,l0) best DIREG, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r220,l0) best DIREG, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r217,l0) best AREG, allocno GENERAL_REGS
    r216: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r216,l0) best DIREG, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r214,l0) best AREG, allocno GENERAL_REGS
    r213: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r213,l0) best DIREG, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r211,l0) best DIREG, allocno GENERAL_REGS
    r210: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r210,l0) best DIREG, allocno GENERAL_REGS
    r209: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r209,l0) best DIREG, allocno GENERAL_REGS
    r208: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r208,l0) best SIREG, allocno GENERAL_REGS
    r207: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a35 (r207,l0) best DREG, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a44 (r204,l0) best DIREG, allocno GENERAL_REGS
    r203: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r203,l0) best DIREG, allocno GENERAL_REGS
    r202: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r202,l0) best DIREG, allocno GENERAL_REGS
    r201: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r201,l0) best SIREG, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a48 (r199,l0) best DREG, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a51 (r197,l0) best SIREG, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a62 (r188,l0) best DIREG, allocno GENERAL_REGS
    r187: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a63 (r187,l0) best DIREG, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a84 (r170,l0) best DIREG, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a100 (r165,l0) best DIREG, allocno GENERAL_REGS
    r164: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a101 (r164,l0) best SIREG, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a102 (r162,l0) best DREG, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a105 (r160,l0) best DIREG, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a106 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a107 (r158,l0) best DIREG, allocno GENERAL_REGS
    r157: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a108 (r157,l0) best SIREG, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a109 (r155,l0) best DREG, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a112 (r153,l0) best AREG, allocno GENERAL_REGS
    r152: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a113 (r152,l0) best DIREG, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a117 (r150,l0) best DIREG, allocno GENERAL_REGS
    r149: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a118 (r149,l0) best DIREG, allocno GENERAL_REGS
    r148: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a119 (r148,l0) best DIREG, allocno GENERAL_REGS
    r147: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a120 (r147,l0) best SIREG, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a121 (r145,l0) best DREG, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a124 (r143,l0) best SIREG, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a135 (r134,l0) best DIREG, allocno GENERAL_REGS
    r133: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a136 (r133,l0) best DIREG, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a157 (r116,l0) best DIREG, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a169 (r113,l0) best DIREG, allocno GENERAL_REGS
    r112: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a170 (r112,l0) best DIREG, allocno GENERAL_REGS
    r111: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a171 (r111,l0) best DIREG, allocno GENERAL_REGS
    r110: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a172 (r110,l0) best SIREG, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a173 (r108,l0) best DREG, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a175 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a178 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a179 (r104,l0) best SIREG, allocno GENERAL_REGS
    r103: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a180 (r103,l0) best DREG, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a190 (r101,l0) best DIREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a198 (r96,l0) best AREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a200 (r94,l0) best AREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a201 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a202 (r91,l0) best AREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a203 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a205 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a206 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a207 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a4(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a9(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a11(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a14(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a17(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a19(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a20(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a23(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a24(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a27(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a28(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a29(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a31(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a35(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a36(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a37(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a38(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a39(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a41(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a42(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a43(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a45(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a46(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a47(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a49(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a50(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a51(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a52(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a53(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a54(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a55(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a57(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a58(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a59(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a60(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a61(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a62(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a65(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a66(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a67(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a68(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a69(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a70(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a71(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a72(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a73(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a75(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a77(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a78(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a79(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a80(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a81(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a82(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a83(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a84(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a85(r278,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a86(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a88(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a89(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a91(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a92(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a93(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a94(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a95(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a96(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a97(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a98(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a99(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a100(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a101(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a102(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a103(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a104(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a105(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a106(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a107(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a108(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a109(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a110(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a111(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a112(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a113(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a114(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a115(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a116(r266,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a117(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a118(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a119(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a120(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a121(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a122(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a123(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a124(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a125(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a126(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a127(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a128(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a129(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a130(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a131(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a132(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a133(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a134(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a135(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a136(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a137(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a138(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a139(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a140(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a141(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a142(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a143(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a144(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a145(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a146(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a147(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a148(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a149(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a150(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a151(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a152(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a153(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a154(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a155(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a156(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a157(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a158(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a159(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a160(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a161(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a162(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a163(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a164(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a165(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a166(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a167(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a168(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a169(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a170(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a171(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a172(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a173(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a174(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a175(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a176(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a177(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a178(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a179(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a180(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a181(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a182(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a183(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a184(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a185(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a186(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a187(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a188(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a189(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a190(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a191(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a192(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a193(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a194(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a195(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a196(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a197(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a198(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a199(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a200(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a201(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a202(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a203(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a204(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a205(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a206(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a207(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a208(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a209(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a210(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a211(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a212(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a213(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a214(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a215(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000

   Insn 694(l0): point = 0
   Insn 693(l0): point = 2
   Insn 689(l0): point = 4
   Insn 711(l0): point = 7
   Insn 671(l0): point = 9
   Insn 670(l0): point = 11
   Insn 669(l0): point = 13
   Insn 668(l0): point = 15
   Insn 667(l0): point = 17
   Insn 666(l0): point = 19
   Insn 665(l0): point = 21
   Insn 664(l0): point = 23
   Insn 663(l0): point = 25
   Insn 662(l0): point = 27
   Insn 661(l0): point = 29
   Insn 660(l0): point = 31
   Insn 659(l0): point = 33
   Insn 658(l0): point = 35
   Insn 657(l0): point = 37
   Insn 656(l0): point = 39
   Insn 655(l0): point = 41
   Insn 654(l0): point = 43
   Insn 653(l0): point = 45
   Insn 652(l0): point = 47
   Insn 651(l0): point = 49
   Insn 648(l0): point = 52
   Insn 647(l0): point = 54
   Insn 646(l0): point = 56
   Insn 645(l0): point = 58
   Insn 643(l0): point = 61
   Insn 642(l0): point = 63
   Insn 641(l0): point = 65
   Insn 640(l0): point = 67
   Insn 639(l0): point = 69
   Insn 638(l0): point = 71
   Insn 698(l0): point = 74
   Insn 132(l0): point = 76
   Insn 131(l0): point = 78
   Insn 130(l0): point = 80
   Insn 129(l0): point = 82
   Insn 128(l0): point = 84
   Insn 127(l0): point = 86
   Insn 126(l0): point = 88
   Insn 125(l0): point = 90
   Insn 124(l0): point = 92
   Insn 123(l0): point = 94
   Insn 122(l0): point = 96
   Insn 713(l0): point = 99
   Insn 683(l0): point = 101
   Insn 682(l0): point = 103
   Insn 681(l0): point = 105
   Insn 680(l0): point = 107
   Insn 679(l0): point = 109
   Insn 678(l0): point = 111
   Insn 677(l0): point = 113
   Insn 676(l0): point = 115
   Insn 636(l0): point = 118
   Insn 635(l0): point = 120
   Insn 634(l0): point = 122
   Insn 633(l0): point = 124
   Insn 632(l0): point = 126
   Insn 631(l0): point = 128
   Insn 630(l0): point = 130
   Insn 629(l0): point = 132
   Insn 628(l0): point = 134
   Insn 627(l0): point = 136
   Insn 626(l0): point = 138
   Insn 625(l0): point = 140
   Insn 622(l0): point = 143
   Insn 621(l0): point = 145
   Insn 620(l0): point = 147
   Insn 619(l0): point = 149
   Insn 708(l0): point = 152
   Insn 614(l0): point = 154
   Insn 613(l0): point = 156
   Insn 612(l0): point = 158
   Insn 611(l0): point = 160
   Insn 610(l0): point = 162
   Insn 609(l0): point = 164
   Insn 607(l0): point = 167
   Insn 606(l0): point = 169
   Insn 605(l0): point = 171
   Insn 604(l0): point = 173
   Insn 603(l0): point = 175
   Insn 602(l0): point = 177
   Insn 601(l0): point = 179
   Insn 600(l0): point = 181
   Insn 590(l0): point = 184
   Insn 589(l0): point = 186
   Insn 588(l0): point = 188
   Insn 587(l0): point = 190
   Insn 586(l0): point = 192
   Insn 585(l0): point = 194
   Insn 584(l0): point = 196
   Insn 583(l0): point = 198
   Insn 582(l0): point = 200
   Insn 581(l0): point = 202
   Insn 580(l0): point = 204
   Insn 579(l0): point = 206
   Insn 578(l0): point = 208
   Insn 577(l0): point = 210
   Insn 576(l0): point = 212
   Insn 575(l0): point = 214
   Insn 574(l0): point = 216
   Insn 573(l0): point = 218
   Insn 572(l0): point = 220
   Insn 571(l0): point = 222
   Insn 538(l0): point = 225
   Insn 537(l0): point = 227
   Insn 536(l0): point = 229
   Insn 519(l0): point = 232
   Insn 518(l0): point = 234
   Insn 513(l0): point = 237
   Insn 512(l0): point = 239
   Insn 378(l0): point = 242
   Insn 377(l0): point = 244
   Insn 376(l0): point = 246
   Insn 375(l0): point = 248
   Insn 374(l0): point = 250
   Insn 373(l0): point = 252
   Insn 372(l0): point = 254
   Insn 371(l0): point = 256
   Insn 370(l0): point = 258
   Insn 369(l0): point = 260
   Insn 368(l0): point = 262
   Insn 367(l0): point = 264
   Insn 366(l0): point = 266
   Insn 365(l0): point = 268
   Insn 364(l0): point = 270
   Insn 363(l0): point = 272
   Insn 362(l0): point = 274
   Insn 336(l0): point = 277
   Insn 335(l0): point = 279
   Insn 334(l0): point = 281
   Insn 333(l0): point = 283
   Insn 332(l0): point = 285
   Insn 331(l0): point = 287
   Insn 330(l0): point = 289
   Insn 329(l0): point = 291
   Insn 324(l0): point = 294
   Insn 323(l0): point = 296
   Insn 200(l0): point = 299
   Insn 199(l0): point = 301
   Insn 198(l0): point = 303
   Insn 197(l0): point = 305
   Insn 196(l0): point = 307
   Insn 195(l0): point = 309
   Insn 194(l0): point = 311
   Insn 193(l0): point = 313
   Insn 192(l0): point = 315
   Insn 191(l0): point = 317
   Insn 190(l0): point = 319
   Insn 189(l0): point = 321
   Insn 188(l0): point = 323
   Insn 187(l0): point = 325
   Insn 186(l0): point = 327
   Insn 185(l0): point = 329
   Insn 184(l0): point = 331
   Insn 183(l0): point = 333
   Insn 182(l0): point = 335
   Insn 181(l0): point = 337
   Insn 180(l0): point = 339
   Insn 179(l0): point = 341
   Insn 178(l0): point = 343
   Insn 177(l0): point = 345
   Insn 176(l0): point = 347
   Insn 175(l0): point = 349
   Insn 174(l0): point = 351
   Insn 173(l0): point = 353
   Insn 172(l0): point = 355
   Insn 171(l0): point = 357
   Insn 170(l0): point = 359
   Insn 169(l0): point = 361
   Insn 168(l0): point = 363
   Insn 166(l0): point = 366
   Insn 165(l0): point = 368
   Insn 163(l0): point = 370
   Insn 160(l0): point = 373
   Insn 141(l0): point = 376
   Insn 140(l0): point = 378
   Insn 139(l0): point = 380
   Insn 138(l0): point = 382
   Insn 137(l0): point = 384
   Insn 136(l0): point = 386
   Insn 157(l0): point = 389
   Insn 156(l0): point = 391
   Insn 155(l0): point = 393
   Insn 154(l0): point = 395
   Insn 153(l0): point = 397
   Insn 152(l0): point = 399
   Insn 151(l0): point = 401
   Insn 150(l0): point = 403
   Insn 149(l0): point = 405
   Insn 148(l0): point = 407
   Insn 147(l0): point = 409
   Insn 146(l0): point = 411
   Insn 145(l0): point = 413
   Insn 144(l0): point = 415
   Insn 143(l0): point = 417
   Insn 209(l0): point = 420
   Insn 208(l0): point = 422
   Insn 207(l0): point = 424
   Insn 206(l0): point = 426
   Insn 205(l0): point = 428
   Insn 204(l0): point = 430
   Insn 203(l0): point = 432
   Insn 202(l0): point = 434
   Insn 320(l0): point = 437
   Insn 319(l0): point = 439
   Insn 318(l0): point = 441
   Insn 317(l0): point = 443
   Insn 316(l0): point = 445
   Insn 315(l0): point = 447
   Insn 314(l0): point = 449
   Insn 313(l0): point = 451
   Insn 312(l0): point = 453
   Insn 311(l0): point = 455
   Insn 310(l0): point = 457
   Insn 309(l0): point = 459
   Insn 308(l0): point = 461
   Insn 307(l0): point = 463
   Insn 306(l0): point = 465
   Insn 305(l0): point = 467
   Insn 304(l0): point = 469
   Insn 303(l0): point = 471
   Insn 302(l0): point = 473
   Insn 301(l0): point = 475
   Insn 300(l0): point = 477
   Insn 299(l0): point = 479
   Insn 298(l0): point = 481
   Insn 297(l0): point = 483
   Insn 296(l0): point = 485
   Insn 295(l0): point = 487
   Insn 294(l0): point = 489
   Insn 293(l0): point = 491
   Insn 290(l0): point = 494
   Insn 289(l0): point = 496
   Insn 288(l0): point = 498
   Insn 287(l0): point = 500
   Insn 286(l0): point = 502
   Insn 285(l0): point = 504
   Insn 284(l0): point = 506
   Insn 283(l0): point = 508
   Insn 282(l0): point = 510
   Insn 281(l0): point = 512
   Insn 280(l0): point = 514
   Insn 279(l0): point = 516
   Insn 278(l0): point = 518
   Insn 277(l0): point = 520
   Insn 276(l0): point = 522
   Insn 700(l0): point = 525
   Insn 241(l0): point = 527
   Insn 240(l0): point = 529
   Insn 239(l0): point = 531
   Insn 702(l0): point = 534
   Insn 271(l0): point = 536
   Insn 270(l0): point = 538
   Insn 269(l0): point = 540
   Insn 268(l0): point = 542
   Insn 267(l0): point = 544
   Insn 266(l0): point = 546
   Insn 265(l0): point = 548
   Insn 264(l0): point = 550
   Insn 263(l0): point = 552
   Insn 262(l0): point = 554
   Insn 261(l0): point = 556
   Insn 260(l0): point = 558
   Insn 259(l0): point = 560
   Insn 257(l0): point = 563
   Insn 256(l0): point = 565
   Insn 255(l0): point = 567
   Insn 254(l0): point = 569
   Insn 253(l0): point = 571
   Insn 252(l0): point = 573
   Insn 251(l0): point = 575
   Insn 250(l0): point = 577
   Insn 249(l0): point = 579
   Insn 248(l0): point = 581
   Insn 247(l0): point = 583
   Insn 246(l0): point = 585
   Insn 237(l0): point = 588
   Insn 236(l0): point = 590
   Insn 235(l0): point = 592
   Insn 234(l0): point = 594
   Insn 233(l0): point = 596
   Insn 232(l0): point = 598
   Insn 231(l0): point = 600
   Insn 230(l0): point = 602
   Insn 229(l0): point = 604
   Insn 228(l0): point = 606
   Insn 227(l0): point = 608
   Insn 226(l0): point = 610
   Insn 225(l0): point = 612
   Insn 224(l0): point = 614
   Insn 223(l0): point = 616
   Insn 222(l0): point = 618
   Insn 221(l0): point = 620
   Insn 220(l0): point = 622
   Insn 219(l0): point = 624
   Insn 218(l0): point = 626
   Insn 217(l0): point = 628
   Insn 216(l0): point = 630
   Insn 215(l0): point = 632
   Insn 214(l0): point = 634
   Insn 213(l0): point = 636
   Insn 212(l0): point = 638
   Insn 211(l0): point = 640
   Insn 326(l0): point = 643
   Insn 359(l0): point = 646
   Insn 358(l0): point = 648
   Insn 357(l0): point = 650
   Insn 356(l0): point = 652
   Insn 355(l0): point = 654
   Insn 354(l0): point = 656
   Insn 353(l0): point = 658
   Insn 352(l0): point = 660
   Insn 351(l0): point = 662
   Insn 350(l0): point = 664
   Insn 349(l0): point = 666
   Insn 348(l0): point = 668
   Insn 347(l0): point = 670
   Insn 346(l0): point = 672
   Insn 345(l0): point = 674
   Insn 344(l0): point = 676
   Insn 343(l0): point = 678
   Insn 342(l0): point = 680
   Insn 341(l0): point = 682
   Insn 340(l0): point = 684
   Insn 339(l0): point = 686
   Insn 338(l0): point = 688
   Insn 383(l0): point = 691
   Insn 382(l0): point = 693
   Insn 381(l0): point = 695
   Insn 380(l0): point = 697
   Insn 398(l0): point = 700
   Insn 397(l0): point = 702
   Insn 396(l0): point = 704
   Insn 395(l0): point = 706
   Insn 394(l0): point = 708
   Insn 393(l0): point = 710
   Insn 392(l0): point = 712
   Insn 391(l0): point = 714
   Insn 390(l0): point = 716
   Insn 389(l0): point = 718
   Insn 388(l0): point = 720
   Insn 387(l0): point = 722
   Insn 386(l0): point = 724
   Insn 385(l0): point = 726
   Insn 509(l0): point = 729
   Insn 508(l0): point = 731
   Insn 507(l0): point = 733
   Insn 506(l0): point = 735
   Insn 505(l0): point = 737
   Insn 504(l0): point = 739
   Insn 503(l0): point = 741
   Insn 502(l0): point = 743
   Insn 501(l0): point = 745
   Insn 500(l0): point = 747
   Insn 499(l0): point = 749
   Insn 498(l0): point = 751
   Insn 497(l0): point = 753
   Insn 496(l0): point = 755
   Insn 495(l0): point = 757
   Insn 494(l0): point = 759
   Insn 493(l0): point = 761
   Insn 492(l0): point = 763
   Insn 491(l0): point = 765
   Insn 490(l0): point = 767
   Insn 489(l0): point = 769
   Insn 488(l0): point = 771
   Insn 487(l0): point = 773
   Insn 486(l0): point = 775
   Insn 485(l0): point = 777
   Insn 484(l0): point = 779
   Insn 483(l0): point = 781
   Insn 482(l0): point = 783
   Insn 479(l0): point = 786
   Insn 478(l0): point = 788
   Insn 477(l0): point = 790
   Insn 476(l0): point = 792
   Insn 475(l0): point = 794
   Insn 474(l0): point = 796
   Insn 473(l0): point = 798
   Insn 472(l0): point = 800
   Insn 471(l0): point = 802
   Insn 470(l0): point = 804
   Insn 469(l0): point = 806
   Insn 468(l0): point = 808
   Insn 467(l0): point = 810
   Insn 466(l0): point = 812
   Insn 465(l0): point = 814
   Insn 704(l0): point = 817
   Insn 430(l0): point = 819
   Insn 429(l0): point = 821
   Insn 428(l0): point = 823
   Insn 706(l0): point = 826
   Insn 460(l0): point = 828
   Insn 459(l0): point = 830
   Insn 458(l0): point = 832
   Insn 457(l0): point = 834
   Insn 456(l0): point = 836
   Insn 455(l0): point = 838
   Insn 454(l0): point = 840
   Insn 453(l0): point = 842
   Insn 452(l0): point = 844
   Insn 451(l0): point = 846
   Insn 450(l0): point = 848
   Insn 449(l0): point = 850
   Insn 448(l0): point = 852
   Insn 446(l0): point = 855
   Insn 445(l0): point = 857
   Insn 444(l0): point = 859
   Insn 443(l0): point = 861
   Insn 442(l0): point = 863
   Insn 441(l0): point = 865
   Insn 440(l0): point = 867
   Insn 439(l0): point = 869
   Insn 438(l0): point = 871
   Insn 437(l0): point = 873
   Insn 436(l0): point = 875
   Insn 435(l0): point = 877
   Insn 426(l0): point = 880
   Insn 425(l0): point = 882
   Insn 424(l0): point = 884
   Insn 423(l0): point = 886
   Insn 422(l0): point = 888
   Insn 421(l0): point = 890
   Insn 420(l0): point = 892
   Insn 419(l0): point = 894
   Insn 418(l0): point = 896
   Insn 417(l0): point = 898
   Insn 416(l0): point = 900
   Insn 415(l0): point = 902
   Insn 414(l0): point = 904
   Insn 413(l0): point = 906
   Insn 412(l0): point = 908
   Insn 411(l0): point = 910
   Insn 410(l0): point = 912
   Insn 409(l0): point = 914
   Insn 408(l0): point = 916
   Insn 407(l0): point = 918
   Insn 406(l0): point = 920
   Insn 405(l0): point = 922
   Insn 404(l0): point = 924
   Insn 403(l0): point = 926
   Insn 402(l0): point = 928
   Insn 401(l0): point = 930
   Insn 400(l0): point = 932
   Insn 515(l0): point = 935
   Insn 523(l0): point = 938
   Insn 522(l0): point = 940
   Insn 521(l0): point = 942
   Insn 533(l0): point = 945
   Insn 532(l0): point = 947
   Insn 531(l0): point = 949
   Insn 530(l0): point = 951
   Insn 529(l0): point = 953
   Insn 528(l0): point = 955
   Insn 527(l0): point = 957
   Insn 526(l0): point = 959
   Insn 525(l0): point = 961
   Insn 568(l0): point = 964
   Insn 567(l0): point = 966
   Insn 566(l0): point = 968
   Insn 565(l0): point = 970
   Insn 564(l0): point = 972
   Insn 563(l0): point = 974
   Insn 562(l0): point = 976
   Insn 561(l0): point = 978
   Insn 560(l0): point = 980
   Insn 559(l0): point = 982
   Insn 558(l0): point = 984
   Insn 557(l0): point = 986
   Insn 556(l0): point = 988
   Insn 555(l0): point = 990
   Insn 554(l0): point = 992
   Insn 553(l0): point = 994
   Insn 552(l0): point = 996
   Insn 551(l0): point = 998
   Insn 550(l0): point = 1000
   Insn 549(l0): point = 1002
   Insn 548(l0): point = 1004
   Insn 547(l0): point = 1006
   Insn 546(l0): point = 1008
   Insn 545(l0): point = 1010
   Insn 544(l0): point = 1012
   Insn 543(l0): point = 1014
   Insn 542(l0): point = 1016
   Insn 541(l0): point = 1018
   Insn 540(l0): point = 1020
   Insn 597(l0): point = 1023
   Insn 596(l0): point = 1025
   Insn 595(l0): point = 1027
   Insn 594(l0): point = 1029
   Insn 593(l0): point = 1031
   Insn 592(l0): point = 1033
   Insn 120(l0): point = 1036
   Insn 119(l0): point = 1038
   Insn 118(l0): point = 1040
   Insn 117(l0): point = 1042
   Insn 116(l0): point = 1044
   Insn 115(l0): point = 1046
   Insn 114(l0): point = 1048
   Insn 113(l0): point = 1050
   Insn 112(l0): point = 1052
   Insn 111(l0): point = 1054
   Insn 110(l0): point = 1056
   Insn 109(l0): point = 1058
   Insn 108(l0): point = 1060
   Insn 107(l0): point = 1062
   Insn 106(l0): point = 1064
   Insn 105(l0): point = 1066
   Insn 104(l0): point = 1068
   Insn 103(l0): point = 1070
   Insn 102(l0): point = 1072
   Insn 101(l0): point = 1074
   Insn 100(l0): point = 1076
   Insn 99(l0): point = 1078
   Insn 98(l0): point = 1080
   Insn 97(l0): point = 1082
   Insn 96(l0): point = 1084
   Insn 95(l0): point = 1086
   Insn 94(l0): point = 1088
   Insn 93(l0): point = 1090
   Insn 92(l0): point = 1092
   Insn 91(l0): point = 1094
   Insn 90(l0): point = 1096
   Insn 89(l0): point = 1098
   Insn 88(l0): point = 1100
   Insn 87(l0): point = 1102
   Insn 86(l0): point = 1104
   Insn 85(l0): point = 1106
   Insn 84(l0): point = 1108
   Insn 83(l0): point = 1110
   Insn 80(l0): point = 1113
   Insn 696(l0): point = 1116
   Insn 75(l0): point = 1118
   Insn 73(l0): point = 1121
   Insn 72(l0): point = 1123
   Insn 71(l0): point = 1125
   Insn 70(l0): point = 1127
   Insn 69(l0): point = 1129
   Insn 68(l0): point = 1131
   Insn 67(l0): point = 1133
   Insn 66(l0): point = 1135
   Insn 65(l0): point = 1137
   Insn 64(l0): point = 1139
   Insn 63(l0): point = 1141
   Insn 62(l0): point = 1143
   Insn 61(l0): point = 1145
   Insn 60(l0): point = 1147
   Insn 59(l0): point = 1149
   Insn 58(l0): point = 1151
   Insn 57(l0): point = 1153
   Insn 56(l0): point = 1155
   Insn 55(l0): point = 1157
   Insn 54(l0): point = 1159
   Insn 53(l0): point = 1161
   Insn 52(l0): point = 1163
   Insn 51(l0): point = 1165
   Insn 50(l0): point = 1167
   Insn 49(l0): point = 1169
   Insn 48(l0): point = 1171
   Insn 47(l0): point = 1173
   Insn 46(l0): point = 1175
   Insn 45(l0): point = 1177
   Insn 44(l0): point = 1179
   Insn 43(l0): point = 1181
   Insn 42(l0): point = 1183
   Insn 41(l0): point = 1185
   Insn 40(l0): point = 1187
   Insn 39(l0): point = 1189
   Insn 38(l0): point = 1191
   Insn 37(l0): point = 1193
   Insn 36(l0): point = 1195
   Insn 35(l0): point = 1197
   Insn 34(l0): point = 1199
   Insn 33(l0): point = 1201
   Insn 32(l0): point = 1203
   Insn 31(l0): point = 1205
   Insn 30(l0): point = 1207
   Insn 29(l0): point = 1209
   Insn 28(l0): point = 1211
   Insn 27(l0): point = 1213
   Insn 26(l0): point = 1215
   Insn 25(l0): point = 1217
   Insn 24(l0): point = 1219
   Insn 23(l0): point = 1221
   Insn 22(l0): point = 1223
   Insn 21(l0): point = 1225
   Insn 20(l0): point = 1227
   Insn 19(l0): point = 1229
   Insn 18(l0): point = 1231
   Insn 17(l0): point = 1233
   Insn 16(l0): point = 1235
   Insn 15(l0): point = 1237
   Insn 14(l0): point = 1239
   Insn 13(l0): point = 1241
   Insn 12(l0): point = 1243
   Insn 11(l0): point = 1245
   Insn 10(l0): point = 1247
   Insn 9(l0): point = 1249
   Insn 8(l0): point = 1251
   Insn 7(l0): point = 1253
   Insn 6(l0): point = 1255
   Insn 2(l0): point = 1257
 a0(r230): [3..4]
 a1(r229): [5..9]
 a2(r228): [102..103]
 a3(r227): [104..105]
 a4(r226): [114..115]
 a5(r225): [38..41]
 a6(r224): [46..49]
 a7(r223): [55..58]
 a8(r222): [64..65]
 a9(r302): [70..71]
 a10(r221): [121..122]
 a11(r220): [127..128]
 a12(r301): [133..134]
 a13(r300): [139..140]
 a14(r219): [144..145]
 a15(r218): [148..149]
 a16(r299): [157..158]
 a17(r298): [163..164]
 a18(r217): [170..171]
 a19(r216): [176..179]
 a20(r215): [180..181]
 a21(r297): [1026..1027]
 a22(r296): [1032..1033]
 a23(r214): [187..188]
 a24(r213): [193..196]
 a25(r212): [197..198]
 a26(r295): [203..204]
 a27(r294): [209..210]
 a28(r293): [215..216]
 a29(r292): [221..222]
 a30(r291): [967..968]
 a31(r211): [973..978]
 a32(r210): [989..994]
 a33(r209): [999..1004]
 a34(r208): [1001..1006]
 a35(r207): [1003..1008]
 a36(r290): [1013..1014]
 a37(r289): [1019..1020]
 a38(r206): [228..229]
 a39(r288): [950..957]
 a40(r287): [956..959]
 a41(r205): [941..942]
 a42(r286): [732..733]
 a43(r285): [738..739]
 a44(r204): [744..749]
 a45(r203): [760..765]
 a46(r202): [770..775]
 a47(r201): [772..777]
 a48(r199): [774..781]
 a49(r200): [778..779]
 a50(r198): [782..783]
 a51(r197): [793..794]
 a52(r196): [795..796]
 a53(r195): [797..798]
 a54(r194): [799..800]
 a55(r193): [799..804]
 a56(r284): [801..802]
 a57(r192): [805..806]
 a58(r191): [807..808]
 a59(r189): [807..814]
 a60(r190): [809..810]
 a61(r283): [811..812]
 a62(r188): [831..836]
 a63(r187): [847..852]
 a64(r186): [858..859]
 a65(r185): [860..861]
 a66(r184): [862..863]
 a67(r183): [862..867]
 a68(r282): [864..865]
 a69(r182): [868..869]
 a70(r181): [870..871]
 a71(r179): [870..877]
 a72(r180): [872..873]
 a73(r281): [874..875]
 a74(r178): [883..884]
 a75(r177): [885..886]
 a76(r176): [887..888]
 a77(r175): [887..892]
 a78(r280): [889..890]
 a79(r174): [893..894]
 a80(r173): [895..896]
 a81(r171): [895..902]
 a82(r172): [897..898]
 a83(r279): [899..900]
 a84(r170): [907..916]
 a85(r278): [909..912]
 a86(r277): [911..914]
 a87(r276): [919..920]
 a88(r275): [925..926]
 a89(r274): [931..932]
 a90(r273): [707..708]
 a91(r272): [713..714]
 a92(r271): [717..718]
 a93(r169): [719..720]
 a94(r270): [723..724]
 a95(r168): [725..726]
 a96(r167): [694..695]
 a97(r166): [696..697]
 a98(r269): [249..250]
 a99(r268): [255..256]
 a100(r165): [261..266]
 a101(r164): [263..268]
 a102(r162): [265..272]
 a103(r163): [269..270]
 a104(r161): [273..274]
 a105(r160): [649..654]
 a106(r159): [665..670]
 a107(r158): [675..680]
 a108(r157): [677..682]
 a109(r155): [679..686]
 a110(r156): [683..684]
 a111(r154): [687..688]
 a112(r153): [280..281]
 a113(r152): [286..289]
 a114(r151): [290..291]
 a115(r267): [440..441]
 a116(r266): [446..447]
 a117(r150): [452..457]
 a118(r149): [468..473]
 a119(r148): [478..483]
 a120(r147): [480..485]
 a121(r145): [482..489]
 a122(r146): [486..487]
 a123(r144): [490..491]
 a124(r143): [501..502]
 a125(r142): [503..504]
 a126(r141): [505..506]
 a127(r140): [507..508]
 a128(r139): [507..512]
 a129(r265): [509..510]
 a130(r138): [513..514]
 a131(r137): [515..516]
 a132(r135): [515..522]
 a133(r136): [517..518]
 a134(r264): [519..520]
 a135(r134): [539..544]
 a136(r133): [555..560]
 a137(r132): [566..567]
 a138(r131): [568..569]
 a139(r130): [570..571]
 a140(r129): [570..575]
 a141(r263): [572..573]
 a142(r128): [576..577]
 a143(r127): [578..579]
 a144(r125): [578..585]
 a145(r126): [580..581]
 a146(r262): [582..583]
 a147(r124): [591..592]
 a148(r123): [593..594]
 a149(r122): [595..596]
 a150(r121): [595..600]
 a151(r261): [597..598]
 a152(r120): [601..602]
 a153(r119): [603..604]
 a154(r117): [603..610]
 a155(r118): [605..606]
 a156(r260): [607..608]
 a157(r116): [615..624]
 a158(r259): [617..620]
 a159(r258): [619..622]
 a160(r257): [627..628]
 a161(r256): [633..634]
 a162(r255): [639..640]
 a163(r254): [425..426]
 a164(r115): [427..428]
 a165(r253): [431..432]
 a166(r114): [433..434]
 a167(r252): [306..307]
 a168(r251): [312..313]
 a169(r113): [318..323]
 a170(r112): [334..339]
 a171(r111): [344..349]
 a172(r110): [346..351]
 a173(r108): [348..355]
 a174(r109): [352..353]
 a175(r107): [356..357]
 a176(r250): [362..363]
 a177(r106): [369..370]
 a178(r105): [398..403]
 a179(r104): [400..405]
 a180(r103): [402..413]
 a181(r249): [406..407]
 a182(r247): [408..409]
 a183(r248): [410..411]
 a184(r245): [414..415]
 a185(r246): [416..417]
 a186(r102): [379..380]
 a187(r244): [381..382]
 a188(r242): [383..384]
 a189(r243): [385..386]
 a190(r101): [81..82]
 a191(r99): [87..90]
 a192(r100): [87..88]
 a193(r97): [93..96]
 a194(r98): [93..94]
 a195(r241): [1037..1038]
 a196(r240): [1043..1044]
 a197(r95): [1047..1052]
 a198(r96): [1047..1048]
 a199(r93): [1055..1060]
 a200(r94): [1055..1056]
 a201(r92): [1063..1064]
 a202(r91): [1071..1072]
 a203(r90): [1081..1082]
 a204(r239): [1087..1088]
 a205(r89): [1091..1092]
 a206(r88): [1107..1108]
 a207(r87): [1124..1125]
 a208(r238): [1130..1135]
 a209(r237): [1138..1139]
 a210(r236): [1150..1151]
 a211(r235): [1166..1167]
 a212(r234): [1182..1183]
 a213(r233): [1198..1199]
 a214(r232): [1214..1215]
 a215(r231): [1230..1231]
Compressing live ranges: from 1260 to 362 - 28%
Ranges after the compression:
 a0(r230): [0..1]
 a1(r229): [2..3]
 a2(r228): [20..21]
 a3(r227): [22..23]
 a4(r226): [24..25]
 a5(r225): [4..5]
 a6(r224): [6..7]
 a7(r223): [8..9]
 a8(r222): [10..11]
 a9(r302): [12..13]
 a10(r221): [26..27]
 a11(r220): [28..29]
 a12(r301): [30..31]
 a13(r300): [32..33]
 a14(r219): [34..35]
 a15(r218): [36..37]
 a16(r299): [38..39]
 a17(r298): [40..41]
 a18(r217): [42..43]
 a19(r216): [44..45]
 a20(r215): [46..47]
 a21(r297): [320..321]
 a22(r296): [322..323]
 a23(r214): [48..49]
 a24(r213): [50..51]
 a25(r212): [52..53]
 a26(r295): [54..55]
 a27(r294): [56..57]
 a28(r293): [58..59]
 a29(r292): [60..61]
 a30(r291): [308..309]
 a31(r211): [310..311]
 a32(r210): [312..313]
 a33(r209): [314..315]
 a34(r208): [314..315]
 a35(r207): [314..315]
 a36(r290): [316..317]
 a37(r289): [318..319]
 a38(r206): [62..63]
 a39(r288): [306..307]
 a40(r287): [306..307]
 a41(r205): [304..305]
 a42(r286): [228..229]
 a43(r285): [230..231]
 a44(r204): [232..233]
 a45(r203): [234..235]
 a46(r202): [236..237]
 a47(r201): [236..237]
 a48(r199): [236..239]
 a49(r200): [238..239]
 a50(r198): [240..241]
 a51(r197): [242..243]
 a52(r196): [244..245]
 a53(r195): [246..247]
 a54(r194): [248..249]
 a55(r193): [248..251]
 a56(r284): [250..251]
 a57(r192): [252..253]
 a58(r191): [254..255]
 a59(r189): [254..259]
 a60(r190): [256..257]
 a61(r283): [258..259]
 a62(r188): [260..261]
 a63(r187): [262..263]
 a64(r186): [264..265]
 a65(r185): [266..267]
 a66(r184): [268..269]
 a67(r183): [268..271]
 a68(r282): [270..271]
 a69(r182): [272..273]
 a70(r181): [274..275]
 a71(r179): [274..279]
 a72(r180): [276..277]
 a73(r281): [278..279]
 a74(r178): [280..281]
 a75(r177): [282..283]
 a76(r176): [284..285]
 a77(r175): [284..287]
 a78(r280): [286..287]
 a79(r174): [288..289]
 a80(r173): [290..291]
 a81(r171): [290..295]
 a82(r172): [292..293]
 a83(r279): [294..295]
 a84(r170): [296..297]
 a85(r278): [296..297]
 a86(r277): [296..297]
 a87(r276): [298..299]
 a88(r275): [300..301]
 a89(r274): [302..303]
 a90(r273): [216..217]
 a91(r272): [218..219]
 a92(r271): [220..221]
 a93(r169): [222..223]
 a94(r270): [224..225]
 a95(r168): [226..227]
 a96(r167): [212..213]
 a97(r166): [214..215]
 a98(r269): [64..65]
 a99(r268): [66..67]
 a100(r165): [68..69]
 a101(r164): [68..69]
 a102(r162): [68..71]
 a103(r163): [70..71]
 a104(r161): [72..73]
 a105(r160): [202..203]
 a106(r159): [204..205]
 a107(r158): [206..207]
 a108(r157): [206..207]
 a109(r155): [206..209]
 a110(r156): [208..209]
 a111(r154): [210..211]
 a112(r153): [74..75]
 a113(r152): [76..77]
 a114(r151): [78..79]
 a115(r267): [126..127]
 a116(r266): [128..129]
 a117(r150): [130..131]
 a118(r149): [132..133]
 a119(r148): [134..135]
 a120(r147): [134..135]
 a121(r145): [134..137]
 a122(r146): [136..137]
 a123(r144): [138..139]
 a124(r143): [140..141]
 a125(r142): [142..143]
 a126(r141): [144..145]
 a127(r140): [146..147]
 a128(r139): [146..149]
 a129(r265): [148..149]
 a130(r138): [150..151]
 a131(r137): [152..153]
 a132(r135): [152..157]
 a133(r136): [154..155]
 a134(r264): [156..157]
 a135(r134): [158..159]
 a136(r133): [160..161]
 a137(r132): [162..163]
 a138(r131): [164..165]
 a139(r130): [166..167]
 a140(r129): [166..169]
 a141(r263): [168..169]
 a142(r128): [170..171]
 a143(r127): [172..173]
 a144(r125): [172..177]
 a145(r126): [174..175]
 a146(r262): [176..177]
 a147(r124): [178..179]
 a148(r123): [180..181]
 a149(r122): [182..183]
 a150(r121): [182..185]
 a151(r261): [184..185]
 a152(r120): [186..187]
 a153(r119): [188..189]
 a154(r117): [188..193]
 a155(r118): [190..191]
 a156(r260): [192..193]
 a157(r116): [194..195]
 a158(r259): [194..195]
 a159(r258): [194..195]
 a160(r257): [196..197]
 a161(r256): [198..199]
 a162(r255): [200..201]
 a163(r254): [118..119]
 a164(r115): [120..121]
 a165(r253): [122..123]
 a166(r114): [124..125]
 a167(r252): [80..81]
 a168(r251): [82..83]
 a169(r113): [84..85]
 a170(r112): [86..87]
 a171(r111): [88..89]
 a172(r110): [88..89]
 a173(r108): [88..91]
 a174(r109): [90..91]
 a175(r107): [92..93]
 a176(r250): [94..95]
 a177(r106): [96..97]
 a178(r105): [106..107]
 a179(r104): [106..107]
 a180(r103): [106..113]
 a181(r249): [108..109]
 a182(r247): [110..111]
 a183(r248): [112..113]
 a184(r245): [114..115]
 a185(r246): [116..117]
 a186(r102): [98..99]
 a187(r244): [100..101]
 a188(r242): [102..103]
 a189(r243): [104..105]
 a190(r101): [14..15]
 a191(r99): [16..17]
 a192(r100): [16..17]
 a193(r97): [18..19]
 a194(r98): [18..19]
 a195(r241): [324..325]
 a196(r240): [326..327]
 a197(r95): [328..329]
 a198(r96): [328..329]
 a199(r93): [330..331]
 a200(r94): [330..331]
 a201(r92): [332..333]
 a202(r91): [334..335]
 a203(r90): [336..337]
 a204(r239): [338..339]
 a205(r89): [340..341]
 a206(r88): [342..343]
 a207(r87): [344..345]
 a208(r238): [346..347]
 a209(r237): [348..349]
 a210(r236): [350..351]
 a211(r235): [352..353]
 a212(r234): [354..355]
 a213(r233): [356..357]
 a214(r232): [358..359]
 a215(r231): [360..361]
  pref0:a9(r302)<-hr5@500
  pref1:a12(r301)<-hr5@500
  pref2:a13(r300)<-hr5@500
  pref3:a16(r299)<-hr5@500
  pref4:a17(r298)<-hr5@500
  pref5:a21(r297)<-hr5@500
  pref6:a22(r296)<-hr5@500
  pref7:a26(r295)<-hr5@500
  pref8:a27(r294)<-hr5@500
  pref9:a28(r293)<-hr5@500
  pref10:a29(r292)<-hr5@500
  pref11:a30(r291)<-hr5@500
  pref12:a36(r290)<-hr5@500
  pref13:a37(r289)<-hr5@500
  pref14:a39(r288)<-hr5@500
  pref15:a40(r287)<-hr2@500
  pref16:a42(r286)<-hr5@500
  pref17:a43(r285)<-hr5@500
  pref18:a85(r278)<-hr4@500
  pref19:a86(r277)<-hr1@500
  pref20:a87(r276)<-hr0@500
  pref21:a88(r275)<-hr5@500
  pref22:a89(r274)<-hr5@500
  pref23:a90(r273)<-hr5@500
  pref24:a91(r272)<-hr5@500
  pref25:a98(r269)<-hr5@500
  pref26:a99(r268)<-hr5@500
  pref27:a115(r267)<-hr5@500
  pref28:a116(r266)<-hr5@500
  pref29:a158(r259)<-hr4@500
  pref30:a159(r258)<-hr1@500
  pref31:a160(r257)<-hr0@500
  pref32:a161(r256)<-hr5@500
  pref33:a162(r255)<-hr5@500
  pref34:a167(r252)<-hr5@500
  pref35:a168(r251)<-hr5@500
  pref36:a176(r250)<-hr5@500
  pref37:a196(r240)<-hr5@500
  pref38:a204(r239)<-hr5@500
  pref39:a208(r238)<-hr5@500
  pref40:a210(r236)<-hr0@500
  pref41:a211(r235)<-hr0@500
  pref42:a212(r234)<-hr0@500
  pref43:a213(r233)<-hr0@500
  pref44:a214(r232)<-hr0@500
  pref45:a215(r231)<-hr0@500
  pref46:a0(r230)<-hr0@500
  pref47:a4(r226)<-hr5@500
  pref48:a5(r225)<-hr5@500
  pref49:a6(r224)<-hr5@500
  pref50:a7(r223)<-hr5@500
  pref51:a11(r220)<-hr5@500
  pref52:a18(r217)<-hr0@500
  pref53:a19(r216)<-hr5@500
  pref54:a23(r214)<-hr0@500
  pref55:a24(r213)<-hr5@500
  pref56:a31(r211)<-hr5@500
  pref57:a32(r210)<-hr5@500
  pref58:a33(r209)<-hr5@500
  pref59:a34(r208)<-hr4@500
  pref60:a35(r207)<-hr1@500
  pref61:a44(r204)<-hr5@500
  pref62:a45(r203)<-hr5@500
  pref63:a46(r202)<-hr5@500
  pref64:a47(r201)<-hr4@500
  pref65:a48(r199)<-hr1@500
  pref66:a51(r197)<-hr4@500
  pref67:a62(r188)<-hr5@500
  pref68:a63(r187)<-hr5@500
  pref69:a84(r170)<-hr5@500
  pref70:a100(r165)<-hr5@500
  pref71:a101(r164)<-hr4@500
  pref72:a102(r162)<-hr1@500
  pref73:a105(r160)<-hr5@500
  pref74:a106(r159)<-hr5@500
  pref75:a107(r158)<-hr5@500
  pref76:a108(r157)<-hr4@500
  pref77:a109(r155)<-hr1@500
  pref78:a112(r153)<-hr0@500
  pref79:a113(r152)<-hr5@500
  pref80:a117(r150)<-hr5@500
  pref81:a118(r149)<-hr5@500
  pref82:a119(r148)<-hr5@500
  pref83:a120(r147)<-hr4@500
  pref84:a121(r145)<-hr1@500
  pref85:a124(r143)<-hr4@500
  pref86:a135(r134)<-hr5@500
  pref87:a136(r133)<-hr5@500
  pref88:a157(r116)<-hr5@500
  pref89:a169(r113)<-hr5@500
  pref90:a170(r112)<-hr5@500
  pref91:a171(r111)<-hr5@500
  pref92:a172(r110)<-hr4@500
  pref93:a173(r108)<-hr1@500
  pref94:a178(r105)<-hr5@500
  pref95:a179(r104)<-hr4@500
  pref96:a180(r103)<-hr1@500
  pref97:a190(r101)<-hr5@500
  pref98:a198(r96)<-hr0@500
  pref99:a200(r94)<-hr0@500
  pref100:a201(r92)<-hr0@500
  pref101:a202(r91)<-hr0@500
  pref102:a203(r90)<-hr5@500
  pref103:a205(r89)<-hr0@500
  pref104:a206(r88)<-hr0@500
  pref105:a207(r87)<-hr0@500
  regions=1, blocks=50, points=362
    allocnos=216 (big 0), copies=0, conflicts=0, ranges=216
Disposition:
  207:r87  l0     0  206:r88  l0     0  205:r89  l0     0  203:r90  l0     0
  202:r91  l0     0  201:r92  l0     0  199:r93  l0     3  200:r94  l0     0
  197:r95  l0     3  198:r96  l0     0  193:r97  l0     0  194:r98  l0     1
  191:r99  l0     0  192:r100 l0     1  190:r101 l0     0  186:r102 l0     0
  180:r103 l0     1  179:r104 l0     2  178:r105 l0     0  177:r106 l0     0
  175:r107 l0     0  173:r108 l0     1  174:r109 l0     0  172:r110 l0     2
  171:r111 l0     0  170:r112 l0     0  169:r113 l0     0  166:r114 l0     0
  164:r115 l0     0  157:r116 l0     0  154:r117 l0     0  155:r118 l0     1
  153:r119 l0     1  152:r120 l0     0  150:r121 l0     1  149:r122 l0     0
  148:r123 l0     0  147:r124 l0     0  144:r125 l0     0  145:r126 l0     1
  143:r127 l0     1  142:r128 l0     0  140:r129 l0     1  139:r130 l0     0
  138:r131 l0     0  137:r132 l0     0  136:r133 l0     0  135:r134 l0     0
  132:r135 l0     0  133:r136 l0     1  131:r137 l0     1  130:r138 l0     0
  128:r139 l0     1  127:r140 l0     0  126:r141 l0     0  125:r142 l0     0
  124:r143 l0     0  123:r144 l0     0  121:r145 l0     1  122:r146 l0     0
  120:r147 l0     2  119:r148 l0     0  118:r149 l0     0  117:r150 l0     0
  114:r151 l0     0  113:r152 l0     0  112:r153 l0     0  111:r154 l0     0
  109:r155 l0     1  110:r156 l0     0  108:r157 l0     2  107:r158 l0     0
  106:r159 l0     0  105:r160 l0     0  104:r161 l0     0  102:r162 l0     1
  103:r163 l0     0  101:r164 l0     2  100:r165 l0     0   97:r166 l0     0
   96:r167 l0     0   95:r168 l0     0   93:r169 l0     0   84:r170 l0     0
   81:r171 l0     0   82:r172 l0     1   80:r173 l0     1   79:r174 l0     0
   77:r175 l0     1   76:r176 l0     0   75:r177 l0     0   74:r178 l0     0
   71:r179 l0     0   72:r180 l0     1   70:r181 l0     1   69:r182 l0     0
   67:r183 l0     1   66:r184 l0     0   65:r185 l0     0   64:r186 l0     0
   63:r187 l0     0   62:r188 l0     0   59:r189 l0     0   60:r190 l0     1
   58:r191 l0     1   57:r192 l0     0   55:r193 l0     1   54:r194 l0     0
   53:r195 l0     0   52:r196 l0     0   51:r197 l0     0   50:r198 l0     0
   48:r199 l0     1   49:r200 l0     0   47:r201 l0     2   46:r202 l0     0
   45:r203 l0     0   44:r204 l0     0   41:r205 l0     0   38:r206 l0     0
   35:r207 l0     1   34:r208 l0     2   33:r209 l0     0   32:r210 l0     0
   31:r211 l0     0   25:r212 l0     0   24:r213 l0     0   23:r214 l0     0
   20:r215 l0     0   19:r216 l0     0   18:r217 l0     0   15:r218 l0     0
   14:r219 l0     0   11:r220 l0     0   10:r221 l0     0    8:r222 l0     0
    7:r223 l0     0    6:r224 l0     0    5:r225 l0     0    4:r226 l0     0
    3:r227 l0     0    2:r228 l0     0    1:r229 l0     0    0:r230 l0     0
  215:r231 l0     0  214:r232 l0     0  213:r233 l0     0  212:r234 l0     0
  211:r235 l0     0  210:r236 l0     0  209:r237 l0     0  208:r238 l0     0
  204:r239 l0     0  196:r240 l0     0  195:r241 l0     0  188:r242 l0     0
  189:r243 l0     0  187:r244 l0     0  184:r245 l0     0  185:r246 l0     0
  182:r247 l0     0  183:r248 l0     0  181:r249 l0     0  176:r250 l0     0
  168:r251 l0     0  167:r252 l0     0  165:r253 l0     0  163:r254 l0     0
  162:r255 l0     0  161:r256 l0     0  160:r257 l0     0  159:r258 l0     1
  158:r259 l0     2  156:r260 l0     1  151:r261 l0     0  146:r262 l0     1
  141:r263 l0     0  134:r264 l0     1  129:r265 l0     0  116:r266 l0     0
  115:r267 l0     0   99:r268 l0     0   98:r269 l0     0   94:r270 l0     0
   92:r271 l0     0   91:r272 l0     0   90:r273 l0     0   89:r274 l0     0
   88:r275 l0     0   87:r276 l0     0   86:r277 l0     1   85:r278 l0     2
   83:r279 l0     1   78:r280 l0     0   73:r281 l0     1   68:r282 l0     0
   61:r283 l0     1   56:r284 l0     0   43:r285 l0     0   42:r286 l0     0
   40:r287 l0     1   39:r288 l0     0   37:r289 l0     0   36:r290 l0     0
   30:r291 l0     0   29:r292 l0     0   28:r293 l0     0   27:r294 l0     0
   26:r295 l0     0   22:r296 l0     0   21:r297 l0     0   17:r298 l0     0
   16:r299 l0     0   13:r300 l0     0   12:r301 l0     0    9:r302 l0     0
+++Costs: overall -106000, reg -106000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


serwer_serwer

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={119d,39u} r1={131d,32u} r2={106d,7u} r4={139d,40u} r5={193d,95u} r6={1d,49u} r7={1d,147u} r8={98d} r9={98d} r10={98d} r11={98d} r12={98d} r13={98d} r14={98d} r15={98d} r16={1d,48u} r17={171d,22u} r18={98d} r19={98d} r20={1d,198u} r21={99d} r22={99d} r23={99d} r24={99d} r25={99d} r26={99d} r27={99d} r28={99d} r29={98d} r30={98d} r31={98d} r32={98d} r33={98d} r34={98d} r35={98d} r36={98d} r37={99d} r38={99d} r39={98d} r40={98d} r45={98d} r46={98d} r47={98d} r48={98d} r49={98d} r50={98d} r51={98d} r52={98d} r53={98d} r54={98d} r55={98d} r56={98d} r57={98d} r58={98d} r59={98d} r60={98d} r61={98d} r62={98d} r63={98d} r64={98d} r65={98d} r66={98d} r67={98d} r68={98d} r69={98d} r70={98d} r71={98d} r72={98d} r73={98d} r74={98d} r75={98d} r76={98d} r77={98d} r78={98d} r79={98d} r80={98d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u} 
;;    total ref usage 8450{7557d,893u,0e} in 606{508 regular + 98 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 231 232 233 234 235 236 237 238
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36216 [0xffffffffffff7288])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":313 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ pom ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 bestia_licznik+0 S4 A32])
        (const_int 0 [0])) "function.c":314 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 b1+0 S4 A32])
        (const_int 0 [0])) "function.c":315 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 b2+0 S4 A32])
        (const_int 0 [0])) "function.c":316 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":317 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])
        (const_int 0 [0])) "function.c":318 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 licznik+0 S4 A32])
        (const_int 0 [0])) "function.c":319 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":324 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":324 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":324 86 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f7cd0f0d1b0 *.LC34>)) "function.c":324 85 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":324 88 {*movqi_internal}
     (nil))
(call_insn 17 16 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":324 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 18 17 19 2 (set (reg:DI 231)
        (reg:DI 0 ax)) "function.c":324 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 19 18 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_p1+0 S8 A64])
        (reg:DI 231)) "function.c":324 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 231)
        (nil)))
(insn 20 19 21 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":325 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":325 86 {*movsi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":325 86 {*movsi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f7cd0f0d240 *.LC35>)) "function.c":325 85 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":325 88 {*movqi_internal}
     (nil))
(call_insn 25 24 26 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":325 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 26 25 27 2 (set (reg:DI 232)
        (reg:DI 0 ax)) "function.c":325 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 27 26 28 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [18 sem_p1_pom+0 S8 A64])
        (reg:DI 232)) "function.c":325 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 232)
        (nil)))
(insn 28 27 29 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":327 86 {*movsi_internal}
     (nil))
(insn 29 28 30 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":327 86 {*movsi_internal}
     (nil))
(insn 30 29 31 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":327 86 {*movsi_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":327 85 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":327 88 {*movqi_internal}
     (nil))
(call_insn 33 32 34 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":327 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 34 33 35 2 (set (reg:DI 233)
        (reg:DI 0 ax)) "function.c":327 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 35 34 36 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [18 sem_p2+0 S8 A64])
        (reg:DI 233)) "function.c":327 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 233)
        (nil)))
(insn 36 35 37 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":328 86 {*movsi_internal}
     (nil))
(insn 37 36 38 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":328 86 {*movsi_internal}
     (nil))
(insn 38 37 39 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":328 86 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f7cd0f0d360 *.LC37>)) "function.c":328 85 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":328 88 {*movqi_internal}
     (nil))
(call_insn 41 40 42 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":328 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 42 41 43 2 (set (reg:DI 234)
        (reg:DI 0 ax)) "function.c":328 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 43 42 44 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [18 sem_p2_pom+0 S8 A64])
        (reg:DI 234)) "function.c":328 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 234)
        (nil)))
(insn 44 43 45 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":330 86 {*movsi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":330 86 {*movsi_internal}
     (nil))
(insn 46 45 47 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":330 86 {*movsi_internal}
     (nil))
(insn 47 46 48 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f7cd0ef3870 *.LC32>)) "function.c":330 85 {*movdi_internal}
     (nil))
(insn 48 47 49 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":330 88 {*movqi_internal}
     (nil))
(call_insn 49 48 50 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":330 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 50 49 51 2 (set (reg:DI 235)
        (reg:DI 0 ax)) "function.c":330 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 51 50 52 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [18 sem_bestia1+0 S8 A64])
        (reg:DI 235)) "function.c":330 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 235)
        (nil)))
(insn 52 51 53 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":331 86 {*movsi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":331 86 {*movsi_internal}
     (nil))
(insn 54 53 55 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":331 86 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f7cd0ef3900 *.LC33>)) "function.c":331 85 {*movdi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":331 88 {*movqi_internal}
     (nil))
(call_insn 57 56 58 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":331 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 58 57 59 2 (set (reg:DI 236)
        (reg:DI 0 ax)) "function.c":331 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 59 58 60 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [18 sem_bestia2+0 S8 A64])
        (reg:DI 236)) "function.c":331 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 236)
        (nil)))
(insn 60 59 61 2 (set (reg:SI 1 dx)
        (const_int 5 [0x5])) "function.c":334 86 {*movsi_internal}
     (nil))
(insn 61 60 62 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":334 86 {*movsi_internal}
     (nil))
(insn 62 61 63 2 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "function.c":334 86 {*movsi_internal}
     (nil))
(call_insn 63 62 64 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":334 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 64 63 65 2 (set (reg/f:DI 237)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36216 [0xffffffffffff7288])) [19 pom+0 S8 A64])) "function.c":338 85 {*movdi_internal}
     (nil))
(insn 65 64 66 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [10 q+0 S8 A64])
        (reg/f:DI 237)) "function.c":338 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 237)
        (nil)))
(insn 66 65 67 2 (set (reg:DI 238)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -88 [0xffffffffffffffa8])) [10 q+0 S8 A64])) "function.c":340 85 {*movdi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:DI 1 dx)
        (const_int 6 [0x6])) "function.c":340 85 {*movdi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":340 85 {*movdi_internal}
     (nil))
(insn 69 68 70 2 (set (reg:DI 5 di)
        (reg:DI 238)) "function.c":340 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 238)
        (nil)))
(call_insn/i 70 69 71 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcmp") [flags 0x41]  <function_decl 0x7f7cd1238000 memcmp>) [0 __builtin_memcmp S1 A8])
            (const_int 0 [0]))) "function.c":340 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 71 70 72 2 (set (reg:SI 87 [ _1 ])
        (reg:SI 0 ax)) "function.c":340 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 72 71 73 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 0 [0]))) "function.c":340 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(jump_insn 73 72 74 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) "function.c":340 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 78)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 74 73 75 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 696 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36168 [0xffffffffffff72b8])) [3 serwerinfo.pom+0 S4 A64])
        (const_int 1 [0x1])) "function.c":342 86 {*movsi_internal}
     (nil))
(jump_insn 696 75 697 3 (set (pc)
        (label_ref 81)) 683 {jump}
     (nil)
 -> 81)
;;  succ:       5 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 697 696 78)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 78 697 79 4 46 (nil) [1 uses])
(note 79 78 80 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36168 [0xffffffffffff72b8])) [3 serwerinfo.pom+0 S4 A64])
        (const_int 2 [0x2])) "function.c":346 86 {*movsi_internal}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88 89 90 91 92 93 94 95 96 239 240 241
(code_label 81 80 82 5 47 (nil) [1 uses])
(note 82 81 83 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 83 82 84 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":349 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 84 83 85 5 (set (reg:SI 88 [ _2 ])
        (reg:SI 0 ax)) "function.c":349 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 85 84 86 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36192 [0xffffffffffff72a0])) [3 serwerinfo.PID+0 S4 A64])
        (reg:SI 88 [ _2 ])) "function.c":349 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(insn 86 85 87 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36180 [0xffffffffffff72ac])) [3 serwerinfo.runda+0 S4 A32])
        (const_int 0 [0])) "function.c":350 86 {*movsi_internal}
     (nil))
(insn 87 86 88 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28144 [0xffffffffffff9210])) [3 serwerinfo.skarb.count_one_coin+0 S4 A64])
        (const_int 0 [0])) "function.c":352 86 {*movsi_internal}
     (nil))
(insn 88 87 89 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20140 [0xffffffffffffb154])) [3 serwerinfo.skarb.count_treasure_coin+0 S4 A32])
        (const_int 0 [0])) "function.c":353 86 {*movsi_internal}
     (nil))
(insn 89 88 90 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12136 [0xffffffffffffd098])) [3 serwerinfo.skarb.count_large_treasure_coin+0 S4 A64])
        (const_int 0 [0])) "function.c":354 86 {*movsi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":356 88 {*movqi_internal}
     (nil))
(call_insn 91 90 92 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pobierz_plansze") [flags 0x3]  <function_decl 0x7f7cd1169600 pobierz_plansze>) [0 pobierz_plansze S1 A8])
            (const_int 0 [0]))) "function.c":356 700 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 92 91 93 5 (set (reg/f:DI 89 [ _3 ])
        (reg:DI 0 ax)) "function.c":356 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 93 92 94 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])
        (reg/f:DI 89 [ _3 ])) "function.c":356 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
        (nil)))
(insn 94 93 95 5 (parallel [
            (set (reg:DI 239)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":358 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 95 94 96 5 (set (reg:DI 5 di)
        (reg:DI 239)) "function.c":358 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 239)
        (nil)))
(call_insn 96 95 97 5 (call (mem:QI (symbol_ref:DI ("oboz_random") [flags 0x3]  <function_decl 0x7f7cd1178b00 oboz_random>) [0 oboz_random S1 A8])
        (const_int 0 [0])) "function.c":358 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 97 96 98 5 (set (reg/f:DI 90 [ _4 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":360 85 {*movdi_internal}
     (nil))
(insn 98 97 99 5 (set (reg:DI 5 di)
        (reg/f:DI 90 [ _4 ])) "function.c":360 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
        (nil)))
(call_insn 99 98 100 5 (call (mem:QI (symbol_ref:DI ("drukuj_plansze") [flags 0x3]  <function_decl 0x7f7cd1169700 drukuj_plansze>) [0 drukuj_plansze S1 A8])
        (const_int 0 [0])) "function.c":360 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f7cd0f0d1b0 *.LC34>)) "function.c":362 85 {*movdi_internal}
     (nil))
(call_insn 101 100 102 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("player_set") [flags 0x3]  <function_decl 0x7f7cd1169f00 player_set>) [0 player_set S1 A8])
            (const_int 0 [0]))) "function.c":362 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 102 101 103 5 (set (reg/f:DI 91 [ _5 ])
        (reg:DI 0 ax)) "function.c":362 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 103 102 104 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])
        (reg/f:DI 91 [ _5 ])) "function.c":362 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 104 103 105 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":363 85 {*movdi_internal}
     (nil))
(call_insn 105 104 106 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("player_set") [flags 0x3]  <function_decl 0x7f7cd1169f00 player_set>) [0 player_set S1 A8])
            (const_int 0 [0]))) "function.c":363 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 106 105 107 5 (set (reg/f:DI 92 [ _6 ])
        (reg:DI 0 ax)) "function.c":363 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 107 106 108 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])
        (reg/f:DI 92 [ _6 ])) "function.c":363 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _6 ])
        (nil)))
(insn 108 107 109 5 (set (reg/f:DI 93 [ _7 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":365 85 {*movdi_internal}
     (nil))
(call_insn 109 108 110 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":365 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 110 109 111 5 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "function.c":365 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 111 110 112 5 (set (mem:SI (plus:DI (reg/f:DI 93 [ _7 ])
                (const_int 4 [0x4])) [3 _7->PID_serwer+0 S4 A32])
        (reg:SI 94 [ _8 ])) "function.c":365 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
            (nil))))
(insn 112 111 113 5 (set (reg/f:DI 95 [ _9 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":366 85 {*movdi_internal}
     (nil))
(call_insn 113 112 114 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("getpid") [flags 0x41]  <function_decl 0x7f7cd0f8b200 getpid>) [0 getpid S1 A8])
            (const_int 0 [0]))) "function.c":366 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 114 113 115 5 (set (reg:SI 96 [ _10 ])
        (reg:SI 0 ax)) "function.c":366 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 115 114 116 5 (set (mem:SI (plus:DI (reg/f:DI 95 [ _9 ])
                (const_int 4 [0x4])) [3 _9->PID_serwer+0 S4 A32])
        (reg:SI 96 [ _10 ])) "function.c":366 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 96 [ _10 ])
        (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
            (nil))))
(insn 116 115 117 5 (parallel [
            (set (reg:DI 240)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":368 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 117 116 118 5 (set (reg:DI 5 di)
        (reg:DI 240)) "function.c":368 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 240)
        (nil)))
(call_insn 118 117 119 5 (call (mem:QI (symbol_ref:DI ("player_position_random") [flags 0x3]  <function_decl 0x7f7cd1178d00 player_position_random>) [0 player_position_random S1 A8])
        (const_int 0 [0])) "function.c":368 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 5 (parallel [
            (set (reg:DI 241)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":373 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 120 119 684 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36208 [0xffffffffffff7290])) [12 userinfo.serwer+0 S8 A64])
        (reg:DI 241)) "function.c":373 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 241)
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;;              48 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 97 98 99 100 101
(code_label 684 120 121 6 70 (nil) [1 uses])
(note 121 684 122 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 6 (set (reg/f:DI 97 [ _11 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":377 85 {*movdi_internal}
     (nil))
(insn 123 122 124 6 (set (reg:SI 98 [ _12 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36180 [0xffffffffffff72ac])) [3 serwerinfo.runda+0 S4 A32])) "function.c":377 86 {*movsi_internal}
     (nil))
(insn 124 123 125 6 (set (mem:SI (plus:DI (reg/f:DI 97 [ _11 ])
                (const_int 22552 [0x5818])) [3 _11->runda+0 S4 A64])
        (reg:SI 98 [ _12 ])) "function.c":377 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
            (nil))))
(insn 125 124 126 6 (set (reg/f:DI 99 [ _13 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":378 85 {*movdi_internal}
     (nil))
(insn 126 125 127 6 (set (reg:SI 100 [ _14 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36180 [0xffffffffffff72ac])) [3 serwerinfo.runda+0 S4 A32])) "function.c":378 86 {*movsi_internal}
     (nil))
(insn 127 126 128 6 (set (mem:SI (plus:DI (reg/f:DI 99 [ _13 ])
                (const_int 22552 [0x5818])) [3 _13->runda+0 S4 A64])
        (reg:SI 100 [ _14 ])) "function.c":378 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
            (nil))))
(insn 128 127 129 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36200 [0xffffffffffff7298])) [3 userinfo.user+0 S4 A64])
        (const_int 1 [0x1])) "function.c":387 86 {*movsi_internal}
     (nil))
(insn 129 128 130 6 (set (reg/f:DI 101 [ _15 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":389 85 {*movdi_internal}
     (nil))
(insn 130 129 131 6 (set (reg:DI 5 di)
        (reg/f:DI 101 [ _15 ])) "function.c":389 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(call_insn 131 130 132 6 (call (mem:QI (symbol_ref:DI ("drukuj_plansze") [flags 0x3]  <function_decl 0x7f7cd1169700 drukuj_plansze>) [0 drukuj_plansze S1 A8])
        (const_int 0 [0])) "function.c":389 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 132 131 698 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":393 86 {*movsi_internal}
     (nil))
(jump_insn 698 132 699 6 (set (pc)
        (label_ref 161)) "function.c":393 683 {jump}
     (nil)
 -> 161)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 699 698 164)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       10
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 242 243 244
(code_label 164 699 135 7 50 (nil) [1 uses])
(note 135 164 136 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 7 (set (reg:SI 243)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":395 86 {*movsi_internal}
     (nil))
(insn 137 136 138 7 (set (reg:DI 242)
        (sign_extend:DI (reg:SI 243))) "function.c":395 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 243)
        (nil)))
(insn 138 137 139 7 (parallel [
            (set (reg:DI 244)
                (plus:DI (reg:DI 242)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":395 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 242)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 139 138 140 7 (set (reg:SI 102 [ _16 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 244)
                        (const_int 4 [0x4]))
                    (reg/f:DI 20 frame))
                (const_int -36192 [0xffffffffffff72a0])) [3 serwerinfo.skarb.value_all_dropped_coin S4 A32])) "function.c":395 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 244)
        (nil)))
(insn 140 139 141 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 102 [ _16 ])
            (const_int -1 [0xffffffffffffffff]))) "function.c":395 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 102 [ _16 ])
        (nil)))
(jump_insn 141 140 142 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 158)
            (pc))) "function.c":395 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 158)
;;  succ:       8 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 103 104 105 245 246 247 248 249
(note 142 141 143 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 8 (set (reg:SI 246)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":397 86 {*movsi_internal}
     (nil))
(insn 144 143 145 8 (set (reg:DI 245)
        (sign_extend:DI (reg:SI 246))) "function.c":397 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 246)
        (nil)))
(insn 145 144 146 8 (set (reg:SI 103 [ _17 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 245)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -12124 [0xffffffffffffd0a4])) [3 serwerinfo.skarb.dropped_coin S4 A32])) "function.c":397 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 245)
        (nil)))
(insn 146 145 147 8 (set (reg:SI 248)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":397 86 {*movsi_internal}
     (nil))
(insn 147 146 148 8 (set (reg:DI 247)
        (sign_extend:DI (reg:SI 248))) "function.c":397 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 248)
        (nil)))
(insn 148 147 149 8 (parallel [
            (set (reg:DI 249)
                (plus:DI (reg:DI 247)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":397 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 247)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 149 148 150 8 (set (reg:SI 104 [ _18 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 249)
                        (const_int 8 [0x8]))
                    (reg/f:DI 20 frame))
                (const_int -36192 [0xffffffffffff72a0])) [3 serwerinfo.skarb.dropped_coin S4 A64])) "function.c":397 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 249)
        (nil)))
(insn 150 149 151 8 (set (reg/f:DI 105 [ stdscr.48_19 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":397 85 {*movdi_internal}
     (nil))
(insn 151 150 152 8 (set (reg:SI 1 dx)
        (reg:SI 103 [ _17 ])) "function.c":397 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 103 [ _17 ])
        (nil)))
(insn 152 151 153 8 (set (reg:SI 4 si)
        (reg:SI 104 [ _18 ])) "function.c":397 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 104 [ _18 ])
        (nil)))
(insn 153 152 154 8 (set (reg:DI 5 di)
        (reg/f:DI 105 [ stdscr.48_19 ])) "function.c":397 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ stdscr.48_19 ])
        (nil)))
(call_insn 154 153 155 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":397 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 155 154 156 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f7cd0ef3120 *.LC24>)) "function.c":398 85 {*movdi_internal}
     (nil))
(insn 156 155 157 8 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":398 88 {*movqi_internal}
     (nil))
(call_insn 157 156 158 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":398 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 158 157 159 9 49 (nil) [1 uses])
(note 159 158 160 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 9 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":393 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       10 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU,DFS_BACK)
;;              6 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106
(code_label 161 160 162 10 48 (nil) [1 uses])
(note 162 161 163 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 165 10 (set (reg:SI 106 [ _20 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12132 [0xffffffffffffd09c])) [3 serwerinfo.skarb.count_drop_coin+0 S4 A32])) "function.c":393 86 {*movsi_internal}
     (nil))
(insn 165 163 166 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
            (reg:SI 106 [ _20 ]))) "function.c":393 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 106 [ _20 ])
        (nil)))
(jump_insn 166 165 167 10 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 164)
            (pc))) "function.c":393 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 164)
;;  succ:       7
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 107 108 109 110 111 112 113 250 251 252
(note 167 166 168 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 11 (parallel [
            (set (reg:DI 250)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":409 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 169 168 170 11 (set (reg:DI 5 di)
        (reg:DI 250)) "function.c":409 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 250)
        (nil)))
(call_insn 170 169 171 11 (call (mem:QI (symbol_ref:DI ("skarbunio") [flags 0x3]  <function_decl 0x7f7cd0d1b000 skarbunio>) [0 skarbunio S1 A8])
        (const_int 0 [0])) "function.c":409 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 171 170 172 11 (set (reg/f:DI 107 [ _21 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":411 85 {*movdi_internal}
     (nil))
(insn 172 171 173 11 (set (reg:SI 108 [ _22 ])
        (mem:SI (plus:DI (reg/f:DI 107 [ _21 ])
                (const_int 12 [0xc])) [3 _21->x_current+0 S4 A32])) "function.c":411 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
        (nil)))
(insn 173 172 174 11 (set (reg/f:DI 109 [ _23 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":411 85 {*movdi_internal}
     (nil))
(insn 174 173 175 11 (set (reg:SI 110 [ _24 ])
        (mem:SI (plus:DI (reg/f:DI 109 [ _23 ])
                (const_int 16 [0x10])) [3 _23->y_current+0 S4 A64])) "function.c":411 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ _23 ])
        (nil)))
(insn 175 174 176 11 (set (reg/f:DI 111 [ stdscr.49_25 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":411 85 {*movdi_internal}
     (nil))
(insn 176 175 177 11 (set (reg:SI 1 dx)
        (reg:SI 108 [ _22 ])) "function.c":411 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108 [ _22 ])
        (nil)))
(insn 177 176 178 11 (set (reg:SI 4 si)
        (reg:SI 110 [ _24 ])) "function.c":411 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 110 [ _24 ])
        (nil)))
(insn 178 177 179 11 (set (reg:DI 5 di)
        (reg/f:DI 111 [ stdscr.49_25 ])) "function.c":411 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111 [ stdscr.49_25 ])
        (nil)))
(call_insn 179 178 180 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":411 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 180 179 181 11 (set (reg/f:DI 112 [ stdscr.50_26 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":413 85 {*movdi_internal}
     (nil))
(insn 181 180 182 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":413 85 {*movdi_internal}
     (nil))
(insn 182 181 183 11 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":413 86 {*movsi_internal}
     (nil))
(insn 183 182 184 11 (set (reg:DI 5 di)
        (reg/f:DI 112 [ stdscr.50_26 ])) "function.c":413 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ stdscr.50_26 ])
        (nil)))
(call_insn 184 183 185 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":413 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 185 184 186 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f7cd0f0d3f0 *.LC38>)) "function.c":414 85 {*movdi_internal}
     (nil))
(insn 186 185 187 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":414 88 {*movqi_internal}
     (nil))
(call_insn 187 186 188 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":414 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 188 187 189 11 (set (reg/f:DI 113 [ stdscr.51_27 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":415 85 {*movdi_internal}
     (nil))
(insn 189 188 190 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":415 85 {*movdi_internal}
     (nil))
(insn 190 189 191 11 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":415 86 {*movsi_internal}
     (nil))
(insn 191 190 192 11 (set (reg:DI 5 di)
        (reg/f:DI 113 [ stdscr.51_27 ])) "function.c":415 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ stdscr.51_27 ])
        (nil)))
(call_insn 192 191 193 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":415 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 193 192 194 11 (parallel [
            (set (reg:DI 251)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":417 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 194 193 195 11 (set (reg:DI 5 di)
        (reg:DI 251)) "function.c":417 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 251)
        (nil)))
(call_insn 195 194 196 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":417 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 196 195 197 11 (parallel [
            (set (reg:DI 252)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":418 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 197 196 198 11 (set (reg:DI 5 di)
        (reg:DI 252)) "function.c":418 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 252)
        (nil)))
(call_insn 198 197 199 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":418 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 199 198 200 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 b1+0 S4 A32])
            (const_int 0 [0]))) "function.c":419 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 200 199 201 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 321)
            (pc))) "function.c":419 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 321)
;;  succ:       12 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 253 254
(note 201 200 202 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 12 (set (reg/f:DI 114 [ _28 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":426 85 {*movdi_internal}
     (nil))
(insn 203 202 204 12 (set (reg:SI 253)
        (mem:SI (plus:DI (reg/f:DI 114 [ _28 ])
                (const_int 12 [0xc])) [3 _28->x_current+0 S4 A32])) "function.c":426 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
        (nil)))
(insn 204 203 205 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])
        (reg:SI 253)) "function.c":426 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 253)
        (nil)))
(insn 205 204 206 12 (set (reg/f:DI 115 [ _29 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":427 85 {*movdi_internal}
     (nil))
(insn 206 205 207 12 (set (reg:SI 254)
        (mem:SI (plus:DI (reg/f:DI 115 [ _29 ])
                (const_int 16 [0x10])) [3 _29->y_current+0 S4 A64])) "function.c":427 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
        (nil)))
(insn 207 206 208 12 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])
        (reg:SI 254)) "function.c":427 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 254)
        (nil)))
(insn 208 207 209 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 b1+0 S4 A32])
            (const_int 0 [0]))) "function.c":430 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 209 208 210 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 321)
            (pc))) "function.c":430 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 321)
;;  succ:       13 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 116 117 118 119 120 121 122 123 124 255 256 257 258 259 260 261
(note 210 209 211 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 13 (parallel [
            (set (reg:DI 255)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":432 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 212 211 213 13 (set (reg:DI 5 di)
        (reg:DI 255)) "function.c":432 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 255)
        (nil)))
(call_insn 213 212 214 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step1_krzak") [flags 0x3]  <function_decl 0x7f7cd1178000 step1_krzak>) [0 step1_krzak S1 A8])
            (const_int 0 [0]))) "function.c":432 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 214 213 215 13 (parallel [
            (set (reg:DI 256)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":433 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 215 214 216 13 (set (reg:DI 5 di)
        (reg:DI 256)) "function.c":433 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 256)
        (nil)))
(call_insn 216 215 217 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step1") [flags 0x3]  <function_decl 0x7f7cd1178200 step1>) [0 step1 S1 A8])
            (const_int 0 [0]))) "function.c":433 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 217 216 218 13 (set (reg:SI 257)
        (reg:SI 0 ax)) "function.c":433 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 218 217 219 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 b1+0 S4 A32])
        (reg:SI 257)) "function.c":433 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 257)
        (nil)))
(insn 219 218 220 13 (set (reg/f:DI 116 [ stdscr.52_30 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":434 85 {*movdi_internal}
     (nil))
(insn 220 219 221 13 (set (reg:SI 258)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":434 86 {*movsi_internal}
     (nil))
(insn 221 220 222 13 (set (reg:SI 259)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":434 86 {*movsi_internal}
     (nil))
(insn 222 221 223 13 (set (reg:SI 1 dx)
        (reg:SI 258)) "function.c":434 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 258)
        (nil)))
(insn 223 222 224 13 (set (reg:SI 4 si)
        (reg:SI 259)) "function.c":434 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 259)
        (nil)))
(insn 224 223 225 13 (set (reg:DI 5 di)
        (reg/f:DI 116 [ stdscr.52_30 ])) "function.c":434 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ stdscr.52_30 ])
        (nil)))
(call_insn 225 224 226 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":434 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 226 225 227 13 (set (reg/f:DI 117 [ _31 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":435 85 {*movdi_internal}
     (nil))
(insn 227 226 228 13 (set (reg:SI 260)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":435 86 {*movsi_internal}
     (nil))
(insn 228 227 229 13 (set (reg:DI 118 [ _32 ])
        (sign_extend:DI (reg:SI 260))) "function.c":435 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 260)
        (nil)))
(insn 229 228 230 13 (parallel [
            (set (reg:DI 119 [ _33 ])
                (ashift:DI (reg:DI 118 [ _32 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":435 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 230 229 231 13 (parallel [
            (set (reg/f:DI 120 [ _34 ])
                (plus:DI (reg/f:DI 117 [ _31 ])
                    (reg:DI 119 [ _33 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":435 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 119 [ _33 ])
        (expr_list:REG_DEAD (reg/f:DI 117 [ _31 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 231 230 232 13 (set (reg/f:DI 121 [ _35 ])
        (mem/f:DI (reg/f:DI 120 [ _34 ]) [10 *_34+0 S8 A64])) "function.c":435 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120 [ _34 ])
        (nil)))
(insn 232 231 233 13 (set (reg:SI 261)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":435 86 {*movsi_internal}
     (nil))
(insn 233 232 234 13 (set (reg:DI 122 [ _36 ])
        (sign_extend:DI (reg:SI 261))) "function.c":435 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 261)
        (nil)))
(insn 234 233 235 13 (parallel [
            (set (reg/f:DI 123 [ _37 ])
                (plus:DI (reg/f:DI 121 [ _35 ])
                    (reg:DI 122 [ _36 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":435 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ _36 ])
        (expr_list:REG_DEAD (reg/f:DI 121 [ _35 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 235 234 236 13 (set (reg:QI 124 [ _38 ])
        (mem:QI (reg/f:DI 123 [ _37 ]) [0 *_37+0 S1 A8])) "function.c":435 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ _37 ])
        (nil)))
(insn 236 235 237 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 124 [ _38 ])
            (const_int 77 [0x4d]))) "function.c":435 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 124 [ _38 ])
        (nil)))
(jump_insn 237 236 238 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "function.c":435 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 244)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 238 237 239 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 239 238 240 14 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":437 85 {*movdi_internal}
     (nil))
(insn 240 239 241 14 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":437 88 {*movqi_internal}
     (nil))
(call_insn 241 240 700 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":437 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 700 241 701 14 (set (pc)
        (label_ref 291)) 683 {jump}
     (nil)
 -> 291)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 701 700 244)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 125 126 127 128 129 130 131 132 262 263
(code_label 244 701 245 15 52 (nil) [1 uses])
(note 245 244 246 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 15 (set (reg/f:DI 125 [ _39 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":439 85 {*movdi_internal}
     (nil))
(insn 247 246 248 15 (set (reg:SI 262)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":439 86 {*movsi_internal}
     (nil))
(insn 248 247 249 15 (set (reg:DI 126 [ _40 ])
        (sign_extend:DI (reg:SI 262))) "function.c":439 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 262)
        (nil)))
(insn 249 248 250 15 (parallel [
            (set (reg:DI 127 [ _41 ])
                (ashift:DI (reg:DI 126 [ _40 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":439 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 126 [ _40 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 250 249 251 15 (parallel [
            (set (reg/f:DI 128 [ _42 ])
                (plus:DI (reg/f:DI 125 [ _39 ])
                    (reg:DI 127 [ _41 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":439 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 127 [ _41 ])
        (expr_list:REG_DEAD (reg/f:DI 125 [ _39 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 251 250 252 15 (set (reg/f:DI 129 [ _43 ])
        (mem/f:DI (reg/f:DI 128 [ _42 ]) [10 *_42+0 S8 A64])) "function.c":439 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 128 [ _42 ])
        (nil)))
(insn 252 251 253 15 (set (reg:SI 263)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":439 86 {*movsi_internal}
     (nil))
(insn 253 252 254 15 (set (reg:DI 130 [ _44 ])
        (sign_extend:DI (reg:SI 263))) "function.c":439 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 263)
        (nil)))
(insn 254 253 255 15 (parallel [
            (set (reg/f:DI 131 [ _45 ])
                (plus:DI (reg/f:DI 129 [ _43 ])
                    (reg:DI 130 [ _44 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":439 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _44 ])
        (expr_list:REG_DEAD (reg/f:DI 129 [ _43 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 255 254 256 15 (set (reg:QI 132 [ _46 ])
        (mem:QI (reg/f:DI 131 [ _45 ]) [0 *_45+0 S1 A8])) "function.c":439 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ _45 ])
        (nil)))
(insn 256 255 257 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 132 [ _46 ])
            (const_int 65 [0x41]))) "function.c":439 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 132 [ _46 ])
        (nil)))
(jump_insn 257 256 258 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 274)
            (pc))) "function.c":439 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 274)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 133 134
(note 258 257 259 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 16 (set (reg/f:DI 133 [ stdscr.53_47 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":441 85 {*movdi_internal}
     (nil))
(insn 260 259 261 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":441 85 {*movdi_internal}
     (nil))
(insn 261 260 262 16 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":441 86 {*movsi_internal}
     (nil))
(insn 262 261 263 16 (set (reg:DI 5 di)
        (reg/f:DI 133 [ stdscr.53_47 ])) "function.c":441 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133 [ stdscr.53_47 ])
        (nil)))
(call_insn 263 262 264 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":441 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 264 263 265 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":442 85 {*movdi_internal}
     (nil))
(insn 265 264 266 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":442 88 {*movqi_internal}
     (nil))
(call_insn 266 265 267 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":442 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 267 266 268 16 (set (reg/f:DI 134 [ stdscr.54_48 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":443 85 {*movdi_internal}
     (nil))
(insn 268 267 269 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":443 85 {*movdi_internal}
     (nil))
(insn 269 268 270 16 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":443 86 {*movsi_internal}
     (nil))
(insn 270 269 271 16 (set (reg:DI 5 di)
        (reg/f:DI 134 [ stdscr.54_48 ])) "function.c":443 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ stdscr.54_48 ])
        (nil)))
(call_insn 271 270 702 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":443 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 702 271 703 16 (set (pc)
        (label_ref 291)) 683 {jump}
     (nil)
 -> 291)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 703 702 274)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 135 136 137 138 139 140 141 142 143 264 265
(code_label 274 703 275 17 54 (nil) [1 uses])
(note 275 274 276 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 17 (set (reg/f:DI 135 [ _49 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":447 85 {*movdi_internal}
     (nil))
(insn 277 276 278 17 (set (reg:SI 264)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":447 86 {*movsi_internal}
     (nil))
(insn 278 277 279 17 (set (reg:DI 136 [ _50 ])
        (sign_extend:DI (reg:SI 264))) "function.c":447 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 264)
        (nil)))
(insn 279 278 280 17 (parallel [
            (set (reg:DI 137 [ _51 ])
                (ashift:DI (reg:DI 136 [ _50 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":447 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 136 [ _50 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 280 279 281 17 (parallel [
            (set (reg/f:DI 138 [ _52 ])
                (plus:DI (reg/f:DI 135 [ _49 ])
                    (reg:DI 137 [ _51 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":447 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137 [ _51 ])
        (expr_list:REG_DEAD (reg/f:DI 135 [ _49 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 281 280 282 17 (set (reg/f:DI 139 [ _53 ])
        (mem/f:DI (reg/f:DI 138 [ _52 ]) [10 *_52+0 S8 A64])) "function.c":447 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ _52 ])
        (nil)))
(insn 282 281 283 17 (set (reg:SI 265)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":447 86 {*movsi_internal}
     (nil))
(insn 283 282 284 17 (set (reg:DI 140 [ _54 ])
        (sign_extend:DI (reg:SI 265))) "function.c":447 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 265)
        (nil)))
(insn 284 283 285 17 (parallel [
            (set (reg/f:DI 141 [ _55 ])
                (plus:DI (reg/f:DI 139 [ _53 ])
                    (reg:DI 140 [ _54 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":447 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 140 [ _54 ])
        (expr_list:REG_DEAD (reg/f:DI 139 [ _53 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 285 284 286 17 (set (reg:QI 142 [ _56 ])
        (mem:QI (reg/f:DI 141 [ _55 ]) [0 *_55+0 S1 A8])) "function.c":447 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141 [ _55 ])
        (nil)))
(insn 286 285 287 17 (set (reg:SI 143 [ _57 ])
        (sign_extend:SI (reg:QI 142 [ _56 ]))) "function.c":447 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 142 [ _56 ])
        (nil)))
(insn 287 286 288 17 (set (reg:SI 4 si)
        (reg:SI 143 [ _57 ])) "function.c":447 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 143 [ _57 ])
        (nil)))
(insn 288 287 289 17 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":447 85 {*movdi_internal}
     (nil))
(insn 289 288 290 17 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":447 88 {*movqi_internal}
     (nil))
(call_insn 290 289 291 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":447 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;;              14 [always] 
;;              16 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 144 145 146 147 148 149 150 266 267
(code_label 291 290 292 18 53 (nil) [2 uses])
(note 292 291 293 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 293 292 294 18 (set (reg/f:DI 144 [ _58 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":450 85 {*movdi_internal}
     (nil))
(insn 294 293 295 18 (set (reg:SI 145 [ _59 ])
        (mem:SI (plus:DI (reg/f:DI 144 [ _58 ])
                (const_int 12 [0xc])) [3 _58->x_current+0 S4 A32])) "function.c":450 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 144 [ _58 ])
        (nil)))
(insn 295 294 296 18 (set (reg/f:DI 146 [ _60 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":450 85 {*movdi_internal}
     (nil))
(insn 296 295 297 18 (set (reg:SI 147 [ _61 ])
        (mem:SI (plus:DI (reg/f:DI 146 [ _60 ])
                (const_int 16 [0x10])) [3 _60->y_current+0 S4 A64])) "function.c":450 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
        (nil)))
(insn 297 296 298 18 (set (reg/f:DI 148 [ stdscr.55_62 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":450 85 {*movdi_internal}
     (nil))
(insn 298 297 299 18 (set (reg:SI 1 dx)
        (reg:SI 145 [ _59 ])) "function.c":450 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 145 [ _59 ])
        (nil)))
(insn 299 298 300 18 (set (reg:SI 4 si)
        (reg:SI 147 [ _61 ])) "function.c":450 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 147 [ _61 ])
        (nil)))
(insn 300 299 301 18 (set (reg:DI 5 di)
        (reg/f:DI 148 [ stdscr.55_62 ])) "function.c":450 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ stdscr.55_62 ])
        (nil)))
(call_insn 301 300 302 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":450 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 302 301 303 18 (set (reg/f:DI 149 [ stdscr.56_63 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":451 85 {*movdi_internal}
     (nil))
(insn 303 302 304 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":451 85 {*movdi_internal}
     (nil))
(insn 304 303 305 18 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":451 86 {*movsi_internal}
     (nil))
(insn 305 304 306 18 (set (reg:DI 5 di)
        (reg/f:DI 149 [ stdscr.56_63 ])) "function.c":451 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149 [ stdscr.56_63 ])
        (nil)))
(call_insn 306 305 307 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":451 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 307 306 308 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f7cd0f0d3f0 *.LC38>)) "function.c":452 85 {*movdi_internal}
     (nil))
(insn 308 307 309 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":452 88 {*movqi_internal}
     (nil))
(call_insn 309 308 310 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":452 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 310 309 311 18 (set (reg/f:DI 150 [ stdscr.57_64 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":453 85 {*movdi_internal}
     (nil))
(insn 311 310 312 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":453 85 {*movdi_internal}
     (nil))
(insn 312 311 313 18 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":453 86 {*movsi_internal}
     (nil))
(insn 313 312 314 18 (set (reg:DI 5 di)
        (reg/f:DI 150 [ stdscr.57_64 ])) "function.c":453 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150 [ stdscr.57_64 ])
        (nil)))
(call_insn 314 313 315 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":453 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 315 314 316 18 (parallel [
            (set (reg:DI 266)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":455 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 316 315 317 18 (set (reg:DI 5 di)
        (reg:DI 266)) "function.c":455 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 266)
        (nil)))
(call_insn 317 316 318 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":455 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 318 317 319 18 (parallel [
            (set (reg:DI 267)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":456 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 319 318 320 18 (set (reg:DI 5 di)
        (reg:DI 267)) "function.c":456 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 267)
        (nil)))
(call_insn 320 319 321 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":456 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       11
;;              12
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 321 320 322 19 51 (nil) [2 uses])
(note 322 321 323 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 323 322 324 19 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 b1+0 S4 A32])
            (const_int 0 [0]))) "function.c":459 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 324 323 325 19 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 327)
            (pc))) "function.c":459 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil))
 -> 327)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 325 324 326 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 326 325 327 20 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 b1+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 b1+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":461 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 151 152 153
(code_label 327 326 328 21 55 (nil) [1 uses])
(note 328 327 329 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 329 328 330 21 (set (reg/f:DI 151 [ _65 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":464 85 {*movdi_internal}
     (nil))
(insn 330 329 331 21 (set (reg:SI 152 [ _66 ])
        (mem:SI (reg/f:DI 151 [ _65 ]) [3 _65->PID+0 S4 A64])) "function.c":464 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 151 [ _65 ])
        (nil)))
(insn 331 330 332 21 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":464 86 {*movsi_internal}
     (nil))
(insn 332 331 333 21 (set (reg:SI 5 di)
        (reg:SI 152 [ _66 ])) "function.c":464 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 152 [ _66 ])
        (nil)))
(call_insn 333 332 334 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("kill") [flags 0x41]  <function_decl 0x7f7cd1125500 kill>) [0 kill S1 A8])
            (const_int 0 [0]))) "function.c":464 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 334 333 335 21 (set (reg:SI 153 [ _67 ])
        (reg:SI 0 ax)) "function.c":464 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 335 334 336 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 153 [ _67 ])
            (const_int 0 [0]))) "function.c":464 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 153 [ _67 ])
        (nil)))
(jump_insn 336 335 337 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 360)
            (pc))) "function.c":464 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 360)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 154 155 156 157 158 159 160
(note 337 336 338 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 338 337 339 22 (set (reg/f:DI 154 [ _68 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":466 85 {*movdi_internal}
     (nil))
(insn 339 338 340 22 (set (reg:SI 155 [ _69 ])
        (mem:SI (plus:DI (reg/f:DI 154 [ _68 ])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])) "function.c":466 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ _68 ])
        (nil)))
(insn 340 339 341 22 (set (reg/f:DI 156 [ _70 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":466 85 {*movdi_internal}
     (nil))
(insn 341 340 342 22 (set (reg:SI 157 [ _71 ])
        (mem:SI (plus:DI (reg/f:DI 156 [ _70 ])
                (const_int 16 [0x10])) [3 _70->y_current+0 S4 A64])) "function.c":466 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156 [ _70 ])
        (nil)))
(insn 342 341 343 22 (set (reg/f:DI 158 [ stdscr.58_72 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":466 85 {*movdi_internal}
     (nil))
(insn 343 342 344 22 (set (reg:SI 1 dx)
        (reg:SI 155 [ _69 ])) "function.c":466 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 155 [ _69 ])
        (nil)))
(insn 344 343 345 22 (set (reg:SI 4 si)
        (reg:SI 157 [ _71 ])) "function.c":466 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 157 [ _71 ])
        (nil)))
(insn 345 344 346 22 (set (reg:DI 5 di)
        (reg/f:DI 158 [ stdscr.58_72 ])) "function.c":466 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158 [ stdscr.58_72 ])
        (nil)))
(call_insn 346 345 347 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":466 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 347 346 348 22 (set (reg/f:DI 159 [ stdscr.59_73 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":467 85 {*movdi_internal}
     (nil))
(insn 348 347 349 22 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":467 85 {*movdi_internal}
     (nil))
(insn 349 348 350 22 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":467 86 {*movsi_internal}
     (nil))
(insn 350 349 351 22 (set (reg:DI 5 di)
        (reg/f:DI 159 [ stdscr.59_73 ])) "function.c":467 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 159 [ stdscr.59_73 ])
        (nil)))
(call_insn 351 350 352 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":467 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 352 351 353 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f7cd0f0d480 *.LC39>)) "function.c":468 85 {*movdi_internal}
     (nil))
(insn 353 352 354 22 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":468 88 {*movqi_internal}
     (nil))
(call_insn 354 353 355 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":468 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 355 354 356 22 (set (reg/f:DI 160 [ stdscr.60_74 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":469 85 {*movdi_internal}
     (nil))
(insn 356 355 357 22 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":469 85 {*movdi_internal}
     (nil))
(insn 357 356 358 22 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":469 86 {*movsi_internal}
     (nil))
(insn 358 357 359 22 (set (reg:DI 5 di)
        (reg/f:DI 160 [ stdscr.60_74 ])) "function.c":469 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160 [ stdscr.60_74 ])
        (nil)))
(call_insn 359 358 360 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":469 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 161 162 163 164 165 268 269
(code_label 360 359 361 23 56 (nil) [1 uses])
(note 361 360 362 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 23 (set (reg/f:DI 161 [ _75 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":472 85 {*movdi_internal}
     (nil))
(insn 363 362 364 23 (set (reg:SI 162 [ _76 ])
        (mem:SI (plus:DI (reg/f:DI 161 [ _75 ])
                (const_int 12 [0xc])) [3 _75->x_current+0 S4 A32])) "function.c":472 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161 [ _75 ])
        (nil)))
(insn 364 363 365 23 (set (reg/f:DI 163 [ _77 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":472 85 {*movdi_internal}
     (nil))
(insn 365 364 366 23 (set (reg:SI 164 [ _78 ])
        (mem:SI (plus:DI (reg/f:DI 163 [ _77 ])
                (const_int 16 [0x10])) [3 _77->y_current+0 S4 A64])) "function.c":472 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163 [ _77 ])
        (nil)))
(insn 366 365 367 23 (set (reg/f:DI 165 [ stdscr.61_79 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":472 85 {*movdi_internal}
     (nil))
(insn 367 366 368 23 (set (reg:SI 1 dx)
        (reg:SI 162 [ _76 ])) "function.c":472 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 162 [ _76 ])
        (nil)))
(insn 368 367 369 23 (set (reg:SI 4 si)
        (reg:SI 164 [ _78 ])) "function.c":472 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 164 [ _78 ])
        (nil)))
(insn 369 368 370 23 (set (reg:DI 5 di)
        (reg/f:DI 165 [ stdscr.61_79 ])) "function.c":472 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165 [ stdscr.61_79 ])
        (nil)))
(call_insn 370 369 371 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":472 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 371 370 372 23 (parallel [
            (set (reg:DI 268)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":474 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 372 371 373 23 (set (reg:DI 5 di)
        (reg:DI 268)) "function.c":474 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 268)
        (nil)))
(call_insn 373 372 374 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":474 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 374 373 375 23 (parallel [
            (set (reg:DI 269)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":475 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 375 374 376 23 (set (reg:DI 5 di)
        (reg:DI 269)) "function.c":475 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 269)
        (nil)))
(call_insn 376 375 377 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":475 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 377 376 378 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 b2+0 S4 A32])
            (const_int 0 [0]))) "function.c":477 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 378 377 379 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "function.c":477 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 510)
;;  succ:       24 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 166 167
(note 379 378 380 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 381 24 (set (reg/f:DI 166 [ _80 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":477 85 {*movdi_internal}
     (nil))
(insn 381 380 382 24 (set (reg:SI 167 [ _81 ])
        (mem:SI (plus:DI (reg/f:DI 166 [ _80 ])
                (const_int 16 [0x10])) [3 _80->y_current+0 S4 A64])) "function.c":477 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 166 [ _80 ])
        (nil)))
(insn 382 381 383 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 167 [ _81 ])
            (const_int 0 [0]))) "function.c":477 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 167 [ _81 ])
        (nil)))
(jump_insn 383 382 384 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "function.c":477 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 510)
;;  succ:       25 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 168 169 270 271 272 273
(note 384 383 385 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 385 384 386 25 (set (reg/f:DI 168 [ _82 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":479 85 {*movdi_internal}
     (nil))
(insn 386 385 387 25 (set (reg:SI 270)
        (mem:SI (plus:DI (reg/f:DI 168 [ _82 ])
                (const_int 12 [0xc])) [3 _82->x_current+0 S4 A32])) "function.c":479 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168 [ _82 ])
        (nil)))
(insn 387 386 388 25 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])
        (reg:SI 270)) "function.c":479 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 270)
        (nil)))
(insn 388 387 389 25 (set (reg/f:DI 169 [ _83 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":480 85 {*movdi_internal}
     (nil))
(insn 389 388 390 25 (set (reg:SI 271)
        (mem:SI (plus:DI (reg/f:DI 169 [ _83 ])
                (const_int 16 [0x10])) [3 _83->y_current+0 S4 A64])) "function.c":480 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169 [ _83 ])
        (nil)))
(insn 390 389 391 25 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])
        (reg:SI 271)) "function.c":480 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 271)
        (nil)))
(insn 391 390 392 25 (parallel [
            (set (reg:DI 272)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":482 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 392 391 393 25 (set (reg:DI 5 di)
        (reg:DI 272)) "function.c":482 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 272)
        (nil)))
(call_insn 393 392 394 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":482 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 394 393 395 25 (parallel [
            (set (reg:DI 273)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":483 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 395 394 396 25 (set (reg:DI 5 di)
        (reg:DI 273)) "function.c":483 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 273)
        (nil)))
(call_insn 396 395 397 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":483 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 397 396 398 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 b2+0 S4 A32])
            (const_int 0 [0]))) "function.c":485 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 398 397 399 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "function.c":485 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 510)
;;  succ:       26 (FALLTHRU)
;;              32
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 170 171 172 173 174 175 176 177 178 274 275 276 277 278 279 280
(note 399 398 400 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 400 399 401 26 (parallel [
            (set (reg:DI 274)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":487 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 401 400 402 26 (set (reg:DI 5 di)
        (reg:DI 274)) "function.c":487 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 274)
        (nil)))
(call_insn 402 401 403 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step2_krzak") [flags 0x3]  <function_decl 0x7f7cd1178100 step2_krzak>) [0 step2_krzak S1 A8])
            (const_int 0 [0]))) "function.c":487 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 403 402 404 26 (parallel [
            (set (reg:DI 275)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":488 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 404 403 405 26 (set (reg:DI 5 di)
        (reg:DI 275)) "function.c":488 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 275)
        (nil)))
(call_insn 405 404 406 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("step2") [flags 0x3]  <function_decl 0x7f7cd1178300 step2>) [0 step2 S1 A8])
            (const_int 0 [0]))) "function.c":488 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 406 405 407 26 (set (reg:SI 276)
        (reg:SI 0 ax)) "function.c":488 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 407 406 408 26 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 b2+0 S4 A32])
        (reg:SI 276)) "function.c":488 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 276)
        (nil)))
(insn 408 407 409 26 (set (reg/f:DI 170 [ stdscr.62_84 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":489 85 {*movdi_internal}
     (nil))
(insn 409 408 410 26 (set (reg:SI 277)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":489 86 {*movsi_internal}
     (nil))
(insn 410 409 411 26 (set (reg:SI 278)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":489 86 {*movsi_internal}
     (nil))
(insn 411 410 412 26 (set (reg:SI 1 dx)
        (reg:SI 277)) "function.c":489 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 277)
        (nil)))
(insn 412 411 413 26 (set (reg:SI 4 si)
        (reg:SI 278)) "function.c":489 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 278)
        (nil)))
(insn 413 412 414 26 (set (reg:DI 5 di)
        (reg/f:DI 170 [ stdscr.62_84 ])) "function.c":489 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170 [ stdscr.62_84 ])
        (nil)))
(call_insn 414 413 415 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":489 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 415 414 416 26 (set (reg/f:DI 171 [ _85 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":490 85 {*movdi_internal}
     (nil))
(insn 416 415 417 26 (set (reg:SI 279)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":490 86 {*movsi_internal}
     (nil))
(insn 417 416 418 26 (set (reg:DI 172 [ _86 ])
        (sign_extend:DI (reg:SI 279))) "function.c":490 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 279)
        (nil)))
(insn 418 417 419 26 (parallel [
            (set (reg:DI 173 [ _87 ])
                (ashift:DI (reg:DI 172 [ _86 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":490 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 172 [ _86 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 419 418 420 26 (parallel [
            (set (reg/f:DI 174 [ _88 ])
                (plus:DI (reg/f:DI 171 [ _85 ])
                    (reg:DI 173 [ _87 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":490 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 173 [ _87 ])
        (expr_list:REG_DEAD (reg/f:DI 171 [ _85 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 420 419 421 26 (set (reg/f:DI 175 [ _89 ])
        (mem/f:DI (reg/f:DI 174 [ _88 ]) [10 *_88+0 S8 A64])) "function.c":490 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174 [ _88 ])
        (nil)))
(insn 421 420 422 26 (set (reg:SI 280)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":490 86 {*movsi_internal}
     (nil))
(insn 422 421 423 26 (set (reg:DI 176 [ _90 ])
        (sign_extend:DI (reg:SI 280))) "function.c":490 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 280)
        (nil)))
(insn 423 422 424 26 (parallel [
            (set (reg/f:DI 177 [ _91 ])
                (plus:DI (reg/f:DI 175 [ _89 ])
                    (reg:DI 176 [ _90 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":490 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 176 [ _90 ])
        (expr_list:REG_DEAD (reg/f:DI 175 [ _89 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 424 423 425 26 (set (reg:QI 178 [ _92 ])
        (mem:QI (reg/f:DI 177 [ _91 ]) [0 *_91+0 S1 A8])) "function.c":490 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177 [ _91 ])
        (nil)))
(insn 425 424 426 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 178 [ _92 ])
            (const_int 77 [0x4d]))) "function.c":490 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 178 [ _92 ])
        (nil)))
(jump_insn 426 425 427 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 433)
            (pc))) "function.c":490 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 433)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 427 426 428 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 428 427 429 27 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":492 85 {*movdi_internal}
     (nil))
(insn 429 428 430 27 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":492 88 {*movqi_internal}
     (nil))
(call_insn 430 429 704 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":492 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 704 430 705 27 (set (pc)
        (label_ref 480)) 683 {jump}
     (nil)
 -> 480)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 705 704 433)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 179 180 181 182 183 184 185 186 281 282
(code_label 433 705 434 28 58 (nil) [1 uses])
(note 434 433 435 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 435 434 436 28 (set (reg/f:DI 179 [ _93 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":494 85 {*movdi_internal}
     (nil))
(insn 436 435 437 28 (set (reg:SI 281)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":494 86 {*movsi_internal}
     (nil))
(insn 437 436 438 28 (set (reg:DI 180 [ _94 ])
        (sign_extend:DI (reg:SI 281))) "function.c":494 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 281)
        (nil)))
(insn 438 437 439 28 (parallel [
            (set (reg:DI 181 [ _95 ])
                (ashift:DI (reg:DI 180 [ _94 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":494 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 180 [ _94 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 439 438 440 28 (parallel [
            (set (reg/f:DI 182 [ _96 ])
                (plus:DI (reg/f:DI 179 [ _93 ])
                    (reg:DI 181 [ _95 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":494 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 181 [ _95 ])
        (expr_list:REG_DEAD (reg/f:DI 179 [ _93 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 440 439 441 28 (set (reg/f:DI 183 [ _97 ])
        (mem/f:DI (reg/f:DI 182 [ _96 ]) [10 *_96+0 S8 A64])) "function.c":494 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 182 [ _96 ])
        (nil)))
(insn 441 440 442 28 (set (reg:SI 282)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":494 86 {*movsi_internal}
     (nil))
(insn 442 441 443 28 (set (reg:DI 184 [ _98 ])
        (sign_extend:DI (reg:SI 282))) "function.c":494 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 282)
        (nil)))
(insn 443 442 444 28 (parallel [
            (set (reg/f:DI 185 [ _99 ])
                (plus:DI (reg/f:DI 183 [ _97 ])
                    (reg:DI 184 [ _98 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":494 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 184 [ _98 ])
        (expr_list:REG_DEAD (reg/f:DI 183 [ _97 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 444 443 445 28 (set (reg:QI 186 [ _100 ])
        (mem:QI (reg/f:DI 185 [ _99 ]) [0 *_99+0 S1 A8])) "function.c":494 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 185 [ _99 ])
        (nil)))
(insn 445 444 446 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 186 [ _100 ])
            (const_int 65 [0x41]))) "function.c":494 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 186 [ _100 ])
        (nil)))
(jump_insn 446 445 447 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 463)
            (pc))) "function.c":494 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 463)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 187 188
(note 447 446 448 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 448 447 449 29 (set (reg/f:DI 187 [ stdscr.63_101 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":496 85 {*movdi_internal}
     (nil))
(insn 449 448 450 29 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":496 85 {*movdi_internal}
     (nil))
(insn 450 449 451 29 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":496 86 {*movsi_internal}
     (nil))
(insn 451 450 452 29 (set (reg:DI 5 di)
        (reg/f:DI 187 [ stdscr.63_101 ])) "function.c":496 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187 [ stdscr.63_101 ])
        (nil)))
(call_insn 452 451 453 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":496 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 453 452 454 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":497 85 {*movdi_internal}
     (nil))
(insn 454 453 455 29 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":497 88 {*movqi_internal}
     (nil))
(call_insn 455 454 456 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":497 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 456 455 457 29 (set (reg/f:DI 188 [ stdscr.64_102 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":498 85 {*movdi_internal}
     (nil))
(insn 457 456 458 29 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":498 85 {*movdi_internal}
     (nil))
(insn 458 457 459 29 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":498 86 {*movsi_internal}
     (nil))
(insn 459 458 460 29 (set (reg:DI 5 di)
        (reg/f:DI 188 [ stdscr.64_102 ])) "function.c":498 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 188 [ stdscr.64_102 ])
        (nil)))
(call_insn 460 459 706 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":498 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 706 460 707 29 (set (pc)
        (label_ref 480)) 683 {jump}
     (nil)
 -> 480)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 707 706 463)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       28
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 189 190 191 192 193 194 195 196 197 283 284
(code_label 463 707 464 30 60 (nil) [1 uses])
(note 464 463 465 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 465 464 466 30 (set (reg/f:DI 189 [ _103 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36176 [0xffffffffffff72b0])) [9 serwerinfo.mapa+0 S8 A64])) "function.c":502 85 {*movdi_internal}
     (nil))
(insn 466 465 467 30 (set (reg:SI 283)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_pom+0 S4 A32])) "function.c":502 86 {*movsi_internal}
     (nil))
(insn 467 466 468 30 (set (reg:DI 190 [ _104 ])
        (sign_extend:DI (reg:SI 283))) "function.c":502 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 283)
        (nil)))
(insn 468 467 469 30 (parallel [
            (set (reg:DI 191 [ _105 ])
                (ashift:DI (reg:DI 190 [ _104 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":502 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 190 [ _104 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 469 468 470 30 (parallel [
            (set (reg/f:DI 192 [ _106 ])
                (plus:DI (reg/f:DI 189 [ _103 ])
                    (reg:DI 191 [ _105 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":502 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 191 [ _105 ])
        (expr_list:REG_DEAD (reg/f:DI 189 [ _103 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 470 469 471 30 (set (reg/f:DI 193 [ _107 ])
        (mem/f:DI (reg/f:DI 192 [ _106 ]) [10 *_106+0 S8 A64])) "function.c":502 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 192 [ _106 ])
        (nil)))
(insn 471 470 472 30 (set (reg:SI 284)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 x_pom+0 S4 A32])) "function.c":502 86 {*movsi_internal}
     (nil))
(insn 472 471 473 30 (set (reg:DI 194 [ _108 ])
        (sign_extend:DI (reg:SI 284))) "function.c":502 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 284)
        (nil)))
(insn 473 472 474 30 (parallel [
            (set (reg/f:DI 195 [ _109 ])
                (plus:DI (reg/f:DI 193 [ _107 ])
                    (reg:DI 194 [ _108 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":502 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 194 [ _108 ])
        (expr_list:REG_DEAD (reg/f:DI 193 [ _107 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 474 473 475 30 (set (reg:QI 196 [ _110 ])
        (mem:QI (reg/f:DI 195 [ _109 ]) [0 *_109+0 S1 A8])) "function.c":502 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 195 [ _109 ])
        (nil)))
(insn 475 474 476 30 (set (reg:SI 197 [ _111 ])
        (sign_extend:SI (reg:QI 196 [ _110 ]))) "function.c":502 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 196 [ _110 ])
        (nil)))
(insn 476 475 477 30 (set (reg:SI 4 si)
        (reg:SI 197 [ _111 ])) "function.c":502 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 197 [ _111 ])
        (nil)))
(insn 477 476 478 30 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":502 85 {*movdi_internal}
     (nil))
(insn 478 477 479 30 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":502 88 {*movqi_internal}
     (nil))
(call_insn 479 478 480 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":502 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 (FALLTHRU)
;;              27 [always] 
;;              29 [always] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 198 199 200 201 202 203 204 285 286
(code_label 480 479 481 31 59 (nil) [2 uses])
(note 481 480 482 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 482 481 483 31 (set (reg/f:DI 198 [ _112 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":505 85 {*movdi_internal}
     (nil))
(insn 483 482 484 31 (set (reg:SI 199 [ _113 ])
        (mem:SI (plus:DI (reg/f:DI 198 [ _112 ])
                (const_int 12 [0xc])) [3 _112->x_current+0 S4 A32])) "function.c":505 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 198 [ _112 ])
        (nil)))
(insn 484 483 485 31 (set (reg/f:DI 200 [ _114 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":505 85 {*movdi_internal}
     (nil))
(insn 485 484 486 31 (set (reg:SI 201 [ _115 ])
        (mem:SI (plus:DI (reg/f:DI 200 [ _114 ])
                (const_int 16 [0x10])) [3 _114->y_current+0 S4 A64])) "function.c":505 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 200 [ _114 ])
        (nil)))
(insn 486 485 487 31 (set (reg/f:DI 202 [ stdscr.65_116 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":505 85 {*movdi_internal}
     (nil))
(insn 487 486 488 31 (set (reg:SI 1 dx)
        (reg:SI 199 [ _113 ])) "function.c":505 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 199 [ _113 ])
        (nil)))
(insn 488 487 489 31 (set (reg:SI 4 si)
        (reg:SI 201 [ _115 ])) "function.c":505 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 201 [ _115 ])
        (nil)))
(insn 489 488 490 31 (set (reg:DI 5 di)
        (reg/f:DI 202 [ stdscr.65_116 ])) "function.c":505 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202 [ stdscr.65_116 ])
        (nil)))
(call_insn 490 489 491 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":505 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 491 490 492 31 (set (reg/f:DI 203 [ stdscr.66_117 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":506 85 {*movdi_internal}
     (nil))
(insn 492 491 493 31 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":506 85 {*movdi_internal}
     (nil))
(insn 493 492 494 31 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":506 86 {*movsi_internal}
     (nil))
(insn 494 493 495 31 (set (reg:DI 5 di)
        (reg/f:DI 203 [ stdscr.66_117 ])) "function.c":506 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 203 [ stdscr.66_117 ])
        (nil)))
(call_insn 495 494 496 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":506 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 496 495 497 31 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f7cd0f0d480 *.LC39>)) "function.c":507 85 {*movdi_internal}
     (nil))
(insn 497 496 498 31 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":507 88 {*movqi_internal}
     (nil))
(call_insn 498 497 499 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":507 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 499 498 500 31 (set (reg/f:DI 204 [ stdscr.67_118 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":508 85 {*movdi_internal}
     (nil))
(insn 500 499 501 31 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":508 85 {*movdi_internal}
     (nil))
(insn 501 500 502 31 (set (reg:SI 4 si)
        (const_int 512 [0x200])) "function.c":508 86 {*movsi_internal}
     (nil))
(insn 502 501 503 31 (set (reg:DI 5 di)
        (reg/f:DI 204 [ stdscr.67_118 ])) "function.c":508 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 204 [ stdscr.67_118 ])
        (nil)))
(call_insn 503 502 504 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":508 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 504 503 505 31 (parallel [
            (set (reg:DI 285)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":510 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 505 504 506 31 (set (reg:DI 5 di)
        (reg:DI 285)) "function.c":510 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 285)
        (nil)))
(call_insn 506 505 507 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":510 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 507 506 508 31 (parallel [
            (set (reg:DI 286)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":511 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 508 507 509 31 (set (reg:DI 5 di)
        (reg:DI 286)) "function.c":511 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 286)
        (nil)))
(call_insn 509 508 510 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":511 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       23
;;              24
;;              25
;;              31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 510 509 511 32 57 (nil) [3 uses])
(note 511 510 512 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 512 511 513 32 (set (reg:CCNO 17 flags)
        (compare:CCNO (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 b2+0 S4 A32])
            (const_int 0 [0]))) "function.c":514 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 513 512 514 32 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 516)
            (pc))) "function.c":514 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCNO 17 flags)
        (nil))
 -> 516)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 514 513 515 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 515 514 516 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [3 b2+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [3 b2+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":516 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       32
;;              33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 516 515 517 34 61 (nil) [1 uses])
(note 517 516 518 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 518 517 519 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 bestia_licznik+0 S4 A32])
            (const_int 0 [0]))) "function.c":519 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 519 518 520 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) "function.c":519 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 534)
;;  succ:       35 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 205
(note 520 519 521 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 521 520 522 35 (set (reg:QI 205 [ BESTIA_ON.68_119 ])
        (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])) "function.c":519 88 {*movqi_internal}
     (nil))
(insn 522 521 523 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 205 [ BESTIA_ON.68_119 ])
            (const_int 0 [0]))) "function.c":519 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 205 [ BESTIA_ON.68_119 ])
        (nil)))
(jump_insn 523 522 524 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) "function.c":519 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 534)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 287 288
(note 524 523 525 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 525 524 526 36 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -100 [0xffffffffffffff9c])) [3 serwerinfo.bestia.alive+0 S4 A32])
        (const_int 1 [0x1])) "function.c":521 86 {*movsi_internal}
     (nil))
(insn 526 525 527 36 (parallel [
            (set (reg:DI 287)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":522 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 527 526 528 36 (parallel [
            (set (reg:DI 288)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -96 [0xffffffffffffffa0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":522 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 528 527 529 36 (set (reg:DI 2 cx)
        (reg:DI 287)) "function.c":522 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 287)
        (nil)))
(insn 529 528 530 36 (set (reg:DI 1 dx)
        (symbol_ref:DI ("bestia") [flags 0x3]  <function_decl 0x7f7cd1169a00 bestia>)) "function.c":522 85 {*movdi_internal}
     (nil))
(insn 530 529 531 36 (set (reg:DI 4 si)
        (const_int 0 [0])) "function.c":522 85 {*movdi_internal}
     (nil))
(insn 531 530 532 36 (set (reg:DI 5 di)
        (reg:DI 288)) "function.c":522 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 288)
        (nil)))
(call_insn 532 531 533 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pthread_create") [flags 0x41]  <function_decl 0x7f7cd1033700 pthread_create>) [0 pthread_create S1 A8])
            (const_int 0 [0]))) "function.c":522 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (expr_list:REG_EH_REGION (const_int 0 [0])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 533 532 534 36 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 bestia_licznik+0 S4 A32])
        (const_int 1 [0x1])) "function.c":523 86 {*movsi_internal}
     (nil))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       34
;;              35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 206
(code_label 534 533 535 37 62 (nil) [2 uses])
(note 535 534 536 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 536 535 537 37 (set (reg:QI 206 [ BESTIA_ON.69_120 ])
        (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])) "function.c":526 88 {*movqi_internal}
     (nil))
(insn 537 536 538 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 206 [ BESTIA_ON.69_120 ])
            (const_int 0 [0]))) "function.c":526 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 206 [ BESTIA_ON.69_120 ])
        (nil)))
(jump_insn 538 537 539 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 569)
            (pc))) "function.c":526 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 569)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 207 208 209 210 211 289 290 291
(note 539 538 540 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 38 (set (reg:DI 289)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [18 sem_bestia1+0 S8 A64])) "function.c":528 85 {*movdi_internal}
     (nil))
(insn 541 540 542 38 (set (reg:DI 5 di)
        (reg:DI 289)) "function.c":528 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 289)
        (nil)))
(call_insn 542 541 543 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":528 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 543 542 544 38 (set (reg:DI 290)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -80 [0xffffffffffffffb0])) [18 sem_bestia2+0 S8 A64])) "function.c":529 85 {*movdi_internal}
     (nil))
(insn 544 543 545 38 (set (reg:DI 5 di)
        (reg:DI 290)) "function.c":529 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 290)
        (nil)))
(call_insn 545 544 546 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":529 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 546 545 547 38 (set (reg:SI 207 [ _121 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -128 [0xffffffffffffff80])) [3 serwerinfo.bestia.x+0 S4 A64])) "function.c":530 86 {*movsi_internal}
     (nil))
(insn 547 546 548 38 (set (reg:SI 208 [ _122 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -124 [0xffffffffffffff84])) [3 serwerinfo.bestia.y+0 S4 A32])) "function.c":530 86 {*movsi_internal}
     (nil))
(insn 548 547 549 38 (set (reg/f:DI 209 [ stdscr.70_123 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":530 85 {*movdi_internal}
     (nil))
(insn 549 548 550 38 (set (reg:SI 1 dx)
        (reg:SI 207 [ _121 ])) "function.c":530 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 207 [ _121 ])
        (nil)))
(insn 550 549 551 38 (set (reg:SI 4 si)
        (reg:SI 208 [ _122 ])) "function.c":530 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 208 [ _122 ])
        (nil)))
(insn 551 550 552 38 (set (reg:DI 5 di)
        (reg/f:DI 209 [ stdscr.70_123 ])) "function.c":530 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 209 [ stdscr.70_123 ])
        (nil)))
(call_insn 552 551 553 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":530 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 553 552 554 38 (set (reg/f:DI 210 [ stdscr.71_124 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":531 85 {*movdi_internal}
     (nil))
(insn 554 553 555 38 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":531 85 {*movdi_internal}
     (nil))
(insn 555 554 556 38 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":531 86 {*movsi_internal}
     (nil))
(insn 556 555 557 38 (set (reg:DI 5 di)
        (reg/f:DI 210 [ stdscr.71_124 ])) "function.c":531 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 210 [ stdscr.71_124 ])
        (nil)))
(call_insn 557 556 558 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":531 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 558 557 559 38 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7f7cd0f0d510 *.LC40>)) "function.c":532 85 {*movdi_internal}
     (nil))
(insn 559 558 560 38 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":532 88 {*movqi_internal}
     (nil))
(call_insn 560 559 561 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":532 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 561 560 562 38 (set (reg/f:DI 211 [ stdscr.72_125 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":533 85 {*movdi_internal}
     (nil))
(insn 562 561 563 38 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":533 85 {*movdi_internal}
     (nil))
(insn 563 562 564 38 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":533 86 {*movsi_internal}
     (nil))
(insn 564 563 565 38 (set (reg:DI 5 di)
        (reg/f:DI 211 [ stdscr.72_125 ])) "function.c":533 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 211 [ stdscr.72_125 ])
        (nil)))
(call_insn 565 564 566 38 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":533 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 566 565 567 38 (parallel [
            (set (reg:DI 291)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":534 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 567 566 568 38 (set (reg:DI 5 di)
        (reg:DI 291)) "function.c":534 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 291)
        (nil)))
(call_insn 568 567 569 38 (call (mem:QI (symbol_ref:DI ("bestia_kolizja") [flags 0x3]  <function_decl 0x7f7cd1178e00 bestia_kolizja>) [0 bestia_kolizja S1 A8])
        (const_int 0 [0])) "function.c":534 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       37
;;              38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 212 213 214 292 293 294 295
(code_label 569 568 570 39 63 (nil) [1 uses])
(note 570 569 571 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 571 570 572 39 (parallel [
            (set (reg:DI 292)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":537 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 572 571 573 39 (set (reg:DI 5 di)
        (reg:DI 292)) "function.c":537 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 292)
        (nil)))
(call_insn 573 572 574 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja1") [flags 0x3]  <function_decl 0x7f7cd1178500 wizja1>) [0 wizja1 S1 A8])
            (const_int 0 [0]))) "function.c":537 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 574 573 575 39 (parallel [
            (set (reg:DI 293)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36208 [0xffffffffffff7290])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":538 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 575 574 576 39 (set (reg:DI 5 di)
        (reg:DI 293)) "function.c":538 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 293)
        (nil)))
(call_insn 576 575 577 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wizja2") [flags 0x3]  <function_decl 0x7f7cd1178600 wizja2>) [0 wizja2 S1 A8])
            (const_int 0 [0]))) "function.c":538 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 577 576 578 39 (parallel [
            (set (reg:DI 294)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":540 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 578 577 579 39 (set (reg:DI 5 di)
        (reg:DI 294)) "function.c":540 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 294)
        (nil)))
(call_insn 579 578 580 39 (call (mem:QI (symbol_ref:DI ("player_kolizja") [flags 0x3]  <function_decl 0x7f7cd1178f00 player_kolizja>) [0 player_kolizja S1 A8])
        (const_int 0 [0])) "function.c":540 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 580 579 581 39 (parallel [
            (set (reg:DI 295)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":542 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 581 580 582 39 (set (reg:DI 5 di)
        (reg:DI 295)) "function.c":542 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 295)
        (nil)))
(call_insn 582 581 583 39 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("collect_skarb") [flags 0x3]  <function_decl 0x7f7cd1178a00 collect_skarb>) [0 collect_skarb S1 A8])
            (const_int 0 [0]))) "function.c":542 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:DI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 583 582 584 39 (set (reg/f:DI 212 [ _126 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":544 85 {*movdi_internal}
     (nil))
(insn 584 583 585 39 (set (reg:SI 213 [ _127 ])
        (mem:SI (reg/f:DI 212 [ _126 ]) [3 _126->PID+0 S4 A64])) "function.c":544 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 212 [ _126 ])
        (nil)))
(insn 585 584 586 39 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":544 86 {*movsi_internal}
     (nil))
(insn 586 585 587 39 (set (reg:SI 5 di)
        (reg:SI 213 [ _127 ])) "function.c":544 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 213 [ _127 ])
        (nil)))
(call_insn 587 586 588 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("kill") [flags 0x41]  <function_decl 0x7f7cd1125500 kill>) [0 kill S1 A8])
            (const_int 0 [0]))) "function.c":544 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 588 587 589 39 (set (reg:SI 214 [ _128 ])
        (reg:SI 0 ax)) "function.c":544 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 589 588 590 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 214 [ _128 ])
            (const_int 0 [0]))) "function.c":544 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 214 [ _128 ])
        (nil)))
(jump_insn 590 589 591 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 598)
            (pc))) "function.c":544 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 598)
;;  succ:       40 (FALLTHRU)
;;              41
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 296 297
(note 591 590 592 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 592 591 593 40 (set (reg:DI 296)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_p1+0 S8 A64])) "function.c":546 85 {*movdi_internal}
     (nil))
(insn 593 592 594 40 (set (reg:DI 5 di)
        (reg:DI 296)) "function.c":546 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 296)
        (nil)))
(call_insn 594 593 595 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":546 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 595 594 596 40 (set (reg:DI 297)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [18 sem_p1_pom+0 S8 A64])) "function.c":547 85 {*movdi_internal}
     (nil))
(insn 596 595 597 40 (set (reg:DI 5 di)
        (reg:DI 297)) "function.c":547 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 297)
        (nil)))
(call_insn 597 596 598 40 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":547 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       41 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL)
;;  pred:       39
;;              40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 215 216 217
(code_label 598 597 599 41 64 (nil) [1 uses])
(note 599 598 600 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 600 599 601 41 (set (reg/f:DI 215 [ _129 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":550 85 {*movdi_internal}
     (nil))
(insn 601 600 602 41 (set (reg:SI 216 [ _130 ])
        (mem:SI (reg/f:DI 215 [ _129 ]) [3 _129->PID+0 S4 A64])) "function.c":550 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 215 [ _129 ])
        (nil)))
(insn 602 601 603 41 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":550 86 {*movsi_internal}
     (nil))
(insn 603 602 604 41 (set (reg:SI 5 di)
        (reg:SI 216 [ _130 ])) "function.c":550 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 216 [ _130 ])
        (nil)))
(call_insn 604 603 605 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("kill") [flags 0x41]  <function_decl 0x7f7cd1125500 kill>) [0 kill S1 A8])
            (const_int 0 [0]))) "function.c":550 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 605 604 606 41 (set (reg:SI 217 [ _131 ])
        (reg:SI 0 ax)) "function.c":550 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 606 605 607 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 217 [ _131 ])
            (const_int 0 [0]))) "function.c":550 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 217 [ _131 ])
        (nil)))
(jump_insn 607 606 608 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 617)
            (pc))) "function.c":550 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 617)
;;  succ:       42 (FALLTHRU)
;;              43
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL)
;;  pred:       41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 298 299
(note 608 607 609 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 609 608 610 42 (set (reg:DI 298)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [18 sem_p2+0 S8 A64])) "function.c":552 85 {*movdi_internal}
     (nil))
(insn 610 609 611 42 (set (reg:DI 5 di)
        (reg:DI 298)) "function.c":552 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 298)
        (nil)))
(call_insn 611 610 612 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":552 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 612 611 613 42 (set (reg:DI 299)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [18 sem_p2_pom+0 S8 A64])) "function.c":553 85 {*movdi_internal}
     (nil))
(insn 613 612 614 42 (set (reg:DI 5 di)
        (reg:DI 299)) "function.c":553 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 299)
        (nil)))
(call_insn 614 613 708 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":553 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 708 614 709 42 (set (pc)
        (label_ref 623)) 683 {jump}
     (nil)
 -> 623)
;;  succ:       44 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 709 708 617)
;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL)
;;  pred:       41
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 218 219
(code_label 617 709 618 43 65 (nil) [1 uses])
(note 618 617 619 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 619 618 620 43 (set (reg/f:DI 218 [ _132 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":557 85 {*movdi_internal}
     (nil))
(insn 620 619 621 43 (set (mem:SI (plus:DI (reg/f:DI 218 [ _132 ])
                (const_int 16 [0x10])) [3 _132->y_current+0 S4 A64])
        (const_int 0 [0])) "function.c":557 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 218 [ _132 ])
        (nil)))
(insn 621 620 622 43 (set (reg/f:DI 219 [ _133 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":558 85 {*movdi_internal}
     (nil))
(insn 622 621 623 43 (set (mem:SI (plus:DI (reg/f:DI 219 [ _133 ])
                (const_int 12 [0xc])) [3 _133->x_current+0 S4 A32])
        (const_int 0 [0])) "function.c":558 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 219 [ _133 ])
        (nil)))
;;  succ:       44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL)
;;  pred:       43 (FALLTHRU)
;;              42 [always] 
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 220 221 300 301
(code_label 623 622 624 44 66 (nil) [1 uses])
(note 624 623 625 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 625 624 626 44 (parallel [
            (set (reg:DI 300)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":561 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 626 625 627 44 (set (reg:DI 5 di)
        (reg:DI 300)) "function.c":561 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 300)
        (nil)))
(call_insn 627 626 628 44 (call (mem:QI (symbol_ref:DI ("oboz_coins") [flags 0x3]  <function_decl 0x7f7cd1178c00 oboz_coins>) [0 oboz_coins S1 A8])
        (const_int 0 [0])) "function.c":561 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 628 627 629 44 (parallel [
            (set (reg:DI 301)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -36192 [0xffffffffffff72a0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":563 222 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 629 628 630 44 (set (reg:DI 5 di)
        (reg:DI 301)) "function.c":563 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 301)
        (nil)))
(call_insn 630 629 631 44 (call (mem:QI (symbol_ref:DI ("druk_info_plansza_s") [flags 0x3]  <function_decl 0x7f7cd1169800 druk_info_plansza_s>) [0 druk_info_plansza_s S1 A8])
        (const_int 0 [0])) "function.c":563 689 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 631 630 632 44 (set (reg/f:DI 220 [ stdscr.73_134 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":565 85 {*movdi_internal}
     (nil))
(insn 632 631 633 44 (set (reg:DI 5 di)
        (reg/f:DI 220 [ stdscr.73_134 ])) "function.c":565 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 220 [ stdscr.73_134 ])
        (nil)))
(call_insn 633 632 634 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wrefresh") [flags 0x41]  <function_decl 0x7f7cd10cd300 wrefresh>) [0 wrefresh S1 A8])
            (const_int 0 [0]))) "function.c":565 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 634 633 635 44 (set (reg:QI 221 [ END.74_135 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":567 88 {*movqi_internal}
     (nil))
(insn 635 634 636 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 221 [ END.74_135 ])
            (const_int 113 [0x71]))) "function.c":567 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 221 [ END.74_135 ])
        (nil)))
(jump_insn 636 635 637 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 674)
            (pc))) "function.c":567 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 674)
;;  succ:       45 (FALLTHRU)
;;              48
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 222 302
(note 637 636 638 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 638 637 639 45 (set (reg:DI 302)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -72 [0xffffffffffffffb8])) [18 sem_bestia1+0 S8 A64])) "function.c":569 85 {*movdi_internal}
     (nil))
(insn 639 638 640 45 (set (reg:DI 5 di)
        (reg:DI 302)) "function.c":569 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 302)
        (nil)))
(call_insn 640 639 641 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":569 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 641 640 642 45 (set (reg:QI 222 [ BESTIA_ON.75_136 ])
        (mem/c:QI (symbol_ref:DI ("BESTIA_ON") [flags 0x2]  <var_decl 0x7f7cd111b5a0 BESTIA_ON>) [0 BESTIA_ON+0 S1 A8])) "function.c":571 88 {*movqi_internal}
     (nil))
(insn 642 641 643 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 222 [ BESTIA_ON.75_136 ])
            (const_int 0 [0]))) "function.c":571 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 222 [ BESTIA_ON.75_136 ])
        (nil)))
(jump_insn 643 642 644 45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 649)
            (pc))) "function.c":571 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 649)
;;  succ:       46 (FALLTHRU)
;;              47
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 223
(note 644 643 645 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 645 644 646 46 (set (reg:DI 223 [ bestia1.76_137 ])
        (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [7 bestia1+0 S8 A64])) "function.c":573 85 {*movdi_internal}
     (nil))
(insn 646 645 647 46 (set (reg:DI 4 si)
        (const_int 0 [0])) "function.c":573 85 {*movdi_internal}
     (nil))
(insn 647 646 648 46 (set (reg:DI 5 di)
        (reg:DI 223 [ bestia1.76_137 ])) "function.c":573 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 223 [ bestia1.76_137 ])
        (nil)))
(call_insn 648 647 649 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pthread_join") [flags 0x41]  <function_decl 0x7f7cd1033900 pthread_join>) [0 pthread_join S1 A8])
            (const_int 0 [0]))) "function.c":573 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL)
;;  pred:       45
;;              46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 224 225 229
(code_label 649 648 650 47 68 (nil) [1 uses])
(note 650 649 651 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 651 650 652 47 (set (reg/f:DI 224 [ _138 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36160 [0xffffffffffff72c0])) [14 serwerinfo.player1+0 S8 A64])) "function.c":576 85 {*movdi_internal}
     (nil))
(insn 652 651 653 47 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":576 85 {*movdi_internal}
     (nil))
(insn 653 652 654 47 (set (reg:DI 5 di)
        (reg/f:DI 224 [ _138 ])) "function.c":576 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 224 [ _138 ])
        (nil)))
(call_insn 654 653 655 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("munmap") [flags 0x41]  <function_decl 0x7f7cd133c100 munmap>) [0 munmap S1 A8])
            (const_int 0 [0]))) "function.c":576 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 655 654 656 47 (set (reg/f:DI 225 [ _139 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -36152 [0xffffffffffff72c8])) [14 serwerinfo.player2+0 S8 A64])) "function.c":577 85 {*movdi_internal}
     (nil))
(insn 656 655 657 47 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":577 85 {*movdi_internal}
     (nil))
(insn 657 656 658 47 (set (reg:DI 5 di)
        (reg/f:DI 225 [ _139 ])) "function.c":577 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 225 [ _139 ])
        (nil)))
(call_insn 658 657 659 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("munmap") [flags 0x41]  <function_decl 0x7f7cd133c100 munmap>) [0 munmap S1 A8])
            (const_int 0 [0]))) "function.c":577 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 659 658 660 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7f7cd0f0d1b0 *.LC34>)) "function.c":578 85 {*movdi_internal}
     (nil))
(call_insn 660 659 661 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":578 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 661 660 662 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC35") [flags 0x2]  <var_decl 0x7f7cd0f0d240 *.LC35>)) "function.c":579 85 {*movdi_internal}
     (nil))
(call_insn 662 661 663 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":579 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 663 662 664 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f7cd0f0d2d0 *.LC36>)) "function.c":580 85 {*movdi_internal}
     (nil))
(call_insn 664 663 665 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":580 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 665 664 666 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f7cd0f0d360 *.LC37>)) "function.c":581 85 {*movdi_internal}
     (nil))
(call_insn 666 665 667 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":581 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 667 666 668 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f7cd0ef3870 *.LC32>)) "function.c":582 85 {*movdi_internal}
     (nil))
(call_insn 668 667 669 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":582 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 669 668 670 47 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f7cd0ef3900 *.LC33>)) "function.c":583 85 {*movdi_internal}
     (nil))
(call_insn 670 669 671 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":583 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 671 670 711 47 (set (reg/f:DI 229 [ _306 ])
        (const_int 0 [0])) "function.c":585 85 {*movdi_internal}
     (nil))
(jump_insn 711 671 712 47 (set (pc)
        (label_ref 710)) 683 {jump}
     (nil)
 -> 710)
;;  succ:       49 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229

(barrier 712 711 674)
;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL)
;;  pred:       44
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 226 227 228
(code_label 674 712 675 48 67 (nil) [1 uses])
(note 675 674 676 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 676 675 677 48 (set (reg/f:DI 226 [ stdscr.77_140 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":589 85 {*movdi_internal}
     (nil))
(insn 677 676 678 48 (set (reg:DI 5 di)
        (reg/f:DI 226 [ stdscr.77_140 ])) "function.c":589 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 226 [ stdscr.77_140 ])
        (nil)))
(call_insn 678 677 679 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wclear") [flags 0x41]  <function_decl 0x7f7cd10c4800 wclear>) [0 wclear S1 A8])
            (const_int 0 [0]))) "function.c":589 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 679 678 680 48 (set (reg:SI 5 di)
        (const_int 1000000 [0xf4240])) "function.c":590 86 {*movsi_internal}
     (nil))
(call_insn 680 679 681 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("usleep") [flags 0x41]  <function_decl 0x7f7cd1368000 usleep>) [0 usleep S1 A8])
            (const_int 0 [0]))) "function.c":590 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 681 680 682 48 (set (reg:SI 227 [ _141 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36180 [0xffffffffffff72ac])) [3 serwerinfo.runda+0 S4 A32])) "function.c":592 86 {*movsi_internal}
     (nil))
(insn 682 681 683 48 (parallel [
            (set (reg:SI 228 [ _142 ])
                (plus:SI (reg:SI 227 [ _141 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":592 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 227 [ _141 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 683 682 713 48 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36180 [0xffffffffffff72ac])) [3 serwerinfo.runda+0 S4 A32])
        (reg:SI 228 [ _142 ])) "function.c":592 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 228 [ _142 ])
        (nil)))
(jump_insn 713 683 714 48 (set (pc)
        (label_ref 684)) "function.c":377 683 {jump}
     (nil)
 -> 684)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 714 713 710)
;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL)
;;  pred:       47 [always] 
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 229
;; lr  def 	 0 [ax] 230
(code_label 710 714 688 49 71 (nil) [1 uses])
(note 688 710 689 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 689 688 693 49 (set (reg/f:DI 230 [ <retval> ])
        (reg/f:DI 229 [ _306 ])) 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 229 [ _306 ])
        (nil)))
(insn 693 689 694 49 (set (reg/i:DI 0 ax)
        (reg/f:DI 230 [ <retval> ])) "function.c":595 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 230 [ <retval> ])
        (nil)))
(insn 694 693 0 49 (use (reg/i:DI 0 ax)) "function.c":595 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function gracz_fun (gracz_fun, funcdef_no=12, decl_uid=6227, cgraph_uid=12, symbol_order=15)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 30 n_edges 43 count 30 (    1)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
;;
;; Loop 1
;;  header 3, latch 28
;;  depth 1, outer 0
;;  nodes: 3 28 26 25 24 23 22 4 21 6 11 16 18 20 19 17 15 14 13 12 10 9 8 7 5
;;
;; Loop 2
;;  header 25, latch 24
;;  depth 2, outer 1
;;  nodes: 25 24 23 22 4 21 6 11 16 18 20 19 17 15 14 13 12 10 9 8 7 5
;;
;; Loop 3
;;  header 23, latch 22
;;  depth 3, outer 2
;;  nodes: 23 22 21 6 11 16 18 20 19 17 15 14 13 12 10 9 8 7 5
;; 2 succs { 3 }
;; 3 succs { 25 }
;; 4 succs { 23 }
;; 5 succs { 6 7 }
;; 6 succs { 22 }
;; 7 succs { 11 8 }
;; 8 succs { 11 9 }
;; 9 succs { 11 10 }
;; 10 succs { 11 12 }
;; 11 succs { 22 }
;; 12 succs { 16 13 }
;; 13 succs { 16 14 }
;; 14 succs { 16 15 }
;; 15 succs { 16 17 }
;; 16 succs { 22 }
;; 17 succs { 18 19 }
;; 18 succs { 22 }
;; 19 succs { 20 21 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 23 }
;; 23 succs { 5 24 }
;; 24 succs { 25 }
;; 25 succs { 4 26 }
;; 26 succs { 27 28 }
;; 27 succs { 29 }
;; 28 succs { 3 }
;; 29 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 61.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 111.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 198.
verify found no changes in insn with uid = 260.
verify found no changes in insn with uid = 275.
verify found no changes in insn with uid = 280.
verify found no changes in insn with uid = 302.
verify found no changes in insn with uid = 305.
verify found no changes in insn with uid = 310.
verify found no changes in insn with uid = 332.
verify found no changes in insn with uid = 335.
verify found no changes in insn with uid = 340.
verify found no changes in insn with uid = 359.
verify found no changes in insn with uid = 380.
verify found no changes in insn with uid = 386.
verify found no changes in insn with uid = 391.
verify found no changes in insn with uid = 394.
verify found no changes in insn with uid = 399.
verify found no changes in insn with uid = 402.
verify found no changes in insn with uid = 407.
verify found no changes in insn with uid = 413.
verify found no changes in insn with uid = 418.
verify found no changes in insn with uid = 421.
verify found no changes in insn with uid = 426.
verify found no changes in insn with uid = 432.
verify found no changes in insn with uid = 437.
verify found no changes in insn with uid = 440.
verify found no changes in insn with uid = 445.
verify found no changes in insn with uid = 454.
verify found no changes in insn with uid = 459.
verify found no changes in insn with uid = 465.
verify found no changes in insn with uid = 470.
verify found no changes in insn with uid = 476.
verify found no changes in insn with uid = 481.
verify found no changes in insn with uid = 487.
verify found no changes in insn with uid = 492.
verify found no changes in insn with uid = 495.
verify found no changes in insn with uid = 500.
verify found no changes in insn with uid = 505.
verify found no changes in insn with uid = 508.
verify found no changes in insn with uid = 513.
verify found no changes in insn with uid = 516.
verify found no changes in insn with uid = 521.
verify found no changes in insn with uid = 526.
verify found no changes in insn with uid = 529.
verify found no changes in insn with uid = 534.
verify found no changes in insn with uid = 537.
verify found no changes in insn with uid = 542.
verify found no changes in insn with uid = 545.
verify found no changes in insn with uid = 550.
verify found no changes in insn with uid = 555.
verify found no changes in insn with uid = 558.
verify found no changes in insn with uid = 563.
verify found no changes in insn with uid = 568.
verify found no changes in insn with uid = 573.
verify found no changes in insn with uid = 576.
verify found no changes in insn with uid = 581.
verify found no changes in insn with uid = 584.
verify found no changes in insn with uid = 589.
verify found no changes in insn with uid = 592.
verify found no changes in insn with uid = 597.
verify found no changes in insn with uid = 600.
verify found no changes in insn with uid = 605.
verify found no changes in insn with uid = 610.
verify found no changes in insn with uid = 613.
verify found no changes in insn with uid = 618.
verify found no changes in insn with uid = 621.
verify found no changes in insn with uid = 626.
verify found no changes in insn with uid = 631.
verify found no changes in insn with uid = 634.
verify found no changes in insn with uid = 639.
verify found no changes in insn with uid = 642.
verify found no changes in insn with uid = 647.
verify found no changes in insn with uid = 652.
verify found no changes in insn with uid = 655.
verify found no changes in insn with uid = 660.
verify found no changes in insn with uid = 663.
verify found no changes in insn with uid = 666.
verify found no changes in insn with uid = 669.
verify found no changes in insn with uid = 677.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r318: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r318,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r317,l0) best DIREG, allocno GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r316,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r315,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r314,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r313: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r313,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r312,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r311,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r310,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r309,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r308,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r307,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r304,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r303,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r301,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r297,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r295,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r294,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r286,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r283,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r278,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r275,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r274,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r272,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r268,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r267,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r266,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r259,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a172 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a175 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a173 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a176 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a217 (r180,l0) best DIREG, allocno GENERAL_REGS
    r179: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a218 (r179,l0) best AREG, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a221 (r177,l0) best AREG, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a223 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a224 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a226 (r174,l0) best AREG, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a228 (r172,l0) best AREG, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a230 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a231 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r169,l0) best AREG, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r167,l0) best DIREG, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r165,l0) best DIREG, allocno GENERAL_REGS
    r164: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r164,l0) best DIREG, allocno GENERAL_REGS
    r163: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r163,l0) best DIREG, allocno GENERAL_REGS
    r162: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r162,l0) best DIREG, allocno GENERAL_REGS
    r161: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r161,l0) best DIREG, allocno GENERAL_REGS
    r160: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r160,l0) best DIREG, allocno GENERAL_REGS
    r159: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r159,l0) best DIREG, allocno GENERAL_REGS
    r158: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r158,l0) best DIREG, allocno GENERAL_REGS
    r157: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r157,l0) best DIREG, allocno GENERAL_REGS
    r156: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r156,l0) best DIREG, allocno GENERAL_REGS
    r155: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r155,l0) best DIREG, allocno GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r154,l0) best DIREG, allocno GENERAL_REGS
    r153: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r153,l0) best DIREG, allocno GENERAL_REGS
    r152: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r152,l0) best DIREG, allocno GENERAL_REGS
    r151: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r151,l0) best DIREG, allocno GENERAL_REGS
    r150: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r150,l0) best DIREG, allocno GENERAL_REGS
    r149: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r149,l0) best DIREG, allocno GENERAL_REGS
    r148: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r148,l0) best DIREG, allocno GENERAL_REGS
    r147: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r147,l0) best DIREG, allocno GENERAL_REGS
    r146: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r146,l0) best DIREG, allocno GENERAL_REGS
    r145: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r145,l0) best DIREG, allocno GENERAL_REGS
    r144: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r144,l0) best DIREG, allocno GENERAL_REGS
    r143: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r143,l0) best DIREG, allocno GENERAL_REGS
    r142: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r142,l0) best DIREG, allocno GENERAL_REGS
    r141: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r141,l0) best DIREG, allocno GENERAL_REGS
    r140: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r140,l0) best DIREG, allocno GENERAL_REGS
    r139: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r139,l0) best SIREG, allocno GENERAL_REGS
    r138: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r138,l0) best DIREG, allocno GENERAL_REGS
    r137: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a35 (r137,l0) best SIREG, allocno GENERAL_REGS
    r136: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r136,l0) best DIREG, allocno GENERAL_REGS
    r135: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a38 (r135,l0) best SIREG, allocno GENERAL_REGS
    r134: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r134,l0) best DIREG, allocno GENERAL_REGS
    r133: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r133,l0) best SIREG, allocno GENERAL_REGS
    r132: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a42 (r132,l0) best DREG, allocno GENERAL_REGS
    r131: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a45 (r131,l0) best DIREG, allocno GENERAL_REGS
    r130: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a46 (r130,l0) best DIREG, allocno GENERAL_REGS
    r129: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r129,l0) best SIREG, allocno GENERAL_REGS
    r128: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a49 (r128,l0) best DIREG, allocno GENERAL_REGS
    r127: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r127,l0) best DIREG, allocno GENERAL_REGS
    r126: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a51 (r126,l0) best SIREG, allocno GENERAL_REGS
    r125: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a53 (r125,l0) best DIREG, allocno GENERAL_REGS
    r124: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a54 (r124,l0) best DIREG, allocno GENERAL_REGS
    r123: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a55 (r123,l0) best DIREG, allocno GENERAL_REGS
    r122: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r122,l0) best SIREG, allocno GENERAL_REGS
    r121: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a58 (r121,l0) best DIREG, allocno GENERAL_REGS
    r120: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a59 (r120,l0) best SIREG, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a70 (r118,l0) best DIREG, allocno GENERAL_REGS
    r117: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a71 (r117,l0) best DIREG, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a82 (r115,l0) best DIREG, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a83 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a94 (r112,l0) best DIREG, allocno GENERAL_REGS
    r111: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a95 (r111,l0) best SIREG, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a106 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a147 (r104,l0) best DIREG, allocno GENERAL_REGS
    r103: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a148 (r103,l0) best SIREG, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a159 (r101,l0) best DIREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a190 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a200 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a201 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a212 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a213 (r92,l0) best SIREG, allocno GENERAL_REGS
    r91: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a214 (r91,l0) best DREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a219 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a222 (r89,l0) best DIREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a225 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a229 (r87,l0) best DIREG, allocno GENERAL_REGS

  a0(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r318,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a5(r317,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a15(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a17(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a20(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a23(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a26(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a28(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a29(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a30(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a31(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a32(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r316,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a35(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a36(r315,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a38(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a39(r314,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a41(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a42(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r313,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r312,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a46(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a47(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r311,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a49(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a50(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r310,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a54(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a55(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a57(r309,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a59(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a60(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a61(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r307,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a63(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a64(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a65(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a66(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a67(r303,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a68(r304,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a69(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a70(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a71(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a72(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a73(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a74(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a75(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a77(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a78(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a79(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a80(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a81(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a82(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a83(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a84(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a85(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a86(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a87(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a89(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a92(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a93(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a94(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a95(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a97(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a98(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a99(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a100(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a101(r278,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a102(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a103(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a104(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a105(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a106(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a107(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a108(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a109(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a110(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a111(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a112(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a113(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a114(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a115(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a116(r266,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a117(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a118(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a119(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a120(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a121(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a122(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a123(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a124(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a125(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a126(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a127(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a128(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a129(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a130(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a131(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a132(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a133(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a134(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a135(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a136(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a137(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a138(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a139(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a140(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a141(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a142(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a143(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a144(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a145(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a146(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a147(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a148(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a149(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a150(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a151(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a152(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a153(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a154(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a155(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a156(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a157(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a158(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a159(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a160(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a161(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a162(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a163(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a164(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a165(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a166(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a167(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a168(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a169(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a170(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a171(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a172(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a173(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a174(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a175(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a176(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a177(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a178(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a179(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a180(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a181(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a182(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a183(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a184(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a185(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a186(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a187(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a188(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a189(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a190(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a191(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a192(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a193(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a194(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a195(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a196(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a197(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a198(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a199(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a200(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a201(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a202(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a203(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a204(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a205(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a206(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a207(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a208(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a209(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a210(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a211(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a212(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a213(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a214(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a215(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a216(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a217(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a218(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a219(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a220(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a221(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a222(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a223(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a224(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a225(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a226(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a227(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a228(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a229(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a230(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a231(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 693(l0): point = 0
   Insn 692(l0): point = 2
   Insn 688(l0): point = 4
   Insn 710(l0): point = 7
   Insn 678(l0): point = 9
   Insn 677(l0): point = 11
   Insn 676(l0): point = 13
   Insn 675(l0): point = 15
   Insn 674(l0): point = 17
   Insn 695(l0): point = 20
   Insn 74(l0): point = 22
   Insn 73(l0): point = 24
   Insn 72(l0): point = 26
   Insn 71(l0): point = 28
   Insn 712(l0): point = 31
   Insn 672(l0): point = 34
   Insn 671(l0): point = 36
   Insn 670(l0): point = 38
   Insn 669(l0): point = 40
   Insn 668(l0): point = 42
   Insn 667(l0): point = 44
   Insn 666(l0): point = 46
   Insn 665(l0): point = 48
   Insn 664(l0): point = 50
   Insn 663(l0): point = 52
   Insn 662(l0): point = 54
   Insn 661(l0): point = 56
   Insn 660(l0): point = 58
   Insn 659(l0): point = 60
   Insn 658(l0): point = 62
   Insn 657(l0): point = 64
   Insn 656(l0): point = 66
   Insn 655(l0): point = 68
   Insn 654(l0): point = 70
   Insn 653(l0): point = 72
   Insn 652(l0): point = 74
   Insn 651(l0): point = 76
   Insn 650(l0): point = 78
   Insn 649(l0): point = 80
   Insn 648(l0): point = 82
   Insn 647(l0): point = 84
   Insn 646(l0): point = 86
   Insn 645(l0): point = 88
   Insn 644(l0): point = 90
   Insn 643(l0): point = 92
   Insn 642(l0): point = 94
   Insn 641(l0): point = 96
   Insn 640(l0): point = 98
   Insn 639(l0): point = 100
   Insn 638(l0): point = 102
   Insn 637(l0): point = 104
   Insn 636(l0): point = 106
   Insn 635(l0): point = 108
   Insn 634(l0): point = 110
   Insn 633(l0): point = 112
   Insn 632(l0): point = 114
   Insn 631(l0): point = 116
   Insn 630(l0): point = 118
   Insn 629(l0): point = 120
   Insn 628(l0): point = 122
   Insn 627(l0): point = 124
   Insn 626(l0): point = 126
   Insn 625(l0): point = 128
   Insn 624(l0): point = 130
   Insn 623(l0): point = 132
   Insn 622(l0): point = 134
   Insn 621(l0): point = 136
   Insn 620(l0): point = 138
   Insn 619(l0): point = 140
   Insn 618(l0): point = 142
   Insn 617(l0): point = 144
   Insn 616(l0): point = 146
   Insn 615(l0): point = 148
   Insn 614(l0): point = 150
   Insn 613(l0): point = 152
   Insn 612(l0): point = 154
   Insn 611(l0): point = 156
   Insn 610(l0): point = 158
   Insn 609(l0): point = 160
   Insn 608(l0): point = 162
   Insn 607(l0): point = 164
   Insn 606(l0): point = 166
   Insn 605(l0): point = 168
   Insn 604(l0): point = 170
   Insn 603(l0): point = 172
   Insn 602(l0): point = 174
   Insn 601(l0): point = 176
   Insn 600(l0): point = 178
   Insn 599(l0): point = 180
   Insn 598(l0): point = 182
   Insn 597(l0): point = 184
   Insn 596(l0): point = 186
   Insn 595(l0): point = 188
   Insn 594(l0): point = 190
   Insn 593(l0): point = 192
   Insn 592(l0): point = 194
   Insn 591(l0): point = 196
   Insn 590(l0): point = 198
   Insn 589(l0): point = 200
   Insn 588(l0): point = 202
   Insn 587(l0): point = 204
   Insn 586(l0): point = 206
   Insn 585(l0): point = 208
   Insn 584(l0): point = 210
   Insn 583(l0): point = 212
   Insn 582(l0): point = 214
   Insn 581(l0): point = 216
   Insn 580(l0): point = 218
   Insn 579(l0): point = 220
   Insn 578(l0): point = 222
   Insn 577(l0): point = 224
   Insn 576(l0): point = 226
   Insn 575(l0): point = 228
   Insn 574(l0): point = 230
   Insn 573(l0): point = 232
   Insn 572(l0): point = 234
   Insn 571(l0): point = 236
   Insn 570(l0): point = 238
   Insn 569(l0): point = 240
   Insn 568(l0): point = 242
   Insn 567(l0): point = 244
   Insn 566(l0): point = 246
   Insn 565(l0): point = 248
   Insn 564(l0): point = 250
   Insn 563(l0): point = 252
   Insn 562(l0): point = 254
   Insn 561(l0): point = 256
   Insn 560(l0): point = 258
   Insn 559(l0): point = 260
   Insn 558(l0): point = 262
   Insn 557(l0): point = 264
   Insn 556(l0): point = 266
   Insn 555(l0): point = 268
   Insn 554(l0): point = 270
   Insn 553(l0): point = 272
   Insn 552(l0): point = 274
   Insn 551(l0): point = 276
   Insn 550(l0): point = 278
   Insn 549(l0): point = 280
   Insn 548(l0): point = 282
   Insn 547(l0): point = 284
   Insn 546(l0): point = 286
   Insn 545(l0): point = 288
   Insn 544(l0): point = 290
   Insn 543(l0): point = 292
   Insn 542(l0): point = 294
   Insn 541(l0): point = 296
   Insn 540(l0): point = 298
   Insn 539(l0): point = 300
   Insn 538(l0): point = 302
   Insn 537(l0): point = 304
   Insn 536(l0): point = 306
   Insn 535(l0): point = 308
   Insn 534(l0): point = 310
   Insn 533(l0): point = 312
   Insn 532(l0): point = 314
   Insn 531(l0): point = 316
   Insn 530(l0): point = 318
   Insn 529(l0): point = 320
   Insn 528(l0): point = 322
   Insn 527(l0): point = 324
   Insn 526(l0): point = 326
   Insn 525(l0): point = 328
   Insn 524(l0): point = 330
   Insn 523(l0): point = 332
   Insn 522(l0): point = 334
   Insn 521(l0): point = 336
   Insn 520(l0): point = 338
   Insn 519(l0): point = 340
   Insn 518(l0): point = 342
   Insn 517(l0): point = 344
   Insn 516(l0): point = 346
   Insn 515(l0): point = 348
   Insn 514(l0): point = 350
   Insn 513(l0): point = 352
   Insn 512(l0): point = 354
   Insn 511(l0): point = 356
   Insn 510(l0): point = 358
   Insn 509(l0): point = 360
   Insn 508(l0): point = 362
   Insn 507(l0): point = 364
   Insn 506(l0): point = 366
   Insn 505(l0): point = 368
   Insn 504(l0): point = 370
   Insn 503(l0): point = 372
   Insn 502(l0): point = 374
   Insn 501(l0): point = 376
   Insn 500(l0): point = 378
   Insn 499(l0): point = 380
   Insn 498(l0): point = 382
   Insn 497(l0): point = 384
   Insn 496(l0): point = 386
   Insn 495(l0): point = 388
   Insn 494(l0): point = 390
   Insn 493(l0): point = 392
   Insn 492(l0): point = 394
   Insn 491(l0): point = 396
   Insn 490(l0): point = 398
   Insn 489(l0): point = 400
   Insn 488(l0): point = 402
   Insn 487(l0): point = 404
   Insn 486(l0): point = 406
   Insn 485(l0): point = 408
   Insn 484(l0): point = 410
   Insn 483(l0): point = 412
   Insn 482(l0): point = 414
   Insn 481(l0): point = 416
   Insn 480(l0): point = 418
   Insn 479(l0): point = 420
   Insn 478(l0): point = 422
   Insn 477(l0): point = 424
   Insn 476(l0): point = 426
   Insn 475(l0): point = 428
   Insn 474(l0): point = 430
   Insn 473(l0): point = 432
   Insn 472(l0): point = 434
   Insn 471(l0): point = 436
   Insn 470(l0): point = 438
   Insn 469(l0): point = 440
   Insn 468(l0): point = 442
   Insn 467(l0): point = 444
   Insn 466(l0): point = 446
   Insn 465(l0): point = 448
   Insn 464(l0): point = 450
   Insn 463(l0): point = 452
   Insn 462(l0): point = 454
   Insn 461(l0): point = 456
   Insn 460(l0): point = 458
   Insn 459(l0): point = 460
   Insn 458(l0): point = 462
   Insn 457(l0): point = 464
   Insn 456(l0): point = 466
   Insn 455(l0): point = 468
   Insn 454(l0): point = 470
   Insn 453(l0): point = 472
   Insn 452(l0): point = 474
   Insn 451(l0): point = 476
   Insn 450(l0): point = 478
   Insn 449(l0): point = 480
   Insn 448(l0): point = 482
   Insn 447(l0): point = 484
   Insn 446(l0): point = 486
   Insn 445(l0): point = 488
   Insn 444(l0): point = 490
   Insn 443(l0): point = 492
   Insn 442(l0): point = 494
   Insn 441(l0): point = 496
   Insn 440(l0): point = 498
   Insn 439(l0): point = 500
   Insn 438(l0): point = 502
   Insn 437(l0): point = 504
   Insn 436(l0): point = 506
   Insn 435(l0): point = 508
   Insn 434(l0): point = 510
   Insn 433(l0): point = 512
   Insn 432(l0): point = 514
   Insn 431(l0): point = 516
   Insn 430(l0): point = 518
   Insn 429(l0): point = 520
   Insn 428(l0): point = 522
   Insn 427(l0): point = 524
   Insn 426(l0): point = 526
   Insn 425(l0): point = 528
   Insn 424(l0): point = 530
   Insn 423(l0): point = 532
   Insn 422(l0): point = 534
   Insn 421(l0): point = 536
   Insn 420(l0): point = 538
   Insn 419(l0): point = 540
   Insn 418(l0): point = 542
   Insn 417(l0): point = 544
   Insn 416(l0): point = 546
   Insn 415(l0): point = 548
   Insn 414(l0): point = 550
   Insn 413(l0): point = 552
   Insn 412(l0): point = 554
   Insn 411(l0): point = 556
   Insn 410(l0): point = 558
   Insn 409(l0): point = 560
   Insn 408(l0): point = 562
   Insn 407(l0): point = 564
   Insn 406(l0): point = 566
   Insn 405(l0): point = 568
   Insn 404(l0): point = 570
   Insn 403(l0): point = 572
   Insn 402(l0): point = 574
   Insn 401(l0): point = 576
   Insn 400(l0): point = 578
   Insn 399(l0): point = 580
   Insn 398(l0): point = 582
   Insn 397(l0): point = 584
   Insn 396(l0): point = 586
   Insn 395(l0): point = 588
   Insn 394(l0): point = 590
   Insn 393(l0): point = 592
   Insn 392(l0): point = 594
   Insn 391(l0): point = 596
   Insn 390(l0): point = 598
   Insn 389(l0): point = 600
   Insn 388(l0): point = 602
   Insn 387(l0): point = 604
   Insn 386(l0): point = 606
   Insn 385(l0): point = 608
   Insn 384(l0): point = 610
   Insn 383(l0): point = 612
   Insn 382(l0): point = 614
   Insn 381(l0): point = 616
   Insn 380(l0): point = 618
   Insn 379(l0): point = 620
   Insn 378(l0): point = 622
   Insn 377(l0): point = 624
   Insn 376(l0): point = 626
   Insn 374(l0): point = 629
   Insn 373(l0): point = 631
   Insn 369(l0): point = 634
   Insn 367(l0): point = 637
   Insn 366(l0): point = 639
   Insn 362(l0): point = 642
   Insn 359(l0): point = 645
   Insn 358(l0): point = 647
   Insn 357(l0): point = 649
   Insn 356(l0): point = 651
   Insn 355(l0): point = 653
   Insn 354(l0): point = 655
   Insn 353(l0): point = 657
   Insn 352(l0): point = 659
   Insn 351(l0): point = 661
   Insn 350(l0): point = 663
   Insn 349(l0): point = 665
   Insn 348(l0): point = 667
   Insn 347(l0): point = 669
   Insn 346(l0): point = 671
   Insn 345(l0): point = 673
   Insn 699(l0): point = 676
   Insn 116(l0): point = 678
   Insn 115(l0): point = 680
   Insn 114(l0): point = 682
   Insn 113(l0): point = 684
   Insn 112(l0): point = 686
   Insn 111(l0): point = 688
   Insn 110(l0): point = 690
   Insn 109(l0): point = 692
   Insn 108(l0): point = 694
   Insn 107(l0): point = 696
   Insn 106(l0): point = 698
   Insn 105(l0): point = 700
   Insn 104(l0): point = 702
   Insn 701(l0): point = 705
   Insn 198(l0): point = 707
   Insn 197(l0): point = 709
   Insn 196(l0): point = 711
   Insn 195(l0): point = 713
   Insn 194(l0): point = 715
   Insn 193(l0): point = 717
   Insn 192(l0): point = 719
   Insn 191(l0): point = 721
   Insn 190(l0): point = 723
   Insn 189(l0): point = 725
   Insn 188(l0): point = 727
   Insn 187(l0): point = 729
   Insn 186(l0): point = 731
   Insn 185(l0): point = 733
   Insn 184(l0): point = 735
   Insn 183(l0): point = 737
   Insn 182(l0): point = 739
   Insn 181(l0): point = 741
   Insn 180(l0): point = 743
   Insn 179(l0): point = 745
   Insn 178(l0): point = 747
   Insn 177(l0): point = 749
   Insn 176(l0): point = 751
   Insn 175(l0): point = 753
   Insn 174(l0): point = 755
   Insn 703(l0): point = 758
   Insn 280(l0): point = 760
   Insn 279(l0): point = 762
   Insn 278(l0): point = 764
   Insn 277(l0): point = 766
   Insn 276(l0): point = 768
   Insn 275(l0): point = 770
   Insn 274(l0): point = 772
   Insn 273(l0): point = 774
   Insn 272(l0): point = 776
   Insn 271(l0): point = 778
   Insn 270(l0): point = 780
   Insn 269(l0): point = 782
   Insn 268(l0): point = 784
   Insn 267(l0): point = 786
   Insn 266(l0): point = 788
   Insn 265(l0): point = 790
   Insn 264(l0): point = 792
   Insn 263(l0): point = 794
   Insn 262(l0): point = 796
   Insn 261(l0): point = 798
   Insn 260(l0): point = 800
   Insn 259(l0): point = 802
   Insn 258(l0): point = 804
   Insn 257(l0): point = 806
   Insn 256(l0): point = 808
   Insn 705(l0): point = 811
   Insn 310(l0): point = 813
   Insn 309(l0): point = 815
   Insn 308(l0): point = 817
   Insn 307(l0): point = 819
   Insn 306(l0): point = 821
   Insn 305(l0): point = 823
   Insn 304(l0): point = 825
   Insn 303(l0): point = 827
   Insn 302(l0): point = 829
   Insn 301(l0): point = 831
   Insn 300(l0): point = 833
   Insn 299(l0): point = 835
   Insn 298(l0): point = 837
   Insn 707(l0): point = 840
   Insn 340(l0): point = 842
   Insn 339(l0): point = 844
   Insn 338(l0): point = 846
   Insn 337(l0): point = 848
   Insn 336(l0): point = 850
   Insn 335(l0): point = 852
   Insn 334(l0): point = 854
   Insn 333(l0): point = 856
   Insn 332(l0): point = 858
   Insn 331(l0): point = 860
   Insn 330(l0): point = 862
   Insn 329(l0): point = 864
   Insn 328(l0): point = 866
   Insn 326(l0): point = 869
   Insn 325(l0): point = 871
   Insn 324(l0): point = 873
   Insn 323(l0): point = 875
   Insn 322(l0): point = 877
   Insn 321(l0): point = 879
   Insn 320(l0): point = 881
   Insn 319(l0): point = 883
   Insn 318(l0): point = 885
   Insn 317(l0): point = 887
   Insn 316(l0): point = 889
   Insn 315(l0): point = 891
   Insn 296(l0): point = 894
   Insn 295(l0): point = 896
   Insn 294(l0): point = 898
   Insn 293(l0): point = 900
   Insn 292(l0): point = 902
   Insn 291(l0): point = 904
   Insn 290(l0): point = 906
   Insn 289(l0): point = 908
   Insn 288(l0): point = 910
   Insn 287(l0): point = 912
   Insn 286(l0): point = 914
   Insn 285(l0): point = 916
   Insn 253(l0): point = 919
   Insn 252(l0): point = 921
   Insn 251(l0): point = 923
   Insn 250(l0): point = 925
   Insn 249(l0): point = 927
   Insn 248(l0): point = 929
   Insn 247(l0): point = 931
   Insn 246(l0): point = 933
   Insn 245(l0): point = 935
   Insn 244(l0): point = 937
   Insn 243(l0): point = 939
   Insn 242(l0): point = 941
   Insn 240(l0): point = 944
   Insn 239(l0): point = 946
   Insn 238(l0): point = 948
   Insn 237(l0): point = 950
   Insn 236(l0): point = 952
   Insn 235(l0): point = 954
   Insn 234(l0): point = 956
   Insn 233(l0): point = 958
   Insn 232(l0): point = 960
   Insn 231(l0): point = 962
   Insn 230(l0): point = 964
   Insn 229(l0): point = 966
   Insn 227(l0): point = 969
   Insn 226(l0): point = 971
   Insn 225(l0): point = 973
   Insn 224(l0): point = 975
   Insn 223(l0): point = 977
   Insn 222(l0): point = 979
   Insn 221(l0): point = 981
   Insn 220(l0): point = 983
   Insn 219(l0): point = 985
   Insn 218(l0): point = 987
   Insn 217(l0): point = 989
   Insn 216(l0): point = 991
   Insn 214(l0): point = 994
   Insn 213(l0): point = 996
   Insn 212(l0): point = 998
   Insn 211(l0): point = 1000
   Insn 210(l0): point = 1002
   Insn 209(l0): point = 1004
   Insn 208(l0): point = 1006
   Insn 207(l0): point = 1008
   Insn 206(l0): point = 1010
   Insn 205(l0): point = 1012
   Insn 204(l0): point = 1014
   Insn 203(l0): point = 1016
   Insn 171(l0): point = 1019
   Insn 170(l0): point = 1021
   Insn 169(l0): point = 1023
   Insn 168(l0): point = 1025
   Insn 167(l0): point = 1027
   Insn 166(l0): point = 1029
   Insn 165(l0): point = 1031
   Insn 164(l0): point = 1033
   Insn 163(l0): point = 1035
   Insn 162(l0): point = 1037
   Insn 161(l0): point = 1039
   Insn 160(l0): point = 1041
   Insn 158(l0): point = 1044
   Insn 157(l0): point = 1046
   Insn 156(l0): point = 1048
   Insn 155(l0): point = 1050
   Insn 154(l0): point = 1052
   Insn 153(l0): point = 1054
   Insn 152(l0): point = 1056
   Insn 151(l0): point = 1058
   Insn 150(l0): point = 1060
   Insn 149(l0): point = 1062
   Insn 148(l0): point = 1064
   Insn 147(l0): point = 1066
   Insn 145(l0): point = 1069
   Insn 144(l0): point = 1071
   Insn 143(l0): point = 1073
   Insn 142(l0): point = 1075
   Insn 141(l0): point = 1077
   Insn 140(l0): point = 1079
   Insn 139(l0): point = 1081
   Insn 138(l0): point = 1083
   Insn 137(l0): point = 1085
   Insn 136(l0): point = 1087
   Insn 135(l0): point = 1089
   Insn 134(l0): point = 1091
   Insn 132(l0): point = 1094
   Insn 131(l0): point = 1096
   Insn 130(l0): point = 1098
   Insn 129(l0): point = 1100
   Insn 128(l0): point = 1102
   Insn 127(l0): point = 1104
   Insn 126(l0): point = 1106
   Insn 125(l0): point = 1108
   Insn 124(l0): point = 1110
   Insn 123(l0): point = 1112
   Insn 122(l0): point = 1114
   Insn 121(l0): point = 1116
   Insn 102(l0): point = 1119
   Insn 101(l0): point = 1121
   Insn 100(l0): point = 1123
   Insn 99(l0): point = 1125
   Insn 98(l0): point = 1127
   Insn 97(l0): point = 1129
   Insn 96(l0): point = 1131
   Insn 95(l0): point = 1133
   Insn 94(l0): point = 1135
   Insn 93(l0): point = 1137
   Insn 92(l0): point = 1139
   Insn 91(l0): point = 1141
   Insn 90(l0): point = 1143
   Insn 89(l0): point = 1145
   Insn 88(l0): point = 1147
   Insn 87(l0): point = 1149
   Insn 86(l0): point = 1151
   Insn 85(l0): point = 1153
   Insn 84(l0): point = 1155
   Insn 83(l0): point = 1157
   Insn 82(l0): point = 1159
   Insn 697(l0): point = 1162
   Insn 78(l0): point = 1164
   Insn 69(l0): point = 1167
   Insn 68(l0): point = 1169
   Insn 67(l0): point = 1171
   Insn 66(l0): point = 1173
   Insn 65(l0): point = 1175
   Insn 64(l0): point = 1177
   Insn 63(l0): point = 1179
   Insn 62(l0): point = 1181
   Insn 61(l0): point = 1183
   Insn 60(l0): point = 1185
   Insn 59(l0): point = 1187
   Insn 58(l0): point = 1189
   Insn 57(l0): point = 1191
   Insn 56(l0): point = 1193
   Insn 55(l0): point = 1195
   Insn 54(l0): point = 1197
   Insn 53(l0): point = 1199
   Insn 52(l0): point = 1201
   Insn 51(l0): point = 1203
   Insn 50(l0): point = 1205
   Insn 49(l0): point = 1207
   Insn 48(l0): point = 1209
   Insn 47(l0): point = 1211
   Insn 46(l0): point = 1213
   Insn 45(l0): point = 1215
   Insn 44(l0): point = 1217
   Insn 43(l0): point = 1219
   Insn 42(l0): point = 1221
   Insn 41(l0): point = 1223
   Insn 40(l0): point = 1225
   Insn 39(l0): point = 1227
   Insn 38(l0): point = 1229
   Insn 37(l0): point = 1231
   Insn 36(l0): point = 1233
   Insn 35(l0): point = 1235
   Insn 34(l0): point = 1237
   Insn 33(l0): point = 1239
   Insn 32(l0): point = 1241
   Insn 31(l0): point = 1243
   Insn 30(l0): point = 1245
   Insn 29(l0): point = 1247
   Insn 28(l0): point = 1249
   Insn 27(l0): point = 1251
   Insn 26(l0): point = 1253
   Insn 25(l0): point = 1255
   Insn 24(l0): point = 1257
   Insn 23(l0): point = 1259
   Insn 22(l0): point = 1261
   Insn 21(l0): point = 1263
   Insn 20(l0): point = 1265
   Insn 19(l0): point = 1267
   Insn 18(l0): point = 1269
   Insn 17(l0): point = 1271
   Insn 16(l0): point = 1273
   Insn 15(l0): point = 1275
   Insn 14(l0): point = 1277
   Insn 13(l0): point = 1279
   Insn 12(l0): point = 1281
   Insn 11(l0): point = 1283
   Insn 10(l0): point = 1285
   Insn 9(l0): point = 1287
   Insn 8(l0): point = 1289
   Insn 7(l0): point = 1291
   Insn 6(l0): point = 1293
   Insn 2(l0): point = 1295
 a0(r169): [3..4]
 a1(r168): [5..9]
 a2(r167): [14..15]
 a3(r318): [16..17]
 a4(r166): [37..38]
 a5(r317): [43..44]
 a6(r165): [49..50]
 a7(r164): [61..66]
 a8(r163): [77..82]
 a9(r162): [87..92]
 a10(r161): [103..108]
 a11(r160): [119..124]
 a12(r159): [129..134]
 a13(r158): [145..150]
 a14(r157): [161..166]
 a15(r156): [171..176]
 a16(r155): [187..192]
 a17(r154): [203..208]
 a18(r153): [219..224]
 a19(r152): [235..240]
 a20(r151): [245..250]
 a21(r150): [255..260]
 a22(r149): [271..276]
 a23(r148): [281..286]
 a24(r147): [297..302]
 a25(r146): [313..318]
 a26(r145): [329..334]
 a27(r144): [339..344]
 a28(r143): [355..360]
 a29(r142): [371..376]
 a30(r141): [381..386]
 a31(r140): [397..402]
 a32(r139): [411..412]
 a33(r316): [413..414]
 a34(r138): [419..424]
 a35(r137): [433..434]
 a36(r315): [435..436]
 a37(r136): [441..446]
 a38(r135): [455..456]
 a39(r314): [457..458]
 a40(r134): [463..468]
 a41(r133): [477..480]
 a42(r132): [479..484]
 a43(r313): [481..482]
 a44(r312): [485..486]
 a45(r131): [491..496]
 a46(r130): [507..512]
 a47(r129): [521..522]
 a48(r311): [523..524]
 a49(r128): [529..534]
 a50(r127): [545..550]
 a51(r126): [559..560]
 a52(r310): [561..562]
 a53(r125): [567..572]
 a54(r124): [583..588]
 a55(r123): [599..604]
 a56(r122): [613..614]
 a57(r309): [615..616]
 a58(r121): [621..626]
 a59(r120): [652..653]
 a60(r119): [654..655]
 a61(r308): [656..657]
 a62(r307): [658..659]
 a63(r301): [660..669]
 a64(r306): [660..661]
 a65(r305): [662..663]
 a66(r300): [662..673]
 a67(r303): [664..665]
 a68(r304): [666..667]
 a69(r302): [670..671]
 a70(r118): [845..850]
 a71(r117): [861..866]
 a72(r116): [872..873]
 a73(r299): [874..875]
 a74(r298): [876..877]
 a75(r292): [878..887]
 a76(r297): [878..879]
 a77(r296): [880..881]
 a78(r291): [880..891]
 a79(r294): [882..883]
 a80(r295): [884..885]
 a81(r293): [888..889]
 a82(r115): [816..821]
 a83(r114): [832..837]
 a84(r113): [897..898]
 a85(r290): [899..900]
 a86(r289): [901..902]
 a87(r283): [903..912]
 a88(r288): [903..904]
 a89(r287): [905..906]
 a90(r282): [905..916]
 a91(r285): [907..908]
 a92(r286): [909..910]
 a93(r284): [913..914]
 a94(r112): [763..768]
 a95(r111): [777..778]
 a96(r110): [779..780]
 a97(r281): [781..782]
 a98(r280): [783..784]
 a99(r274): [785..794]
 a100(r279): [785..786]
 a101(r278): [787..788]
 a102(r273): [787..798]
 a103(r276): [789..790]
 a104(r277): [791..792]
 a105(r275): [795..796]
 a106(r109): [803..808]
 a107(r108): [922..923]
 a108(r272): [924..925]
 a109(r271): [926..927]
 a110(r265): [928..937]
 a111(r270): [928..929]
 a112(r269): [930..931]
 a113(r264): [930..941]
 a114(r267): [932..933]
 a115(r268): [934..935]
 a116(r266): [938..939]
 a117(r107): [947..948]
 a118(r263): [949..950]
 a119(r262): [951..952]
 a120(r256): [953..962]
 a121(r261): [953..954]
 a122(r260): [955..956]
 a123(r255): [955..966]
 a124(r258): [957..958]
 a125(r259): [959..960]
 a126(r257): [963..964]
 a127(r106): [972..973]
 a128(r254): [974..975]
 a129(r253): [976..977]
 a130(r247): [978..987]
 a131(r252): [978..979]
 a132(r251): [980..981]
 a133(r246): [980..991]
 a134(r249): [982..983]
 a135(r250): [984..985]
 a136(r248): [988..989]
 a137(r105): [997..998]
 a138(r245): [999..1000]
 a139(r244): [1001..1002]
 a140(r238): [1003..1012]
 a141(r243): [1003..1004]
 a142(r242): [1005..1006]
 a143(r237): [1005..1016]
 a144(r240): [1007..1008]
 a145(r241): [1009..1010]
 a146(r239): [1013..1014]
 a147(r104): [710..715]
 a148(r103): [724..725]
 a149(r102): [726..727]
 a150(r236): [728..729]
 a151(r235): [730..731]
 a152(r229): [732..741]
 a153(r234): [732..733]
 a154(r233): [734..735]
 a155(r228): [734..745]
 a156(r231): [736..737]
 a157(r232): [738..739]
 a158(r230): [742..743]
 a159(r101): [750..755]
 a160(r100): [1022..1023]
 a161(r227): [1024..1025]
 a162(r226): [1026..1027]
 a163(r220): [1028..1037]
 a164(r225): [1028..1029]
 a165(r224): [1030..1031]
 a166(r219): [1030..1041]
 a167(r222): [1032..1033]
 a168(r223): [1034..1035]
 a169(r221): [1038..1039]
 a170(r99): [1047..1048]
 a171(r218): [1049..1050]
 a172(r217): [1051..1052]
 a173(r211): [1053..1062]
 a174(r216): [1053..1054]
 a175(r215): [1055..1056]
 a176(r210): [1055..1066]
 a177(r213): [1057..1058]
 a178(r214): [1059..1060]
 a179(r212): [1063..1064]
 a180(r98): [1072..1073]
 a181(r209): [1074..1075]
 a182(r208): [1076..1077]
 a183(r202): [1078..1087]
 a184(r207): [1078..1079]
 a185(r206): [1080..1081]
 a186(r201): [1080..1091]
 a187(r204): [1082..1083]
 a188(r205): [1084..1085]
 a189(r203): [1088..1089]
 a190(r97): [1097..1098]
 a191(r200): [1099..1100]
 a192(r199): [1101..1102]
 a193(r193): [1103..1112]
 a194(r198): [1103..1104]
 a195(r197): [1105..1106]
 a196(r192): [1105..1116]
 a197(r195): [1107..1108]
 a198(r196): [1109..1110]
 a199(r194): [1113..1114]
 a200(r96): [681..686]
 a201(r95): [697..702]
 a202(r94): [1122..1123]
 a203(r191): [1124..1125]
 a204(r190): [1126..1127]
 a205(r184): [1128..1137]
 a206(r189): [1128..1129]
 a207(r188): [1130..1131]
 a208(r183): [1130..1141]
 a209(r186): [1132..1133]
 a210(r187): [1134..1135]
 a211(r185): [1138..1139]
 a212(r93): [1146..1151]
 a213(r92): [1148..1153]
 a214(r91): [1150..1157]
 a215(r182): [1154..1155]
 a216(r181): [1158..1159]
 a217(r180): [27..28]
 a218(r179): [1210..1211]
 a219(r90): [1218..1225]
 a220(r178): [1226..1227]
 a221(r177): [1230..1231]
 a222(r89): [1238..1245]
 a223(r176): [1246..1247]
 a224(r175): [1250..1251]
 a225(r88): [1250..1253]
 a226(r174): [1256..1257]
 a227(r173): [1270..1273]
 a228(r172): [1276..1277]
 a229(r87): [1282..1287]
 a230(r171): [1288..1289]
 a231(r170): [1292..1293]
Compressing live ranges: from 1298 to 400 - 30%
Ranges after the compression:
 a0(r169): [0..1]
 a1(r168): [2..3]
 a2(r167): [4..5]
 a3(r318): [6..7]
 a4(r166): [10..11]
 a5(r317): [12..13]
 a6(r165): [14..15]
 a7(r164): [16..17]
 a8(r163): [18..19]
 a9(r162): [20..21]
 a10(r161): [22..23]
 a11(r160): [24..25]
 a12(r159): [26..27]
 a13(r158): [28..29]
 a14(r157): [30..31]
 a15(r156): [32..33]
 a16(r155): [34..35]
 a17(r154): [36..37]
 a18(r153): [38..39]
 a19(r152): [40..41]
 a20(r151): [42..43]
 a21(r150): [44..45]
 a22(r149): [46..47]
 a23(r148): [48..49]
 a24(r147): [50..51]
 a25(r146): [52..53]
 a26(r145): [54..55]
 a27(r144): [56..57]
 a28(r143): [58..59]
 a29(r142): [60..61]
 a30(r141): [62..63]
 a31(r140): [64..65]
 a32(r139): [66..67]
 a33(r316): [68..69]
 a34(r138): [70..71]
 a35(r137): [72..73]
 a36(r315): [74..75]
 a37(r136): [76..77]
 a38(r135): [78..79]
 a39(r314): [80..81]
 a40(r134): [82..83]
 a41(r133): [84..85]
 a42(r132): [84..87]
 a43(r313): [86..87]
 a44(r312): [88..89]
 a45(r131): [90..91]
 a46(r130): [92..93]
 a47(r129): [94..95]
 a48(r311): [96..97]
 a49(r128): [98..99]
 a50(r127): [100..101]
 a51(r126): [102..103]
 a52(r310): [104..105]
 a53(r125): [106..107]
 a54(r124): [108..109]
 a55(r123): [110..111]
 a56(r122): [112..113]
 a57(r309): [114..115]
 a58(r121): [116..117]
 a59(r120): [118..119]
 a60(r119): [120..121]
 a61(r308): [122..123]
 a62(r307): [124..125]
 a63(r301): [126..133]
 a64(r306): [126..127]
 a65(r305): [128..129]
 a66(r300): [128..135]
 a67(r303): [130..131]
 a68(r304): [132..133]
 a69(r302): [134..135]
 a70(r118): [188..189]
 a71(r117): [190..191]
 a72(r116): [192..193]
 a73(r299): [194..195]
 a74(r298): [196..197]
 a75(r292): [198..205]
 a76(r297): [198..199]
 a77(r296): [200..201]
 a78(r291): [200..207]
 a79(r294): [202..203]
 a80(r295): [204..205]
 a81(r293): [206..207]
 a82(r115): [184..185]
 a83(r114): [186..187]
 a84(r113): [208..209]
 a85(r290): [210..211]
 a86(r289): [212..213]
 a87(r283): [214..221]
 a88(r288): [214..215]
 a89(r287): [216..217]
 a90(r282): [216..223]
 a91(r285): [218..219]
 a92(r286): [220..221]
 a93(r284): [222..223]
 a94(r112): [162..163]
 a95(r111): [164..165]
 a96(r110): [166..167]
 a97(r281): [168..169]
 a98(r280): [170..171]
 a99(r274): [172..179]
 a100(r279): [172..173]
 a101(r278): [174..175]
 a102(r273): [174..181]
 a103(r276): [176..177]
 a104(r277): [178..179]
 a105(r275): [180..181]
 a106(r109): [182..183]
 a107(r108): [224..225]
 a108(r272): [226..227]
 a109(r271): [228..229]
 a110(r265): [230..237]
 a111(r270): [230..231]
 a112(r269): [232..233]
 a113(r264): [232..239]
 a114(r267): [234..235]
 a115(r268): [236..237]
 a116(r266): [238..239]
 a117(r107): [240..241]
 a118(r263): [242..243]
 a119(r262): [244..245]
 a120(r256): [246..253]
 a121(r261): [246..247]
 a122(r260): [248..249]
 a123(r255): [248..255]
 a124(r258): [250..251]
 a125(r259): [252..253]
 a126(r257): [254..255]
 a127(r106): [256..257]
 a128(r254): [258..259]
 a129(r253): [260..261]
 a130(r247): [262..269]
 a131(r252): [262..263]
 a132(r251): [264..265]
 a133(r246): [264..271]
 a134(r249): [266..267]
 a135(r250): [268..269]
 a136(r248): [270..271]
 a137(r105): [272..273]
 a138(r245): [274..275]
 a139(r244): [276..277]
 a140(r238): [278..285]
 a141(r243): [278..279]
 a142(r242): [280..281]
 a143(r237): [280..287]
 a144(r240): [282..283]
 a145(r241): [284..285]
 a146(r239): [286..287]
 a147(r104): [140..141]
 a148(r103): [142..143]
 a149(r102): [144..145]
 a150(r236): [146..147]
 a151(r235): [148..149]
 a152(r229): [150..157]
 a153(r234): [150..151]
 a154(r233): [152..153]
 a155(r228): [152..159]
 a156(r231): [154..155]
 a157(r232): [156..157]
 a158(r230): [158..159]
 a159(r101): [160..161]
 a160(r100): [288..289]
 a161(r227): [290..291]
 a162(r226): [292..293]
 a163(r220): [294..301]
 a164(r225): [294..295]
 a165(r224): [296..297]
 a166(r219): [296..303]
 a167(r222): [298..299]
 a168(r223): [300..301]
 a169(r221): [302..303]
 a170(r99): [304..305]
 a171(r218): [306..307]
 a172(r217): [308..309]
 a173(r211): [310..317]
 a174(r216): [310..311]
 a175(r215): [312..313]
 a176(r210): [312..319]
 a177(r213): [314..315]
 a178(r214): [316..317]
 a179(r212): [318..319]
 a180(r98): [320..321]
 a181(r209): [322..323]
 a182(r208): [324..325]
 a183(r202): [326..333]
 a184(r207): [326..327]
 a185(r206): [328..329]
 a186(r201): [328..335]
 a187(r204): [330..331]
 a188(r205): [332..333]
 a189(r203): [334..335]
 a190(r97): [336..337]
 a191(r200): [338..339]
 a192(r199): [340..341]
 a193(r193): [342..349]
 a194(r198): [342..343]
 a195(r197): [344..345]
 a196(r192): [344..351]
 a197(r195): [346..347]
 a198(r196): [348..349]
 a199(r194): [350..351]
 a200(r96): [136..137]
 a201(r95): [138..139]
 a202(r94): [352..353]
 a203(r191): [354..355]
 a204(r190): [356..357]
 a205(r184): [358..365]
 a206(r189): [358..359]
 a207(r188): [360..361]
 a208(r183): [360..367]
 a209(r186): [362..363]
 a210(r187): [364..365]
 a211(r185): [366..367]
 a212(r93): [368..369]
 a213(r92): [368..369]
 a214(r91): [368..371]
 a215(r182): [370..371]
 a216(r181): [372..373]
 a217(r180): [8..9]
 a218(r179): [374..375]
 a219(r90): [376..377]
 a220(r178): [378..379]
 a221(r177): [380..381]
 a222(r89): [382..383]
 a223(r176): [384..385]
 a224(r175): [386..387]
 a225(r88): [386..387]
 a226(r174): [388..389]
 a227(r173): [390..391]
 a228(r172): [392..393]
 a229(r87): [394..395]
 a230(r171): [396..397]
 a231(r170): [398..399]
  pref0:a5(r317)<-hr5@500
  pref1:a217(r180)<-hr5@500
  pref2:a218(r179)<-hr0@500
  pref3:a221(r177)<-hr0@500
  pref4:a226(r174)<-hr0@500
  pref5:a228(r172)<-hr0@500
  pref6:a0(r169)<-hr0@500
  pref7:a2(r167)<-hr5@500
  pref8:a6(r165)<-hr5@500
  pref9:a7(r164)<-hr5@500
  pref10:a8(r163)<-hr5@500
  pref11:a9(r162)<-hr5@500
  pref12:a10(r161)<-hr5@500
  pref13:a11(r160)<-hr5@500
  pref14:a12(r159)<-hr5@500
  pref15:a13(r158)<-hr5@500
  pref16:a14(r157)<-hr5@500
  pref17:a15(r156)<-hr5@500
  pref18:a16(r155)<-hr5@500
  pref19:a17(r154)<-hr5@500
  pref20:a18(r153)<-hr5@500
  pref21:a19(r152)<-hr5@500
  pref22:a20(r151)<-hr5@500
  pref23:a21(r150)<-hr5@500
  pref24:a22(r149)<-hr5@500
  pref25:a23(r148)<-hr5@500
  pref26:a24(r147)<-hr5@500
  pref27:a25(r146)<-hr5@500
  pref28:a26(r145)<-hr5@500
  pref29:a27(r144)<-hr5@500
  pref30:a28(r143)<-hr5@500
  pref31:a29(r142)<-hr5@500
  pref32:a30(r141)<-hr5@500
  pref33:a31(r140)<-hr5@500
  pref34:a32(r139)<-hr4@500
  pref35:a34(r138)<-hr5@500
  pref36:a35(r137)<-hr4@500
  pref37:a37(r136)<-hr5@500
  pref38:a38(r135)<-hr4@500
  pref39:a40(r134)<-hr5@500
  pref40:a41(r133)<-hr4@500
  pref41:a42(r132)<-hr1@500
  pref42:a45(r131)<-hr5@500
  pref43:a46(r130)<-hr5@500
  pref44:a47(r129)<-hr4@500
  pref45:a49(r128)<-hr5@500
  pref46:a50(r127)<-hr5@500
  pref47:a51(r126)<-hr4@500
  pref48:a53(r125)<-hr5@500
  pref49:a54(r124)<-hr5@500
  pref50:a55(r123)<-hr5@500
  pref51:a56(r122)<-hr4@500
  pref52:a58(r121)<-hr5@500
  pref53:a59(r120)<-hr4@500
  pref54:a70(r118)<-hr5@500
  pref55:a71(r117)<-hr5@500
  pref56:a82(r115)<-hr5@500
  pref57:a83(r114)<-hr5@500
  pref58:a94(r112)<-hr5@500
  pref59:a95(r111)<-hr4@500
  pref60:a106(r109)<-hr5@500
  pref61:a147(r104)<-hr5@500
  pref62:a148(r103)<-hr4@500
  pref63:a159(r101)<-hr5@500
  pref64:a200(r96)<-hr5@500
  pref65:a201(r95)<-hr5@500
  pref66:a212(r93)<-hr5@500
  pref67:a213(r92)<-hr4@500
  pref68:a214(r91)<-hr1@500
  pref69:a219(r90)<-hr5@500
  pref70:a222(r89)<-hr5@500
  pref71:a229(r87)<-hr5@500
  regions=1, blocks=30, points=400
    allocnos=232 (big 0), copies=0, conflicts=0, ranges=232
Disposition:
  229:r87  l0     0  225:r88  l0     1  222:r89  l0     0  219:r90  l0     0
  214:r91  l0     1  213:r92  l0     2  212:r93  l0     0  202:r94  l0     0
  201:r95  l0     0  200:r96  l0     0  190:r97  l0     0  180:r98  l0     0
  170:r99  l0     0  160:r100 l0     0  159:r101 l0     0  149:r102 l0     0
  148:r103 l0     0  147:r104 l0     0  137:r105 l0     0  127:r106 l0     0
  117:r107 l0     0  107:r108 l0     0  106:r109 l0     0   96:r110 l0     0
   95:r111 l0     0   94:r112 l0     0   84:r113 l0     0   83:r114 l0     0
   82:r115 l0     0   72:r116 l0     0   71:r117 l0     0   70:r118 l0     0
   60:r119 l0     0   59:r120 l0     0   58:r121 l0     0   56:r122 l0     0
   55:r123 l0     0   54:r124 l0     0   53:r125 l0     0   51:r126 l0     0
   50:r127 l0     0   49:r128 l0     0   47:r129 l0     0   46:r130 l0     0
   45:r131 l0     0   42:r132 l0     1   41:r133 l0     0   40:r134 l0     0
   38:r135 l0     0   37:r136 l0     0   35:r137 l0     0   34:r138 l0     0
   32:r139 l0     0   31:r140 l0     0   30:r141 l0     0   29:r142 l0     0
   28:r143 l0     0   27:r144 l0     0   26:r145 l0     0   25:r146 l0     0
   24:r147 l0     0   23:r148 l0     0   22:r149 l0     0   21:r150 l0     0
   20:r151 l0     0   19:r152 l0     0   18:r153 l0     0   17:r154 l0     0
   16:r155 l0     0   15:r156 l0     0   14:r157 l0     0   13:r158 l0     0
   12:r159 l0     0   11:r160 l0     0   10:r161 l0     0    9:r162 l0     0
    8:r163 l0     0    7:r164 l0     0    6:r165 l0     0    4:r166 l0     0
    2:r167 l0     0    1:r168 l0     0    0:r169 l0     0  231:r170 l0     0
  230:r171 l0     0  228:r172 l0     0  227:r173 l0     0  226:r174 l0     0
  224:r175 l0     0  223:r176 l0     0  221:r177 l0     0  220:r178 l0     0
  218:r179 l0     0  217:r180 l0     0  216:r181 l0     0  215:r182 l0     0
  208:r183 l0     2  205:r184 l0     0  211:r185 l0     0  209:r186 l0     1
  210:r187 l0     1  207:r188 l0     1  206:r189 l0     1  204:r190 l0     0
  203:r191 l0     0  196:r192 l0     2  193:r193 l0     0  199:r194 l0     0
  197:r195 l0     1  198:r196 l0     1  195:r197 l0     1  194:r198 l0     1
  192:r199 l0     0  191:r200 l0     0  186:r201 l0     2  183:r202 l0     0
  189:r203 l0     0  187:r204 l0     1  188:r205 l0     1  185:r206 l0     1
  184:r207 l0     1  182:r208 l0     0  181:r209 l0     0  176:r210 l0     2
  173:r211 l0     0  179:r212 l0     0  177:r213 l0     1  178:r214 l0     1
  175:r215 l0     1  174:r216 l0     1  172:r217 l0     0  171:r218 l0     0
  166:r219 l0     2  163:r220 l0     0  169:r221 l0     0  167:r222 l0     1
  168:r223 l0     1  165:r224 l0     1  164:r225 l0     1  162:r226 l0     0
  161:r227 l0     0  155:r228 l0     2  152:r229 l0     0  158:r230 l0     0
  156:r231 l0     1  157:r232 l0     1  154:r233 l0     1  153:r234 l0     1
  151:r235 l0     0  150:r236 l0     0  143:r237 l0     2  140:r238 l0     0
  146:r239 l0     0  144:r240 l0     1  145:r241 l0     1  142:r242 l0     1
  141:r243 l0     1  139:r244 l0     0  138:r245 l0     0  133:r246 l0     2
  130:r247 l0     0  136:r248 l0     0  134:r249 l0     1  135:r250 l0     1
  132:r251 l0     1  131:r252 l0     1  129:r253 l0     0  128:r254 l0     0
  123:r255 l0     2  120:r256 l0     0  126:r257 l0     0  124:r258 l0     1
  125:r259 l0     1  122:r260 l0     1  121:r261 l0     1  119:r262 l0     0
  118:r263 l0     0  113:r264 l0     2  110:r265 l0     0  116:r266 l0     0
  114:r267 l0     1  115:r268 l0     1  112:r269 l0     1  111:r270 l0     1
  109:r271 l0     0  108:r272 l0     0  102:r273 l0     2   99:r274 l0     0
  105:r275 l0     0  103:r276 l0     1  104:r277 l0     1  101:r278 l0     1
  100:r279 l0     1   98:r280 l0     0   97:r281 l0     0   90:r282 l0     2
   87:r283 l0     0   93:r284 l0     0   91:r285 l0     1   92:r286 l0     1
   89:r287 l0     1   88:r288 l0     1   86:r289 l0     0   85:r290 l0     0
   78:r291 l0     2   75:r292 l0     0   81:r293 l0     0   79:r294 l0     1
   80:r295 l0     1   77:r296 l0     1   76:r297 l0     1   74:r298 l0     0
   73:r299 l0     0   66:r300 l0     2   63:r301 l0     0   69:r302 l0     0
   67:r303 l0     1   68:r304 l0     1   65:r305 l0     1   64:r306 l0     1
   62:r307 l0     0   61:r308 l0     0   57:r309 l0     0   52:r310 l0     0
   48:r311 l0     0   44:r312 l0     0   43:r313 l0     0   39:r314 l0     0
   36:r315 l0     0   33:r316 l0     0    5:r317 l0     0    3:r318 l0     0
+++Costs: overall -72000, reg -72000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


gracz_fun

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={133d,42u} r1={153d,57u} r2={99d,3u} r4={162d,66u} r5={190d,95u} r6={1d,29u} r7={1d,124u} r8={95d} r9={95d} r10={95d} r11={95d} r12={95d} r13={95d} r14={95d} r15={95d} r16={1d,28u} r17={169d,14u} r18={95d} r19={95d} r20={1d,104u,2e} r21={96d} r22={96d} r23={96d} r24={96d} r25={96d} r26={96d} r27={96d} r28={96d} r29={95d} r30={95d} r31={95d} r32={95d} r33={95d} r34={95d} r35={95d} r36={95d} r37={97d,1u} r38={97d,1u} r39={95d} r40={95d} r45={95d} r46={95d} r47={95d} r48={95d} r49={95d} r50={95d} r51={95d} r52={95d} r53={95d} r54={95d} r55={95d} r56={95d} r57={95d} r58={95d} r59={95d} r60={95d} r61={95d} r62={95d} r63={95d} r64={95d} r65={95d} r66={95d} r67={95d} r68={95d} r69={95d} r70={95d} r71={95d} r72={95d} r73={95d} r74={95d} r75={95d} r76={95d} r77={95d} r78={95d} r79={95d} r80={95d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,1u} r306={1d,1u} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u} r311={1d,1u} r312={1d,1u} r313={1d,1u} r314={1d,1u} r315={1d,1u} r316={1d,1u} r317={1d,1u} r318={1d,1u} 
;;    total ref usage 8222{7424d,796u,2e} in 635{540 regular + 95 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 170 171 172 173 174 175 176 177 178 179
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":598 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ pom ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [19 pom+0 S8 A64])) "function.c":599 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])
        (reg/f:DI 170)) "function.c":599 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":600 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (reg/f:DI 171) [10 createplayer_89->name1+0 S8 A64])) "function.c":600 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (nil)))
(insn 10 9 11 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":600 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 66 [0x42])) "function.c":600 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 87 [ _1 ])) "function.c":600 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_open") [flags 0x41]  <function_decl 0x7f7cd133cb00 shm_open>) [0 shm_open S1 A8])
            (const_int 0 [0]))) "function.c":600 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 14 13 15 2 (set (reg:SI 172)
        (reg:SI 0 ax)) "function.c":600 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 fd+0 S4 A32])
        (reg:SI 172)) "function.c":600 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 16 15 17 2 (set (reg:SI 173)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 fd+0 S4 A32])) "function.c":602 86 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 38 r9)
        (const_int 0 [0])) "function.c":602 85 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:SI 37 r8)
        (reg:SI 173)) "function.c":602 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(insn 19 18 20 2 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "function.c":602 86 {*movsi_internal}
     (nil))
(insn 20 19 21 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":602 86 {*movsi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":602 85 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":602 85 {*movdi_internal}
     (nil))
(call_insn 23 22 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("mmap") [flags 0x41]  <function_decl 0x7f7cd133c000 mmap>) [0 mmap S1 A8])
            (const_int 0 [0]))) "function.c":602 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 24 23 25 2 (set (reg:DI 174)
        (reg:DI 0 ax)) "function.c":602 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 25 24 26 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])
        (reg:DI 174)) "function.c":602 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 174)
        (nil)))
(insn 26 25 27 2 (set (reg:QI 88 [ END.78_2 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":605 88 {*movqi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":605 85 {*movdi_internal}
     (nil))
(insn 28 27 29 2 (set (mem:QI (plus:DI (reg/f:DI 175)
                (const_int 40 [0x28])) [0 playerinfo_94->request+0 S1 A64])
        (reg:QI 88 [ END.78_2 ])) "function.c":605 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175)
        (expr_list:REG_DEAD (reg:QI 88 [ END.78_2 ])
            (nil))))
(insn 29 28 30 2 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":607 85 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (reg/f:DI 176) [10 createplayer_89->name1+0 S8 A64])) "function.c":607 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (nil)))
(insn 31 30 32 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":607 86 {*movsi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":607 86 {*movsi_internal}
     (nil))
(insn 33 32 34 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":607 86 {*movsi_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _3 ])) "function.c":607 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
        (nil)))
(insn 35 34 36 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":607 88 {*movqi_internal}
     (nil))
(call_insn 36 35 37 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":607 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 37 36 38 2 (set (reg:DI 177)
        (reg:DI 0 ax)) "function.c":607 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 38 37 39 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_p1+0 S8 A64])
        (reg:DI 177)) "function.c":607 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 177)
        (nil)))
(insn 39 38 40 2 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":608 85 {*movdi_internal}
     (nil))
(insn 40 39 41 2 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 178)
                (const_int 8 [0x8])) [10 createplayer_89->name2+0 S8 A64])) "function.c":608 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (nil)))
(insn 41 40 42 2 (set (reg:SI 2 cx)
        (const_int 0 [0])) "function.c":608 86 {*movsi_internal}
     (nil))
(insn 42 41 43 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":608 86 {*movsi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:SI 4 si)
        (const_int 64 [0x40])) "function.c":608 86 {*movsi_internal}
     (nil))
(insn 44 43 45 2 (set (reg:DI 5 di)
        (reg/f:DI 90 [ _4 ])) "function.c":608 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
        (nil)))
(insn 45 44 46 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":608 88 {*movqi_internal}
     (nil))
(call_insn 46 45 47 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_open") [flags 0x41]  <function_decl 0x7f7cd0faca00 sem_open>) [0 sem_open S1 A8])
            (const_int 0 [0]))) "function.c":608 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:SI (use (reg:SI 2 cx))
                        (nil)))))))
(insn 47 46 48 2 (set (reg:DI 179)
        (reg:DI 0 ax)) "function.c":608 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 48 47 49 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [18 sem_p1_pom+0 S8 A64])
        (reg:DI 179)) "function.c":608 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 179)
        (nil)))
(call_insn 49 48 50 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("start_color") [flags 0x41]  <function_decl 0x7f7cd10bd300 start_color>) [0 start_color S1 A8])
            (const_int 0 [0]))) "function.c":610 700 {*call_value}
     (expr_list:REG_UNUSED (reg:SI 0 ax)
        (nil))
    (nil))
(insn 50 49 51 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":611 86 {*movsi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":611 86 {*movsi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":611 86 {*movsi_internal}
     (nil))
(call_insn 53 52 54 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":611 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 54 53 55 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":612 86 {*movsi_internal}
     (nil))
(insn 55 54 56 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":612 86 {*movsi_internal}
     (nil))
(insn 56 55 57 2 (set (reg:SI 5 di)
        (const_int 5 [0x5])) "function.c":612 86 {*movsi_internal}
     (nil))
(call_insn 57 56 58 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":612 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 58 57 59 2 (set (reg:SI 1 dx)
        (const_int 5 [0x5])) "function.c":613 86 {*movsi_internal}
     (nil))
(insn 59 58 60 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":613 86 {*movsi_internal}
     (nil))
(insn 60 59 61 2 (set (reg:SI 5 di)
        (const_int 6 [0x6])) "function.c":613 86 {*movsi_internal}
     (nil))
(call_insn 61 60 62 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":613 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 62 61 63 2 (set (reg:SI 1 dx)
        (const_int 2 [0x2])) "function.c":614 86 {*movsi_internal}
     (nil))
(insn 63 62 64 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":614 86 {*movsi_internal}
     (nil))
(insn 64 63 65 2 (set (reg:SI 5 di)
        (const_int 11 [0xb])) "function.c":614 86 {*movsi_internal}
     (nil))
(call_insn 65 64 66 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":614 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 66 65 67 2 (set (reg:SI 1 dx)
        (const_int 1 [0x1])) "function.c":615 86 {*movsi_internal}
     (nil))
(insn 67 66 68 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":615 86 {*movsi_internal}
     (nil))
(insn 68 67 69 2 (set (reg:SI 5 di)
        (const_int 12 [0xc])) "function.c":615 86 {*movsi_internal}
     (nil))
(call_insn 69 68 683 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":615 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              28 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 180
(code_label 683 69 70 3 87 (nil) [1 uses])
(note 70 683 71 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 3 (set (reg:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [18 sem_p1+0 S8 A64])) "function.c":620 85 {*movdi_internal}
     (nil))
(insn 72 71 73 3 (set (reg:DI 5 di)
        (reg:DI 180)) "function.c":620 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 180)
        (nil)))
(call_insn 73 72 74 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_wait") [flags 0x41]  <function_decl 0x7f7cd0facd00 sem_wait>) [0 sem_wait S1 A8])
            (const_int 0 [0]))) "function.c":620 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 74 73 695 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":622 86 {*movsi_internal}
     (nil))
(jump_insn 695 74 696 3 (set (pc)
        (label_ref 370)) "function.c":622 683 {jump}
     (nil)
 -> 370)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 696 695 372)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       25
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 372 696 77 4 84 (nil) [1 uses])
(note 77 372 78 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 697 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":624 86 {*movsi_internal}
     (nil))
(jump_insn 697 78 698 4 (set (pc)
        (label_ref 363)) "function.c":624 683 {jump}
     (nil)
 -> 363)
;;  succ:       23 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 698 697 365)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       23
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92 93 94 181 182 183 184 185 186 187 188 189 190 191
(code_label 365 698 81 5 83 (nil) [1 uses])
(note 81 365 82 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 5 (set (reg:SI 181)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":626 86 {*movsi_internal}
     (nil))
(insn 83 82 84 5 (parallel [
            (set (reg:SI 91 [ _5 ])
                (plus:SI (reg:SI 181)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":626 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 181)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 5 [0x5]))
                (nil)))))
(insn 84 83 85 5 (set (reg:SI 182)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":626 86 {*movsi_internal}
     (nil))
(insn 85 84 86 5 (parallel [
            (set (reg:SI 92 [ _6 ])
                (plus:SI (reg:SI 182)
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":626 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 182)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 25 [0x19]))
                (nil)))))
(insn 86 85 87 5 (set (reg/f:DI 93 [ stdscr.79_7 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":626 85 {*movdi_internal}
     (nil))
(insn 87 86 88 5 (set (reg:SI 1 dx)
        (reg:SI 91 [ _5 ])) "function.c":626 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ _5 ])
        (nil)))
(insn 88 87 89 5 (set (reg:SI 4 si)
        (reg:SI 92 [ _6 ])) "function.c":626 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (nil)))
(insn 89 88 90 5 (set (reg:DI 5 di)
        (reg/f:DI 93 [ stdscr.79_7 ])) "function.c":626 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ stdscr.79_7 ])
        (nil)))
(call_insn 90 89 91 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":626 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 91 90 92 5 (set (reg/f:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":627 85 {*movdi_internal}
     (nil))
(insn 92 91 93 5 (set (reg:SI 185)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":627 86 {*movsi_internal}
     (nil))
(insn 93 92 94 5 (set (reg:DI 184)
        (sign_extend:DI (reg:SI 185))) "function.c":627 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 185)
        (nil)))
(insn 94 93 95 5 (set (reg:SI 187)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":627 86 {*movsi_internal}
     (nil))
(insn 95 94 96 5 (set (reg:DI 186)
        (sign_extend:DI (reg:SI 187))) "function.c":627 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(insn 96 95 97 5 (parallel [
            (set (reg:DI 188)
                (mult:DI (reg:DI 186)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 186)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 97 96 98 5 (parallel [
            (set (reg:DI 189)
                (plus:DI (reg/f:DI 183)
                    (reg:DI 188)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 188)
        (expr_list:REG_DEAD (reg/f:DI 183)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 98 97 99 5 (parallel [
            (set (reg:DI 190)
                (plus:DI (reg:DI 189)
                    (reg:DI 184)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 189)
        (expr_list:REG_DEAD (reg:DI 184)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 99 98 100 5 (parallel [
            (set (reg/f:DI 191)
                (plus:DI (reg:DI 190)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":627 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 190)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 100 99 101 5 (set (reg:QI 94 [ _8 ])
        (mem/j:QI (reg/f:DI 191) [0 playerinfo_94->area S1 A8])) "function.c":627 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (nil)))
(insn 101 100 102 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 94 [ _8 ])
            (const_int 77 [0x4d]))) "function.c":627 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 94 [ _8 ])
        (nil)))
(jump_insn 102 101 103 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "function.c":627 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 119)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95 96
(note 103 102 104 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 6 (set (reg/f:DI 95 [ stdscr.80_9 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":629 85 {*movdi_internal}
     (nil))
(insn 105 104 106 6 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":629 85 {*movdi_internal}
     (nil))
(insn 106 105 107 6 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":629 86 {*movsi_internal}
     (nil))
(insn 107 106 108 6 (set (reg:DI 5 di)
        (reg/f:DI 95 [ stdscr.80_9 ])) "function.c":629 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ stdscr.80_9 ])
        (nil)))
(call_insn 108 107 109 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":629 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 109 108 110 6 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":630 85 {*movdi_internal}
     (nil))
(insn 110 109 111 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":630 88 {*movqi_internal}
     (nil))
(call_insn 111 110 112 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":630 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 112 111 113 6 (set (reg/f:DI 96 [ stdscr.81_10 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":631 85 {*movdi_internal}
     (nil))
(insn 113 112 114 6 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":631 85 {*movdi_internal}
     (nil))
(insn 114 113 115 6 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":631 86 {*movsi_internal}
     (nil))
(insn 115 114 116 6 (set (reg:DI 5 di)
        (reg/f:DI 96 [ stdscr.81_10 ])) "function.c":631 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ stdscr.81_10 ])
        (nil)))
(call_insn 116 115 699 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":631 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 699 116 700 6 (set (pc)
        (label_ref 360)) 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 700 699 119)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 192 193 194 195 196 197 198 199 200
(code_label 119 700 120 7 75 (nil) [1 uses])
(note 120 119 121 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 7 (set (reg/f:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 122 121 123 7 (set (reg:SI 194)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 123 122 124 7 (set (reg:DI 193)
        (sign_extend:DI (reg:SI 194))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 194)
        (nil)))
(insn 124 123 125 7 (set (reg:SI 196)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 125 124 126 7 (set (reg:DI 195)
        (sign_extend:DI (reg:SI 196))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 196)
        (nil)))
(insn 126 125 127 7 (parallel [
            (set (reg:DI 197)
                (mult:DI (reg:DI 195)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 195)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 127 126 128 7 (parallel [
            (set (reg:DI 198)
                (plus:DI (reg/f:DI 192)
                    (reg:DI 197)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_DEAD (reg/f:DI 192)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 128 127 129 7 (parallel [
            (set (reg:DI 199)
                (plus:DI (reg:DI 198)
                    (reg:DI 193)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 198)
        (expr_list:REG_DEAD (reg:DI 193)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 129 128 130 7 (parallel [
            (set (reg/f:DI 200)
                (plus:DI (reg:DI 199)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 199)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 130 129 131 7 (set (reg:QI 97 [ _11 ])
        (mem/j:QI (reg/f:DI 200) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 200)
        (nil)))
(insn 131 130 132 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 97 [ _11 ])
            (const_int 49 [0x31]))) "function.c":633 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 97 [ _11 ])
        (nil)))
(jump_insn 132 131 133 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "function.c":633 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 172)
;;  succ:       11
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 201 202 203 204 205 206 207 208 209
(note 133 132 134 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 8 (set (reg/f:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 135 134 136 8 (set (reg:SI 203)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 136 135 137 8 (set (reg:DI 202)
        (sign_extend:DI (reg:SI 203))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 203)
        (nil)))
(insn 137 136 138 8 (set (reg:SI 205)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 138 137 139 8 (set (reg:DI 204)
        (sign_extend:DI (reg:SI 205))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 205)
        (nil)))
(insn 139 138 140 8 (parallel [
            (set (reg:DI 206)
                (mult:DI (reg:DI 204)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 204)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 140 139 141 8 (parallel [
            (set (reg:DI 207)
                (plus:DI (reg/f:DI 201)
                    (reg:DI 206)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 206)
        (expr_list:REG_DEAD (reg/f:DI 201)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 141 140 142 8 (parallel [
            (set (reg:DI 208)
                (plus:DI (reg:DI 207)
                    (reg:DI 202)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 207)
        (expr_list:REG_DEAD (reg:DI 202)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 142 141 143 8 (parallel [
            (set (reg/f:DI 209)
                (plus:DI (reg:DI 208)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 208)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 143 142 144 8 (set (reg:QI 98 [ _12 ])
        (mem/j:QI (reg/f:DI 209) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 209)
        (nil)))
(insn 144 143 145 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 98 [ _12 ])
            (const_int 50 [0x32]))) "function.c":633 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 98 [ _12 ])
        (nil)))
(jump_insn 145 144 146 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "function.c":633 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 172)
;;  succ:       11
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 210 211 212 213 214 215 216 217 218
(note 146 145 147 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 147 146 148 9 (set (reg/f:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 148 147 149 9 (set (reg:SI 212)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 149 148 150 9 (set (reg:DI 211)
        (sign_extend:DI (reg:SI 212))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 212)
        (nil)))
(insn 150 149 151 9 (set (reg:SI 214)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 151 150 152 9 (set (reg:DI 213)
        (sign_extend:DI (reg:SI 214))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 214)
        (nil)))
(insn 152 151 153 9 (parallel [
            (set (reg:DI 215)
                (mult:DI (reg:DI 213)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 213)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 153 152 154 9 (parallel [
            (set (reg:DI 216)
                (plus:DI (reg/f:DI 210)
                    (reg:DI 215)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 215)
        (expr_list:REG_DEAD (reg/f:DI 210)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 154 153 155 9 (parallel [
            (set (reg:DI 217)
                (plus:DI (reg:DI 216)
                    (reg:DI 211)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 216)
        (expr_list:REG_DEAD (reg:DI 211)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 155 154 156 9 (parallel [
            (set (reg/f:DI 218)
                (plus:DI (reg:DI 217)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 217)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 156 155 157 9 (set (reg:QI 99 [ _13 ])
        (mem/j:QI (reg/f:DI 218) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 218)
        (nil)))
(insn 157 156 158 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 99 [ _13 ])
            (const_int 51 [0x33]))) "function.c":633 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 99 [ _13 ])
        (nil)))
(jump_insn 158 157 159 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 172)
            (pc))) "function.c":633 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 172)
;;  succ:       11
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 219 220 221 222 223 224 225 226 227
(note 159 158 160 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 10 (set (reg/f:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":633 85 {*movdi_internal}
     (nil))
(insn 161 160 162 10 (set (reg:SI 221)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 162 161 163 10 (set (reg:DI 220)
        (sign_extend:DI (reg:SI 221))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 221)
        (nil)))
(insn 163 162 164 10 (set (reg:SI 223)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":633 86 {*movsi_internal}
     (nil))
(insn 164 163 165 10 (set (reg:DI 222)
        (sign_extend:DI (reg:SI 223))) "function.c":633 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 223)
        (nil)))
(insn 165 164 166 10 (parallel [
            (set (reg:DI 224)
                (mult:DI (reg:DI 222)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 222)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 166 165 167 10 (parallel [
            (set (reg:DI 225)
                (plus:DI (reg/f:DI 219)
                    (reg:DI 224)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 224)
        (expr_list:REG_DEAD (reg/f:DI 219)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 167 166 168 10 (parallel [
            (set (reg:DI 226)
                (plus:DI (reg:DI 225)
                    (reg:DI 220)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 225)
        (expr_list:REG_DEAD (reg:DI 220)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 168 167 169 10 (parallel [
            (set (reg/f:DI 227)
                (plus:DI (reg:DI 226)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":633 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 226)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 169 168 170 10 (set (reg:QI 100 [ _14 ])
        (mem/j:QI (reg/f:DI 227) [0 playerinfo_94->area S1 A8])) "function.c":633 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 227)
        (nil)))
(insn 170 169 171 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 100 [ _14 ])
            (const_int 52 [0x34]))) "function.c":633 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 100 [ _14 ])
        (nil)))
(jump_insn 171 170 172 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 201)
            (pc))) "function.c":633 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 201)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       7
;;              8
;;              9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 102 103 104 228 229 230 231 232 233 234 235 236
(code_label 172 171 173 11 77 (nil) [3 uses])
(note 173 172 174 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 174 173 175 11 (set (reg/f:DI 101 [ stdscr.82_15 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":635 85 {*movdi_internal}
     (nil))
(insn 175 174 176 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":635 85 {*movdi_internal}
     (nil))
(insn 176 175 177 11 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":635 86 {*movsi_internal}
     (nil))
(insn 177 176 178 11 (set (reg:DI 5 di)
        (reg/f:DI 101 [ stdscr.82_15 ])) "function.c":635 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ stdscr.82_15 ])
        (nil)))
(call_insn 178 177 179 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":635 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 179 178 180 11 (set (reg/f:DI 228)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":636 85 {*movdi_internal}
     (nil))
(insn 180 179 181 11 (set (reg:SI 230)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":636 86 {*movsi_internal}
     (nil))
(insn 181 180 182 11 (set (reg:DI 229)
        (sign_extend:DI (reg:SI 230))) "function.c":636 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 230)
        (nil)))
(insn 182 181 183 11 (set (reg:SI 232)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":636 86 {*movsi_internal}
     (nil))
(insn 183 182 184 11 (set (reg:DI 231)
        (sign_extend:DI (reg:SI 232))) "function.c":636 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 232)
        (nil)))
(insn 184 183 185 11 (parallel [
            (set (reg:DI 233)
                (mult:DI (reg:DI 231)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 231)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 185 184 186 11 (parallel [
            (set (reg:DI 234)
                (plus:DI (reg/f:DI 228)
                    (reg:DI 233)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 233)
        (expr_list:REG_DEAD (reg/f:DI 228)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 186 185 187 11 (parallel [
            (set (reg:DI 235)
                (plus:DI (reg:DI 234)
                    (reg:DI 229)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 234)
        (expr_list:REG_DEAD (reg:DI 229)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 187 186 188 11 (parallel [
            (set (reg/f:DI 236)
                (plus:DI (reg:DI 235)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":636 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 235)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 188 187 189 11 (set (reg:QI 102 [ _16 ])
        (mem/j:QI (reg/f:DI 236) [0 playerinfo_94->area S1 A8])) "function.c":636 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 236)
        (nil)))
(insn 189 188 190 11 (set (reg:SI 103 [ _17 ])
        (sign_extend:SI (reg:QI 102 [ _16 ]))) "function.c":636 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 102 [ _16 ])
        (nil)))
(insn 190 189 191 11 (set (reg:SI 4 si)
        (reg:SI 103 [ _17 ])) "function.c":636 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 103 [ _17 ])
        (nil)))
(insn 191 190 192 11 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":636 85 {*movdi_internal}
     (nil))
(insn 192 191 193 11 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":636 88 {*movqi_internal}
     (nil))
(call_insn 193 192 194 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":636 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 194 193 195 11 (set (reg/f:DI 104 [ stdscr.83_18 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":637 85 {*movdi_internal}
     (nil))
(insn 195 194 196 11 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":637 85 {*movdi_internal}
     (nil))
(insn 196 195 197 11 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":637 86 {*movsi_internal}
     (nil))
(insn 197 196 198 11 (set (reg:DI 5 di)
        (reg/f:DI 104 [ stdscr.83_18 ])) "function.c":637 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ stdscr.83_18 ])
        (nil)))
(call_insn 198 197 701 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":637 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 701 198 702 11 (set (pc)
        (label_ref 360)) "function.c":637 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 702 701 201)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 105 237 238 239 240 241 242 243 244 245
(code_label 201 702 202 12 78 (nil) [1 uses])
(note 202 201 203 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 203 202 204 12 (set (reg/f:DI 237)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 204 203 205 12 (set (reg:SI 239)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 205 204 206 12 (set (reg:DI 238)
        (sign_extend:DI (reg:SI 239))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 239)
        (nil)))
(insn 206 205 207 12 (set (reg:SI 241)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 207 206 208 12 (set (reg:DI 240)
        (sign_extend:DI (reg:SI 241))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 241)
        (nil)))
(insn 208 207 209 12 (parallel [
            (set (reg:DI 242)
                (mult:DI (reg:DI 240)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 240)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 209 208 210 12 (parallel [
            (set (reg:DI 243)
                (plus:DI (reg/f:DI 237)
                    (reg:DI 242)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 242)
        (expr_list:REG_DEAD (reg/f:DI 237)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 210 209 211 12 (parallel [
            (set (reg:DI 244)
                (plus:DI (reg:DI 243)
                    (reg:DI 238)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 243)
        (expr_list:REG_DEAD (reg:DI 238)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 211 210 212 12 (parallel [
            (set (reg/f:DI 245)
                (plus:DI (reg:DI 244)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 244)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 212 211 213 12 (set (reg:QI 105 [ _19 ])
        (mem/j:QI (reg/f:DI 245) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 245)
        (nil)))
(insn 213 212 214 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 105 [ _19 ])
            (const_int 99 [0x63]))) "function.c":639 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 105 [ _19 ])
        (nil)))
(jump_insn 214 213 215 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "function.c":639 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 254)
;;  succ:       16
;;              13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 246 247 248 249 250 251 252 253 254
(note 215 214 216 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 13 (set (reg/f:DI 246)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 217 216 218 13 (set (reg:SI 248)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 218 217 219 13 (set (reg:DI 247)
        (sign_extend:DI (reg:SI 248))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 248)
        (nil)))
(insn 219 218 220 13 (set (reg:SI 250)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 220 219 221 13 (set (reg:DI 249)
        (sign_extend:DI (reg:SI 250))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 250)
        (nil)))
(insn 221 220 222 13 (parallel [
            (set (reg:DI 251)
                (mult:DI (reg:DI 249)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 249)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 222 221 223 13 (parallel [
            (set (reg:DI 252)
                (plus:DI (reg/f:DI 246)
                    (reg:DI 251)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 251)
        (expr_list:REG_DEAD (reg/f:DI 246)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 223 222 224 13 (parallel [
            (set (reg:DI 253)
                (plus:DI (reg:DI 252)
                    (reg:DI 247)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 252)
        (expr_list:REG_DEAD (reg:DI 247)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 224 223 225 13 (parallel [
            (set (reg/f:DI 254)
                (plus:DI (reg:DI 253)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 253)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 225 224 226 13 (set (reg:QI 106 [ _20 ])
        (mem/j:QI (reg/f:DI 254) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 254)
        (nil)))
(insn 226 225 227 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 106 [ _20 ])
            (const_int 116 [0x74]))) "function.c":639 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 106 [ _20 ])
        (nil)))
(jump_insn 227 226 228 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "function.c":639 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 254)
;;  succ:       16
;;              14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 255 256 257 258 259 260 261 262 263
(note 228 227 229 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 229 228 230 14 (set (reg/f:DI 255)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 230 229 231 14 (set (reg:SI 257)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 231 230 232 14 (set (reg:DI 256)
        (sign_extend:DI (reg:SI 257))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 257)
        (nil)))
(insn 232 231 233 14 (set (reg:SI 259)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 233 232 234 14 (set (reg:DI 258)
        (sign_extend:DI (reg:SI 259))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 259)
        (nil)))
(insn 234 233 235 14 (parallel [
            (set (reg:DI 260)
                (mult:DI (reg:DI 258)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 258)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 235 234 236 14 (parallel [
            (set (reg:DI 261)
                (plus:DI (reg/f:DI 255)
                    (reg:DI 260)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 260)
        (expr_list:REG_DEAD (reg/f:DI 255)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 236 235 237 14 (parallel [
            (set (reg:DI 262)
                (plus:DI (reg:DI 261)
                    (reg:DI 256)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 261)
        (expr_list:REG_DEAD (reg:DI 256)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 237 236 238 14 (parallel [
            (set (reg/f:DI 263)
                (plus:DI (reg:DI 262)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 262)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 238 237 239 14 (set (reg:QI 107 [ _21 ])
        (mem/j:QI (reg/f:DI 263) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 263)
        (nil)))
(insn 239 238 240 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 107 [ _21 ])
            (const_int 84 [0x54]))) "function.c":639 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 107 [ _21 ])
        (nil)))
(jump_insn 240 239 241 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 254)
            (pc))) "function.c":639 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 254)
;;  succ:       16
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108 264 265 266 267 268 269 270 271 272
(note 241 240 242 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 242 241 243 15 (set (reg/f:DI 264)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":639 85 {*movdi_internal}
     (nil))
(insn 243 242 244 15 (set (reg:SI 266)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 244 243 245 15 (set (reg:DI 265)
        (sign_extend:DI (reg:SI 266))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 266)
        (nil)))
(insn 245 244 246 15 (set (reg:SI 268)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":639 86 {*movsi_internal}
     (nil))
(insn 246 245 247 15 (set (reg:DI 267)
        (sign_extend:DI (reg:SI 268))) "function.c":639 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 268)
        (nil)))
(insn 247 246 248 15 (parallel [
            (set (reg:DI 269)
                (mult:DI (reg:DI 267)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 267)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 248 247 249 15 (parallel [
            (set (reg:DI 270)
                (plus:DI (reg/f:DI 264)
                    (reg:DI 269)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 269)
        (expr_list:REG_DEAD (reg/f:DI 264)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 249 248 250 15 (parallel [
            (set (reg:DI 271)
                (plus:DI (reg:DI 270)
                    (reg:DI 265)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 270)
        (expr_list:REG_DEAD (reg:DI 265)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 250 249 251 15 (parallel [
            (set (reg/f:DI 272)
                (plus:DI (reg:DI 271)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":639 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 271)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 251 250 252 15 (set (reg:QI 108 [ _22 ])
        (mem/j:QI (reg/f:DI 272) [0 playerinfo_94->area S1 A8])) "function.c":639 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 272)
        (nil)))
(insn 252 251 253 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 108 [ _22 ])
            (const_int 68 [0x44]))) "function.c":639 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 108 [ _22 ])
        (nil)))
(jump_insn 253 252 254 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "function.c":639 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 283)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       12
;;              13
;;              14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 110 111 112 273 274 275 276 277 278 279 280 281
(code_label 254 253 255 16 79 (nil) [3 uses])
(note 255 254 256 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 256 255 257 16 (set (reg/f:DI 109 [ stdscr.84_23 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":641 85 {*movdi_internal}
     (nil))
(insn 257 256 258 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":641 85 {*movdi_internal}
     (nil))
(insn 258 257 259 16 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":641 86 {*movsi_internal}
     (nil))
(insn 259 258 260 16 (set (reg:DI 5 di)
        (reg/f:DI 109 [ stdscr.84_23 ])) "function.c":641 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ stdscr.84_23 ])
        (nil)))
(call_insn 260 259 261 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":641 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 261 260 262 16 (set (reg/f:DI 273)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":642 85 {*movdi_internal}
     (nil))
(insn 262 261 263 16 (set (reg:SI 275)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":642 86 {*movsi_internal}
     (nil))
(insn 263 262 264 16 (set (reg:DI 274)
        (sign_extend:DI (reg:SI 275))) "function.c":642 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 275)
        (nil)))
(insn 264 263 265 16 (set (reg:SI 277)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":642 86 {*movsi_internal}
     (nil))
(insn 265 264 266 16 (set (reg:DI 276)
        (sign_extend:DI (reg:SI 277))) "function.c":642 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 277)
        (nil)))
(insn 266 265 267 16 (parallel [
            (set (reg:DI 278)
                (mult:DI (reg:DI 276)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 276)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 267 266 268 16 (parallel [
            (set (reg:DI 279)
                (plus:DI (reg/f:DI 273)
                    (reg:DI 278)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 278)
        (expr_list:REG_DEAD (reg/f:DI 273)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 268 267 269 16 (parallel [
            (set (reg:DI 280)
                (plus:DI (reg:DI 279)
                    (reg:DI 274)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 279)
        (expr_list:REG_DEAD (reg:DI 274)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 269 268 270 16 (parallel [
            (set (reg/f:DI 281)
                (plus:DI (reg:DI 280)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":642 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 280)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 270 269 271 16 (set (reg:QI 110 [ _24 ])
        (mem/j:QI (reg/f:DI 281) [0 playerinfo_94->area S1 A8])) "function.c":642 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 281)
        (nil)))
(insn 271 270 272 16 (set (reg:SI 111 [ _25 ])
        (sign_extend:SI (reg:QI 110 [ _24 ]))) "function.c":642 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 110 [ _24 ])
        (nil)))
(insn 272 271 273 16 (set (reg:SI 4 si)
        (reg:SI 111 [ _25 ])) "function.c":642 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
        (nil)))
(insn 273 272 274 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":642 85 {*movdi_internal}
     (nil))
(insn 274 273 275 16 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":642 88 {*movqi_internal}
     (nil))
(call_insn 275 274 276 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":642 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 276 275 277 16 (set (reg/f:DI 112 [ stdscr.85_26 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":643 85 {*movdi_internal}
     (nil))
(insn 277 276 278 16 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":643 85 {*movdi_internal}
     (nil))
(insn 278 277 279 16 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":643 86 {*movsi_internal}
     (nil))
(insn 279 278 280 16 (set (reg:DI 5 di)
        (reg/f:DI 112 [ stdscr.85_26 ])) "function.c":643 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ stdscr.85_26 ])
        (nil)))
(call_insn 280 279 703 16 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":643 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 703 280 704 16 (set (pc)
        (label_ref 360)) "function.c":643 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 704 703 283)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       15
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113 282 283 284 285 286 287 288 289 290
(code_label 283 704 284 17 80 (nil) [1 uses])
(note 284 283 285 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 17 (set (reg/f:DI 282)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":645 85 {*movdi_internal}
     (nil))
(insn 286 285 287 17 (set (reg:SI 284)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":645 86 {*movsi_internal}
     (nil))
(insn 287 286 288 17 (set (reg:DI 283)
        (sign_extend:DI (reg:SI 284))) "function.c":645 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 284)
        (nil)))
(insn 288 287 289 17 (set (reg:SI 286)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":645 86 {*movsi_internal}
     (nil))
(insn 289 288 290 17 (set (reg:DI 285)
        (sign_extend:DI (reg:SI 286))) "function.c":645 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 286)
        (nil)))
(insn 290 289 291 17 (parallel [
            (set (reg:DI 287)
                (mult:DI (reg:DI 285)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 285)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 291 290 292 17 (parallel [
            (set (reg:DI 288)
                (plus:DI (reg/f:DI 282)
                    (reg:DI 287)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 287)
        (expr_list:REG_DEAD (reg/f:DI 282)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 292 291 293 17 (parallel [
            (set (reg:DI 289)
                (plus:DI (reg:DI 288)
                    (reg:DI 283)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 288)
        (expr_list:REG_DEAD (reg:DI 283)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 293 292 294 17 (parallel [
            (set (reg/f:DI 290)
                (plus:DI (reg:DI 289)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":645 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 289)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 294 293 295 17 (set (reg:QI 113 [ _27 ])
        (mem/j:QI (reg/f:DI 290) [0 playerinfo_94->area S1 A8])) "function.c":645 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 290)
        (nil)))
(insn 295 294 296 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 113 [ _27 ])
            (const_int 42 [0x2a]))) "function.c":645 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 113 [ _27 ])
        (nil)))
(jump_insn 296 295 297 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 313)
            (pc))) "function.c":645 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 313)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 114 115
(note 297 296 298 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 18 (set (reg/f:DI 114 [ stdscr.86_28 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":647 85 {*movdi_internal}
     (nil))
(insn 299 298 300 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":647 85 {*movdi_internal}
     (nil))
(insn 300 299 301 18 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":647 86 {*movsi_internal}
     (nil))
(insn 301 300 302 18 (set (reg:DI 5 di)
        (reg/f:DI 114 [ stdscr.86_28 ])) "function.c":647 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ stdscr.86_28 ])
        (nil)))
(call_insn 302 301 303 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":647 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 303 302 304 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC40") [flags 0x2]  <var_decl 0x7f7cd0f0d510 *.LC40>)) "function.c":648 85 {*movdi_internal}
     (nil))
(insn 304 303 305 18 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":648 88 {*movqi_internal}
     (nil))
(call_insn 305 304 306 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":648 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 306 305 307 18 (set (reg/f:DI 115 [ stdscr.87_29 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":649 85 {*movdi_internal}
     (nil))
(insn 307 306 308 18 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":649 85 {*movdi_internal}
     (nil))
(insn 308 307 309 18 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":649 86 {*movsi_internal}
     (nil))
(insn 309 308 310 18 (set (reg:DI 5 di)
        (reg/f:DI 115 [ stdscr.87_29 ])) "function.c":649 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ stdscr.87_29 ])
        (nil)))
(call_insn 310 309 705 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":649 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 705 310 706 18 (set (pc)
        (label_ref 360)) 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 706 705 313)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 116 291 292 293 294 295 296 297 298 299
(code_label 313 706 314 19 81 (nil) [1 uses])
(note 314 313 315 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 315 314 316 19 (set (reg/f:DI 291)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":651 85 {*movdi_internal}
     (nil))
(insn 316 315 317 19 (set (reg:SI 293)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":651 86 {*movsi_internal}
     (nil))
(insn 317 316 318 19 (set (reg:DI 292)
        (sign_extend:DI (reg:SI 293))) "function.c":651 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 293)
        (nil)))
(insn 318 317 319 19 (set (reg:SI 295)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":651 86 {*movsi_internal}
     (nil))
(insn 319 318 320 19 (set (reg:DI 294)
        (sign_extend:DI (reg:SI 295))) "function.c":651 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 295)
        (nil)))
(insn 320 319 321 19 (parallel [
            (set (reg:DI 296)
                (mult:DI (reg:DI 294)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 294)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 321 320 322 19 (parallel [
            (set (reg:DI 297)
                (plus:DI (reg/f:DI 291)
                    (reg:DI 296)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 296)
        (expr_list:REG_DEAD (reg/f:DI 291)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 322 321 323 19 (parallel [
            (set (reg:DI 298)
                (plus:DI (reg:DI 297)
                    (reg:DI 292)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 297)
        (expr_list:REG_DEAD (reg:DI 292)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 323 322 324 19 (parallel [
            (set (reg/f:DI 299)
                (plus:DI (reg:DI 298)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":651 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 298)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 324 323 325 19 (set (reg:QI 116 [ _30 ])
        (mem/j:QI (reg/f:DI 299) [0 playerinfo_94->area S1 A8])) "function.c":651 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 299)
        (nil)))
(insn 325 324 326 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 116 [ _30 ])
            (const_int 65 [0x41]))) "function.c":651 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 116 [ _30 ])
        (nil)))
(jump_insn 326 325 327 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) "function.c":651 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 343)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 118
(note 327 326 328 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 328 327 329 20 (set (reg/f:DI 117 [ stdscr.88_31 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":653 85 {*movdi_internal}
     (nil))
(insn 329 328 330 20 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":653 85 {*movdi_internal}
     (nil))
(insn 330 329 331 20 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":653 86 {*movsi_internal}
     (nil))
(insn 331 330 332 20 (set (reg:DI 5 di)
        (reg/f:DI 117 [ stdscr.88_31 ])) "function.c":653 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117 [ stdscr.88_31 ])
        (nil)))
(call_insn 332 331 333 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":653 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 333 332 334 20 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":654 85 {*movdi_internal}
     (nil))
(insn 334 333 335 20 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":654 88 {*movqi_internal}
     (nil))
(call_insn 335 334 336 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":654 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 336 335 337 20 (set (reg/f:DI 118 [ stdscr.89_32 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":655 85 {*movdi_internal}
     (nil))
(insn 337 336 338 20 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":655 85 {*movdi_internal}
     (nil))
(insn 338 337 339 20 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":655 86 {*movsi_internal}
     (nil))
(insn 339 338 340 20 (set (reg:DI 5 di)
        (reg/f:DI 118 [ stdscr.89_32 ])) "function.c":655 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ stdscr.89_32 ])
        (nil)))
(call_insn 340 339 707 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":655 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 707 340 708 20 (set (pc)
        (label_ref 360)) 683 {jump}
     (nil)
 -> 360)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 708 707 343)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 119 120 300 301 302 303 304 305 306 307 308
(code_label 343 708 344 21 82 (nil) [1 uses])
(note 344 343 345 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 345 344 346 21 (set (reg/f:DI 300)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":659 85 {*movdi_internal}
     (nil))
(insn 346 345 347 21 (set (reg:SI 302)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":659 86 {*movsi_internal}
     (nil))
(insn 347 346 348 21 (set (reg:DI 301)
        (sign_extend:DI (reg:SI 302))) "function.c":659 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 302)
        (nil)))
(insn 348 347 349 21 (set (reg:SI 304)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":659 86 {*movsi_internal}
     (nil))
(insn 349 348 350 21 (set (reg:DI 303)
        (sign_extend:DI (reg:SI 304))) "function.c":659 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 304)
        (nil)))
(insn 350 349 351 21 (parallel [
            (set (reg:DI 305)
                (mult:DI (reg:DI 303)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 303)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 351 350 352 21 (parallel [
            (set (reg:DI 306)
                (plus:DI (reg/f:DI 300)
                    (reg:DI 305)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 305)
        (expr_list:REG_DEAD (reg/f:DI 300)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 352 351 353 21 (parallel [
            (set (reg:DI 307)
                (plus:DI (reg:DI 306)
                    (reg:DI 301)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 306)
        (expr_list:REG_DEAD (reg:DI 301)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 353 352 354 21 (parallel [
            (set (reg/f:DI 308)
                (plus:DI (reg:DI 307)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":659 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 307)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 354 353 355 21 (set (reg:QI 119 [ _33 ])
        (mem/j:QI (reg/f:DI 308) [0 playerinfo_94->area S1 A8])) "function.c":659 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 308)
        (nil)))
(insn 355 354 356 21 (set (reg:SI 120 [ _34 ])
        (sign_extend:SI (reg:QI 119 [ _33 ]))) "function.c":659 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 119 [ _33 ])
        (nil)))
(insn 356 355 357 21 (set (reg:SI 4 si)
        (reg:SI 120 [ _34 ])) "function.c":659 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 120 [ _34 ])
        (nil)))
(insn 357 356 358 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":659 85 {*movdi_internal}
     (nil))
(insn 358 357 359 21 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":659 88 {*movqi_internal}
     (nil))
(call_insn 359 358 360 21 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":659 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;;              6 [always] 
;;              11 [always] 
;;              16 [always] 
;;              18 [always] 
;;              20 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 360 359 361 22 76 (nil) [5 uses])
(note 361 360 362 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 362 361 363 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":624 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       23 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 (FALLTHRU,DFS_BACK)
;;              4 [always] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 363 362 364 23 74 (nil) [1 uses])
(note 364 363 366 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 366 364 367 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":624 11 {*cmpsi_1}
     (nil))
(jump_insn 367 366 368 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 365)
            (pc))) "function.c":624 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 365)
;;  succ:       5
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 368 367 369 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 369 368 370 24 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":622 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       25 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 370 369 371 25 73 (nil) [1 uses])
(note 371 370 373 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 373 371 374 25 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":622 11 {*cmpsi_1}
     (nil))
(jump_insn 374 373 375 25 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 372)
            (pc))) "function.c":622 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 372)
;;  succ:       4
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 309 310 311 312 313 314 315 316 317
(note 375 374 376 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 376 375 377 26 (set (reg/f:DI 121 [ stdscr.90_35 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":664 85 {*movdi_internal}
     (nil))
(insn 377 376 378 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":664 86 {*movsi_internal}
     (nil))
(insn 378 377 379 26 (set (reg:SI 4 si)
        (const_int 25 [0x19])) "function.c":664 86 {*movsi_internal}
     (nil))
(insn 379 378 380 26 (set (reg:DI 5 di)
        (reg/f:DI 121 [ stdscr.90_35 ])) "function.c":664 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121 [ stdscr.90_35 ])
        (nil)))
(call_insn 380 379 381 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":664 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 381 380 382 26 (set (reg/f:DI 309)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":665 85 {*movdi_internal}
     (nil))
(insn 382 381 383 26 (set (reg:SI 122 [ _36 ])
        (mem:SI (plus:DI (reg/f:DI 309)
                (const_int 4 [0x4])) [3 playerinfo_94->PID_serwer+0 S4 A32])) "function.c":665 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 309)
        (nil)))
(insn 383 382 384 26 (set (reg:SI 4 si)
        (reg:SI 122 [ _36 ])) "function.c":665 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122 [ _36 ])
        (nil)))
(insn 384 383 385 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f7cd0ee26c0 *.LC5>)) "function.c":665 85 {*movdi_internal}
     (nil))
(insn 385 384 386 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":665 88 {*movqi_internal}
     (nil))
(call_insn 386 385 387 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":665 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 387 386 388 26 (set (reg/f:DI 123 [ stdscr.91_37 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":667 85 {*movdi_internal}
     (nil))
(insn 388 387 389 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":667 86 {*movsi_internal}
     (nil))
(insn 389 388 390 26 (set (reg:SI 4 si)
        (const_int 26 [0x1a])) "function.c":667 86 {*movsi_internal}
     (nil))
(insn 390 389 391 26 (set (reg:DI 5 di)
        (reg/f:DI 123 [ stdscr.91_37 ])) "function.c":667 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ stdscr.91_37 ])
        (nil)))
(call_insn 391 390 392 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":667 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 392 391 393 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC41") [flags 0x2]  <var_decl 0x7f7cd0f0d120 *.LC41>)) "function.c":668 85 {*movdi_internal}
     (nil))
(insn 393 392 394 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":668 88 {*movqi_internal}
     (nil))
(call_insn 394 393 395 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":668 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 395 394 396 26 (set (reg/f:DI 124 [ stdscr.92_38 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":670 85 {*movdi_internal}
     (nil))
(insn 396 395 397 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":670 86 {*movsi_internal}
     (nil))
(insn 397 396 398 26 (set (reg:SI 4 si)
        (const_int 27 [0x1b])) "function.c":670 86 {*movsi_internal}
     (nil))
(insn 398 397 399 26 (set (reg:DI 5 di)
        (reg/f:DI 124 [ stdscr.92_38 ])) "function.c":670 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ stdscr.92_38 ])
        (nil)))
(call_insn 399 398 400 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":670 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 400 399 401 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC42") [flags 0x2]  <var_decl 0x7f7cd0aac480 *.LC42>)) "function.c":671 85 {*movdi_internal}
     (nil))
(insn 401 400 402 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":671 88 {*movqi_internal}
     (nil))
(call_insn 402 401 403 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":671 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 403 402 404 26 (set (reg/f:DI 125 [ stdscr.93_39 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":673 85 {*movdi_internal}
     (nil))
(insn 404 403 405 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":673 86 {*movsi_internal}
     (nil))
(insn 405 404 406 26 (set (reg:SI 4 si)
        (const_int 28 [0x1c])) "function.c":673 86 {*movsi_internal}
     (nil))
(insn 406 405 407 26 (set (reg:DI 5 di)
        (reg/f:DI 125 [ stdscr.93_39 ])) "function.c":673 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ stdscr.93_39 ])
        (nil)))
(call_insn 407 406 408 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":673 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 408 407 409 26 (set (reg/f:DI 310)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":674 85 {*movdi_internal}
     (nil))
(insn 409 408 410 26 (set (reg:SI 126 [ _40 ])
        (mem:SI (plus:DI (reg/f:DI 310)
                (const_int 22552 [0x5818])) [3 playerinfo_94->runda+0 S4 A64])) "function.c":674 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 310)
        (nil)))
(insn 410 409 411 26 (set (reg:SI 4 si)
        (reg:SI 126 [ _40 ])) "function.c":674 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 126 [ _40 ])
        (nil)))
(insn 411 410 412 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f7cd0ee27e0 *.LC7>)) "function.c":674 85 {*movdi_internal}
     (nil))
(insn 412 411 413 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":674 88 {*movqi_internal}
     (nil))
(call_insn 413 412 414 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":674 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 414 413 415 26 (set (reg/f:DI 127 [ stdscr.94_41 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":676 85 {*movdi_internal}
     (nil))
(insn 415 414 416 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":676 86 {*movsi_internal}
     (nil))
(insn 416 415 417 26 (set (reg:SI 4 si)
        (const_int 30 [0x1e])) "function.c":676 86 {*movsi_internal}
     (nil))
(insn 417 416 418 26 (set (reg:DI 5 di)
        (reg/f:DI 127 [ stdscr.94_41 ])) "function.c":676 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ stdscr.94_41 ])
        (nil)))
(call_insn 418 417 419 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":676 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 419 418 420 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC43") [flags 0x2]  <var_decl 0x7f7cd0aac510 *.LC43>)) "function.c":677 85 {*movdi_internal}
     (nil))
(insn 420 419 421 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":677 88 {*movqi_internal}
     (nil))
(call_insn 421 420 422 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":677 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 422 421 423 26 (set (reg/f:DI 128 [ stdscr.95_42 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":679 85 {*movdi_internal}
     (nil))
(insn 423 422 424 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":679 86 {*movsi_internal}
     (nil))
(insn 424 423 425 26 (set (reg:SI 4 si)
        (const_int 31 [0x1f])) "function.c":679 86 {*movsi_internal}
     (nil))
(insn 425 424 426 26 (set (reg:DI 5 di)
        (reg/f:DI 128 [ stdscr.95_42 ])) "function.c":679 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 128 [ stdscr.95_42 ])
        (nil)))
(call_insn 426 425 427 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":679 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 427 426 428 26 (set (reg/f:DI 311)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":680 85 {*movdi_internal}
     (nil))
(insn 428 427 429 26 (set (reg:SI 129 [ _43 ])
        (mem:SI (plus:DI (reg/f:DI 311)
                (const_int 8 [0x8])) [3 playerinfo_94->numer+0 S4 A64])) "function.c":680 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 311)
        (nil)))
(insn 429 428 430 26 (set (reg:SI 4 si)
        (reg:SI 129 [ _43 ])) "function.c":680 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 129 [ _43 ])
        (nil)))
(insn 430 429 431 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC44") [flags 0x2]  <var_decl 0x7f7cd0aac5a0 *.LC44>)) "function.c":680 85 {*movdi_internal}
     (nil))
(insn 431 430 432 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":680 88 {*movqi_internal}
     (nil))
(call_insn 432 431 433 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":680 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 433 432 434 26 (set (reg/f:DI 130 [ stdscr.96_44 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":682 85 {*movdi_internal}
     (nil))
(insn 434 433 435 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":682 86 {*movsi_internal}
     (nil))
(insn 435 434 436 26 (set (reg:SI 4 si)
        (const_int 32 [0x20])) "function.c":682 86 {*movsi_internal}
     (nil))
(insn 436 435 437 26 (set (reg:DI 5 di)
        (reg/f:DI 130 [ stdscr.96_44 ])) "function.c":682 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ stdscr.96_44 ])
        (nil)))
(call_insn 437 436 438 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":682 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 438 437 439 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC45") [flags 0x2]  <var_decl 0x7f7cd0aac630 *.LC45>)) "function.c":683 85 {*movdi_internal}
     (nil))
(insn 439 438 440 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":683 88 {*movqi_internal}
     (nil))
(call_insn 440 439 441 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":683 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 441 440 442 26 (set (reg/f:DI 131 [ stdscr.97_45 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":685 85 {*movdi_internal}
     (nil))
(insn 442 441 443 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":685 86 {*movsi_internal}
     (nil))
(insn 443 442 444 26 (set (reg:SI 4 si)
        (const_int 33 [0x21])) "function.c":685 86 {*movsi_internal}
     (nil))
(insn 444 443 445 26 (set (reg:DI 5 di)
        (reg/f:DI 131 [ stdscr.97_45 ])) "function.c":685 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ stdscr.97_45 ])
        (nil)))
(call_insn 445 444 446 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":685 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 446 445 447 26 (set (reg/f:DI 312)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":686 85 {*movdi_internal}
     (nil))
(insn 447 446 448 26 (set (reg:SI 132 [ _46 ])
        (mem:SI (plus:DI (reg/f:DI 312)
                (const_int 16 [0x10])) [3 playerinfo_94->y_current+0 S4 A64])) "function.c":686 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 312)
        (nil)))
(insn 448 447 449 26 (set (reg/f:DI 313)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":686 85 {*movdi_internal}
     (nil))
(insn 449 448 450 26 (set (reg:SI 133 [ _47 ])
        (mem:SI (plus:DI (reg/f:DI 313)
                (const_int 12 [0xc])) [3 playerinfo_94->x_current+0 S4 A32])) "function.c":686 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 313)
        (nil)))
(insn 450 449 451 26 (set (reg:SI 1 dx)
        (reg:SI 132 [ _46 ])) "function.c":686 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 132 [ _46 ])
        (nil)))
(insn 451 450 452 26 (set (reg:SI 4 si)
        (reg:SI 133 [ _47 ])) "function.c":686 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 133 [ _47 ])
        (nil)))
(insn 452 451 453 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC46") [flags 0x2]  <var_decl 0x7f7cd0aac6c0 *.LC46>)) "function.c":686 85 {*movdi_internal}
     (nil))
(insn 453 452 454 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":686 88 {*movqi_internal}
     (nil))
(call_insn 454 453 455 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":686 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 455 454 456 26 (set (reg/f:DI 134 [ stdscr.98_48 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":688 85 {*movdi_internal}
     (nil))
(insn 456 455 457 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":688 86 {*movsi_internal}
     (nil))
(insn 457 456 458 26 (set (reg:SI 4 si)
        (const_int 34 [0x22])) "function.c":688 86 {*movsi_internal}
     (nil))
(insn 458 457 459 26 (set (reg:DI 5 di)
        (reg/f:DI 134 [ stdscr.98_48 ])) "function.c":688 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ stdscr.98_48 ])
        (nil)))
(call_insn 459 458 460 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":688 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 460 459 461 26 (set (reg/f:DI 314)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":689 85 {*movdi_internal}
     (nil))
(insn 461 460 462 26 (set (reg:SI 135 [ _49 ])
        (mem:SI (plus:DI (reg/f:DI 314)
                (const_int 28 [0x1c])) [3 playerinfo_94->deaths+0 S4 A32])) "function.c":689 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 314)
        (nil)))
(insn 462 461 463 26 (set (reg:SI 4 si)
        (reg:SI 135 [ _49 ])) "function.c":689 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 135 [ _49 ])
        (nil)))
(insn 463 462 464 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC47") [flags 0x2]  <var_decl 0x7f7cd0aac750 *.LC47>)) "function.c":689 85 {*movdi_internal}
     (nil))
(insn 464 463 465 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":689 88 {*movqi_internal}
     (nil))
(call_insn 465 464 466 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":689 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 466 465 467 26 (set (reg/f:DI 136 [ stdscr.99_50 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":691 85 {*movdi_internal}
     (nil))
(insn 467 466 468 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":691 86 {*movsi_internal}
     (nil))
(insn 468 467 469 26 (set (reg:SI 4 si)
        (const_int 36 [0x24])) "function.c":691 86 {*movsi_internal}
     (nil))
(insn 469 468 470 26 (set (reg:DI 5 di)
        (reg/f:DI 136 [ stdscr.99_50 ])) "function.c":691 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136 [ stdscr.99_50 ])
        (nil)))
(call_insn 470 469 471 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":691 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 471 470 472 26 (set (reg/f:DI 315)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":692 85 {*movdi_internal}
     (nil))
(insn 472 471 473 26 (set (reg:SI 137 [ _51 ])
        (mem:SI (plus:DI (reg/f:DI 315)
                (const_int 32 [0x20])) [3 playerinfo_94->coins_carried+0 S4 A64])) "function.c":692 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 315)
        (nil)))
(insn 473 472 474 26 (set (reg:SI 4 si)
        (reg:SI 137 [ _51 ])) "function.c":692 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 137 [ _51 ])
        (nil)))
(insn 474 473 475 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC48") [flags 0x2]  <var_decl 0x7f7cd0aac7e0 *.LC48>)) "function.c":692 85 {*movdi_internal}
     (nil))
(insn 475 474 476 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":692 88 {*movqi_internal}
     (nil))
(call_insn 476 475 477 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":692 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 477 476 478 26 (set (reg/f:DI 138 [ stdscr.100_52 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":694 85 {*movdi_internal}
     (nil))
(insn 478 477 479 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":694 86 {*movsi_internal}
     (nil))
(insn 479 478 480 26 (set (reg:SI 4 si)
        (const_int 37 [0x25])) "function.c":694 86 {*movsi_internal}
     (nil))
(insn 480 479 481 26 (set (reg:DI 5 di)
        (reg/f:DI 138 [ stdscr.100_52 ])) "function.c":694 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ stdscr.100_52 ])
        (nil)))
(call_insn 481 480 482 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":694 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 482 481 483 26 (set (reg/f:DI 316)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 playerinfo+0 S8 A64])) "function.c":695 85 {*movdi_internal}
     (nil))
(insn 483 482 484 26 (set (reg:SI 139 [ _53 ])
        (mem:SI (plus:DI (reg/f:DI 316)
                (const_int 36 [0x24])) [3 playerinfo_94->coins_brought+0 S4 A32])) "function.c":695 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 316)
        (nil)))
(insn 484 483 485 26 (set (reg:SI 4 si)
        (reg:SI 139 [ _53 ])) "function.c":695 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 139 [ _53 ])
        (nil)))
(insn 485 484 486 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC49") [flags 0x2]  <var_decl 0x7f7cd0aac870 *.LC49>)) "function.c":695 85 {*movdi_internal}
     (nil))
(insn 486 485 487 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":695 88 {*movqi_internal}
     (nil))
(call_insn 487 486 488 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":695 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 488 487 489 26 (set (reg/f:DI 140 [ stdscr.101_54 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":697 85 {*movdi_internal}
     (nil))
(insn 489 488 490 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":697 86 {*movsi_internal}
     (nil))
(insn 490 489 491 26 (set (reg:SI 4 si)
        (const_int 40 [0x28])) "function.c":697 86 {*movsi_internal}
     (nil))
(insn 491 490 492 26 (set (reg:DI 5 di)
        (reg/f:DI 140 [ stdscr.101_54 ])) "function.c":697 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140 [ stdscr.101_54 ])
        (nil)))
(call_insn 492 491 493 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":697 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 493 492 494 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f7cd0ee2c60 *.LC16>)) "function.c":698 85 {*movdi_internal}
     (nil))
(insn 494 493 495 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":698 88 {*movqi_internal}
     (nil))
(call_insn 495 494 496 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":698 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 496 495 497 26 (set (reg/f:DI 141 [ stdscr.102_55 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":700 85 {*movdi_internal}
     (nil))
(insn 497 496 498 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":700 86 {*movsi_internal}
     (nil))
(insn 498 497 499 26 (set (reg:SI 4 si)
        (const_int 41 [0x29])) "function.c":700 86 {*movsi_internal}
     (nil))
(insn 499 498 500 26 (set (reg:DI 5 di)
        (reg/f:DI 141 [ stdscr.102_55 ])) "function.c":700 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141 [ stdscr.102_55 ])
        (nil)))
(call_insn 500 499 501 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":700 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 501 500 502 26 (set (reg/f:DI 142 [ stdscr.103_56 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":701 85 {*movdi_internal}
     (nil))
(insn 502 501 503 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":701 85 {*movdi_internal}
     (nil))
(insn 503 502 504 26 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":701 86 {*movsi_internal}
     (nil))
(insn 504 503 505 26 (set (reg:DI 5 di)
        (reg/f:DI 142 [ stdscr.103_56 ])) "function.c":701 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ stdscr.103_56 ])
        (nil)))
(call_insn 505 504 506 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":701 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 506 505 507 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f7cd0ee2cf0 *.LC17>)) "function.c":702 85 {*movdi_internal}
     (nil))
(insn 507 506 508 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":702 88 {*movqi_internal}
     (nil))
(call_insn 508 507 509 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":702 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 509 508 510 26 (set (reg/f:DI 143 [ stdscr.104_57 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":703 85 {*movdi_internal}
     (nil))
(insn 510 509 511 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":703 85 {*movdi_internal}
     (nil))
(insn 511 510 512 26 (set (reg:SI 4 si)
        (const_int 1536 [0x600])) "function.c":703 86 {*movsi_internal}
     (nil))
(insn 512 511 513 26 (set (reg:DI 5 di)
        (reg/f:DI 143 [ stdscr.104_57 ])) "function.c":703 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143 [ stdscr.104_57 ])
        (nil)))
(call_insn 513 512 514 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":703 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 514 513 515 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f7cd0ee2d80 *.LC18>)) "function.c":704 85 {*movdi_internal}
     (nil))
(insn 515 514 516 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":704 88 {*movqi_internal}
     (nil))
(call_insn 516 515 517 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":704 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 517 516 518 26 (set (reg/f:DI 144 [ stdscr.105_58 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":706 85 {*movdi_internal}
     (nil))
(insn 518 517 519 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":706 86 {*movsi_internal}
     (nil))
(insn 519 518 520 26 (set (reg:SI 4 si)
        (const_int 42 [0x2a])) "function.c":706 86 {*movsi_internal}
     (nil))
(insn 520 519 521 26 (set (reg:DI 5 di)
        (reg/f:DI 144 [ stdscr.105_58 ])) "function.c":706 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 144 [ stdscr.105_58 ])
        (nil)))
(call_insn 521 520 522 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":706 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 522 521 523 26 (set (reg/f:DI 145 [ stdscr.106_59 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":707 85 {*movdi_internal}
     (nil))
(insn 523 522 524 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":707 85 {*movdi_internal}
     (nil))
(insn 524 523 525 26 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":707 86 {*movsi_internal}
     (nil))
(insn 525 524 526 26 (set (reg:DI 5 di)
        (reg/f:DI 145 [ stdscr.106_59 ])) "function.c":707 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145 [ stdscr.106_59 ])
        (nil)))
(call_insn 526 525 527 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":707 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 527 526 528 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":708 85 {*movdi_internal}
     (nil))
(insn 528 527 529 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":708 88 {*movqi_internal}
     (nil))
(call_insn 529 528 530 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":708 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 530 529 531 26 (set (reg/f:DI 146 [ stdscr.107_60 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":709 85 {*movdi_internal}
     (nil))
(insn 531 530 532 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":709 85 {*movdi_internal}
     (nil))
(insn 532 531 533 26 (set (reg:SI 4 si)
        (const_int 1280 [0x500])) "function.c":709 86 {*movsi_internal}
     (nil))
(insn 533 532 534 26 (set (reg:DI 5 di)
        (reg/f:DI 146 [ stdscr.107_60 ])) "function.c":709 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ stdscr.107_60 ])
        (nil)))
(call_insn 534 533 535 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":709 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 535 534 536 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC19") [flags 0x2]  <var_decl 0x7f7cd0ee2e10 *.LC19>)) "function.c":710 85 {*movdi_internal}
     (nil))
(insn 536 535 537 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":710 88 {*movqi_internal}
     (nil))
(call_insn 537 536 538 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":710 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 538 537 539 26 (set (reg/f:DI 147 [ stdscr.108_61 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":712 85 {*movdi_internal}
     (nil))
(insn 539 538 540 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":712 86 {*movsi_internal}
     (nil))
(insn 540 539 541 26 (set (reg:SI 4 si)
        (const_int 43 [0x2b])) "function.c":712 86 {*movsi_internal}
     (nil))
(insn 541 540 542 26 (set (reg:DI 5 di)
        (reg/f:DI 147 [ stdscr.108_61 ])) "function.c":712 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ stdscr.108_61 ])
        (nil)))
(call_insn 542 541 543 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":712 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 543 542 544 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7f7cd0ee2ea0 *.LC20>)) "function.c":713 85 {*movdi_internal}
     (nil))
(insn 544 543 545 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":713 88 {*movqi_internal}
     (nil))
(call_insn 545 544 546 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":713 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 546 545 547 26 (set (reg/f:DI 148 [ stdscr.109_62 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":715 85 {*movdi_internal}
     (nil))
(insn 547 546 548 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":715 86 {*movsi_internal}
     (nil))
(insn 548 547 549 26 (set (reg:SI 4 si)
        (const_int 44 [0x2c])) "function.c":715 86 {*movsi_internal}
     (nil))
(insn 549 548 550 26 (set (reg:DI 5 di)
        (reg/f:DI 148 [ stdscr.109_62 ])) "function.c":715 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ stdscr.109_62 ])
        (nil)))
(call_insn 550 549 551 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":715 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 551 550 552 26 (set (reg/f:DI 149 [ stdscr.110_63 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":716 85 {*movdi_internal}
     (nil))
(insn 552 551 553 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":716 85 {*movdi_internal}
     (nil))
(insn 553 552 554 26 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":716 86 {*movsi_internal}
     (nil))
(insn 554 553 555 26 (set (reg:DI 5 di)
        (reg/f:DI 149 [ stdscr.110_63 ])) "function.c":716 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149 [ stdscr.110_63 ])
        (nil)))
(call_insn 555 554 556 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":716 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 556 555 557 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f7cd0ee2f30 *.LC21>)) "function.c":717 85 {*movdi_internal}
     (nil))
(insn 557 556 558 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":717 88 {*movqi_internal}
     (nil))
(call_insn 558 557 559 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":717 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 559 558 560 26 (set (reg/f:DI 150 [ stdscr.111_64 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":718 85 {*movdi_internal}
     (nil))
(insn 560 559 561 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":718 85 {*movdi_internal}
     (nil))
(insn 561 560 562 26 (set (reg:SI 4 si)
        (const_int 3072 [0xc00])) "function.c":718 86 {*movsi_internal}
     (nil))
(insn 562 561 563 26 (set (reg:DI 5 di)
        (reg/f:DI 150 [ stdscr.111_64 ])) "function.c":718 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150 [ stdscr.111_64 ])
        (nil)))
(call_insn 563 562 564 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":718 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 564 563 565 26 (set (reg/f:DI 151 [ stdscr.112_65 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":720 85 {*movdi_internal}
     (nil))
(insn 565 564 566 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":720 86 {*movsi_internal}
     (nil))
(insn 566 565 567 26 (set (reg:SI 4 si)
        (const_int 45 [0x2d])) "function.c":720 86 {*movsi_internal}
     (nil))
(insn 567 566 568 26 (set (reg:DI 5 di)
        (reg/f:DI 151 [ stdscr.112_65 ])) "function.c":720 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 151 [ stdscr.112_65 ])
        (nil)))
(call_insn 568 567 569 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":720 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 569 568 570 26 (set (reg/f:DI 152 [ stdscr.113_66 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":721 85 {*movdi_internal}
     (nil))
(insn 570 569 571 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":721 85 {*movdi_internal}
     (nil))
(insn 571 570 572 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":721 86 {*movsi_internal}
     (nil))
(insn 572 571 573 26 (set (reg:DI 5 di)
        (reg/f:DI 152 [ stdscr.113_66 ])) "function.c":721 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ stdscr.113_66 ])
        (nil)))
(call_insn 573 572 574 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":721 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 574 573 575 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f7cd0ef3000 *.LC22>)) "function.c":722 85 {*movdi_internal}
     (nil))
(insn 575 574 576 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":722 88 {*movqi_internal}
     (nil))
(call_insn 576 575 577 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":722 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 577 576 578 26 (set (reg/f:DI 153 [ stdscr.114_67 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":723 85 {*movdi_internal}
     (nil))
(insn 578 577 579 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":723 85 {*movdi_internal}
     (nil))
(insn 579 578 580 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":723 86 {*movsi_internal}
     (nil))
(insn 580 579 581 26 (set (reg:DI 5 di)
        (reg/f:DI 153 [ stdscr.114_67 ])) "function.c":723 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 153 [ stdscr.114_67 ])
        (nil)))
(call_insn 581 580 582 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":723 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 582 581 583 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC50") [flags 0x2]  <var_decl 0x7f7cd0aac900 *.LC50>)) "function.c":724 85 {*movdi_internal}
     (nil))
(insn 583 582 584 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":724 88 {*movqi_internal}
     (nil))
(call_insn 584 583 585 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":724 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 585 584 586 26 (set (reg/f:DI 154 [ stdscr.115_68 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":725 85 {*movdi_internal}
     (nil))
(insn 586 585 587 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":725 85 {*movdi_internal}
     (nil))
(insn 587 586 588 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":725 86 {*movsi_internal}
     (nil))
(insn 588 587 589 26 (set (reg:DI 5 di)
        (reg/f:DI 154 [ stdscr.115_68 ])) "function.c":725 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ stdscr.115_68 ])
        (nil)))
(call_insn 589 588 590 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":725 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 590 589 591 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f7cd0ef3120 *.LC24>)) "function.c":726 85 {*movdi_internal}
     (nil))
(insn 591 590 592 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":726 88 {*movqi_internal}
     (nil))
(call_insn 592 591 593 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":726 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 593 592 594 26 (set (reg/f:DI 155 [ stdscr.116_69 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":727 85 {*movdi_internal}
     (nil))
(insn 594 593 595 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":727 85 {*movdi_internal}
     (nil))
(insn 595 594 596 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":727 86 {*movsi_internal}
     (nil))
(insn 596 595 597 26 (set (reg:DI 5 di)
        (reg/f:DI 155 [ stdscr.116_69 ])) "function.c":727 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155 [ stdscr.116_69 ])
        (nil)))
(call_insn 597 596 598 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":727 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 598 597 599 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f7cd0ef31b0 *.LC25>)) "function.c":728 85 {*movdi_internal}
     (nil))
(insn 599 598 600 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":728 88 {*movqi_internal}
     (nil))
(call_insn 600 599 601 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":728 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 601 600 602 26 (set (reg/f:DI 156 [ stdscr.117_70 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":730 85 {*movdi_internal}
     (nil))
(insn 602 601 603 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":730 86 {*movsi_internal}
     (nil))
(insn 603 602 604 26 (set (reg:SI 4 si)
        (const_int 46 [0x2e])) "function.c":730 86 {*movsi_internal}
     (nil))
(insn 604 603 605 26 (set (reg:DI 5 di)
        (reg/f:DI 156 [ stdscr.117_70 ])) "function.c":730 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156 [ stdscr.117_70 ])
        (nil)))
(call_insn 605 604 606 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":730 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 606 605 607 26 (set (reg/f:DI 157 [ stdscr.118_71 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":731 85 {*movdi_internal}
     (nil))
(insn 607 606 608 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":731 85 {*movdi_internal}
     (nil))
(insn 608 607 609 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":731 86 {*movsi_internal}
     (nil))
(insn 609 608 610 26 (set (reg:DI 5 di)
        (reg/f:DI 157 [ stdscr.118_71 ])) "function.c":731 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ stdscr.118_71 ])
        (nil)))
(call_insn 610 609 611 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":731 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 611 610 612 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f7cd0ef3240 *.LC26>)) "function.c":732 85 {*movdi_internal}
     (nil))
(insn 612 611 613 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":732 88 {*movqi_internal}
     (nil))
(call_insn 613 612 614 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":732 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 614 613 615 26 (set (reg/f:DI 158 [ stdscr.119_72 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":733 85 {*movdi_internal}
     (nil))
(insn 615 614 616 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":733 85 {*movdi_internal}
     (nil))
(insn 616 615 617 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":733 86 {*movsi_internal}
     (nil))
(insn 617 616 618 26 (set (reg:DI 5 di)
        (reg/f:DI 158 [ stdscr.119_72 ])) "function.c":733 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158 [ stdscr.119_72 ])
        (nil)))
(call_insn 618 617 619 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":733 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 619 618 620 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f7cd0ef32d0 *.LC27>)) "function.c":734 85 {*movdi_internal}
     (nil))
(insn 620 619 621 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":734 88 {*movqi_internal}
     (nil))
(call_insn 621 620 622 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":734 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 622 621 623 26 (set (reg/f:DI 159 [ stdscr.120_73 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":736 85 {*movdi_internal}
     (nil))
(insn 623 622 624 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":736 86 {*movsi_internal}
     (nil))
(insn 624 623 625 26 (set (reg:SI 4 si)
        (const_int 47 [0x2f])) "function.c":736 86 {*movsi_internal}
     (nil))
(insn 625 624 626 26 (set (reg:DI 5 di)
        (reg/f:DI 159 [ stdscr.120_73 ])) "function.c":736 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 159 [ stdscr.120_73 ])
        (nil)))
(call_insn 626 625 627 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":736 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 627 626 628 26 (set (reg/f:DI 160 [ stdscr.121_74 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":737 85 {*movdi_internal}
     (nil))
(insn 628 627 629 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":737 85 {*movdi_internal}
     (nil))
(insn 629 628 630 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":737 86 {*movsi_internal}
     (nil))
(insn 630 629 631 26 (set (reg:DI 5 di)
        (reg/f:DI 160 [ stdscr.121_74 ])) "function.c":737 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160 [ stdscr.121_74 ])
        (nil)))
(call_insn 631 630 632 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":737 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 632 631 633 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC28") [flags 0x2]  <var_decl 0x7f7cd0ef3360 *.LC28>)) "function.c":738 85 {*movdi_internal}
     (nil))
(insn 633 632 634 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":738 88 {*movqi_internal}
     (nil))
(call_insn 634 633 635 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":738 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 635 634 636 26 (set (reg/f:DI 161 [ stdscr.122_75 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":739 85 {*movdi_internal}
     (nil))
(insn 636 635 637 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":739 85 {*movdi_internal}
     (nil))
(insn 637 636 638 26 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":739 86 {*movsi_internal}
     (nil))
(insn 638 637 639 26 (set (reg:DI 5 di)
        (reg/f:DI 161 [ stdscr.122_75 ])) "function.c":739 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161 [ stdscr.122_75 ])
        (nil)))
(call_insn 639 638 640 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":739 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 640 639 641 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC29") [flags 0x2]  <var_decl 0x7f7cd0ef33f0 *.LC29>)) "function.c":740 85 {*movdi_internal}
     (nil))
(insn 641 640 642 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":740 88 {*movqi_internal}
     (nil))
(call_insn 642 641 643 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":740 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 643 642 644 26 (set (reg/f:DI 162 [ stdscr.123_76 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":742 85 {*movdi_internal}
     (nil))
(insn 644 643 645 26 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "function.c":742 86 {*movsi_internal}
     (nil))
(insn 645 644 646 26 (set (reg:SI 4 si)
        (const_int 48 [0x30])) "function.c":742 86 {*movsi_internal}
     (nil))
(insn 646 645 647 26 (set (reg:DI 5 di)
        (reg/f:DI 162 [ stdscr.123_76 ])) "function.c":742 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ stdscr.123_76 ])
        (nil)))
(call_insn 647 646 648 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":742 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 648 647 649 26 (set (reg/f:DI 163 [ stdscr.124_77 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":743 85 {*movdi_internal}
     (nil))
(insn 649 648 650 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":743 85 {*movdi_internal}
     (nil))
(insn 650 649 651 26 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":743 86 {*movsi_internal}
     (nil))
(insn 651 650 652 26 (set (reg:DI 5 di)
        (reg/f:DI 163 [ stdscr.124_77 ])) "function.c":743 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163 [ stdscr.124_77 ])
        (nil)))
(call_insn 652 651 653 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":743 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 653 652 654 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC30") [flags 0x2]  <var_decl 0x7f7cd0ef3480 *.LC30>)) "function.c":744 85 {*movdi_internal}
     (nil))
(insn 654 653 655 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":744 88 {*movqi_internal}
     (nil))
(call_insn 655 654 656 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":744 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 656 655 657 26 (set (reg/f:DI 164 [ stdscr.125_78 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":745 85 {*movdi_internal}
     (nil))
(insn 657 656 658 26 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":745 85 {*movdi_internal}
     (nil))
(insn 658 657 659 26 (set (reg:SI 4 si)
        (const_int 2816 [0xb00])) "function.c":745 86 {*movsi_internal}
     (nil))
(insn 659 658 660 26 (set (reg:DI 5 di)
        (reg/f:DI 164 [ stdscr.125_78 ])) "function.c":745 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164 [ stdscr.125_78 ])
        (nil)))
(call_insn 660 659 661 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":745 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 661 660 662 26 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC31") [flags 0x2]  <var_decl 0x7f7cd0ef3510 *.LC31>)) "function.c":746 85 {*movdi_internal}
     (nil))
(insn 662 661 663 26 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":746 88 {*movqi_internal}
     (nil))
(call_insn 663 662 664 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":746 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 664 663 665 26 (set (reg/f:DI 165 [ stdscr.126_79 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":747 85 {*movdi_internal}
     (nil))
(insn 665 664 666 26 (set (reg:DI 5 di)
        (reg/f:DI 165 [ stdscr.126_79 ])) "function.c":747 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165 [ stdscr.126_79 ])
        (nil)))
(call_insn 666 665 667 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wrefresh") [flags 0x41]  <function_decl 0x7f7cd10cd300 wrefresh>) [0 wrefresh S1 A8])
            (const_int 0 [0]))) "function.c":747 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 667 666 668 26 (set (reg:DI 317)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [18 sem_p1_pom+0 S8 A64])) "function.c":748 85 {*movdi_internal}
     (nil))
(insn 668 667 669 26 (set (reg:DI 5 di)
        (reg:DI 317)) "function.c":748 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 317)
        (nil)))
(call_insn 669 668 670 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sem_post") [flags 0x41]  <function_decl 0x7f7cd0fcf000 sem_post>) [0 sem_post S1 A8])
            (const_int 0 [0]))) "function.c":748 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 670 669 671 26 (set (reg:QI 166 [ END.127_80 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":749 88 {*movqi_internal}
     (nil))
(insn 671 670 672 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 166 [ END.127_80 ])
            (const_int 113 [0x71]))) "function.c":749 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 166 [ END.127_80 ])
        (nil)))
(jump_insn 672 671 673 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 681)
            (pc))) "function.c":749 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 681)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 167 168 318
(note 673 672 674 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 674 673 675 27 (set (reg/f:DI 318)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [21 createplayer+0 S8 A64])) "function.c":751 85 {*movdi_internal}
     (nil))
(insn 675 674 676 27 (set (reg/f:DI 167 [ _81 ])
        (mem/f:DI (reg/f:DI 318) [10 createplayer_89->name1+0 S8 A64])) "function.c":751 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 318)
        (nil)))
(insn 676 675 677 27 (set (reg:DI 5 di)
        (reg/f:DI 167 [ _81 ])) "function.c":751 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167 [ _81 ])
        (nil)))
(call_insn 677 676 678 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_unlink") [flags 0x41]  <function_decl 0x7f7cd133cc00 shm_unlink>) [0 shm_unlink S1 A8])
            (const_int 0 [0]))) "function.c":751 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 678 677 710 27 (set (reg/f:DI 168 [ _195 ])
        (const_int 0 [0])) "function.c":752 85 {*movdi_internal}
     (nil))
(jump_insn 710 678 711 27 (set (pc)
        (label_ref 709)) "function.c":752 683 {jump}
     (nil)
 -> 709)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168

(barrier 711 710 681)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 681 711 682 28 85 (nil) [1 uses])
(note 682 681 712 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(jump_insn 712 682 713 28 (set (pc)
        (label_ref 683)) "function.c":620 683 {jump}
     (nil)
 -> 683)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 713 712 709)
;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 1, flags: (RTL)
;;  pred:       27 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 168
;; lr  def 	 0 [ax] 169
(code_label 709 713 687 29 88 (nil) [1 uses])
(note 687 709 688 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 688 687 692 29 (set (reg/f:DI 169 [ <retval> ])
        (reg/f:DI 168 [ _195 ])) 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168 [ _195 ])
        (nil)))
(insn 692 688 693 29 (set (reg/i:DI 0 ax)
        (reg/f:DI 169 [ <retval> ])) "function.c":756 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169 [ <retval> ])
        (nil)))
(insn 693 692 0 29 (use (reg/i:DI 0 ax)) "function.c":756 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function random_return (random_return, funcdef_no=13, decl_uid=6230, cgraph_uid=13, symbol_order=16)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r94,l0) best DREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a2(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a4(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a6(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a7(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a8(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 23(l0): point = 0
   Insn 22(l0): point = 2
   Insn 18(l0): point = 4
   Insn 15(l0): point = 6
   Insn 14(l0): point = 8
   Insn 13(l0): point = 10
   Insn 12(l0): point = 12
   Insn 11(l0): point = 15
   Insn 10(l0): point = 17
   Insn 9(l0): point = 19
   Insn 8(l0): point = 21
   Insn 7(l0): point = 23
   Insn 3(l0): point = 25
   Insn 2(l0): point = 27
 a0(r92): [3..4]
 a1(r91): [5..6]
 a2(r96): [7..8]
 a3(r90): [7..10]
 a4(r94): [11..13]
 a5(r95): [12..12]
 a6(r89): [13..15]
 a7(r87): [14..21]
 a8(r88): [16..17]
 a9(r93): [18..19]
Compressing live ranges: from 30 to 15 - 50%
Ranges after the compression:
 a0(r92): [0..1]
 a1(r91): [2..3]
 a2(r96): [4..5]
 a3(r90): [4..5]
 a4(r94): [6..8]
 a5(r95): [7..7]
 a6(r89): [8..10]
 a7(r87): [9..14]
 a8(r88): [11..12]
 a9(r93): [13..14]
  pref0:a5(r95)<-hr0@1000
  pref1:a4(r94)<-hr1@1000
  pref2:a0(r92)<-hr0@500
  pref3:a7(r87)<-hr0@1500
  regions=1, blocks=3, points=15
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=10
Disposition:
    7:r87  l0     1    8:r88  l0     0    6:r89  l0     2    3:r90  l0     1
    1:r91  l0     0    0:r92  l0     0    9:r93  l0     0    4:r94  l0     1
    5:r95  l0     0    2:r96  l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


random_return

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r4={2d,1u} r5={2d,1u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={5d} r18={1d} r19={1d} r20={1d,7u,3e} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r87={1d,2u} r88={1d,1u} r89={1d,2u} r90={1d,1u,1e} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d} r96={1d,1u} 
;;    total ref usage 139{106d,29u,4e} in 14{13 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (reg:SI 5 di [ low ])) "function.c":759 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ low ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (reg:SI 4 si [ upp ])) "function.c":759 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ upp ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 7 4 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f7cd0fe1600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "function.c":760 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 8 7 9 2 (set (reg:SI 87 [ _1 ])
        (reg:SI 0 ax)) "function.c":760 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":760 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (parallel [
            (set (reg:SI 88 [ _2 ])
                (minus:SI (reg:SI 93)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 277 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 93)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
                (nil)))))
(insn 11 10 12 2 (parallel [
            (set (reg:SI 89 [ _3 ])
                (plus:SI (reg:SI 88 [ _2 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (parallel [
            (set (reg:SI 95)
                (div:SI (reg:SI 87 [ _1 ])
                    (reg:SI 89 [ _3 ])))
            (set (reg:SI 94)
                (mod:SI (reg:SI 87 [ _1 ])
                    (reg:SI 89 [ _3 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 382 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
            (expr_list:REG_UNUSED (reg:SI 95)
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))
(insn 13 12 14 2 (set (reg:SI 90 [ _4 ])
        (reg:SI 94)) "function.c":760 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 94)
        (nil)))
(insn 14 13 15 2 (set (reg:SI 96)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":760 86 {*movsi_internal}
     (nil))
(insn 15 14 18 2 (parallel [
            (set (reg:SI 91 [ _9 ])
                (plus:SI (reg:SI 90 [ _4 ])
                    (reg:SI 96)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":760 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 96)
        (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 90 [ _4 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
                    (nil))))))
(insn 18 15 22 2 (set (reg:SI 92 [ <retval> ])
        (reg:SI 91 [ _9 ])) "function.c":760 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ _9 ])
        (nil)))
(insn 22 18 23 2 (set (reg/i:SI 0 ax)
        (reg:SI 92 [ <retval> ])) "function.c":761 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ <retval> ])
        (nil)))
(insn 23 22 0 2 (use (reg/i:SI 0 ax)) "function.c":761 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function player_set (player_set, funcdef_no=14, decl_uid=6232, cgraph_uid=14, symbol_order=17)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;; 2 succs { 3 4 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r90,l0) best AREG, allocno GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r89,l0) best DIREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:24000 NO_REX_SSE_REGS:24000 SSE_REGS:24000 MMX_REGS:37000 INT_SSE_REGS:37000 ALL_REGS:518000 MEM:13000
  a2(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a3(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a4(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a5(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 47(l0): point = 0
   Insn 46(l0): point = 2
   Insn 42(l0): point = 4
   Insn 39(l0): point = 7
   Insn 51(l0): point = 10
   Insn 34(l0): point = 12
   Insn 32(l0): point = 15
   Insn 31(l0): point = 17
   Insn 30(l0): point = 19
   Insn 29(l0): point = 21
   Insn 28(l0): point = 23
   Insn 27(l0): point = 25
   Insn 26(l0): point = 27
   Insn 25(l0): point = 29
   Insn 24(l0): point = 31
   Insn 23(l0): point = 33
   Insn 22(l0): point = 35
   Insn 21(l0): point = 37
   Insn 49(l0): point = 40
   Insn 16(l0): point = 42
   Insn 14(l0): point = 45
   Insn 13(l0): point = 47
   Insn 12(l0): point = 49
   Insn 11(l0): point = 51
   Insn 10(l0): point = 53
   Insn 9(l0): point = 55
   Insn 8(l0): point = 57
   Insn 7(l0): point = 59
   Insn 6(l0): point = 61
   Insn 2(l0): point = 63
 a0(r88): [3..4]
 a1(r87): [40..42] [10..12] [5..7]
 a2(r92): [20..21]
 a3(r91): [34..37]
 a4(r90): [50..51]
 a5(r89): [56..61]
Compressing live ranges: from 66 to 16 - 24%
Ranges after the compression:
 a0(r88): [0..1]
 a1(r87): [10..11] [2..5]
 a2(r92): [6..7]
 a3(r91): [8..9]
 a4(r90): [12..13]
 a5(r89): [14..15]
  pref0:a2(r92)<-hr0@500
  pref1:a4(r90)<-hr0@500
  pref2:a5(r89)<-hr5@500
  pref3:a0(r88)<-hr0@500
  regions=1, blocks=8, points=16
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=7
Disposition:
    1:r87  l0     0    0:r88  l0     0    5:r89  l0     0    4:r90  l0     0
    3:r91  l0     0    2:r92  l0     0
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


player_set

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 37 [r8] 38 [r9]
;;  ref usage 	r0={4d,4u} r1={5d,2u} r2={4d,1u} r4={5d,2u} r5={5d,3u} r6={1d,7u} r7={1d,9u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,6u} r17={4d,2u} r18={2d} r19={2d} r20={1d,15u} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={4d,1u} r38={4d,1u} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r87={3d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} 
;;    total ref usage 242{183d,59u,0e} in 30{28 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [10 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":764 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ pom ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [10 pom+0 S8 A64])) "function.c":765 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 1 dx)
        (const_int 511 [0x1ff])) "function.c":765 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 4 si)
        (const_int 66 [0x42])) "function.c":765 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 89)) "function.c":765 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("shm_open") [flags 0x41]  <function_decl 0x7f7cd133cb00 shm_open>) [0 shm_open S1 A8])
            (const_int 0 [0]))) "function.c":765 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 11 10 12 2 (set (reg:SI 90)
        (reg:SI 0 ax)) "function.c":765 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 fd+0 S4 A32])
        (reg:SI 90)) "function.c":765 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90)
        (nil)))
(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 fd+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))) "function.c":766 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "function.c":766 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 49 3 (set (reg/f:DI 87 [ _1 ])
        (const_int 0 [0])) "function.c":768 85 {*movdi_internal}
     (nil))
(jump_insn 49 16 50 3 (set (pc)
        (label_ref 40)) "function.c":768 683 {jump}
     (nil)
 -> 40)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 50 49 19)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 92
(code_label 19 50 20 4 92 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 fd+0 S4 A32])) "function.c":770 86 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 38 r9)
        (const_int 0 [0])) "function.c":770 85 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 37 r8)
        (reg:SI 91)) "function.c":770 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 24 23 25 4 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "function.c":770 86 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":770 86 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:DI 4 si)
        (const_int 22576 [0x5830])) "function.c":770 85 {*movdi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":770 85 {*movdi_internal}
     (nil))
(call_insn 28 27 29 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("mmap") [flags 0x41]  <function_decl 0x7f7cd133c000 mmap>) [0 mmap S1 A8])
            (const_int 0 [0]))) "function.c":770 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 38 r9)
        (expr_list:REG_DEAD (reg:SI 37 r8)
            (expr_list:REG_DEAD (reg:DI 5 di)
                (expr_list:REG_DEAD (reg:DI 4 si)
                    (expr_list:REG_DEAD (reg:SI 2 cx)
                        (expr_list:REG_DEAD (reg:SI 1 dx)
                            (expr_list:REG_EH_REGION (const_int 0 [0])
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:SI (use (reg:SI 37 r8))
                        (expr_list:DI (use (reg:DI 38 r9))
                            (nil))))))))
(insn 29 28 30 4 (set (reg:DI 92)
        (reg:DI 0 ax)) "function.c":770 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 30 29 31 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [14 playerinfo+0 S8 A64])
        (reg:DI 92)) "function.c":770 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(insn 31 30 32 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [14 playerinfo+0 S8 A64])
            (const_int -1 [0xffffffffffffffff]))) "function.c":772 12 {*cmpdi_1}
     (nil))
(jump_insn 32 31 33 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "function.c":772 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 37)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 51 5 (set (reg/f:DI 87 [ _1 ])
        (const_int 0 [0])) "function.c":774 85 {*movdi_internal}
     (nil))
(jump_insn 51 34 52 5 (set (pc)
        (label_ref 40)) "function.c":774 683 {jump}
     (nil)
 -> 40)
;;  succ:       7 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

(barrier 52 51 37)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87
(code_label 37 52 38 6 94 (nil) [1 uses])
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:DI 87 [ _1 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [14 playerinfo+0 S8 A64])) "function.c":776 85 {*movdi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;;              3 [always] 
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 0 [ax] 88
(code_label 40 39 41 7 93 (nil) [2 uses])
(note 41 40 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 46 7 (set (reg/f:DI 88 [ <retval> ])
        (reg/f:DI 87 [ _1 ])) 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(insn 46 42 47 7 (set (reg/i:DI 0 ax)
        (reg/f:DI 88 [ <retval> ])) "function.c":777 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ <retval> ])
        (nil)))
(insn 47 46 0 7 (use (reg/i:DI 0 ax)) "function.c":777 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function step1_krzak (step1_krzak, funcdef_no=15, decl_uid=6234, cgraph_uid=15, symbol_order=18)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r100,l0) best AREG, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a3(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a4(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a11(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 36(l0): point = 0
   Insn 35(l0): point = 2
   Insn 31(l0): point = 4
   Insn 28(l0): point = 6
   Insn 25(l0): point = 9
   Insn 23(l0): point = 12
   Insn 22(l0): point = 14
   Insn 21(l0): point = 16
   Insn 20(l0): point = 18
   Insn 19(l0): point = 20
   Insn 18(l0): point = 22
   Insn 17(l0): point = 24
   Insn 16(l0): point = 26
   Insn 15(l0): point = 28
   Insn 14(l0): point = 30
   Insn 13(l0): point = 32
   Insn 12(l0): point = 34
   Insn 11(l0): point = 36
   Insn 10(l0): point = 38
   Insn 9(l0): point = 40
   Insn 8(l0): point = 42
   Insn 7(l0): point = 44
   Insn 6(l0): point = 46
   Insn 2(l0): point = 48
 a0(r100): [3..4]
 a1(r99): [5..6]
 a2(r98): [15..16]
 a3(r97): [17..18]
 a4(r96): [19..20]
 a5(r93): [19..28]
 a6(r95): [21..22]
 a7(r94): [23..24]
 a8(r103): [25..26]
 a9(r92): [29..30]
 a10(r91): [31..32]
 a11(r87): [31..42]
 a12(r90): [33..34]
 a13(r89): [35..36]
 a14(r88): [37..38]
 a15(r102): [39..40]
 a16(r101): [43..44]
Compressing live ranges: from 51 to 30 - 58%
Ranges after the compression:
 a0(r100): [0..1]
 a1(r99): [2..3]
 a2(r98): [4..5]
 a3(r97): [6..7]
 a4(r96): [8..9]
 a5(r93): [8..15]
 a6(r95): [10..11]
 a7(r94): [12..13]
 a8(r103): [14..15]
 a9(r92): [16..17]
 a10(r91): [18..19]
 a11(r87): [18..27]
 a12(r90): [20..21]
 a13(r89): [22..23]
 a14(r88): [24..25]
 a15(r102): [26..27]
 a16(r101): [28..29]
  pref0:a0(r100)<-hr0@500
  regions=1, blocks=5, points=30
    allocnos=17 (big 0), copies=0, conflicts=0, ranges=17
Disposition:
   11:r87  l0     1   14:r88  l0     0   13:r89  l0     0   12:r90  l0     0
   10:r91  l0     0    9:r92  l0     0    5:r93  l0     1    7:r94  l0     0
    6:r95  l0     0    4:r96  l0     0    3:r97  l0     0    2:r98  l0     0
    1:r99  l0     0    0:r100 l0     0   16:r101 l0     0   15:r102 l0     0
    8:r103 l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


step1_krzak

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,4u} r16={1d,3u} r17={4d,1u} r20={1d,11u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} 
;;    total ref usage 84{41d,43u,0e} in 24{24 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 101 102 103
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":780 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 0 [0])) "function.c":781 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [9 serwer_16(D)->mapa+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 102)
                (const_int 32 [0x20])) [14 serwer_16(D)->player1+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102)
        (nil)))
(insn 11 10 12 2 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":782 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 90 [ _4 ])
        (sign_extend:DI (reg:SI 89 [ _3 ]))) "function.c":782 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 91 [ _5 ])
                (ashift:DI (reg:DI 90 [ _4 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":782 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 92 [ _6 ])
                (plus:DI (reg/f:DI 87 [ _1 ])
                    (reg:DI 91 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":782 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 15 14 16 2 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (reg/f:DI 92 [ _6 ]) [10 *_6+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _6 ])
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (plus:DI (reg/f:DI 103)
                (const_int 32 [0x20])) [14 serwer_16(D)->player1+0 S8 A64])) "function.c":782 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103)
        (nil)))
(insn 18 17 19 2 (set (reg:SI 95 [ _9 ])
        (mem:SI (plus:DI (reg/f:DI 94 [ _8 ])
                (const_int 12 [0xc])) [3 _8->x_current+0 S4 A32])) "function.c":782 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _8 ])
        (nil)))
(insn 19 18 20 2 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 95 [ _9 ]))) "function.c":782 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 95 [ _9 ])
        (nil)))
(insn 20 19 21 2 (parallel [
            (set (reg/f:DI 97 [ _11 ])
                (plus:DI (reg/f:DI 93 [ _7 ])
                    (reg:DI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":782 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 21 20 22 2 (set (reg:QI 98 [ _12 ])
        (mem:QI (reg/f:DI 97 [ _11 ]) [0 *_11+0 S1 A8])) "function.c":782 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
        (nil)))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 98 [ _12 ])
            (const_int 35 [0x23]))) "function.c":782 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 98 [ _12 ])
        (nil)))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "function.c":782 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 2 [0x2])) "function.c":784 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 99 100
(code_label 26 25 27 4 96 (nil) [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 31 4 (set (reg:SI 99 [ _18 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])) "function.c":787 86 {*movsi_internal}
     (nil))
(insn 31 28 35 4 (set (reg:SI 100 [ <retval> ])
        (reg:SI 99 [ _18 ])) "function.c":787 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99 [ _18 ])
        (nil)))
(insn 35 31 36 4 (set (reg/i:SI 0 ax)
        (reg:SI 100 [ <retval> ])) "function.c":788 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ <retval> ])
        (nil)))
(insn 36 35 0 4 (use (reg/i:SI 0 ax)) "function.c":788 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function step2_krzak (step2_krzak, funcdef_no=16, decl_uid=6236, cgraph_uid=16, symbol_order=19)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r100,l0) best AREG, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a3(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a4(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a11(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 36(l0): point = 0
   Insn 35(l0): point = 2
   Insn 31(l0): point = 4
   Insn 28(l0): point = 6
   Insn 25(l0): point = 9
   Insn 23(l0): point = 12
   Insn 22(l0): point = 14
   Insn 21(l0): point = 16
   Insn 20(l0): point = 18
   Insn 19(l0): point = 20
   Insn 18(l0): point = 22
   Insn 17(l0): point = 24
   Insn 16(l0): point = 26
   Insn 15(l0): point = 28
   Insn 14(l0): point = 30
   Insn 13(l0): point = 32
   Insn 12(l0): point = 34
   Insn 11(l0): point = 36
   Insn 10(l0): point = 38
   Insn 9(l0): point = 40
   Insn 8(l0): point = 42
   Insn 7(l0): point = 44
   Insn 6(l0): point = 46
   Insn 2(l0): point = 48
 a0(r100): [3..4]
 a1(r99): [5..6]
 a2(r98): [15..16]
 a3(r97): [17..18]
 a4(r96): [19..20]
 a5(r93): [19..28]
 a6(r95): [21..22]
 a7(r94): [23..24]
 a8(r103): [25..26]
 a9(r92): [29..30]
 a10(r91): [31..32]
 a11(r87): [31..42]
 a12(r90): [33..34]
 a13(r89): [35..36]
 a14(r88): [37..38]
 a15(r102): [39..40]
 a16(r101): [43..44]
Compressing live ranges: from 51 to 30 - 58%
Ranges after the compression:
 a0(r100): [0..1]
 a1(r99): [2..3]
 a2(r98): [4..5]
 a3(r97): [6..7]
 a4(r96): [8..9]
 a5(r93): [8..15]
 a6(r95): [10..11]
 a7(r94): [12..13]
 a8(r103): [14..15]
 a9(r92): [16..17]
 a10(r91): [18..19]
 a11(r87): [18..27]
 a12(r90): [20..21]
 a13(r89): [22..23]
 a14(r88): [24..25]
 a15(r102): [26..27]
 a16(r101): [28..29]
  pref0:a0(r100)<-hr0@500
  regions=1, blocks=5, points=30
    allocnos=17 (big 0), copies=0, conflicts=0, ranges=17
Disposition:
   11:r87  l0     1   14:r88  l0     0   13:r89  l0     0   12:r90  l0     0
   10:r91  l0     0    9:r92  l0     0    5:r93  l0     1    7:r94  l0     0
    6:r95  l0     0    4:r96  l0     0    3:r97  l0     0    2:r98  l0     0
    1:r99  l0     0    0:r100 l0     0   16:r101 l0     0   15:r102 l0     0
    8:r103 l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


step2_krzak

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,4u} r7={1d,4u} r16={1d,3u} r17={4d,1u} r20={1d,11u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} 
;;    total ref usage 84{41d,43u,0e} in 24{24 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93 94 95 96 97 98 101 102 103
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":791 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 0 [0])) "function.c":792 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 101)
                (const_int 16 [0x10])) [9 serwer_16(D)->mapa+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 102)
                (const_int 40 [0x28])) [14 serwer_16(D)->player2+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102)
        (nil)))
(insn 11 10 12 2 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":793 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 90 [ _4 ])
        (sign_extend:DI (reg:SI 89 [ _3 ]))) "function.c":793 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 91 [ _5 ])
                (ashift:DI (reg:DI 90 [ _4 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":793 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 92 [ _6 ])
                (plus:DI (reg/f:DI 87 [ _1 ])
                    (reg:DI 91 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":793 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 15 14 16 2 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (reg/f:DI 92 [ _6 ]) [10 *_6+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _6 ])
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (plus:DI (reg/f:DI 103)
                (const_int 40 [0x28])) [14 serwer_16(D)->player2+0 S8 A64])) "function.c":793 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103)
        (nil)))
(insn 18 17 19 2 (set (reg:SI 95 [ _9 ])
        (mem:SI (plus:DI (reg/f:DI 94 [ _8 ])
                (const_int 12 [0xc])) [3 _8->x_current+0 S4 A32])) "function.c":793 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _8 ])
        (nil)))
(insn 19 18 20 2 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 95 [ _9 ]))) "function.c":793 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 95 [ _9 ])
        (nil)))
(insn 20 19 21 2 (parallel [
            (set (reg/f:DI 97 [ _11 ])
                (plus:DI (reg/f:DI 93 [ _7 ])
                    (reg:DI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":793 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 21 20 22 2 (set (reg:QI 98 [ _12 ])
        (mem:QI (reg/f:DI 97 [ _11 ]) [0 *_11+0 S1 A8])) "function.c":793 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
        (nil)))
(insn 22 21 23 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 98 [ _12 ])
            (const_int 35 [0x23]))) "function.c":793 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 98 [ _12 ])
        (nil)))
(jump_insn 23 22 24 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 26)
            (pc))) "function.c":793 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 26)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])
        (const_int 2 [0x2])) "function.c":795 86 {*movsi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 99 100
(code_label 26 25 27 4 99 (nil) [1 uses])
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 31 4 (set (reg:SI 99 [ _18 ])
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 krzok+0 S4 A32])) "function.c":798 86 {*movsi_internal}
     (nil))
(insn 31 28 35 4 (set (reg:SI 100 [ <retval> ])
        (reg:SI 99 [ _18 ])) "function.c":798 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99 [ _18 ])
        (nil)))
(insn 35 31 36 4 (set (reg/i:SI 0 ax)
        (reg:SI 100 [ <retval> ])) "function.c":799 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ <retval> ])
        (nil)))
(insn 36 35 0 4 (use (reg/i:SI 0 ax)) "function.c":799 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function step1 (step1, funcdef_no=17, decl_uid=6238, cgraph_uid=17, symbol_order=20)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 21 n_edges 29 count 21 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20 16
;; 2 succs { 3 14 }
;; 3 succs { 4 6 }
;; 4 succs { 5 10 }
;; 5 succs { 16 }
;; 6 succs { 7 12 }
;; 7 succs { 16 8 }
;; 8 succs { 9 17 }
;; 9 succs { 17 }
;; 10 succs { 11 18 }
;; 11 succs { 18 }
;; 12 succs { 13 19 }
;; 13 succs { 19 }
;; 14 succs { 15 20 }
;; 15 succs { 20 }
;; 17 succs { 16 }
;; 18 succs { 16 }
;; 19 succs { 16 }
;; 20 succs { 16 }
;; 16 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r159,l0) best AREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a5(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a9(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a11(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a18(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a27(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a28(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a29(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a31(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a33(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a35(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a39(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a40(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a41(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a46(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a47(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a48(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a49(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a50(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a52(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a53(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a54(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a55(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a57(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a58(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a61(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a62(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a64(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a65(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a67(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a68(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a69(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a70(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a71(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a74(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a75(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a77(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a78(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a79(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a80(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a81(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a82(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a83(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a84(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a85(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a86(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a88(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a89(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a90(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:53000 NO_REX_SSE_REGS:53000 SSE_REGS:53000 MMX_REGS:78000 INT_SSE_REGS:78000 ALL_REGS:1272000 MEM:31000
  a91(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a92(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a93(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 171(l0): point = 0
   Insn 170(l0): point = 2
   Insn 166(l0): point = 4
   Insn 163(l0): point = 6
   Insn 201(l0): point = 9
   Insn 197(l0): point = 12
   Insn 196(l0): point = 14
   Insn 192(l0): point = 17
   Insn 191(l0): point = 19
   Insn 187(l0): point = 22
   Insn 186(l0): point = 24
   Insn 182(l0): point = 27
   Insn 158(l0): point = 29
   Insn 157(l0): point = 31
   Insn 156(l0): point = 33
   Insn 155(l0): point = 35
   Insn 154(l0): point = 37
   Insn 153(l0): point = 39
   Insn 152(l0): point = 41
   Insn 151(l0): point = 43
   Insn 150(l0): point = 45
   Insn 148(l0): point = 48
   Insn 147(l0): point = 50
   Insn 146(l0): point = 52
   Insn 145(l0): point = 54
   Insn 144(l0): point = 56
   Insn 143(l0): point = 58
   Insn 142(l0): point = 60
   Insn 141(l0): point = 62
   Insn 140(l0): point = 64
   Insn 139(l0): point = 66
   Insn 138(l0): point = 68
   Insn 137(l0): point = 70
   Insn 136(l0): point = 72
   Insn 135(l0): point = 74
   Insn 134(l0): point = 76
   Insn 133(l0): point = 78
   Insn 132(l0): point = 80
   Insn 131(l0): point = 82
   Insn 180(l0): point = 85
   Insn 124(l0): point = 87
   Insn 123(l0): point = 89
   Insn 122(l0): point = 91
   Insn 121(l0): point = 93
   Insn 120(l0): point = 95
   Insn 119(l0): point = 97
   Insn 118(l0): point = 99
   Insn 117(l0): point = 101
   Insn 116(l0): point = 103
   Insn 114(l0): point = 106
   Insn 113(l0): point = 108
   Insn 112(l0): point = 110
   Insn 111(l0): point = 112
   Insn 110(l0): point = 114
   Insn 109(l0): point = 116
   Insn 108(l0): point = 118
   Insn 107(l0): point = 120
   Insn 106(l0): point = 122
   Insn 105(l0): point = 124
   Insn 104(l0): point = 126
   Insn 103(l0): point = 128
   Insn 102(l0): point = 130
   Insn 101(l0): point = 132
   Insn 100(l0): point = 134
   Insn 99(l0): point = 136
   Insn 98(l0): point = 138
   Insn 97(l0): point = 140
   Insn 178(l0): point = 143
   Insn 90(l0): point = 145
   Insn 89(l0): point = 147
   Insn 88(l0): point = 149
   Insn 87(l0): point = 151
   Insn 86(l0): point = 153
   Insn 85(l0): point = 155
   Insn 84(l0): point = 157
   Insn 83(l0): point = 159
   Insn 82(l0): point = 161
   Insn 80(l0): point = 164
   Insn 79(l0): point = 166
   Insn 78(l0): point = 168
   Insn 77(l0): point = 170
   Insn 76(l0): point = 172
   Insn 75(l0): point = 174
   Insn 74(l0): point = 176
   Insn 73(l0): point = 178
   Insn 72(l0): point = 180
   Insn 71(l0): point = 182
   Insn 70(l0): point = 184
   Insn 69(l0): point = 186
   Insn 68(l0): point = 188
   Insn 67(l0): point = 190
   Insn 66(l0): point = 192
   Insn 65(l0): point = 194
   Insn 64(l0): point = 196
   Insn 63(l0): point = 198
   Insn 176(l0): point = 201
   Insn 56(l0): point = 203
   Insn 55(l0): point = 205
   Insn 54(l0): point = 207
   Insn 53(l0): point = 209
   Insn 52(l0): point = 211
   Insn 51(l0): point = 213
   Insn 50(l0): point = 215
   Insn 49(l0): point = 217
   Insn 48(l0): point = 219
   Insn 46(l0): point = 222
   Insn 45(l0): point = 224
   Insn 44(l0): point = 226
   Insn 43(l0): point = 228
   Insn 42(l0): point = 230
   Insn 41(l0): point = 232
   Insn 40(l0): point = 234
   Insn 39(l0): point = 236
   Insn 38(l0): point = 238
   Insn 37(l0): point = 240
   Insn 36(l0): point = 242
   Insn 35(l0): point = 244
   Insn 34(l0): point = 246
   Insn 33(l0): point = 248
   Insn 32(l0): point = 250
   Insn 31(l0): point = 252
   Insn 30(l0): point = 254
   Insn 29(l0): point = 256
   Insn 27(l0): point = 259
   Insn 26(l0): point = 261
   Insn 24(l0): point = 264
   Insn 23(l0): point = 266
   Insn 174(l0): point = 269
   Insn 17(l0): point = 272
   Insn 16(l0): point = 274
   Insn 14(l0): point = 277
   Insn 13(l0): point = 279
   Insn 11(l0): point = 282
   Insn 10(l0): point = 284
   Insn 9(l0): point = 286
   Insn 8(l0): point = 288
   Insn 7(l0): point = 290
   Insn 6(l0): point = 292
   Insn 2(l0): point = 294
 a0(r159): [3..4]
 a1(r158): [5..6]
 a2(r157): [32..33]
 a3(r180): [34..35]
 a4(r154): [38..43]
 a5(r156): [38..39]
 a6(r155): [40..41]
 a7(r179): [44..45]
 a8(r153): [51..52]
 a9(r152): [53..54]
 a10(r151): [55..56]
 a11(r147): [55..66]
 a12(r150): [57..58]
 a13(r149): [59..60]
 a14(r148): [61..62]
 a15(r178): [63..64]
 a16(r146): [67..68]
 a17(r145): [69..70]
 a18(r141): [69..80]
 a19(r144): [71..72]
 a20(r143): [73..74]
 a21(r142): [75..76]
 a22(r177): [77..78]
 a23(r176): [81..82]
 a24(r140): [90..91]
 a25(r175): [92..93]
 a26(r137): [96..101]
 a27(r139): [96..97]
 a28(r138): [98..99]
 a29(r174): [102..103]
 a30(r136): [109..110]
 a31(r135): [111..112]
 a32(r134): [113..114]
 a33(r131): [113..122]
 a34(r133): [115..116]
 a35(r132): [117..118]
 a36(r173): [119..120]
 a37(r130): [123..124]
 a38(r129): [125..126]
 a39(r124): [125..138]
 a40(r128): [127..128]
 a41(r127): [129..130]
 a42(r126): [131..132]
 a43(r125): [133..134]
 a44(r172): [135..136]
 a45(r171): [139..140]
 a46(r123): [148..149]
 a47(r170): [150..151]
 a48(r120): [154..159]
 a49(r122): [154..155]
 a50(r121): [156..157]
 a51(r169): [160..161]
 a52(r119): [167..168]
 a53(r118): [169..170]
 a54(r117): [171..172]
 a55(r113): [171..182]
 a56(r116): [173..174]
 a57(r115): [175..176]
 a58(r114): [177..178]
 a59(r168): [179..180]
 a60(r112): [183..184]
 a61(r111): [185..186]
 a62(r107): [185..196]
 a63(r110): [187..188]
 a64(r109): [189..190]
 a65(r108): [191..192]
 a66(r167): [193..194]
 a67(r166): [197..198]
 a68(r106): [206..207]
 a69(r165): [208..209]
 a70(r103): [212..217]
 a71(r105): [212..213]
 a72(r104): [214..215]
 a73(r164): [218..219]
 a74(r102): [225..226]
 a75(r101): [227..228]
 a76(r100): [229..230]
 a77(r97): [229..238]
 a78(r99): [231..232]
 a79(r98): [233..234]
 a80(r163): [235..236]
 a81(r96): [239..240]
 a82(r95): [241..242]
 a83(r90): [241..254]
 a84(r94): [243..244]
 a85(r93): [245..246]
 a86(r92): [247..248]
 a87(r91): [249..250]
 a88(r162): [251..252]
 a89(r161): [255..256]
 a90(r89): [275..286] [262..268]
 a91(r88): [287..288]
 a92(r87): [289..290]
 a93(r160): [291..292]
Compressing live ranges: from 297 to 166 - 55%
Ranges after the compression:
 a0(r159): [0..1]
 a1(r158): [2..3]
 a2(r157): [4..5]
 a3(r180): [6..7]
 a4(r154): [8..11]
 a5(r156): [8..9]
 a6(r155): [10..11]
 a7(r179): [12..13]
 a8(r153): [14..15]
 a9(r152): [16..17]
 a10(r151): [18..19]
 a11(r147): [18..27]
 a12(r150): [20..21]
 a13(r149): [22..23]
 a14(r148): [24..25]
 a15(r178): [26..27]
 a16(r146): [28..29]
 a17(r145): [30..31]
 a18(r141): [30..39]
 a19(r144): [32..33]
 a20(r143): [34..35]
 a21(r142): [36..37]
 a22(r177): [38..39]
 a23(r176): [40..41]
 a24(r140): [42..43]
 a25(r175): [44..45]
 a26(r137): [46..49]
 a27(r139): [46..47]
 a28(r138): [48..49]
 a29(r174): [50..51]
 a30(r136): [52..53]
 a31(r135): [54..55]
 a32(r134): [56..57]
 a33(r131): [56..63]
 a34(r133): [58..59]
 a35(r132): [60..61]
 a36(r173): [62..63]
 a37(r130): [64..65]
 a38(r129): [66..67]
 a39(r124): [66..77]
 a40(r128): [68..69]
 a41(r127): [70..71]
 a42(r126): [72..73]
 a43(r125): [74..75]
 a44(r172): [76..77]
 a45(r171): [78..79]
 a46(r123): [80..81]
 a47(r170): [82..83]
 a48(r120): [84..87]
 a49(r122): [84..85]
 a50(r121): [86..87]
 a51(r169): [88..89]
 a52(r119): [90..91]
 a53(r118): [92..93]
 a54(r117): [94..95]
 a55(r113): [94..103]
 a56(r116): [96..97]
 a57(r115): [98..99]
 a58(r114): [100..101]
 a59(r168): [102..103]
 a60(r112): [104..105]
 a61(r111): [106..107]
 a62(r107): [106..115]
 a63(r110): [108..109]
 a64(r109): [110..111]
 a65(r108): [112..113]
 a66(r167): [114..115]
 a67(r166): [116..117]
 a68(r106): [118..119]
 a69(r165): [120..121]
 a70(r103): [122..125]
 a71(r105): [122..123]
 a72(r104): [124..125]
 a73(r164): [126..127]
 a74(r102): [128..129]
 a75(r101): [130..131]
 a76(r100): [132..133]
 a77(r97): [132..139]
 a78(r99): [134..135]
 a79(r98): [136..137]
 a80(r163): [138..139]
 a81(r96): [140..141]
 a82(r95): [142..143]
 a83(r90): [142..153]
 a84(r94): [144..145]
 a85(r93): [146..147]
 a86(r92): [148..149]
 a87(r91): [150..151]
 a88(r162): [152..153]
 a89(r161): [154..155]
 a90(r89): [156..159]
 a91(r88): [160..161]
 a92(r87): [162..163]
 a93(r160): [164..165]
  pref0:a0(r159)<-hr0@500
  regions=1, blocks=21, points=166
    allocnos=94 (big 0), copies=0, conflicts=0, ranges=94
Disposition:
   92:r87  l0     0   91:r88  l0     0   90:r89  l0     0   83:r90  l0     1
   87:r91  l0     0   86:r92  l0     0   85:r93  l0     0   84:r94  l0     0
   82:r95  l0     0   81:r96  l0     0   77:r97  l0     1   79:r98  l0     0
   78:r99  l0     0   76:r100 l0     0   75:r101 l0     0   74:r102 l0     0
   70:r103 l0     0   72:r104 l0     1   71:r105 l0     1   68:r106 l0     0
   62:r107 l0     1   65:r108 l0     0   64:r109 l0     0   63:r110 l0     0
   61:r111 l0     0   60:r112 l0     0   55:r113 l0     1   58:r114 l0     0
   57:r115 l0     0   56:r116 l0     0   54:r117 l0     0   53:r118 l0     0
   52:r119 l0     0   48:r120 l0     0   50:r121 l0     1   49:r122 l0     1
   46:r123 l0     0   39:r124 l0     1   43:r125 l0     0   42:r126 l0     0
   41:r127 l0     0   40:r128 l0     0   38:r129 l0     0   37:r130 l0     0
   33:r131 l0     1   35:r132 l0     0   34:r133 l0     0   32:r134 l0     0
   31:r135 l0     0   30:r136 l0     0   26:r137 l0     0   28:r138 l0     1
   27:r139 l0     1   24:r140 l0     0   18:r141 l0     1   21:r142 l0     0
   20:r143 l0     0   19:r144 l0     0   17:r145 l0     0   16:r146 l0     0
   11:r147 l0     1   14:r148 l0     0   13:r149 l0     0   12:r150 l0     0
   10:r151 l0     0    9:r152 l0     0    8:r153 l0     0    4:r154 l0     0
    6:r155 l0     1    5:r156 l0     1    2:r157 l0     0    1:r158 l0     0
    0:r159 l0     0   93:r160 l0     0   89:r161 l0     0   88:r162 l0     0
   80:r163 l0     0   73:r164 l0     0   69:r165 l0     0   67:r166 l0     0
   66:r167 l0     0   59:r168 l0     0   51:r169 l0     0   47:r170 l0     0
   45:r171 l0     0   44:r172 l0     0   36:r173 l0     0   29:r174 l0     0
   25:r175 l0     0   23:r176 l0     0   22:r177 l0     0   15:r178 l0     0
    7:r179 l0     0    3:r180 l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


step1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,20u} r7={1d,20u} r16={1d,19u} r17={29d,9u} r20={1d,42u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,5u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,2u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,2u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,2u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,2u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} 
;;    total ref usage 358{143d,215u,0e} in 139{139 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 160
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":802 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":803 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 160)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":803 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (nil)))
(insn 8 7 9 2 (set (reg:QI 88 [ _2 ])
        (mem:QI (plus:DI (reg/f:DI 87 [ _1 ])
                (const_int 40 [0x28])) [0 _1->request+0 S1 A64])) "function.c":803 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(insn 9 8 10 2 (set (reg:SI 89 [ _3 ])
        (sign_extend:SI (reg:QI 88 [ _2 ]))) "function.c":803 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 88 [ _2 ])
        (nil)))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 100 [0x64]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":803 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 129)
;;  succ:       3 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ _3 ])
            (const_int 100 [0x64]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "function.c":803 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 97 [0x61]))) "function.c":803 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(jump_insn 17 16 173 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "function.c":803 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 61)
;;  succ:       5 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 173 17 174 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 174 173 175 5 (set (pc)
        (label_ref 161)) "function.c":803 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 175 174 21)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(code_label 21 175 22 6 103 (nil) [1 uses])
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 115 [0x73]))) "function.c":803 11 {*cmpsi_1}
     (nil))
(jump_insn 24 23 25 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) "function.c":803 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 95)
;;  succ:       7 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 119 [0x77]))) "function.c":803 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 161)
            (pc))) "function.c":803 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 161)
;;  succ:       16
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 98 99 100 101 102 161 162 163
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 30 29 31 8 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 161)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (nil)))
(insn 31 30 32 8 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 32 31 33 8 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 162)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (nil)))
(insn 33 32 34 8 (set (reg:SI 92 [ _6 ])
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":806 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 34 33 35 8 (set (reg:DI 93 [ _7 ])
        (sign_extend:DI (reg:SI 92 [ _6 ]))) "function.c":806 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (nil)))
(insn 35 34 36 8 (parallel [
            (set (reg:DI 94 [ _8 ])
                (ashift:DI (reg:DI 93 [ _7 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 8 (parallel [
            (set (reg:DI 95 [ _9 ])
                (plus:DI (reg:DI 94 [ _8 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 37 36 38 8 (parallel [
            (set (reg/f:DI 96 [ _10 ])
                (plus:DI (reg/f:DI 90 [ _4 ])
                    (reg:DI 95 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
        (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 38 37 39 8 (set (reg/f:DI 97 [ _11 ])
        (mem/f:DI (reg/f:DI 96 [ _10 ]) [10 *_10+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _10 ])
        (nil)))
(insn 39 38 40 8 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (nil))
(insn 40 39 41 8 (set (reg/f:DI 98 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 163)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":806 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (nil)))
(insn 41 40 42 8 (set (reg:SI 99 [ _13 ])
        (mem:SI (plus:DI (reg/f:DI 98 [ _12 ])
                (const_int 12 [0xc])) [3 _12->x_current+0 S4 A32])) "function.c":806 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
        (nil)))
(insn 42 41 43 8 (set (reg:DI 100 [ _14 ])
        (sign_extend:DI (reg:SI 99 [ _13 ]))) "function.c":806 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (nil)))
(insn 43 42 44 8 (parallel [
            (set (reg/f:DI 101 [ _15 ])
                (plus:DI (reg/f:DI 97 [ _11 ])
                    (reg:DI 100 [ _14 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":806 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 100 [ _14 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 44 43 45 8 (set (reg:QI 102 [ _16 ])
        (mem:QI (reg/f:DI 101 [ _15 ]) [0 *_15+0 S1 A8])) "function.c":806 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 45 44 46 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 102 [ _16 ])
            (const_int 77 [0x4d]))) "function.c":806 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 102 [ _16 ])
        (nil)))
(jump_insn 46 45 47 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 185)
            (pc))) "function.c":806 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 185)
;;  succ:       9 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 164 165
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":808 85 {*movdi_internal}
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (plus:DI (reg/f:DI 164)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":808 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (nil)))
(insn 50 49 51 9 (set (reg:SI 104 [ _18 ])
        (mem:SI (plus:DI (reg/f:DI 103 [ _17 ])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])) "function.c":808 86 {*movsi_internal}
     (nil))
(insn 51 50 52 9 (parallel [
            (set (reg:SI 105 [ _19 ])
                (plus:SI (reg:SI 104 [ _18 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":808 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 104 [ _18 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 52 51 53 9 (set (mem:SI (plus:DI (reg/f:DI 103 [ _17 ])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])
        (reg:SI 105 [ _19 ])) "function.c":808 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105 [ _19 ])
        (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
            (nil))))
(insn 53 52 54 9 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":809 85 {*movdi_internal}
     (nil))
(insn 54 53 55 9 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (plus:DI (reg/f:DI 165)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":809 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 55 54 56 9 (set (mem:QI (plus:DI (reg/f:DI 106 [ _20 ])
                (const_int 40 [0x28])) [0 _20->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":809 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 56 55 176 9 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":810 88 {*movqi_internal}
     (nil))
(jump_insn 176 56 177 9 (set (pc)
        (label_ref:DI 185)) "function.c":812 683 {jump}
     (nil)
 -> 185)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 177 176 61)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       4
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 110 111 112 113 114 115 116 117 118 119 166 167 168
(code_label 61 177 62 10 104 (nil) [1 uses])
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 64 63 65 10 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 166)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (nil)))
(insn 65 64 66 10 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 66 65 67 10 (set (reg/f:DI 108 [ _22 ])
        (mem/f:DI (plus:DI (reg/f:DI 167)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 67 66 68 10 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 108 [ _22 ])
                (const_int 16 [0x10])) [3 _22->y_current+0 S4 A64])) "function.c":814 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 68 67 69 10 (set (reg:DI 110 [ _24 ])
        (sign_extend:DI (reg:SI 109 [ _23 ]))) "function.c":814 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (nil)))
(insn 69 68 70 10 (parallel [
            (set (reg:DI 111 [ _25 ])
                (ashift:DI (reg:DI 110 [ _24 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 110 [ _24 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 10 (parallel [
            (set (reg/f:DI 112 [ _26 ])
                (plus:DI (reg/f:DI 107 [ _21 ])
                    (reg:DI 111 [ _25 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 111 [ _25 ])
        (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 71 70 72 10 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (reg/f:DI 112 [ _26 ]) [10 *_26+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ _26 ])
        (nil)))
(insn 72 71 73 10 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (nil))
(insn 73 72 74 10 (set (reg/f:DI 114 [ _28 ])
        (mem/f:DI (plus:DI (reg/f:DI 168)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":814 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (nil)))
(insn 74 73 75 10 (set (reg:SI 115 [ _29 ])
        (mem:SI (plus:DI (reg/f:DI 114 [ _28 ])
                (const_int 12 [0xc])) [3 _28->x_current+0 S4 A32])) "function.c":814 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
        (nil)))
(insn 75 74 76 10 (set (reg:DI 116 [ _30 ])
        (sign_extend:DI (reg:SI 115 [ _29 ]))) "function.c":814 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 115 [ _29 ])
        (nil)))
(insn 76 75 77 10 (parallel [
            (set (reg:DI 117 [ _31 ])
                (plus:DI (reg:DI 116 [ _30 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 77 76 78 10 (parallel [
            (set (reg/f:DI 118 [ _32 ])
                (plus:DI (reg/f:DI 113 [ _27 ])
                    (reg:DI 117 [ _31 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":814 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
        (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 78 77 79 10 (set (reg:QI 119 [ _33 ])
        (mem:QI (reg/f:DI 118 [ _32 ]) [0 *_32+0 S1 A8])) "function.c":814 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ _32 ])
        (nil)))
(insn 79 78 80 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 119 [ _33 ])
            (const_int 77 [0x4d]))) "function.c":814 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 119 [ _33 ])
        (nil)))
(jump_insn 80 79 81 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 190)
            (pc))) "function.c":814 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 190)
;;  succ:       11 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 169 170
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg/f:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":816 85 {*movdi_internal}
     (nil))
(insn 83 82 84 11 (set (reg/f:DI 120 [ _34 ])
        (mem/f:DI (plus:DI (reg/f:DI 169)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":816 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 84 83 85 11 (set (reg:SI 121 [ _35 ])
        (mem:SI (plus:DI (reg/f:DI 120 [ _34 ])
                (const_int 12 [0xc])) [3 _34->x_current+0 S4 A32])) "function.c":816 86 {*movsi_internal}
     (nil))
(insn 85 84 86 11 (parallel [
            (set (reg:SI 122 [ _36 ])
                (plus:SI (reg:SI 121 [ _35 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":816 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 121 [ _35 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 11 (set (mem:SI (plus:DI (reg/f:DI 120 [ _34 ])
                (const_int 12 [0xc])) [3 _34->x_current+0 S4 A32])
        (reg:SI 122 [ _36 ])) "function.c":816 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122 [ _36 ])
        (expr_list:REG_DEAD (reg/f:DI 120 [ _34 ])
            (nil))))
(insn 87 86 88 11 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":817 85 {*movdi_internal}
     (nil))
(insn 88 87 89 11 (set (reg/f:DI 123 [ _37 ])
        (mem/f:DI (plus:DI (reg/f:DI 170)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":817 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (nil)))
(insn 89 88 90 11 (set (mem:QI (plus:DI (reg/f:DI 123 [ _37 ])
                (const_int 40 [0x28])) [0 _37->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":817 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ _37 ])
        (nil)))
(insn 90 89 178 11 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":818 88 {*movqi_internal}
     (nil))
(jump_insn 178 90 179 11 (set (pc)
        (label_ref:DI 190)) "function.c":820 683 {jump}
     (nil)
 -> 190)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 179 178 95)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       6
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 129 130 131 132 133 134 135 136 171 172 173
(code_label 95 179 96 12 106 (nil) [1 uses])
(note 96 95 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 12 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 98 97 99 12 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (plus:DI (reg/f:DI 171)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (nil)))
(insn 99 98 100 12 (set (reg/f:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 100 99 101 12 (set (reg/f:DI 125 [ _39 ])
        (mem/f:DI (plus:DI (reg/f:DI 172)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172)
        (nil)))
(insn 101 100 102 12 (set (reg:SI 126 [ _40 ])
        (mem:SI (plus:DI (reg/f:DI 125 [ _39 ])
                (const_int 16 [0x10])) [3 _39->y_current+0 S4 A64])) "function.c":822 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ _39 ])
        (nil)))
(insn 102 101 103 12 (set (reg:DI 127 [ _41 ])
        (sign_extend:DI (reg:SI 126 [ _40 ]))) "function.c":822 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 126 [ _40 ])
        (nil)))
(insn 103 102 104 12 (parallel [
            (set (reg:DI 128 [ _42 ])
                (plus:DI (reg:DI 127 [ _41 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 127 [ _41 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 104 103 105 12 (parallel [
            (set (reg:DI 129 [ _43 ])
                (ashift:DI (reg:DI 128 [ _42 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 128 [ _42 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 105 104 106 12 (parallel [
            (set (reg/f:DI 130 [ _44 ])
                (plus:DI (reg/f:DI 124 [ _38 ])
                    (reg:DI 129 [ _43 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 129 [ _43 ])
        (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 106 105 107 12 (set (reg/f:DI 131 [ _45 ])
        (mem/f:DI (reg/f:DI 130 [ _44 ]) [10 *_44+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ _44 ])
        (nil)))
(insn 107 106 108 12 (set (reg/f:DI 173)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (nil))
(insn 108 107 109 12 (set (reg/f:DI 132 [ _46 ])
        (mem/f:DI (plus:DI (reg/f:DI 173)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":822 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173)
        (nil)))
(insn 109 108 110 12 (set (reg:SI 133 [ _47 ])
        (mem:SI (plus:DI (reg/f:DI 132 [ _46 ])
                (const_int 12 [0xc])) [3 _46->x_current+0 S4 A32])) "function.c":822 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ _46 ])
        (nil)))
(insn 110 109 111 12 (set (reg:DI 134 [ _48 ])
        (sign_extend:DI (reg:SI 133 [ _47 ]))) "function.c":822 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 133 [ _47 ])
        (nil)))
(insn 111 110 112 12 (parallel [
            (set (reg/f:DI 135 [ _49 ])
                (plus:DI (reg/f:DI 131 [ _45 ])
                    (reg:DI 134 [ _48 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":822 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 134 [ _48 ])
        (expr_list:REG_DEAD (reg/f:DI 131 [ _45 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 112 111 113 12 (set (reg:QI 136 [ _50 ])
        (mem:QI (reg/f:DI 135 [ _49 ]) [0 *_49+0 S1 A8])) "function.c":822 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ _49 ])
        (nil)))
(insn 113 112 114 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 136 [ _50 ])
            (const_int 77 [0x4d]))) "function.c":822 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 136 [ _50 ])
        (nil)))
(jump_insn 114 113 115 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 195)
            (pc))) "function.c":822 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 195)
;;  succ:       13 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 138 139 140 174 175
(note 115 114 116 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 13 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":824 85 {*movdi_internal}
     (nil))
(insn 117 116 118 13 (set (reg/f:DI 137 [ _51 ])
        (mem/f:DI (plus:DI (reg/f:DI 174)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":824 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (nil)))
(insn 118 117 119 13 (set (reg:SI 138 [ _52 ])
        (mem:SI (plus:DI (reg/f:DI 137 [ _51 ])
                (const_int 16 [0x10])) [3 _51->y_current+0 S4 A64])) "function.c":824 86 {*movsi_internal}
     (nil))
(insn 119 118 120 13 (parallel [
            (set (reg:SI 139 [ _53 ])
                (plus:SI (reg:SI 138 [ _52 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":824 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 138 [ _52 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 120 119 121 13 (set (mem:SI (plus:DI (reg/f:DI 137 [ _51 ])
                (const_int 16 [0x10])) [3 _51->y_current+0 S4 A64])
        (reg:SI 139 [ _53 ])) "function.c":824 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 139 [ _53 ])
        (expr_list:REG_DEAD (reg/f:DI 137 [ _51 ])
            (nil))))
(insn 121 120 122 13 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":825 85 {*movdi_internal}
     (nil))
(insn 122 121 123 13 (set (reg/f:DI 140 [ _54 ])
        (mem/f:DI (plus:DI (reg/f:DI 175)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":825 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175)
        (nil)))
(insn 123 122 124 13 (set (mem:QI (plus:DI (reg/f:DI 140 [ _54 ])
                (const_int 40 [0x28])) [0 _54->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":825 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140 [ _54 ])
        (nil)))
(insn 124 123 180 13 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":826 88 {*movqi_internal}
     (nil))
(jump_insn 180 124 181 13 (set (pc)
        (label_ref:DI 195)) "function.c":828 683 {jump}
     (nil)
 -> 195)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 129)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       2
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 144 145 146 147 148 149 150 151 152 153 176 177 178
(code_label 129 181 130 14 102 (nil) [1 uses])
(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 14 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 132 131 133 14 (set (reg/f:DI 141 [ _55 ])
        (mem/f:DI (plus:DI (reg/f:DI 176)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (nil)))
(insn 133 132 134 14 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 134 133 135 14 (set (reg/f:DI 142 [ _56 ])
        (mem/f:DI (plus:DI (reg/f:DI 177)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 135 134 136 14 (set (reg:SI 143 [ _57 ])
        (mem:SI (plus:DI (reg/f:DI 142 [ _56 ])
                (const_int 16 [0x10])) [3 _56->y_current+0 S4 A64])) "function.c":830 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _56 ])
        (nil)))
(insn 136 135 137 14 (set (reg:DI 144 [ _58 ])
        (sign_extend:DI (reg:SI 143 [ _57 ]))) "function.c":830 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 143 [ _57 ])
        (nil)))
(insn 137 136 138 14 (parallel [
            (set (reg:DI 145 [ _59 ])
                (ashift:DI (reg:DI 144 [ _58 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 144 [ _58 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 138 137 139 14 (parallel [
            (set (reg/f:DI 146 [ _60 ])
                (plus:DI (reg/f:DI 141 [ _55 ])
                    (reg:DI 145 [ _59 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _59 ])
        (expr_list:REG_DEAD (reg/f:DI 141 [ _55 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 139 138 140 14 (set (reg/f:DI 147 [ _61 ])
        (mem/f:DI (reg/f:DI 146 [ _60 ]) [10 *_60+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
        (nil)))
(insn 140 139 141 14 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (nil))
(insn 141 140 142 14 (set (reg/f:DI 148 [ _62 ])
        (mem/f:DI (plus:DI (reg/f:DI 178)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":830 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (nil)))
(insn 142 141 143 14 (set (reg:SI 149 [ _63 ])
        (mem:SI (plus:DI (reg/f:DI 148 [ _62 ])
                (const_int 12 [0xc])) [3 _62->x_current+0 S4 A32])) "function.c":830 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ _62 ])
        (nil)))
(insn 143 142 144 14 (set (reg:DI 150 [ _64 ])
        (sign_extend:DI (reg:SI 149 [ _63 ]))) "function.c":830 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 149 [ _63 ])
        (nil)))
(insn 144 143 145 14 (parallel [
            (set (reg:DI 151 [ _65 ])
                (plus:DI (reg:DI 150 [ _64 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 150 [ _64 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 145 144 146 14 (parallel [
            (set (reg/f:DI 152 [ _66 ])
                (plus:DI (reg/f:DI 147 [ _61 ])
                    (reg:DI 151 [ _65 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":830 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 151 [ _65 ])
        (expr_list:REG_DEAD (reg/f:DI 147 [ _61 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 146 145 147 14 (set (reg:QI 153 [ _67 ])
        (mem:QI (reg/f:DI 152 [ _66 ]) [0 *_66+0 S1 A8])) "function.c":830 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _66 ])
        (nil)))
(insn 147 146 148 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 153 [ _67 ])
            (const_int 77 [0x4d]))) "function.c":830 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 153 [ _67 ])
        (nil)))
(jump_insn 148 147 149 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 200)
            (pc))) "function.c":830 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 200)
;;  succ:       15 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 17, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 179 180
(note 149 148 150 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 15 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":832 85 {*movdi_internal}
     (nil))
(insn 151 150 152 15 (set (reg/f:DI 154 [ _68 ])
        (mem/f:DI (plus:DI (reg/f:DI 179)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":832 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 152 151 153 15 (set (reg:SI 155 [ _69 ])
        (mem:SI (plus:DI (reg/f:DI 154 [ _68 ])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])) "function.c":832 86 {*movsi_internal}
     (nil))
(insn 153 152 154 15 (parallel [
            (set (reg:SI 156 [ _70 ])
                (plus:SI (reg:SI 155 [ _69 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":832 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 155 [ _69 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 154 153 155 15 (set (mem:SI (plus:DI (reg/f:DI 154 [ _68 ])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])
        (reg:SI 156 [ _70 ])) "function.c":832 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 156 [ _70 ])
        (expr_list:REG_DEAD (reg/f:DI 154 [ _68 ])
            (nil))))
(insn 155 154 156 15 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":833 85 {*movdi_internal}
     (nil))
(insn 156 155 157 15 (set (reg/f:DI 157 [ _71 ])
        (mem/f:DI (plus:DI (reg/f:DI 180)
                (const_int 32 [0x20])) [14 serwer_78(D)->player1+0 S8 A64])) "function.c":833 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180)
        (nil)))
(insn 157 156 158 15 (set (mem:QI (plus:DI (reg/f:DI 157 [ _71 ])
                (const_int 40 [0x28])) [0 _71->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":833 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _71 ])
        (nil)))
(insn 158 157 182 15 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":834 88 {*movqi_internal}
     (nil))
(jump_insn 182 158 183 15 (set (pc)
        (label_ref:DI 200)) "function.c":836 683 {jump}
     (nil)
 -> 200)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 183 182 185)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 15, next block 18, flags: (RTL)
;;  pred:       8
;;              9 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 185 183 184 17 112 (nil) [2 uses])
(note 184 185 186 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 186 184 187 17 (const_int 0 [0]) "function.c":812 718 {nop}
     (nil))
(jump_insn 187 186 188 17 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 188 187 190)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       10
;;              11 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 190 188 189 18 113 (nil) [2 uses])
(note 189 190 191 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 191 189 192 18 (const_int 0 [0]) "function.c":820 718 {nop}
     (nil))
(jump_insn 192 191 193 18 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 193 192 195)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       12
;;              13 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 195 193 194 19 114 (nil) [2 uses])
(note 194 195 196 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 196 194 197 19 (const_int 0 [0]) "function.c":828 718 {nop}
     (nil))
(jump_insn 197 196 198 19 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 198 197 200)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 16, flags: (RTL)
;;  pred:       14
;;              15 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 200 198 199 20 115 (nil) [2 uses])
(note 199 200 201 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 201 199 161 20 (const_int 0 [0]) "function.c":836 718 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       7
;;              5 [always] 
;;              19 [always] 
;;              17 [always] 
;;              18 [always] 
;;              20 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 158 159
(code_label 161 201 162 16 105 (nil) [5 uses])
(note 162 161 163 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 166 16 (set (reg:SI 158 [ _91 ])
        (const_int 0 [0])) "function.c":838 86 {*movsi_internal}
     (nil))
(insn 166 163 170 16 (set (reg:SI 159 [ <retval> ])
        (reg:SI 158 [ _91 ])) "function.c":838 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 158 [ _91 ])
        (nil)))
(insn 170 166 171 16 (set (reg/i:SI 0 ax)
        (reg:SI 159 [ <retval> ])) "function.c":839 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 159 [ <retval> ])
        (nil)))
(insn 171 170 0 16 (use (reg/i:SI 0 ax)) "function.c":839 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function step2 (step2, funcdef_no=18, decl_uid=6240, cgraph_uid=18, symbol_order=21)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 21 n_edges 29 count 21 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 19 20 16
;; 2 succs { 3 14 }
;; 3 succs { 4 6 }
;; 4 succs { 5 12 }
;; 5 succs { 16 }
;; 6 succs { 7 10 }
;; 7 succs { 16 8 }
;; 8 succs { 9 17 }
;; 9 succs { 17 }
;; 10 succs { 11 18 }
;; 11 succs { 18 }
;; 12 succs { 13 19 }
;; 13 succs { 19 }
;; 14 succs { 15 20 }
;; 15 succs { 20 }
;; 17 succs { 16 }
;; 18 succs { 16 }
;; 19 succs { 16 }
;; 20 succs { 16 }
;; 16 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r159,l0) best AREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a5(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a9(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a11(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a18(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a27(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a28(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a29(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a31(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a33(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a35(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a36(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a38(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a39(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a40(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a41(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a46(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a47(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a48(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a49(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a50(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a52(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a53(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a54(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a55(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a57(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a60(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a61(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a62(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a63(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a64(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a65(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a67(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a68(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a69(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a70(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a71(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a74(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a75(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a77(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a78(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a79(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a80(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a81(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a82(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a83(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a84(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a85(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a86(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a88(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a89(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a90(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:53000 NO_REX_SSE_REGS:53000 SSE_REGS:53000 MMX_REGS:78000 INT_SSE_REGS:78000 ALL_REGS:1272000 MEM:31000
  a91(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a92(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a93(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 171(l0): point = 0
   Insn 170(l0): point = 2
   Insn 166(l0): point = 4
   Insn 163(l0): point = 6
   Insn 201(l0): point = 9
   Insn 197(l0): point = 12
   Insn 196(l0): point = 14
   Insn 192(l0): point = 17
   Insn 191(l0): point = 19
   Insn 187(l0): point = 22
   Insn 186(l0): point = 24
   Insn 182(l0): point = 27
   Insn 158(l0): point = 29
   Insn 157(l0): point = 31
   Insn 156(l0): point = 33
   Insn 155(l0): point = 35
   Insn 154(l0): point = 37
   Insn 153(l0): point = 39
   Insn 152(l0): point = 41
   Insn 151(l0): point = 43
   Insn 150(l0): point = 45
   Insn 148(l0): point = 48
   Insn 147(l0): point = 50
   Insn 146(l0): point = 52
   Insn 145(l0): point = 54
   Insn 144(l0): point = 56
   Insn 143(l0): point = 58
   Insn 142(l0): point = 60
   Insn 141(l0): point = 62
   Insn 140(l0): point = 64
   Insn 139(l0): point = 66
   Insn 138(l0): point = 68
   Insn 137(l0): point = 70
   Insn 136(l0): point = 72
   Insn 135(l0): point = 74
   Insn 134(l0): point = 76
   Insn 133(l0): point = 78
   Insn 132(l0): point = 80
   Insn 131(l0): point = 82
   Insn 180(l0): point = 85
   Insn 124(l0): point = 87
   Insn 123(l0): point = 89
   Insn 122(l0): point = 91
   Insn 121(l0): point = 93
   Insn 120(l0): point = 95
   Insn 119(l0): point = 97
   Insn 118(l0): point = 99
   Insn 117(l0): point = 101
   Insn 116(l0): point = 103
   Insn 114(l0): point = 106
   Insn 113(l0): point = 108
   Insn 112(l0): point = 110
   Insn 111(l0): point = 112
   Insn 110(l0): point = 114
   Insn 109(l0): point = 116
   Insn 108(l0): point = 118
   Insn 107(l0): point = 120
   Insn 106(l0): point = 122
   Insn 105(l0): point = 124
   Insn 104(l0): point = 126
   Insn 103(l0): point = 128
   Insn 102(l0): point = 130
   Insn 101(l0): point = 132
   Insn 100(l0): point = 134
   Insn 99(l0): point = 136
   Insn 98(l0): point = 138
   Insn 97(l0): point = 140
   Insn 178(l0): point = 143
   Insn 90(l0): point = 145
   Insn 89(l0): point = 147
   Insn 88(l0): point = 149
   Insn 87(l0): point = 151
   Insn 86(l0): point = 153
   Insn 85(l0): point = 155
   Insn 84(l0): point = 157
   Insn 83(l0): point = 159
   Insn 82(l0): point = 161
   Insn 80(l0): point = 164
   Insn 79(l0): point = 166
   Insn 78(l0): point = 168
   Insn 77(l0): point = 170
   Insn 76(l0): point = 172
   Insn 75(l0): point = 174
   Insn 74(l0): point = 176
   Insn 73(l0): point = 178
   Insn 72(l0): point = 180
   Insn 71(l0): point = 182
   Insn 70(l0): point = 184
   Insn 69(l0): point = 186
   Insn 68(l0): point = 188
   Insn 67(l0): point = 190
   Insn 66(l0): point = 192
   Insn 65(l0): point = 194
   Insn 64(l0): point = 196
   Insn 63(l0): point = 198
   Insn 176(l0): point = 201
   Insn 56(l0): point = 203
   Insn 55(l0): point = 205
   Insn 54(l0): point = 207
   Insn 53(l0): point = 209
   Insn 52(l0): point = 211
   Insn 51(l0): point = 213
   Insn 50(l0): point = 215
   Insn 49(l0): point = 217
   Insn 48(l0): point = 219
   Insn 46(l0): point = 222
   Insn 45(l0): point = 224
   Insn 44(l0): point = 226
   Insn 43(l0): point = 228
   Insn 42(l0): point = 230
   Insn 41(l0): point = 232
   Insn 40(l0): point = 234
   Insn 39(l0): point = 236
   Insn 38(l0): point = 238
   Insn 37(l0): point = 240
   Insn 36(l0): point = 242
   Insn 35(l0): point = 244
   Insn 34(l0): point = 246
   Insn 33(l0): point = 248
   Insn 32(l0): point = 250
   Insn 31(l0): point = 252
   Insn 30(l0): point = 254
   Insn 29(l0): point = 256
   Insn 27(l0): point = 259
   Insn 26(l0): point = 261
   Insn 24(l0): point = 264
   Insn 23(l0): point = 266
   Insn 174(l0): point = 269
   Insn 17(l0): point = 272
   Insn 16(l0): point = 274
   Insn 14(l0): point = 277
   Insn 13(l0): point = 279
   Insn 11(l0): point = 282
   Insn 10(l0): point = 284
   Insn 9(l0): point = 286
   Insn 8(l0): point = 288
   Insn 7(l0): point = 290
   Insn 6(l0): point = 292
   Insn 2(l0): point = 294
 a0(r159): [3..4]
 a1(r158): [5..6]
 a2(r157): [32..33]
 a3(r180): [34..35]
 a4(r154): [38..43]
 a5(r156): [38..39]
 a6(r155): [40..41]
 a7(r179): [44..45]
 a8(r153): [51..52]
 a9(r152): [53..54]
 a10(r151): [55..56]
 a11(r147): [55..66]
 a12(r150): [57..58]
 a13(r149): [59..60]
 a14(r148): [61..62]
 a15(r178): [63..64]
 a16(r146): [67..68]
 a17(r145): [69..70]
 a18(r141): [69..80]
 a19(r144): [71..72]
 a20(r143): [73..74]
 a21(r142): [75..76]
 a22(r177): [77..78]
 a23(r176): [81..82]
 a24(r140): [90..91]
 a25(r175): [92..93]
 a26(r137): [96..101]
 a27(r139): [96..97]
 a28(r138): [98..99]
 a29(r174): [102..103]
 a30(r136): [109..110]
 a31(r135): [111..112]
 a32(r134): [113..114]
 a33(r130): [113..124]
 a34(r133): [115..116]
 a35(r132): [117..118]
 a36(r131): [119..120]
 a37(r173): [121..122]
 a38(r129): [125..126]
 a39(r128): [127..128]
 a40(r124): [127..138]
 a41(r127): [129..130]
 a42(r126): [131..132]
 a43(r125): [133..134]
 a44(r172): [135..136]
 a45(r171): [139..140]
 a46(r123): [148..149]
 a47(r170): [150..151]
 a48(r120): [154..159]
 a49(r122): [154..155]
 a50(r121): [156..157]
 a51(r169): [160..161]
 a52(r119): [167..168]
 a53(r118): [169..170]
 a54(r117): [171..172]
 a55(r114): [171..180]
 a56(r116): [173..174]
 a57(r115): [175..176]
 a58(r168): [177..178]
 a59(r113): [181..182]
 a60(r112): [183..184]
 a61(r107): [183..196]
 a62(r111): [185..186]
 a63(r110): [187..188]
 a64(r109): [189..190]
 a65(r108): [191..192]
 a66(r167): [193..194]
 a67(r166): [197..198]
 a68(r106): [206..207]
 a69(r165): [208..209]
 a70(r103): [212..217]
 a71(r105): [212..213]
 a72(r104): [214..215]
 a73(r164): [218..219]
 a74(r102): [225..226]
 a75(r101): [227..228]
 a76(r100): [229..230]
 a77(r97): [229..238]
 a78(r99): [231..232]
 a79(r98): [233..234]
 a80(r163): [235..236]
 a81(r96): [239..240]
 a82(r95): [241..242]
 a83(r90): [241..254]
 a84(r94): [243..244]
 a85(r93): [245..246]
 a86(r92): [247..248]
 a87(r91): [249..250]
 a88(r162): [251..252]
 a89(r161): [255..256]
 a90(r89): [275..286] [262..268]
 a91(r88): [287..288]
 a92(r87): [289..290]
 a93(r160): [291..292]
Compressing live ranges: from 297 to 166 - 55%
Ranges after the compression:
 a0(r159): [0..1]
 a1(r158): [2..3]
 a2(r157): [4..5]
 a3(r180): [6..7]
 a4(r154): [8..11]
 a5(r156): [8..9]
 a6(r155): [10..11]
 a7(r179): [12..13]
 a8(r153): [14..15]
 a9(r152): [16..17]
 a10(r151): [18..19]
 a11(r147): [18..27]
 a12(r150): [20..21]
 a13(r149): [22..23]
 a14(r148): [24..25]
 a15(r178): [26..27]
 a16(r146): [28..29]
 a17(r145): [30..31]
 a18(r141): [30..39]
 a19(r144): [32..33]
 a20(r143): [34..35]
 a21(r142): [36..37]
 a22(r177): [38..39]
 a23(r176): [40..41]
 a24(r140): [42..43]
 a25(r175): [44..45]
 a26(r137): [46..49]
 a27(r139): [46..47]
 a28(r138): [48..49]
 a29(r174): [50..51]
 a30(r136): [52..53]
 a31(r135): [54..55]
 a32(r134): [56..57]
 a33(r130): [56..65]
 a34(r133): [58..59]
 a35(r132): [60..61]
 a36(r131): [62..63]
 a37(r173): [64..65]
 a38(r129): [66..67]
 a39(r128): [68..69]
 a40(r124): [68..77]
 a41(r127): [70..71]
 a42(r126): [72..73]
 a43(r125): [74..75]
 a44(r172): [76..77]
 a45(r171): [78..79]
 a46(r123): [80..81]
 a47(r170): [82..83]
 a48(r120): [84..87]
 a49(r122): [84..85]
 a50(r121): [86..87]
 a51(r169): [88..89]
 a52(r119): [90..91]
 a53(r118): [92..93]
 a54(r117): [94..95]
 a55(r114): [94..101]
 a56(r116): [96..97]
 a57(r115): [98..99]
 a58(r168): [100..101]
 a59(r113): [102..103]
 a60(r112): [104..105]
 a61(r107): [104..115]
 a62(r111): [106..107]
 a63(r110): [108..109]
 a64(r109): [110..111]
 a65(r108): [112..113]
 a66(r167): [114..115]
 a67(r166): [116..117]
 a68(r106): [118..119]
 a69(r165): [120..121]
 a70(r103): [122..125]
 a71(r105): [122..123]
 a72(r104): [124..125]
 a73(r164): [126..127]
 a74(r102): [128..129]
 a75(r101): [130..131]
 a76(r100): [132..133]
 a77(r97): [132..139]
 a78(r99): [134..135]
 a79(r98): [136..137]
 a80(r163): [138..139]
 a81(r96): [140..141]
 a82(r95): [142..143]
 a83(r90): [142..153]
 a84(r94): [144..145]
 a85(r93): [146..147]
 a86(r92): [148..149]
 a87(r91): [150..151]
 a88(r162): [152..153]
 a89(r161): [154..155]
 a90(r89): [156..159]
 a91(r88): [160..161]
 a92(r87): [162..163]
 a93(r160): [164..165]
  pref0:a0(r159)<-hr0@500
  regions=1, blocks=21, points=166
    allocnos=94 (big 0), copies=0, conflicts=0, ranges=94
Disposition:
   92:r87  l0     0   91:r88  l0     0   90:r89  l0     0   83:r90  l0     1
   87:r91  l0     0   86:r92  l0     0   85:r93  l0     0   84:r94  l0     0
   82:r95  l0     0   81:r96  l0     0   77:r97  l0     1   79:r98  l0     0
   78:r99  l0     0   76:r100 l0     0   75:r101 l0     0   74:r102 l0     0
   70:r103 l0     0   72:r104 l0     1   71:r105 l0     1   68:r106 l0     0
   61:r107 l0     1   65:r108 l0     0   64:r109 l0     0   63:r110 l0     0
   62:r111 l0     0   60:r112 l0     0   59:r113 l0     0   55:r114 l0     1
   57:r115 l0     0   56:r116 l0     0   54:r117 l0     0   53:r118 l0     0
   52:r119 l0     0   48:r120 l0     0   50:r121 l0     1   49:r122 l0     1
   46:r123 l0     0   40:r124 l0     1   43:r125 l0     0   42:r126 l0     0
   41:r127 l0     0   39:r128 l0     0   38:r129 l0     0   33:r130 l0     1
   36:r131 l0     0   35:r132 l0     0   34:r133 l0     0   32:r134 l0     0
   31:r135 l0     0   30:r136 l0     0   26:r137 l0     0   28:r138 l0     1
   27:r139 l0     1   24:r140 l0     0   18:r141 l0     1   21:r142 l0     0
   20:r143 l0     0   19:r144 l0     0   17:r145 l0     0   16:r146 l0     0
   11:r147 l0     1   14:r148 l0     0   13:r149 l0     0   12:r150 l0     0
   10:r151 l0     0    9:r152 l0     0    8:r153 l0     0    4:r154 l0     0
    6:r155 l0     1    5:r156 l0     1    2:r157 l0     0    1:r158 l0     0
    0:r159 l0     0   93:r160 l0     0   89:r161 l0     0   88:r162 l0     0
   80:r163 l0     0   73:r164 l0     0   69:r165 l0     0   67:r166 l0     0
   66:r167 l0     0   58:r168 l0     0   51:r169 l0     0   47:r170 l0     0
   45:r171 l0     0   44:r172 l0     0   37:r173 l0     0   29:r174 l0     0
   25:r175 l0     0   23:r176 l0     0   22:r177 l0     0   15:r178 l0     0
    7:r179 l0     0    3:r180 l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


step2

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,20u} r7={1d,20u} r16={1d,19u} r17={29d,9u} r20={1d,42u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,5u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,2u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,2u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,2u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,2u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} 
;;    total ref usage 358{143d,215u,0e} in 139{139 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 160
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":842 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":843 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 160)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":843 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (nil)))
(insn 8 7 9 2 (set (reg:QI 88 [ _2 ])
        (mem:QI (plus:DI (reg/f:DI 87 [ _1 ])
                (const_int 40 [0x28])) [0 _1->request+0 S1 A64])) "function.c":843 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(insn 9 8 10 2 (set (reg:SI 89 [ _3 ])
        (sign_extend:SI (reg:QI 88 [ _2 ]))) "function.c":843 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 88 [ _2 ])
        (nil)))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 100 [0x64]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":843 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 129)
;;  succ:       3 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ _3 ])
            (const_int 100 [0x64]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "function.c":843 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 97 [0x61]))) "function.c":843 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(jump_insn 17 16 173 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) "function.c":843 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 95)
;;  succ:       5 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 173 17 174 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 174 173 175 5 (set (pc)
        (label_ref 161)) "function.c":843 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 175 174 21)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(code_label 21 175 22 6 118 (nil) [1 uses])
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 115 [0x73]))) "function.c":843 11 {*cmpsi_1}
     (nil))
(jump_insn 24 23 25 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "function.c":843 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 61)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
;; lr  def 	 17 [flags]
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 119 [0x77]))) "function.c":843 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 161)
            (pc))) "function.c":843 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 161)
;;  succ:       16
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 93 94 95 96 97 98 99 100 101 102 161 162 163
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 30 29 31 8 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 161)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (nil)))
(insn 31 30 32 8 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 32 31 33 8 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 162)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (nil)))
(insn 33 32 34 8 (set (reg:SI 92 [ _6 ])
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":846 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 34 33 35 8 (set (reg:DI 93 [ _7 ])
        (sign_extend:DI (reg:SI 92 [ _6 ]))) "function.c":846 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (nil)))
(insn 35 34 36 8 (parallel [
            (set (reg:DI 94 [ _8 ])
                (ashift:DI (reg:DI 93 [ _7 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 8 (parallel [
            (set (reg:DI 95 [ _9 ])
                (plus:DI (reg:DI 94 [ _8 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 37 36 38 8 (parallel [
            (set (reg/f:DI 96 [ _10 ])
                (plus:DI (reg/f:DI 90 [ _4 ])
                    (reg:DI 95 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
        (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 38 37 39 8 (set (reg/f:DI 97 [ _11 ])
        (mem/f:DI (reg/f:DI 96 [ _10 ]) [10 *_10+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _10 ])
        (nil)))
(insn 39 38 40 8 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (nil))
(insn 40 39 41 8 (set (reg/f:DI 98 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 163)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":846 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (nil)))
(insn 41 40 42 8 (set (reg:SI 99 [ _13 ])
        (mem:SI (plus:DI (reg/f:DI 98 [ _12 ])
                (const_int 12 [0xc])) [3 _12->x_current+0 S4 A32])) "function.c":846 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
        (nil)))
(insn 42 41 43 8 (set (reg:DI 100 [ _14 ])
        (sign_extend:DI (reg:SI 99 [ _13 ]))) "function.c":846 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (nil)))
(insn 43 42 44 8 (parallel [
            (set (reg/f:DI 101 [ _15 ])
                (plus:DI (reg/f:DI 97 [ _11 ])
                    (reg:DI 100 [ _14 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":846 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 100 [ _14 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 44 43 45 8 (set (reg:QI 102 [ _16 ])
        (mem:QI (reg/f:DI 101 [ _15 ]) [0 *_15+0 S1 A8])) "function.c":846 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 45 44 46 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 102 [ _16 ])
            (const_int 77 [0x4d]))) "function.c":846 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 102 [ _16 ])
        (nil)))
(jump_insn 46 45 47 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 185)
            (pc))) "function.c":846 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 185)
;;  succ:       9 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 164 165
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":848 85 {*movdi_internal}
     (nil))
(insn 49 48 50 9 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (plus:DI (reg/f:DI 164)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":848 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (nil)))
(insn 50 49 51 9 (set (reg:SI 104 [ _18 ])
        (mem:SI (plus:DI (reg/f:DI 103 [ _17 ])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])) "function.c":848 86 {*movsi_internal}
     (nil))
(insn 51 50 52 9 (parallel [
            (set (reg:SI 105 [ _19 ])
                (plus:SI (reg:SI 104 [ _18 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":848 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 104 [ _18 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 52 51 53 9 (set (mem:SI (plus:DI (reg/f:DI 103 [ _17 ])
                (const_int 16 [0x10])) [3 _17->y_current+0 S4 A64])
        (reg:SI 105 [ _19 ])) "function.c":848 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105 [ _19 ])
        (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
            (nil))))
(insn 53 52 54 9 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":849 85 {*movdi_internal}
     (nil))
(insn 54 53 55 9 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (plus:DI (reg/f:DI 165)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":849 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 55 54 56 9 (set (mem:QI (plus:DI (reg/f:DI 106 [ _20 ])
                (const_int 40 [0x28])) [0 _20->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":849 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 56 55 176 9 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":850 88 {*movqi_internal}
     (nil))
(jump_insn 176 56 177 9 (set (pc)
        (label_ref:DI 185)) "function.c":852 683 {jump}
     (nil)
 -> 185)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 177 176 61)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 110 111 112 113 114 115 116 117 118 119 166 167 168
(code_label 61 177 62 10 121 (nil) [1 uses])
(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 10 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 64 63 65 10 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 166)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (nil)))
(insn 65 64 66 10 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 66 65 67 10 (set (reg/f:DI 108 [ _22 ])
        (mem/f:DI (plus:DI (reg/f:DI 167)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 67 66 68 10 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 108 [ _22 ])
                (const_int 16 [0x10])) [3 _22->y_current+0 S4 A64])) "function.c":854 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 68 67 69 10 (set (reg:DI 110 [ _24 ])
        (sign_extend:DI (reg:SI 109 [ _23 ]))) "function.c":854 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (nil)))
(insn 69 68 70 10 (parallel [
            (set (reg:DI 111 [ _25 ])
                (plus:DI (reg:DI 110 [ _24 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 110 [ _24 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 10 (parallel [
            (set (reg:DI 112 [ _26 ])
                (ashift:DI (reg:DI 111 [ _25 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 111 [ _25 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 71 70 72 10 (parallel [
            (set (reg/f:DI 113 [ _27 ])
                (plus:DI (reg/f:DI 107 [ _21 ])
                    (reg:DI 112 [ _26 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
        (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 72 71 73 10 (set (reg/f:DI 114 [ _28 ])
        (mem/f:DI (reg/f:DI 113 [ _27 ]) [10 *_27+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 73 72 74 10 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (nil))
(insn 74 73 75 10 (set (reg/f:DI 115 [ _29 ])
        (mem/f:DI (plus:DI (reg/f:DI 168)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":854 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (nil)))
(insn 75 74 76 10 (set (reg:SI 116 [ _30 ])
        (mem:SI (plus:DI (reg/f:DI 115 [ _29 ])
                (const_int 12 [0xc])) [3 _29->x_current+0 S4 A32])) "function.c":854 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
        (nil)))
(insn 76 75 77 10 (set (reg:DI 117 [ _31 ])
        (sign_extend:DI (reg:SI 116 [ _30 ]))) "function.c":854 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 116 [ _30 ])
        (nil)))
(insn 77 76 78 10 (parallel [
            (set (reg/f:DI 118 [ _32 ])
                (plus:DI (reg/f:DI 114 [ _28 ])
                    (reg:DI 117 [ _31 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":854 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 78 77 79 10 (set (reg:QI 119 [ _33 ])
        (mem:QI (reg/f:DI 118 [ _32 ]) [0 *_32+0 S1 A8])) "function.c":854 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ _32 ])
        (nil)))
(insn 79 78 80 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 119 [ _33 ])
            (const_int 77 [0x4d]))) "function.c":854 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 119 [ _33 ])
        (nil)))
(jump_insn 80 79 81 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 190)
            (pc))) "function.c":854 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 190)
;;  succ:       11 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 169 170
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg/f:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":856 85 {*movdi_internal}
     (nil))
(insn 83 82 84 11 (set (reg/f:DI 120 [ _34 ])
        (mem/f:DI (plus:DI (reg/f:DI 169)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":856 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 84 83 85 11 (set (reg:SI 121 [ _35 ])
        (mem:SI (plus:DI (reg/f:DI 120 [ _34 ])
                (const_int 16 [0x10])) [3 _34->y_current+0 S4 A64])) "function.c":856 86 {*movsi_internal}
     (nil))
(insn 85 84 86 11 (parallel [
            (set (reg:SI 122 [ _36 ])
                (plus:SI (reg:SI 121 [ _35 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":856 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 121 [ _35 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 11 (set (mem:SI (plus:DI (reg/f:DI 120 [ _34 ])
                (const_int 16 [0x10])) [3 _34->y_current+0 S4 A64])
        (reg:SI 122 [ _36 ])) "function.c":856 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122 [ _36 ])
        (expr_list:REG_DEAD (reg/f:DI 120 [ _34 ])
            (nil))))
(insn 87 86 88 11 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":857 85 {*movdi_internal}
     (nil))
(insn 88 87 89 11 (set (reg/f:DI 123 [ _37 ])
        (mem/f:DI (plus:DI (reg/f:DI 170)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":857 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (nil)))
(insn 89 88 90 11 (set (mem:QI (plus:DI (reg/f:DI 123 [ _37 ])
                (const_int 40 [0x28])) [0 _37->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":857 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ _37 ])
        (nil)))
(insn 90 89 178 11 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":858 88 {*movqi_internal}
     (nil))
(jump_insn 178 90 179 11 (set (pc)
        (label_ref:DI 190)) "function.c":860 683 {jump}
     (nil)
 -> 190)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 179 178 95)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       4
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 129 130 131 132 133 134 135 136 171 172 173
(code_label 95 179 96 12 119 (nil) [1 uses])
(note 96 95 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 12 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 98 97 99 12 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (plus:DI (reg/f:DI 171)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (nil)))
(insn 99 98 100 12 (set (reg/f:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 100 99 101 12 (set (reg/f:DI 125 [ _39 ])
        (mem/f:DI (plus:DI (reg/f:DI 172)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172)
        (nil)))
(insn 101 100 102 12 (set (reg:SI 126 [ _40 ])
        (mem:SI (plus:DI (reg/f:DI 125 [ _39 ])
                (const_int 16 [0x10])) [3 _39->y_current+0 S4 A64])) "function.c":862 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ _39 ])
        (nil)))
(insn 102 101 103 12 (set (reg:DI 127 [ _41 ])
        (sign_extend:DI (reg:SI 126 [ _40 ]))) "function.c":862 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 126 [ _40 ])
        (nil)))
(insn 103 102 104 12 (parallel [
            (set (reg:DI 128 [ _42 ])
                (ashift:DI (reg:DI 127 [ _41 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 127 [ _41 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 104 103 105 12 (parallel [
            (set (reg/f:DI 129 [ _43 ])
                (plus:DI (reg/f:DI 124 [ _38 ])
                    (reg:DI 128 [ _42 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 128 [ _42 ])
        (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 105 104 106 12 (set (reg/f:DI 130 [ _44 ])
        (mem/f:DI (reg/f:DI 129 [ _43 ]) [10 *_43+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 129 [ _43 ])
        (nil)))
(insn 106 105 107 12 (set (reg/f:DI 173)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (nil))
(insn 107 106 108 12 (set (reg/f:DI 131 [ _45 ])
        (mem/f:DI (plus:DI (reg/f:DI 173)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":862 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173)
        (nil)))
(insn 108 107 109 12 (set (reg:SI 132 [ _46 ])
        (mem:SI (plus:DI (reg/f:DI 131 [ _45 ])
                (const_int 12 [0xc])) [3 _45->x_current+0 S4 A32])) "function.c":862 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ _45 ])
        (nil)))
(insn 109 108 110 12 (set (reg:DI 133 [ _47 ])
        (sign_extend:DI (reg:SI 132 [ _46 ]))) "function.c":862 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 132 [ _46 ])
        (nil)))
(insn 110 109 111 12 (parallel [
            (set (reg:DI 134 [ _48 ])
                (plus:DI (reg:DI 133 [ _47 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 133 [ _47 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 111 110 112 12 (parallel [
            (set (reg/f:DI 135 [ _49 ])
                (plus:DI (reg/f:DI 130 [ _44 ])
                    (reg:DI 134 [ _48 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":862 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 134 [ _48 ])
        (expr_list:REG_DEAD (reg/f:DI 130 [ _44 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 112 111 113 12 (set (reg:QI 136 [ _50 ])
        (mem:QI (reg/f:DI 135 [ _49 ]) [0 *_49+0 S1 A8])) "function.c":862 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ _49 ])
        (nil)))
(insn 113 112 114 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 136 [ _50 ])
            (const_int 77 [0x4d]))) "function.c":862 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 136 [ _50 ])
        (nil)))
(jump_insn 114 113 115 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 195)
            (pc))) "function.c":862 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 195)
;;  succ:       13 (FALLTHRU)
;;              19
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 137 138 139 140 174 175
(note 115 114 116 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 13 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":864 85 {*movdi_internal}
     (nil))
(insn 117 116 118 13 (set (reg/f:DI 137 [ _51 ])
        (mem/f:DI (plus:DI (reg/f:DI 174)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":864 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (nil)))
(insn 118 117 119 13 (set (reg:SI 138 [ _52 ])
        (mem:SI (plus:DI (reg/f:DI 137 [ _51 ])
                (const_int 12 [0xc])) [3 _51->x_current+0 S4 A32])) "function.c":864 86 {*movsi_internal}
     (nil))
(insn 119 118 120 13 (parallel [
            (set (reg:SI 139 [ _53 ])
                (plus:SI (reg:SI 138 [ _52 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":864 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 138 [ _52 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 120 119 121 13 (set (mem:SI (plus:DI (reg/f:DI 137 [ _51 ])
                (const_int 12 [0xc])) [3 _51->x_current+0 S4 A32])
        (reg:SI 139 [ _53 ])) "function.c":864 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 139 [ _53 ])
        (expr_list:REG_DEAD (reg/f:DI 137 [ _51 ])
            (nil))))
(insn 121 120 122 13 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":865 85 {*movdi_internal}
     (nil))
(insn 122 121 123 13 (set (reg/f:DI 140 [ _54 ])
        (mem/f:DI (plus:DI (reg/f:DI 175)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":865 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175)
        (nil)))
(insn 123 122 124 13 (set (mem:QI (plus:DI (reg/f:DI 140 [ _54 ])
                (const_int 40 [0x28])) [0 _54->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":865 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140 [ _54 ])
        (nil)))
(insn 124 123 180 13 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":866 88 {*movqi_internal}
     (nil))
(jump_insn 180 124 181 13 (set (pc)
        (label_ref:DI 195)) "function.c":868 683 {jump}
     (nil)
 -> 195)
;;  succ:       19 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 181 180 129)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       2
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 143 144 145 146 147 148 149 150 151 152 153 176 177 178
(code_label 129 181 130 14 117 (nil) [1 uses])
(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 14 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 132 131 133 14 (set (reg/f:DI 141 [ _55 ])
        (mem/f:DI (plus:DI (reg/f:DI 176)
                (const_int 16 [0x10])) [9 serwer_78(D)->mapa+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (nil)))
(insn 133 132 134 14 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 134 133 135 14 (set (reg/f:DI 142 [ _56 ])
        (mem/f:DI (plus:DI (reg/f:DI 177)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 135 134 136 14 (set (reg:SI 143 [ _57 ])
        (mem:SI (plus:DI (reg/f:DI 142 [ _56 ])
                (const_int 16 [0x10])) [3 _56->y_current+0 S4 A64])) "function.c":870 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _56 ])
        (nil)))
(insn 136 135 137 14 (set (reg:DI 144 [ _58 ])
        (sign_extend:DI (reg:SI 143 [ _57 ]))) "function.c":870 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 143 [ _57 ])
        (nil)))
(insn 137 136 138 14 (parallel [
            (set (reg:DI 145 [ _59 ])
                (ashift:DI (reg:DI 144 [ _58 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 144 [ _58 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 138 137 139 14 (parallel [
            (set (reg/f:DI 146 [ _60 ])
                (plus:DI (reg/f:DI 141 [ _55 ])
                    (reg:DI 145 [ _59 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _59 ])
        (expr_list:REG_DEAD (reg/f:DI 141 [ _55 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 139 138 140 14 (set (reg/f:DI 147 [ _61 ])
        (mem/f:DI (reg/f:DI 146 [ _60 ]) [10 *_60+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
        (nil)))
(insn 140 139 141 14 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (nil))
(insn 141 140 142 14 (set (reg/f:DI 148 [ _62 ])
        (mem/f:DI (plus:DI (reg/f:DI 178)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":870 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (nil)))
(insn 142 141 143 14 (set (reg:SI 149 [ _63 ])
        (mem:SI (plus:DI (reg/f:DI 148 [ _62 ])
                (const_int 12 [0xc])) [3 _62->x_current+0 S4 A32])) "function.c":870 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 148 [ _62 ])
        (nil)))
(insn 143 142 144 14 (set (reg:DI 150 [ _64 ])
        (sign_extend:DI (reg:SI 149 [ _63 ]))) "function.c":870 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 149 [ _63 ])
        (nil)))
(insn 144 143 145 14 (parallel [
            (set (reg:DI 151 [ _65 ])
                (plus:DI (reg:DI 150 [ _64 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 150 [ _64 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 145 144 146 14 (parallel [
            (set (reg/f:DI 152 [ _66 ])
                (plus:DI (reg/f:DI 147 [ _61 ])
                    (reg:DI 151 [ _65 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":870 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 151 [ _65 ])
        (expr_list:REG_DEAD (reg/f:DI 147 [ _61 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 146 145 147 14 (set (reg:QI 153 [ _67 ])
        (mem:QI (reg/f:DI 152 [ _66 ]) [0 *_66+0 S1 A8])) "function.c":870 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _66 ])
        (nil)))
(insn 147 146 148 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 153 [ _67 ])
            (const_int 77 [0x4d]))) "function.c":870 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 153 [ _67 ])
        (nil)))
(jump_insn 148 147 149 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 200)
            (pc))) "function.c":870 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 200)
;;  succ:       15 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 17, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 157 179 180
(note 149 148 150 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 150 149 151 15 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":872 85 {*movdi_internal}
     (nil))
(insn 151 150 152 15 (set (reg/f:DI 154 [ _68 ])
        (mem/f:DI (plus:DI (reg/f:DI 179)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":872 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 152 151 153 15 (set (reg:SI 155 [ _69 ])
        (mem:SI (plus:DI (reg/f:DI 154 [ _68 ])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])) "function.c":872 86 {*movsi_internal}
     (nil))
(insn 153 152 154 15 (parallel [
            (set (reg:SI 156 [ _70 ])
                (plus:SI (reg:SI 155 [ _69 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":872 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 155 [ _69 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 154 153 155 15 (set (mem:SI (plus:DI (reg/f:DI 154 [ _68 ])
                (const_int 12 [0xc])) [3 _68->x_current+0 S4 A32])
        (reg:SI 156 [ _70 ])) "function.c":872 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 156 [ _70 ])
        (expr_list:REG_DEAD (reg/f:DI 154 [ _68 ])
            (nil))))
(insn 155 154 156 15 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":873 85 {*movdi_internal}
     (nil))
(insn 156 155 157 15 (set (reg/f:DI 157 [ _71 ])
        (mem/f:DI (plus:DI (reg/f:DI 180)
                (const_int 40 [0x28])) [14 serwer_78(D)->player2+0 S8 A64])) "function.c":873 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180)
        (nil)))
(insn 157 156 158 15 (set (mem:QI (plus:DI (reg/f:DI 157 [ _71 ])
                (const_int 40 [0x28])) [0 _71->request+0 S1 A64])
        (const_int 48 [0x30])) "function.c":873 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _71 ])
        (nil)))
(insn 158 157 182 15 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":874 88 {*movqi_internal}
     (nil))
(jump_insn 182 158 183 15 (set (pc)
        (label_ref:DI 200)) "function.c":876 683 {jump}
     (nil)
 -> 200)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 183 182 185)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 15, next block 18, flags: (RTL)
;;  pred:       8
;;              9 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 185 183 184 17 127 (nil) [2 uses])
(note 184 185 186 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 186 184 187 17 (const_int 0 [0]) "function.c":852 718 {nop}
     (nil))
(jump_insn 187 186 188 17 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 188 187 190)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       10
;;              11 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 190 188 189 18 128 (nil) [2 uses])
(note 189 190 191 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 191 189 192 18 (const_int 0 [0]) "function.c":860 718 {nop}
     (nil))
(jump_insn 192 191 193 18 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 193 192 195)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       12
;;              13 [always] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 195 193 194 19 129 (nil) [2 uses])
(note 194 195 196 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 196 194 197 19 (const_int 0 [0]) "function.c":868 718 {nop}
     (nil))
(jump_insn 197 196 198 19 (set (pc)
        (label_ref 161)) 683 {jump}
     (nil)
 -> 161)
;;  succ:       16 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 198 197 200)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 16, flags: (RTL)
;;  pred:       14
;;              15 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 200 198 199 20 130 (nil) [2 uses])
(note 199 200 201 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 201 199 161 20 (const_int 0 [0]) "function.c":876 718 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 20, next block 1, flags: (RTL)
;;  pred:       7
;;              5 [always] 
;;              19 [always] 
;;              17 [always] 
;;              18 [always] 
;;              20 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 158 159
(code_label 161 201 162 16 120 (nil) [5 uses])
(note 162 161 163 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 163 162 166 16 (set (reg:SI 158 [ _91 ])
        (const_int 0 [0])) "function.c":878 86 {*movsi_internal}
     (nil))
(insn 166 163 170 16 (set (reg:SI 159 [ <retval> ])
        (reg:SI 158 [ _91 ])) "function.c":878 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 158 [ _91 ])
        (nil)))
(insn 170 166 171 16 (set (reg/i:SI 0 ax)
        (reg:SI 159 [ <retval> ])) "function.c":879 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 159 [ <retval> ])
        (nil)))
(insn 171 170 0 16 (use (reg/i:SI 0 ax)) "function.c":879 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function bestia_move_random (bestia_move_random, funcdef_no=19, decl_uid=6242, cgraph_uid=19, symbol_order=22)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 11 n_edges 15 count 11 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 10 9
;;
;; Loop 1
;;  header 3, latch 8
;;  depth 1, outer 0
;;  nodes: 3 8 4 5 6 7
;; 2 succs { 3 }
;; 3 succs { 4 8 }
;; 4 succs { 5 8 }
;; 5 succs { 6 8 }
;; 6 succs { 7 8 }
;; 7 succs { 10 8 }
;; 8 succs { 3 }
;; 10 succs { 9 }
;; 9 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a38 (r128,l0) best AREG, allocno GENERAL_REGS
    r127: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r127,l0) best DREG, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a48 (r123,l0) best AREG, allocno GENERAL_REGS
    r122: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a47 (r122,l0) best DREG, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a40 (r94,l0) best AREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a50 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a53 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a54 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a1(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a17(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a21(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a25(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a27(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a28(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a29(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a31(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a32(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a33(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a35(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a36(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a37(r127,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r128,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a39(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a40(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a41(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a45(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a46(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a47(r122,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a48(r123,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a49(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a50(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 NON_Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a51(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a52(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a54(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000

   Insn 103(l0): point = 0
   Insn 109(l0): point = 3
   Insn 56(l0): point = 6
   Insn 55(l0): point = 8
   Insn 54(l0): point = 10
   Insn 53(l0): point = 12
   Insn 52(l0): point = 14
   Insn 51(l0): point = 16
   Insn 50(l0): point = 18
   Insn 49(l0): point = 20
   Insn 48(l0): point = 22
   Insn 47(l0): point = 24
   Insn 46(l0): point = 26
   Insn 45(l0): point = 28
   Insn 44(l0): point = 30
   Insn 43(l0): point = 32
   Insn 42(l0): point = 34
   Insn 41(l0): point = 36
   Insn 40(l0): point = 38
   Insn 39(l0): point = 40
   Insn 38(l0): point = 42
   Insn 37(l0): point = 44
   Insn 36(l0): point = 46
   Insn 35(l0): point = 49
   Insn 34(l0): point = 51
   Insn 33(l0): point = 53
   Insn 32(l0): point = 55
   Insn 31(l0): point = 57
   Insn 30(l0): point = 59
   Insn 29(l0): point = 61
   Insn 28(l0): point = 63
   Insn 27(l0): point = 65
   Insn 26(l0): point = 67
   Insn 25(l0): point = 69
   Insn 24(l0): point = 71
   Insn 23(l0): point = 73
   Insn 22(l0): point = 76
   Insn 21(l0): point = 78
   Insn 20(l0): point = 80
   Insn 19(l0): point = 82
   Insn 18(l0): point = 84
   Insn 17(l0): point = 86
   Insn 16(l0): point = 88
   Insn 105(l0): point = 91
   Insn 64(l0): point = 94
   Insn 63(l0): point = 96
   Insn 62(l0): point = 98
   Insn 61(l0): point = 100
   Insn 60(l0): point = 102
   Insn 59(l0): point = 104
   Insn 58(l0): point = 106
   Insn 72(l0): point = 109
   Insn 71(l0): point = 111
   Insn 70(l0): point = 113
   Insn 69(l0): point = 115
   Insn 68(l0): point = 117
   Insn 67(l0): point = 119
   Insn 66(l0): point = 121
   Insn 80(l0): point = 124
   Insn 79(l0): point = 126
   Insn 78(l0): point = 128
   Insn 77(l0): point = 130
   Insn 76(l0): point = 132
   Insn 75(l0): point = 134
   Insn 74(l0): point = 136
   Insn 88(l0): point = 139
   Insn 87(l0): point = 141
   Insn 86(l0): point = 143
   Insn 85(l0): point = 145
   Insn 84(l0): point = 147
   Insn 83(l0): point = 149
   Insn 82(l0): point = 151
   Insn 14(l0): point = 154
   Insn 13(l0): point = 156
   Insn 12(l0): point = 158
   Insn 11(l0): point = 160
   Insn 10(l0): point = 162
   Insn 9(l0): point = 164
   Insn 8(l0): point = 166
   Insn 7(l0): point = 168
   Insn 6(l0): point = 170
   Insn 2(l0): point = 172
 a0(r120): [142..143]
 a1(r118): [142..149]
 a2(r119): [144..145]
 a3(r141): [146..147]
 a4(r140): [150..151]
 a5(r117): [127..128]
 a6(r115): [127..134]
 a7(r116): [129..130]
 a8(r139): [131..132]
 a9(r138): [135..136]
 a10(r114): [112..113]
 a11(r112): [112..119]
 a12(r113): [114..115]
 a13(r137): [116..117]
 a14(r136): [120..121]
 a15(r111): [97..98]
 a16(r109): [97..104]
 a17(r110): [99..100]
 a18(r135): [101..102]
 a19(r134): [105..106]
 a20(r108): [9..10]
 a21(r107): [11..12]
 a22(r106): [13..14]
 a23(r104): [13..20]
 a24(r105): [15..16]
 a25(r133): [17..18]
 a26(r103): [21..22]
 a27(r102): [23..24]
 a28(r99): [23..32]
 a29(r101): [25..26]
 a30(r100): [27..28]
 a31(r132): [29..30]
 a32(r131): [33..34]
 a33(r130): [37..38]
 a34(r98): [37..40]
 a35(r129): [41..42]
 a36(r97): [41..44]
 a37(r127): [45..47]
 a38(r128): [46..46]
 a39(r96): [47..49]
 a40(r94): [48..55]
 a41(r95): [50..51]
 a42(r126): [52..53]
 a43(r125): [64..65]
 a44(r93): [64..67]
 a45(r124): [68..69]
 a46(r92): [68..71]
 a47(r122): [72..74]
 a48(r123): [73..73]
 a49(r91): [74..76]
 a50(r89): [75..82]
 a51(r90): [77..78]
 a52(r121): [79..80]
 a53(r88): [157..158]
 a54(r87): [159..160]
Compressing live ranges: from 175 to 84 - 48%
Ranges after the compression:
 a0(r120): [72..73]
 a1(r118): [72..77]
 a2(r119): [74..75]
 a3(r141): [76..77]
 a4(r140): [78..79]
 a5(r117): [64..65]
 a6(r115): [64..69]
 a7(r116): [66..67]
 a8(r139): [68..69]
 a9(r138): [70..71]
 a10(r114): [56..57]
 a11(r112): [56..61]
 a12(r113): [58..59]
 a13(r137): [60..61]
 a14(r136): [62..63]
 a15(r111): [48..49]
 a16(r109): [48..53]
 a17(r110): [50..51]
 a18(r135): [52..53]
 a19(r134): [54..55]
 a20(r108): [0..1]
 a21(r107): [2..3]
 a22(r106): [4..5]
 a23(r104): [4..9]
 a24(r105): [6..7]
 a25(r133): [8..9]
 a26(r103): [10..11]
 a27(r102): [12..13]
 a28(r99): [12..19]
 a29(r101): [14..15]
 a30(r100): [16..17]
 a31(r132): [18..19]
 a32(r131): [20..21]
 a33(r130): [22..23]
 a34(r98): [22..23]
 a35(r129): [24..25]
 a36(r97): [24..25]
 a37(r127): [26..28]
 a38(r128): [27..27]
 a39(r96): [28..30]
 a40(r94): [29..34]
 a41(r95): [31..32]
 a42(r126): [33..34]
 a43(r125): [35..36]
 a44(r93): [35..36]
 a45(r124): [37..38]
 a46(r92): [37..38]
 a47(r122): [39..41]
 a48(r123): [40..40]
 a49(r91): [41..43]
 a50(r89): [42..47]
 a51(r90): [44..45]
 a52(r121): [46..47]
 a53(r88): [80..81]
 a54(r87): [82..83]
  pref0:a38(r128)<-hr0@1000
  pref1:a37(r127)<-hr1@1000
  pref2:a48(r123)<-hr0@1000
  pref3:a47(r122)<-hr1@1000
  pref4:a40(r94)<-hr0@1500
  pref5:a50(r89)<-hr0@1500
  pref6:a53(r88)<-hr5@500
  pref7:a54(r87)<-hr0@500
  regions=1, blocks=11, points=84
    allocnos=55 (big 0), copies=0, conflicts=0, ranges=55
Disposition:
   54:r87  l0     0   53:r88  l0     0   50:r89  l0     1   51:r90  l0     0
   49:r91  l0     2   46:r92  l0     1   44:r93  l0     1   40:r94  l0     1
   41:r95  l0     0   39:r96  l0     2   36:r97  l0     1   34:r98  l0     1
   28:r99  l0     1   30:r100 l0     0   29:r101 l0     0   27:r102 l0     0
   26:r103 l0     0   23:r104 l0     1   24:r105 l0     0   22:r106 l0     0
   21:r107 l0     0   20:r108 l0     0   16:r109 l0     1   17:r110 l0     0
   15:r111 l0     0   11:r112 l0     1   12:r113 l0     0   10:r114 l0     0
    6:r115 l0     1    7:r116 l0     0    5:r117 l0     0    1:r118 l0     1
    2:r119 l0     0    0:r120 l0     0   52:r121 l0     0   47:r122 l0     1
   48:r123 l0     0   45:r124 l0     0   43:r125 l0     0   42:r126 l0     0
   37:r127 l0     1   38:r128 l0     0   35:r129 l0     0   33:r130 l0     0
   32:r131 l0     0   31:r132 l0     0   25:r133 l0     0   19:r134 l0     0
   18:r135 l0     0   14:r136 l0     0   13:r137 l0     0    9:r138 l0     0
    8:r139 l0     0    4:r140 l0     0    3:r141 l0     0
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


bestia_move_random

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={5d} r2={5d} r4={5d} r5={7d,3u} r6={1d,10u} r7={1d,14u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,9u} r17={20d,5u} r18={4d} r19={4d} r20={1d,37u,6e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r87={1d,1u} r88={1d,1u} r89={1d,2u} r90={1d,1u} r91={1d,2u} r92={1d,1u,1e} r93={1d,1u} r94={1d,2u} r95={1d,1u} r96={1d,2u} r97={1d,1u,1e} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} 
;;    total ref usage 526{380d,138u,8e} in 82{78 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":882 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 0 [0])) "function.c":883 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 0 [0])) "function.c":884 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 number+0 S4 A32])
        (const_int 0 [0])) "function.c":885 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":886 85 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":886 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 87 [ _1 ])
        (reg:DI 0 ax)) "function.c":886 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 88 [ _2 ])
        (subreg:SI (reg:DI 87 [ _1 ]) 0)) "function.c":886 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 87 [ _1 ])
        (nil)))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (reg:SI 88 [ _2 ])) "function.c":886 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(call_insn 14 13 94 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":886 689 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              8 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 121 122 123 124 125 126 127 128 129 130 131 132 133
(code_label 94 14 15 3 134 (nil) [1 uses])
(note 15 94 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":890 86 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":890 86 {*movsi_internal}
     (nil))
(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f7cd0fe1600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "function.c":891 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 19 18 20 3 (set (reg:SI 89 [ _3 ])
        (reg:SI 0 ax)) "function.c":891 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 20 19 21 3 (set (reg:SI 121)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":891 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:SI 90 [ _4 ])
                (minus:SI (reg:SI 121)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 277 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 121)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
                (nil)))))
(insn 22 21 23 3 (parallel [
            (set (reg:SI 91 [ _5 ])
                (plus:SI (reg:SI 90 [ _4 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 23 22 24 3 (parallel [
            (set (reg:SI 123)
                (div:SI (reg:SI 89 [ _3 ])
                    (reg:SI 91 [ _5 ])))
            (set (reg:SI 122)
                (mod:SI (reg:SI 89 [ _3 ])
                    (reg:SI 91 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 382 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 91 [ _5 ])
        (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
            (expr_list:REG_UNUSED (reg:SI 123)
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))
(insn 24 23 25 3 (set (reg:SI 92 [ _6 ])
        (reg:SI 122)) "function.c":891 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 25 24 26 3 (set (reg:SI 124)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":891 86 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (parallel [
            (set (reg:SI 93 [ _7 ])
                (plus:SI (reg:SI 92 [ _6 ])
                    (reg:SI 124)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":891 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 124)
        (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 92 [ _6 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
                    (nil))))))
(insn 27 26 28 3 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":891 85 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (set (mem:SI (plus:DI (reg/f:DI 125)
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])
        (reg:SI 93 [ _7 ])) "function.c":891 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125)
        (expr_list:REG_DEAD (reg:SI 93 [ _7 ])
            (nil))))
(insn 29 28 30 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":893 86 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":893 86 {*movsi_internal}
     (nil))
(call_insn 31 30 32 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("rand") [flags 0x41]  <function_decl 0x7f7cd0fe1600 rand>) [0 rand S1 A8])
            (const_int 0 [0]))) "function.c":894 700 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 32 31 33 3 (set (reg:SI 94 [ _8 ])
        (reg:SI 0 ax)) "function.c":894 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 33 32 34 3 (set (reg:SI 126)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":894 86 {*movsi_internal}
     (nil))
(insn 34 33 35 3 (parallel [
            (set (reg:SI 95 [ _9 ])
                (minus:SI (reg:SI 126)
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 277 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 126)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
                (nil)))))
(insn 35 34 36 3 (parallel [
            (set (reg:SI 96 [ _10 ])
                (plus:SI (reg:SI 95 [ _9 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 95 [ _9 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 3 (parallel [
            (set (reg:SI 128)
                (div:SI (reg:SI 94 [ _8 ])
                    (reg:SI 96 [ _10 ])))
            (set (reg:SI 127)
                (mod:SI (reg:SI 94 [ _8 ])
                    (reg:SI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 382 {*divmodsi4}
     (expr_list:REG_DEAD (reg:SI 96 [ _10 ])
        (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
            (expr_list:REG_UNUSED (reg:SI 128)
                (expr_list:REG_UNUSED (reg:CC 17 flags)
                    (nil))))))
(insn 37 36 38 3 (set (reg:SI 97 [ _11 ])
        (reg:SI 127)) "function.c":894 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(insn 38 37 39 3 (set (reg:SI 129)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":894 86 {*movsi_internal}
     (nil))
(insn 39 38 40 3 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 97 [ _11 ])
                    (reg:SI 129)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":894 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 129)
        (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:SI (reg:SI 97 [ _11 ])
                        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32]))
                    (nil))))))
(insn 40 39 41 3 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":894 85 {*movdi_internal}
     (nil))
(insn 41 40 42 3 (set (mem:SI (plus:DI (reg/f:DI 130)
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])
        (reg:SI 98 [ _12 ])) "function.c":894 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130)
        (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
            (nil))))
(insn 42 41 43 3 (set (reg/f:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 43 42 44 3 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 131)
                (const_int 16 [0x10])) [9 serwer_45(D)->mapa+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131)
        (nil)))
(insn 44 43 45 3 (set (reg/f:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 45 44 46 3 (set (reg:SI 100 [ _14 ])
        (mem:SI (plus:DI (reg/f:DI 132)
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])) "function.c":896 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132)
        (nil)))
(insn 46 45 47 3 (set (reg:DI 101 [ _15 ])
        (sign_extend:DI (reg:SI 100 [ _14 ]))) "function.c":896 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (nil)))
(insn 47 46 48 3 (parallel [
            (set (reg:DI 102 [ _16 ])
                (ashift:DI (reg:DI 101 [ _15 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":896 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 101 [ _15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 103 [ _17 ])
                (plus:DI (reg/f:DI 99 [ _13 ])
                    (reg:DI 102 [ _16 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":896 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 49 48 50 3 (set (reg/f:DI 104 [ _18 ])
        (mem/f:DI (reg/f:DI 103 [ _17 ]) [10 *_17+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
        (nil)))
(insn 50 49 51 3 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:SI 105 [ _19 ])
        (mem:SI (plus:DI (reg/f:DI 133)
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])) "function.c":896 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133)
        (nil)))
(insn 52 51 53 3 (set (reg:DI 106 [ _20 ])
        (sign_extend:DI (reg:SI 105 [ _19 ]))) "function.c":896 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 105 [ _19 ])
        (nil)))
(insn 53 52 54 3 (parallel [
            (set (reg/f:DI 107 [ _21 ])
                (plus:DI (reg/f:DI 104 [ _18 ])
                    (reg:DI 106 [ _20 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":896 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 106 [ _20 ])
        (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 54 53 55 3 (set (reg:QI 108 [ _22 ])
        (mem:QI (reg/f:DI 107 [ _21 ]) [0 *_21+0 S1 A8])) "function.c":896 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
        (nil)))
(insn 55 54 56 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 108 [ _22 ])
            (const_int 46 [0x2e]))) "function.c":896 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 108 [ _22 ])
        (nil)))
(jump_insn 56 55 57 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":896 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 92)
;;  succ:       4 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 110 111 134 135
(note 57 56 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 4 (set (reg/f:DI 134)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 134)
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])) "function.c":896 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134)
        (nil)))
(insn 60 59 61 4 (set (reg/f:DI 135)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (plus:DI (reg/f:DI 135)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135)
        (nil)))
(insn 62 61 63 4 (set (reg:SI 111 [ _25 ])
        (mem:SI (plus:DI (reg/f:DI 110 [ _24 ])
                (const_int 16 [0x10])) [3 _24->y_current+0 S4 A64])) "function.c":896 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
        (nil)))
(insn 63 62 64 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 109 [ _23 ])
            (reg:SI 111 [ _25 ]))) "function.c":896 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
        (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
            (nil))))
(jump_insn 64 63 65 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":896 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 92)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 113 114 136 137
(note 65 64 66 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 5 (set (reg/f:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:SI 112 [ _26 ])
        (mem:SI (plus:DI (reg/f:DI 136)
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])) "function.c":896 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136)
        (nil)))
(insn 68 67 69 5 (set (reg/f:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (nil))
(insn 69 68 70 5 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 137)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":896 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137)
        (nil)))
(insn 70 69 71 5 (set (reg:SI 114 [ _28 ])
        (mem:SI (plus:DI (reg/f:DI 113 [ _27 ])
                (const_int 12 [0xc])) [3 _27->x_current+0 S4 A32])) "function.c":896 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 71 70 72 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 112 [ _26 ])
            (reg:SI 114 [ _28 ]))) "function.c":896 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 114 [ _28 ])
        (expr_list:REG_DEAD (reg:SI 112 [ _26 ])
            (nil))))
(jump_insn 72 71 73 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":896 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 92)
;;  succ:       6 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 138 139
(note 73 72 74 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 6 (set (reg/f:DI 138)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 75 74 76 6 (set (reg:SI 115 [ _29 ])
        (mem:SI (plus:DI (reg/f:DI 138)
                (const_int 36068 [0x8ce4])) [3 serwer_45(D)->bestia.y+0 S4 A32])) "function.c":897 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138)
        (nil)))
(insn 76 75 77 6 (set (reg/f:DI 139)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 77 76 78 6 (set (reg/f:DI 116 [ _30 ])
        (mem/f:DI (plus:DI (reg/f:DI 139)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 139)
        (nil)))
(insn 78 77 79 6 (set (reg:SI 117 [ _31 ])
        (mem:SI (plus:DI (reg/f:DI 116 [ _30 ])
                (const_int 16 [0x10])) [3 _30->y_current+0 S4 A64])) "function.c":897 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
        (nil)))
(insn 79 78 80 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 115 [ _29 ])
            (reg:SI 117 [ _31 ]))) "function.c":897 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 117 [ _31 ])
        (expr_list:REG_DEAD (reg:SI 115 [ _29 ])
            (nil))))
(jump_insn 80 79 81 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "function.c":897 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 92)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 140 141
(note 81 80 82 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 7 (set (reg/f:DI 140)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 83 82 84 7 (set (reg:SI 118 [ _32 ])
        (mem:SI (plus:DI (reg/f:DI 140)
                (const_int 36064 [0x8ce0])) [3 serwer_45(D)->bestia.x+0 S4 A64])) "function.c":897 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140)
        (nil)))
(insn 84 83 85 7 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (nil))
(insn 85 84 86 7 (set (reg/f:DI 119 [ _33 ])
        (mem/f:DI (plus:DI (reg/f:DI 141)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":897 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))
(insn 86 85 87 7 (set (reg:SI 120 [ _34 ])
        (mem:SI (plus:DI (reg/f:DI 119 [ _33 ])
                (const_int 12 [0xc])) [3 _33->x_current+0 S4 A32])) "function.c":897 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ _33 ])
        (nil)))
(insn 87 86 88 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 118 [ _32 ])
            (reg:SI 120 [ _34 ]))) "function.c":897 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 120 [ _34 ])
        (expr_list:REG_DEAD (reg:SI 118 [ _32 ])
            (nil))))
(jump_insn 88 87 92 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 108)
            (pc))) "function.c":897 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 108)
;;  succ:       10
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 10, flags: (RTL)
;;  pred:       3
;;              4
;;              5
;;              6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 92 88 93 8 132 (nil) [4 uses])
(note 93 92 105 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 105 93 106 8 (set (pc)
        (label_ref 94)) "function.c":890 683 {jump}
     (nil)
 -> 94)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 106 105 108)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 8, next block 9, flags: (RTL)
;;  pred:       7
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 108 106 107 10 137 (nil) [1 uses])
(note 107 108 109 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 109 107 104 10 (const_int 0 [0]) "function.c":899 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 104 109 98 9 136 (nil) [0 uses])
(note 98 104 103 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 103 98 0 9 (const_int 0 [0]) "function.c":903 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function wizja1 (wizja1, funcdef_no=20, decl_uid=6244, cgraph_uid=20, symbol_order=23)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 38 n_edges 55 count 38 (    1)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
;;
;; Loop 1
;;  header 36, latch 35
;;  depth 1, outer 0
;;  nodes: 36 35 34 33 19 30 31 32 29 28 23 20 21 22 24 25 26 27
;;
;; Loop 2
;;  header 34, latch 33
;;  depth 2, outer 1
;;  nodes: 34 33 30 31 32 29 28 23 20 21 22 24 25 26 27
;;
;; Loop 3
;;  header 29, latch 28
;;  depth 3, outer 2
;;  nodes: 29 28 24 25 26 27
;; 2 succs { 3 4 }
;; 3 succs { 10 }
;; 4 succs { 5 9 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 10 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 11 12 }
;; 11 succs { 18 }
;; 12 succs { 13 17 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 16 18 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 36 }
;; 19 succs { 34 }
;; 20 succs { 21 23 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 29 }
;; 24 succs { 25 28 }
;; 25 succs { 26 28 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { 29 }
;; 29 succs { 24 30 }
;; 30 succs { 31 33 }
;; 31 succs { 32 33 }
;; 32 succs { 33 }
;; 33 succs { 34 }
;; 34 succs { 20 35 }
;; 35 succs { 36 }
;; 36 succs { 19 37 }
;; 37 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r165,l0) best AREG, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a4(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a7(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a17(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a18(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a19(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a23(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a32(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a33(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a39(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a41(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a45(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a46(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a47(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a48(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a49(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a50(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a51(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a56(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a57(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a58(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a61(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a63(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a65(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a66(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a67(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a68(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a69(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a70(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a71(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a75(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a76(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a77(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a78(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a79(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a80(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a81(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a83(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a84(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a85(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a86(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a87(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a89(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a92(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a93(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a94(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a95(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a97(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a98(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a99(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a100(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a101(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a102(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a103(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a104(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a105(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a106(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a107(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a108(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a109(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a110(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a111(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a112(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a113(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a114(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a115(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a116(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a117(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a118(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a119(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a120(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a121(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a122(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a123(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a124(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a125(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a126(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a127(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a128(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a129(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a130(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a131(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a132(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a133(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a134(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a135(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a136(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a137(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a138(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a139(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a140(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a141(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a142(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a143(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a144(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a145(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a146(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a147(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a148(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a149(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a150(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a151(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a152(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a153(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a154(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a155(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a156(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a157(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a158(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a159(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a160(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a161(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a162(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a163(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a164(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a165(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a166(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 327(l0): point = 0
   Insn 326(l0): point = 2
   Insn 322(l0): point = 4
   Insn 319(l0): point = 6
   Insn 318(l0): point = 8
   Insn 317(l0): point = 10
   Insn 316(l0): point = 12
   Insn 315(l0): point = 14
   Insn 314(l0): point = 16
   Insn 313(l0): point = 18
   Insn 312(l0): point = 20
   Insn 311(l0): point = 22
   Insn 310(l0): point = 24
   Insn 309(l0): point = 26
   Insn 308(l0): point = 28
   Insn 307(l0): point = 30
   Insn 339(l0): point = 33
   Insn 152(l0): point = 35
   Insn 151(l0): point = 37
   Insn 305(l0): point = 40
   Insn 304(l0): point = 42
   Insn 303(l0): point = 44
   Insn 299(l0): point = 47
   Insn 298(l0): point = 49
   Insn 297(l0): point = 51
   Insn 295(l0): point = 54
   Insn 294(l0): point = 56
   Insn 293(l0): point = 58
   Insn 289(l0): point = 61
   Insn 288(l0): point = 63
   Insn 265(l0): point = 66
   Insn 264(l0): point = 68
   Insn 263(l0): point = 70
   Insn 262(l0): point = 72
   Insn 261(l0): point = 74
   Insn 260(l0): point = 76
   Insn 258(l0): point = 79
   Insn 257(l0): point = 81
   Insn 255(l0): point = 83
   Insn 254(l0): point = 85
   Insn 253(l0): point = 87
   Insn 250(l0): point = 90
   Insn 217(l0): point = 93
   Insn 216(l0): point = 95
   Insn 215(l0): point = 97
   Insn 214(l0): point = 99
   Insn 213(l0): point = 101
   Insn 212(l0): point = 103
   Insn 211(l0): point = 105
   Insn 210(l0): point = 107
   Insn 226(l0): point = 110
   Insn 225(l0): point = 112
   Insn 224(l0): point = 114
   Insn 223(l0): point = 116
   Insn 222(l0): point = 118
   Insn 221(l0): point = 120
   Insn 220(l0): point = 122
   Insn 219(l0): point = 124
   Insn 234(l0): point = 127
   Insn 233(l0): point = 129
   Insn 232(l0): point = 131
   Insn 231(l0): point = 133
   Insn 230(l0): point = 135
   Insn 229(l0): point = 137
   Insn 228(l0): point = 139
   Insn 247(l0): point = 142
   Insn 246(l0): point = 144
   Insn 245(l0): point = 146
   Insn 244(l0): point = 148
   Insn 243(l0): point = 150
   Insn 242(l0): point = 152
   Insn 241(l0): point = 154
   Insn 240(l0): point = 156
   Insn 239(l0): point = 158
   Insn 238(l0): point = 160
   Insn 237(l0): point = 162
   Insn 236(l0): point = 164
   Insn 341(l0): point = 167
   Insn 206(l0): point = 169
   Insn 184(l0): point = 172
   Insn 183(l0): point = 174
   Insn 182(l0): point = 176
   Insn 181(l0): point = 178
   Insn 180(l0): point = 180
   Insn 179(l0): point = 182
   Insn 178(l0): point = 184
   Insn 177(l0): point = 186
   Insn 176(l0): point = 188
   Insn 175(l0): point = 190
   Insn 174(l0): point = 192
   Insn 173(l0): point = 194
   Insn 172(l0): point = 196
   Insn 171(l0): point = 198
   Insn 170(l0): point = 200
   Insn 169(l0): point = 202
   Insn 168(l0): point = 204
   Insn 167(l0): point = 206
   Insn 166(l0): point = 208
   Insn 165(l0): point = 210
   Insn 164(l0): point = 212
   Insn 163(l0): point = 214
   Insn 162(l0): point = 216
   Insn 161(l0): point = 218
   Insn 160(l0): point = 220
   Insn 159(l0): point = 222
   Insn 158(l0): point = 224
   Insn 157(l0): point = 226
   Insn 156(l0): point = 228
   Insn 190(l0): point = 231
   Insn 189(l0): point = 233
   Insn 188(l0): point = 235
   Insn 187(l0): point = 237
   Insn 186(l0): point = 239
   Insn 203(l0): point = 242
   Insn 202(l0): point = 244
   Insn 201(l0): point = 246
   Insn 200(l0): point = 248
   Insn 199(l0): point = 250
   Insn 198(l0): point = 252
   Insn 197(l0): point = 254
   Insn 196(l0): point = 256
   Insn 195(l0): point = 258
   Insn 194(l0): point = 260
   Insn 193(l0): point = 262
   Insn 192(l0): point = 264
   Insn 272(l0): point = 267
   Insn 271(l0): point = 269
   Insn 270(l0): point = 271
   Insn 269(l0): point = 273
   Insn 268(l0): point = 275
   Insn 267(l0): point = 277
   Insn 285(l0): point = 280
   Insn 284(l0): point = 282
   Insn 283(l0): point = 284
   Insn 282(l0): point = 286
   Insn 281(l0): point = 288
   Insn 280(l0): point = 290
   Insn 279(l0): point = 292
   Insn 278(l0): point = 294
   Insn 277(l0): point = 296
   Insn 276(l0): point = 298
   Insn 275(l0): point = 300
   Insn 274(l0): point = 302
   Insn 337(l0): point = 305
   Insn 147(l0): point = 307
   Insn 146(l0): point = 309
   Insn 143(l0): point = 312
   Insn 142(l0): point = 314
   Insn 141(l0): point = 316
   Insn 140(l0): point = 318
   Insn 139(l0): point = 320
   Insn 138(l0): point = 322
   Insn 137(l0): point = 324
   Insn 136(l0): point = 326
   Insn 135(l0): point = 328
   Insn 134(l0): point = 330
   Insn 133(l0): point = 332
   Insn 132(l0): point = 334
   Insn 131(l0): point = 336
   Insn 335(l0): point = 339
   Insn 124(l0): point = 341
   Insn 122(l0): point = 344
   Insn 121(l0): point = 346
   Insn 120(l0): point = 348
   Insn 119(l0): point = 350
   Insn 118(l0): point = 352
   Insn 117(l0): point = 354
   Insn 114(l0): point = 357
   Insn 112(l0): point = 360
   Insn 111(l0): point = 362
   Insn 110(l0): point = 364
   Insn 109(l0): point = 366
   Insn 108(l0): point = 368
   Insn 107(l0): point = 370
   Insn 106(l0): point = 372
   Insn 105(l0): point = 374
   Insn 103(l0): point = 377
   Insn 102(l0): point = 379
   Insn 101(l0): point = 381
   Insn 100(l0): point = 383
   Insn 99(l0): point = 385
   Insn 98(l0): point = 387
   Insn 333(l0): point = 390
   Insn 93(l0): point = 392
   Insn 92(l0): point = 394
   Insn 91(l0): point = 396
   Insn 90(l0): point = 398
   Insn 89(l0): point = 400
   Insn 88(l0): point = 402
   Insn 87(l0): point = 404
   Insn 85(l0): point = 407
   Insn 84(l0): point = 409
   Insn 83(l0): point = 411
   Insn 82(l0): point = 413
   Insn 81(l0): point = 415
   Insn 80(l0): point = 417
   Insn 77(l0): point = 420
   Insn 76(l0): point = 422
   Insn 75(l0): point = 424
   Insn 74(l0): point = 426
   Insn 73(l0): point = 428
   Insn 72(l0): point = 430
   Insn 71(l0): point = 432
   Insn 70(l0): point = 434
   Insn 69(l0): point = 436
   Insn 68(l0): point = 438
   Insn 67(l0): point = 440
   Insn 66(l0): point = 442
   Insn 65(l0): point = 444
   Insn 331(l0): point = 447
   Insn 58(l0): point = 449
   Insn 56(l0): point = 452
   Insn 55(l0): point = 454
   Insn 54(l0): point = 456
   Insn 53(l0): point = 458
   Insn 52(l0): point = 460
   Insn 51(l0): point = 462
   Insn 48(l0): point = 465
   Insn 46(l0): point = 468
   Insn 45(l0): point = 470
   Insn 44(l0): point = 472
   Insn 43(l0): point = 474
   Insn 42(l0): point = 476
   Insn 41(l0): point = 478
   Insn 40(l0): point = 480
   Insn 39(l0): point = 482
   Insn 37(l0): point = 485
   Insn 36(l0): point = 487
   Insn 35(l0): point = 489
   Insn 34(l0): point = 491
   Insn 33(l0): point = 493
   Insn 32(l0): point = 495
   Insn 329(l0): point = 498
   Insn 27(l0): point = 500
   Insn 26(l0): point = 502
   Insn 25(l0): point = 504
   Insn 24(l0): point = 506
   Insn 23(l0): point = 508
   Insn 22(l0): point = 510
   Insn 21(l0): point = 512
   Insn 19(l0): point = 515
   Insn 18(l0): point = 517
   Insn 17(l0): point = 519
   Insn 16(l0): point = 521
   Insn 15(l0): point = 523
   Insn 14(l0): point = 525
   Insn 13(l0): point = 527
   Insn 12(l0): point = 529
   Insn 11(l0): point = 531
   Insn 10(l0): point = 533
   Insn 9(l0): point = 535
   Insn 8(l0): point = 537
   Insn 7(l0): point = 539
   Insn 6(l0): point = 541
   Insn 2(l0): point = 543
 a0(r165): [3..4]
 a1(r164): [5..6]
 a2(r253): [9..10]
 a3(r252): [11..12]
 a4(r246): [13..22]
 a5(r251): [13..14]
 a6(r250): [15..16]
 a7(r163): [15..26]
 a8(r248): [17..18]
 a9(r249): [19..20]
 a10(r247): [23..24]
 a11(r162): [27..28]
 a12(r245): [29..30]
 a13(r244): [43..44]
 a14(r243): [57..58]
 a15(r242): [281..282]
 a16(r241): [283..284]
 a17(r235): [285..294]
 a18(r240): [285..286]
 a19(r239): [287..288]
 a20(r161): [287..298]
 a21(r237): [289..290]
 a22(r238): [291..292]
 a23(r236): [295..296]
 a24(r160): [299..300]
 a25(r234): [301..302]
 a26(r159): [270..271]
 a27(r158): [272..273]
 a28(r157): [274..275]
 a29(r233): [276..277]
 a30(r156): [69..70]
 a31(r155): [71..72]
 a32(r154): [73..74]
 a33(r232): [75..76]
 a34(r153): [82..83]
 a35(r152): [84..85]
 a36(r231): [86..87]
 a37(r230): [143..144]
 a38(r229): [145..146]
 a39(r223): [147..156]
 a40(r228): [147..148]
 a41(r227): [149..150]
 a42(r151): [149..160]
 a43(r225): [151..152]
 a44(r226): [153..154]
 a45(r224): [157..158]
 a46(r150): [161..162]
 a47(r222): [163..164]
 a48(r149): [130..131]
 a49(r148): [132..137]
 a50(r220): [132..133]
 a51(r221): [134..135]
 a52(r219): [138..139]
 a53(r147): [113..114]
 a54(r146): [115..122]
 a55(r218): [115..116]
 a56(r216): [117..118]
 a57(r217): [119..120]
 a58(r215): [123..124]
 a59(r145): [96..97]
 a60(r144): [98..105]
 a61(r214): [98..99]
 a62(r212): [100..101]
 a63(r213): [102..103]
 a64(r211): [106..107]
 a65(r210): [243..244]
 a66(r209): [245..246]
 a67(r203): [247..256]
 a68(r208): [247..248]
 a69(r207): [249..250]
 a70(r143): [249..260]
 a71(r205): [251..252]
 a72(r206): [253..254]
 a73(r204): [257..258]
 a74(r142): [261..262]
 a75(r202): [263..264]
 a76(r141): [234..235]
 a77(r140): [236..237]
 a78(r201): [238..239]
 a79(r139): [175..176]
 a80(r138): [177..178]
 a81(r200): [179..180]
 a82(r199): [183..184]
 a83(r137): [183..200]
 a84(r198): [185..186]
 a85(r192): [187..196]
 a86(r197): [187..188]
 a87(r196): [189..190]
 a88(r136): [189..202]
 a89(r194): [191..192]
 a90(r195): [193..194]
 a91(r193): [197..198]
 a92(r134): [201..208]
 a93(r135): [203..204]
 a94(r191): [205..206]
 a95(r133): [209..210]
 a96(r132): [209..214]
 a97(r190): [211..212]
 a98(r131): [215..216]
 a99(r130): [217..218]
 a100(r128): [217..224]
 a101(r129): [219..220]
 a102(r189): [221..222]
 a103(r127): [225..226]
 a104(r188): [227..228]
 a105(r187): [36..37]
 a106(r186): [308..309]
 a107(r185): [315..316]
 a108(r126): [317..318]
 a109(r125): [319..320]
 a110(r124): [321..322]
 a111(r184): [323..324]
 a112(r183): [327..328]
 a113(r123): [329..330]
 a114(r122): [331..332]
 a115(r121): [333..334]
 a116(r182): [335..336]
 a117(r120): [347..348]
 a118(r119): [349..350]
 a119(r118): [351..352]
 a120(r181): [353..354]
 a121(r117): [363..364]
 a122(r116): [365..366]
 a123(r115): [367..368]
 a124(r180): [369..370]
 a125(r114): [380..381]
 a126(r113): [382..383]
 a127(r112): [384..385]
 a128(r179): [386..387]
 a129(r178): [393..394]
 a130(r111): [395..396]
 a131(r110): [397..398]
 a132(r177): [399..400]
 a133(r109): [410..411]
 a134(r108): [412..413]
 a135(r107): [414..415]
 a136(r176): [416..417]
 a137(r175): [423..424]
 a138(r106): [425..426]
 a139(r105): [427..428]
 a140(r104): [429..430]
 a141(r174): [431..432]
 a142(r173): [435..436]
 a143(r103): [437..438]
 a144(r102): [439..440]
 a145(r101): [441..442]
 a146(r172): [443..444]
 a147(r100): [455..456]
 a148(r99): [457..458]
 a149(r98): [459..460]
 a150(r171): [461..462]
 a151(r97): [471..472]
 a152(r96): [473..474]
 a153(r95): [475..476]
 a154(r170): [477..478]
 a155(r94): [488..489]
 a156(r93): [490..491]
 a157(r92): [492..493]
 a158(r169): [494..495]
 a159(r168): [501..502]
 a160(r91): [503..504]
 a161(r90): [505..506]
 a162(r167): [507..508]
 a163(r89): [518..519]
 a164(r88): [520..521]
 a165(r87): [522..523]
 a166(r166): [524..525]
Compressing live ranges: from 546 to 302 - 55%
Ranges after the compression:
 a0(r165): [0..1]
 a1(r164): [2..3]
 a2(r253): [4..5]
 a3(r252): [6..7]
 a4(r246): [8..15]
 a5(r251): [8..9]
 a6(r250): [10..11]
 a7(r163): [10..17]
 a8(r248): [12..13]
 a9(r249): [14..15]
 a10(r247): [16..17]
 a11(r162): [18..19]
 a12(r245): [20..21]
 a13(r244): [24..25]
 a14(r243): [26..27]
 a15(r242): [162..163]
 a16(r241): [164..165]
 a17(r235): [166..173]
 a18(r240): [166..167]
 a19(r239): [168..169]
 a20(r161): [168..175]
 a21(r237): [170..171]
 a22(r238): [172..173]
 a23(r236): [174..175]
 a24(r160): [176..177]
 a25(r234): [178..179]
 a26(r159): [154..155]
 a27(r158): [156..157]
 a28(r157): [158..159]
 a29(r233): [160..161]
 a30(r156): [28..29]
 a31(r155): [30..31]
 a32(r154): [32..33]
 a33(r232): [34..35]
 a34(r153): [36..37]
 a35(r152): [38..39]
 a36(r231): [40..41]
 a37(r230): [70..71]
 a38(r229): [72..73]
 a39(r223): [74..81]
 a40(r228): [74..75]
 a41(r227): [76..77]
 a42(r151): [76..83]
 a43(r225): [78..79]
 a44(r226): [80..81]
 a45(r224): [82..83]
 a46(r150): [84..85]
 a47(r222): [86..87]
 a48(r149): [62..63]
 a49(r148): [64..67]
 a50(r220): [64..65]
 a51(r221): [66..67]
 a52(r219): [68..69]
 a53(r147): [52..53]
 a54(r146): [54..59]
 a55(r218): [54..55]
 a56(r216): [56..57]
 a57(r217): [58..59]
 a58(r215): [60..61]
 a59(r145): [42..43]
 a60(r144): [44..49]
 a61(r214): [44..45]
 a62(r212): [46..47]
 a63(r213): [48..49]
 a64(r211): [50..51]
 a65(r210): [136..137]
 a66(r209): [138..139]
 a67(r203): [140..147]
 a68(r208): [140..141]
 a69(r207): [142..143]
 a70(r143): [142..149]
 a71(r205): [144..145]
 a72(r206): [146..147]
 a73(r204): [148..149]
 a74(r142): [150..151]
 a75(r202): [152..153]
 a76(r141): [130..131]
 a77(r140): [132..133]
 a78(r201): [134..135]
 a79(r139): [88..89]
 a80(r138): [90..91]
 a81(r200): [92..93]
 a82(r199): [94..95]
 a83(r137): [94..107]
 a84(r198): [96..97]
 a85(r192): [98..105]
 a86(r197): [98..99]
 a87(r196): [100..101]
 a88(r136): [100..109]
 a89(r194): [102..103]
 a90(r195): [104..105]
 a91(r193): [106..107]
 a92(r134): [108..113]
 a93(r135): [110..111]
 a94(r191): [112..113]
 a95(r133): [114..115]
 a96(r132): [114..117]
 a97(r190): [116..117]
 a98(r131): [118..119]
 a99(r130): [120..121]
 a100(r128): [120..125]
 a101(r129): [122..123]
 a102(r189): [124..125]
 a103(r127): [126..127]
 a104(r188): [128..129]
 a105(r187): [22..23]
 a106(r186): [180..181]
 a107(r185): [182..183]
 a108(r126): [184..185]
 a109(r125): [186..187]
 a110(r124): [188..189]
 a111(r184): [190..191]
 a112(r183): [192..193]
 a113(r123): [194..195]
 a114(r122): [196..197]
 a115(r121): [198..199]
 a116(r182): [200..201]
 a117(r120): [202..203]
 a118(r119): [204..205]
 a119(r118): [206..207]
 a120(r181): [208..209]
 a121(r117): [210..211]
 a122(r116): [212..213]
 a123(r115): [214..215]
 a124(r180): [216..217]
 a125(r114): [218..219]
 a126(r113): [220..221]
 a127(r112): [222..223]
 a128(r179): [224..225]
 a129(r178): [226..227]
 a130(r111): [228..229]
 a131(r110): [230..231]
 a132(r177): [232..233]
 a133(r109): [234..235]
 a134(r108): [236..237]
 a135(r107): [238..239]
 a136(r176): [240..241]
 a137(r175): [242..243]
 a138(r106): [244..245]
 a139(r105): [246..247]
 a140(r104): [248..249]
 a141(r174): [250..251]
 a142(r173): [252..253]
 a143(r103): [254..255]
 a144(r102): [256..257]
 a145(r101): [258..259]
 a146(r172): [260..261]
 a147(r100): [262..263]
 a148(r99): [264..265]
 a149(r98): [266..267]
 a150(r171): [268..269]
 a151(r97): [270..271]
 a152(r96): [272..273]
 a153(r95): [274..275]
 a154(r170): [276..277]
 a155(r94): [278..279]
 a156(r93): [280..281]
 a157(r92): [282..283]
 a158(r169): [284..285]
 a159(r168): [286..287]
 a160(r91): [288..289]
 a161(r90): [290..291]
 a162(r167): [292..293]
 a163(r89): [294..295]
 a164(r88): [296..297]
 a165(r87): [298..299]
 a166(r166): [300..301]
  pref0:a0(r165)<-hr0@500
  regions=1, blocks=38, points=302
    allocnos=167 (big 0), copies=0, conflicts=0, ranges=167
Disposition:
  165:r87  l0     0  164:r88  l0     0  163:r89  l0     0  161:r90  l0     0
  160:r91  l0     0  157:r92  l0     0  156:r93  l0     0  155:r94  l0     0
  153:r95  l0     0  152:r96  l0     0  151:r97  l0     0  149:r98  l0     0
  148:r99  l0     0  147:r100 l0     0  145:r101 l0     0  144:r102 l0     0
  143:r103 l0     0  140:r104 l0     0  139:r105 l0     0  138:r106 l0     0
  135:r107 l0     0  134:r108 l0     0  133:r109 l0     0  131:r110 l0     0
  130:r111 l0     0  127:r112 l0     0  126:r113 l0     0  125:r114 l0     0
  123:r115 l0     0  122:r116 l0     0  121:r117 l0     0  119:r118 l0     0
  118:r119 l0     0  117:r120 l0     0  115:r121 l0     0  114:r122 l0     0
  113:r123 l0     0  110:r124 l0     0  109:r125 l0     0  108:r126 l0     0
  103:r127 l0     0  100:r128 l0     0  101:r129 l0     1   99:r130 l0     1
   98:r131 l0     0   96:r132 l0     1   95:r133 l0     0   92:r134 l0     1
   93:r135 l0     0   88:r136 l0     4   83:r137 l0     0   80:r138 l0     0
   79:r139 l0     0   77:r140 l0     0   76:r141 l0     0   74:r142 l0     0
   70:r143 l0     2   60:r144 l0     0   59:r145 l0     0   54:r146 l0     0
   53:r147 l0     0   49:r148 l0     0   48:r149 l0     0   46:r150 l0     0
   42:r151 l0     2   35:r152 l0     0   34:r153 l0     0   32:r154 l0     0
   31:r155 l0     0   30:r156 l0     0   28:r157 l0     0   27:r158 l0     0
   26:r159 l0     0   24:r160 l0     0   20:r161 l0     2   11:r162 l0     0
    7:r163 l0     2    1:r164 l0     0    0:r165 l0     0  166:r166 l0     0
  162:r167 l0     0  159:r168 l0     0  158:r169 l0     0  154:r170 l0     0
  150:r171 l0     0  146:r172 l0     0  142:r173 l0     0  141:r174 l0     0
  137:r175 l0     0  136:r176 l0     0  132:r177 l0     0  129:r178 l0     0
  128:r179 l0     0  124:r180 l0     0  120:r181 l0     0  116:r182 l0     0
  112:r183 l0     0  111:r184 l0     0  107:r185 l0     0  106:r186 l0     0
  105:r187 l0     0  104:r188 l0     0  102:r189 l0     1   97:r190 l0     0
   94:r191 l0     0   85:r192 l0     1   91:r193 l0     1   89:r194 l0     2
   90:r195 l0     2   87:r196 l0     2   86:r197 l0     2   84:r198 l0     1
   82:r199 l0     1   81:r200 l0     0   78:r201 l0     0   75:r202 l0     0
   67:r203 l0     0   73:r204 l0     0   71:r205 l0     1   72:r206 l0     1
   69:r207 l0     1   68:r208 l0     1   66:r209 l0     0   65:r210 l0     0
   64:r211 l0     0   62:r212 l0     1   63:r213 l0     1   61:r214 l0     1
   58:r215 l0     0   56:r216 l0     1   57:r217 l0     1   55:r218 l0     1
   52:r219 l0     0   50:r220 l0     1   51:r221 l0     1   47:r222 l0     0
   39:r223 l0     0   45:r224 l0     0   43:r225 l0     1   44:r226 l0     1
   41:r227 l0     1   40:r228 l0     1   38:r229 l0     0   37:r230 l0     0
   36:r231 l0     0   33:r232 l0     0   29:r233 l0     0   25:r234 l0     0
   17:r235 l0     0   23:r236 l0     0   21:r237 l0     1   22:r238 l0     1
   19:r239 l0     1   18:r240 l0     1   16:r241 l0     0   15:r242 l0     0
   14:r243 l0     0   13:r244 l0     0   12:r245 l0     0    4:r246 l0     0
   10:r247 l0     0    8:r248 l0     1    9:r249 l0     1    6:r250 l0     1
    5:r251 l0     1    3:r252 l0     0    2:r253 l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


wizja1

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,37u} r7={1d,37u} r16={1d,36u} r17={52d,18u} r20={1d,136u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} 
;;    total ref usage 673{239d,434u,0e} in 255{255 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 166
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])
        (reg:DI 5 di [ user ])) "function.c":907 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ user ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
        (const_int 0 [0])) "function.c":908 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":909 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":910 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":911 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":912 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":913 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":914 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":915 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":917 85 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (reg/f:DI 166) [12 user_109(D)->serwer+0 S8 A64])) "function.c":917 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 87 [ _1 ])
                (const_int 32 [0x20])) [14 _1->player1+0 S8 A64])) "function.c":917 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":917 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 18 17 19 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ _3 ])
            (const_int 1 [0x1]))) "function.c":917 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "function.c":917 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90 91 167 168
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":919 86 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":920 86 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":921 85 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (reg/f:DI 167) [12 user_109(D)->serwer+0 S8 A64])) "function.c":921 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 25 24 26 3 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 90 [ _4 ])
                (const_int 32 [0x20])) [14 _4->player1+0 S8 A64])) "function.c":921 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
        (nil)))
(insn 26 25 27 3 (set (reg:SI 168)
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":921 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 27 26 329 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 168)) "function.c":921 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 168)
        (nil)))
(jump_insn 329 27 330 3 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 330 329 30)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 169
(code_label 30 330 31 4 139 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":923 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 92 [ _6 ])
        (mem/f:DI (reg/f:DI 169) [12 user_109(D)->serwer+0 S8 A64])) "function.c":923 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 34 33 35 4 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 92 [ _6 ])
                (const_int 32 [0x20])) [14 _6->player1+0 S8 A64])) "function.c":923 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _6 ])
        (nil)))
(insn 35 34 36 4 (set (reg:SI 94 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 93 [ _7 ])
                (const_int 16 [0x10])) [3 _7->y_current+0 S4 A64])) "function.c":923 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
        (nil)))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 94 [ _8 ])
            (const_int 17 [0x11]))) "function.c":923 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
        (nil)))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "function.c":923 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 63)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 170
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 16 [0x10])) "function.c":925 86 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 20 [0x14])) "function.c":926 86 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":927 85 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (reg/f:DI 170) [12 user_109(D)->serwer+0 S8 A64])) "function.c":927 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (nil)))
(insn 43 42 44 5 (set (reg/f:DI 96 [ _10 ])
        (mem/f:DI (plus:DI (reg/f:DI 95 [ _9 ])
                (const_int 32 [0x20])) [14 _9->player1+0 S8 A64])) "function.c":927 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
        (nil)))
(insn 44 43 45 5 (set (reg:SI 97 [ _11 ])
        (mem:SI (plus:DI (reg/f:DI 96 [ _10 ])
                (const_int 16 [0x10])) [3 _10->y_current+0 S4 A64])) "function.c":927 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _10 ])
        (nil)))
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 97 [ _11 ])
            (const_int 18 [0x12]))) "function.c":927 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
        (nil)))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "function.c":927 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 49)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":929 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 171
(code_label 49 48 50 7 142 (nil) [1 uses])
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 7 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":931 85 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg/f:DI 98 [ _12 ])
        (mem/f:DI (reg/f:DI 171) [12 user_109(D)->serwer+0 S8 A64])) "function.c":931 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (nil)))
(insn 53 52 54 7 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 98 [ _12 ])
                (const_int 32 [0x20])) [14 _12->player1+0 S8 A64])) "function.c":931 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
        (nil)))
(insn 54 53 55 7 (set (reg:SI 100 [ _14 ])
        (mem:SI (plus:DI (reg/f:DI 99 [ _13 ])
                (const_int 16 [0x10])) [3 _13->y_current+0 S4 A64])) "function.c":931 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
        (nil)))
(insn 55 54 56 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ _14 ])
            (const_int 19 [0x13]))) "function.c":931 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (nil)))
(jump_insn 56 55 57 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 78)
            (pc))) "function.c":931 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 78)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 331 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 3 [0x3])) "function.c":933 86 {*movsi_internal}
     (nil))
(jump_insn 331 58 332 8 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 332 331 63)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 172 173 174 175
(code_label 63 332 64 9 141 (nil) [1 uses])
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg/f:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":938 85 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (reg/f:DI 172) [12 user_109(D)->serwer+0 S8 A64])) "function.c":938 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172)
        (nil)))
(insn 67 66 68 9 (set (reg/f:DI 102 [ _16 ])
        (mem/f:DI (plus:DI (reg/f:DI 101 [ _15 ])
                (const_int 32 [0x20])) [14 _15->player1+0 S8 A64])) "function.c":938 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 68 67 69 9 (set (reg:SI 103 [ _17 ])
        (mem:SI (plus:DI (reg/f:DI 102 [ _16 ])
                (const_int 16 [0x10])) [3 _16->y_current+0 S4 A64])) "function.c":938 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _16 ])
        (nil)))
(insn 69 68 70 9 (parallel [
            (set (reg:SI 173)
                (plus:SI (reg:SI 103 [ _17 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":938 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 103 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (reg:SI 173)) "function.c":938 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(insn 71 70 72 9 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":939 85 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg/f:DI 104 [ _18 ])
        (mem/f:DI (reg/f:DI 174) [12 user_109(D)->serwer+0 S8 A64])) "function.c":939 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (nil)))
(insn 73 72 74 9 (set (reg/f:DI 105 [ _19 ])
        (mem/f:DI (plus:DI (reg/f:DI 104 [ _18 ])
                (const_int 32 [0x20])) [14 _18->player1+0 S8 A64])) "function.c":939 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
        (nil)))
(insn 74 73 75 9 (set (reg:SI 106 [ _20 ])
        (mem:SI (plus:DI (reg/f:DI 105 [ _19 ])
                (const_int 16 [0x10])) [3 _19->y_current+0 S4 A64])) "function.c":939 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _19 ])
        (nil)))
(insn 75 74 76 9 (parallel [
            (set (reg:SI 175)
                (plus:SI (reg:SI 106 [ _20 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":939 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 106 [ _20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 76 75 77 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (reg:SI 175)) "function.c":939 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 175)
        (nil)))
(insn 77 76 78 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":940 86 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       7
;;              3 [always] 
;;              9 (FALLTHRU)
;;              8 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 176
(code_label 78 77 79 10 140 (nil) [3 uses])
(note 79 78 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 10 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":943 85 {*movdi_internal}
     (nil))
(insn 81 80 82 10 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (reg/f:DI 176) [12 user_109(D)->serwer+0 S8 A64])) "function.c":943 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (nil)))
(insn 82 81 83 10 (set (reg/f:DI 108 [ _22 ])
        (mem/f:DI (plus:DI (reg/f:DI 107 [ _21 ])
                (const_int 32 [0x20])) [14 _21->player1+0 S8 A64])) "function.c":943 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
        (nil)))
(insn 83 82 84 10 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 108 [ _22 ])
                (const_int 12 [0xc])) [3 _22->x_current+0 S4 A32])) "function.c":943 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 84 83 85 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 109 [ _23 ])
            (const_int 1 [0x1]))) "function.c":943 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (nil)))
(jump_insn 85 84 86 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "function.c":943 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 96)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110 111 177 178
(note 86 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":945 86 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":946 86 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":947 85 {*movdi_internal}
     (nil))
(insn 90 89 91 11 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (reg/f:DI 177) [12 user_109(D)->serwer+0 S8 A64])) "function.c":947 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 91 90 92 11 (set (reg/f:DI 111 [ _25 ])
        (mem/f:DI (plus:DI (reg/f:DI 110 [ _24 ])
                (const_int 32 [0x20])) [14 _24->player1+0 S8 A64])) "function.c":947 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
        (nil)))
(insn 92 91 93 11 (set (reg:SI 178)
        (mem:SI (plus:DI (reg/f:DI 111 [ _25 ])
                (const_int 12 [0xc])) [3 _25->x_current+0 S4 A32])) "function.c":947 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111 [ _25 ])
        (nil)))
(insn 93 92 333 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (reg:SI 178)) "function.c":947 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 178)
        (nil)))
(jump_insn 333 93 334 11 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 334 333 96)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 113 114 179
(code_label 96 334 97 12 144 (nil) [1 uses])
(note 97 96 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 12 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":949 85 {*movdi_internal}
     (nil))
(insn 99 98 100 12 (set (reg/f:DI 112 [ _26 ])
        (mem/f:DI (reg/f:DI 179) [12 user_109(D)->serwer+0 S8 A64])) "function.c":949 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 100 99 101 12 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 112 [ _26 ])
                (const_int 32 [0x20])) [14 _26->player1+0 S8 A64])) "function.c":949 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ _26 ])
        (nil)))
(insn 101 100 102 12 (set (reg:SI 114 [ _28 ])
        (mem:SI (plus:DI (reg/f:DI 113 [ _27 ])
                (const_int 12 [0xc])) [3 _27->x_current+0 S4 A32])) "function.c":949 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 102 101 103 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 114 [ _28 ])
            (const_int 27 [0x1b]))) "function.c":949 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 114 [ _28 ])
        (nil)))
(jump_insn 103 102 104 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":949 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 129)
;;  succ:       13 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 180
(note 104 103 105 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 26 [0x1a])) "function.c":951 86 {*movsi_internal}
     (nil))
(insn 106 105 107 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 30 [0x1e])) "function.c":952 86 {*movsi_internal}
     (nil))
(insn 107 106 108 13 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":953 85 {*movdi_internal}
     (nil))
(insn 108 107 109 13 (set (reg/f:DI 115 [ _29 ])
        (mem/f:DI (reg/f:DI 180) [12 user_109(D)->serwer+0 S8 A64])) "function.c":953 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180)
        (nil)))
(insn 109 108 110 13 (set (reg/f:DI 116 [ _30 ])
        (mem/f:DI (plus:DI (reg/f:DI 115 [ _29 ])
                (const_int 32 [0x20])) [14 _29->player1+0 S8 A64])) "function.c":953 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
        (nil)))
(insn 110 109 111 13 (set (reg:SI 117 [ _31 ])
        (mem:SI (plus:DI (reg/f:DI 116 [ _30 ])
                (const_int 12 [0xc])) [3 _30->x_current+0 S4 A32])) "function.c":953 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
        (nil)))
(insn 111 110 112 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 117 [ _31 ])
            (const_int 28 [0x1c]))) "function.c":953 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 117 [ _31 ])
        (nil)))
(jump_insn 112 111 113 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":953 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 115)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 14 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":955 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 181
(code_label 115 114 116 15 147 (nil) [1 uses])
(note 116 115 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 15 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":957 85 {*movdi_internal}
     (nil))
(insn 118 117 119 15 (set (reg/f:DI 118 [ _32 ])
        (mem/f:DI (reg/f:DI 181) [12 user_109(D)->serwer+0 S8 A64])) "function.c":957 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (nil)))
(insn 119 118 120 15 (set (reg/f:DI 119 [ _33 ])
        (mem/f:DI (plus:DI (reg/f:DI 118 [ _32 ])
                (const_int 32 [0x20])) [14 _32->player1+0 S8 A64])) "function.c":957 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ _32 ])
        (nil)))
(insn 120 119 121 15 (set (reg:SI 120 [ _34 ])
        (mem:SI (plus:DI (reg/f:DI 119 [ _33 ])
                (const_int 12 [0xc])) [3 _33->x_current+0 S4 A32])) "function.c":957 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ _33 ])
        (nil)))
(insn 121 120 122 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 120 [ _34 ])
            (const_int 29 [0x1d]))) "function.c":957 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 120 [ _34 ])
        (nil)))
(jump_insn 122 121 123 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) "function.c":957 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 144)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 123 122 124 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 335 16 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 3 [0x3])) "function.c":959 86 {*movsi_internal}
     (nil))
(jump_insn 335 124 336 16 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 336 335 129)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       12
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 124 125 126 182 183 184 185
(code_label 129 336 130 17 146 (nil) [1 uses])
(note 130 129 131 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 17 (set (reg/f:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":964 85 {*movdi_internal}
     (nil))
(insn 132 131 133 17 (set (reg/f:DI 121 [ _35 ])
        (mem/f:DI (reg/f:DI 182) [12 user_109(D)->serwer+0 S8 A64])) "function.c":964 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 182)
        (nil)))
(insn 133 132 134 17 (set (reg/f:DI 122 [ _36 ])
        (mem/f:DI (plus:DI (reg/f:DI 121 [ _35 ])
                (const_int 32 [0x20])) [14 _35->player1+0 S8 A64])) "function.c":964 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121 [ _35 ])
        (nil)))
(insn 134 133 135 17 (set (reg:SI 123 [ _37 ])
        (mem:SI (plus:DI (reg/f:DI 122 [ _36 ])
                (const_int 12 [0xc])) [3 _36->x_current+0 S4 A32])) "function.c":964 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122 [ _36 ])
        (nil)))
(insn 135 134 136 17 (parallel [
            (set (reg:SI 183)
                (plus:SI (reg:SI 123 [ _37 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":964 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 123 [ _37 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 136 135 137 17 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (reg:SI 183)) "function.c":964 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 183)
        (nil)))
(insn 137 136 138 17 (set (reg/f:DI 184)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":965 85 {*movdi_internal}
     (nil))
(insn 138 137 139 17 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (reg/f:DI 184) [12 user_109(D)->serwer+0 S8 A64])) "function.c":965 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 184)
        (nil)))
(insn 139 138 140 17 (set (reg/f:DI 125 [ _39 ])
        (mem/f:DI (plus:DI (reg/f:DI 124 [ _38 ])
                (const_int 32 [0x20])) [14 _38->player1+0 S8 A64])) "function.c":965 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
        (nil)))
(insn 140 139 141 17 (set (reg:SI 126 [ _40 ])
        (mem:SI (plus:DI (reg/f:DI 125 [ _39 ])
                (const_int 12 [0xc])) [3 _39->x_current+0 S4 A32])) "function.c":965 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ _39 ])
        (nil)))
(insn 141 140 142 17 (parallel [
            (set (reg:SI 185)
                (plus:SI (reg:SI 126 [ _40 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":965 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 126 [ _40 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 142 141 143 17 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (reg:SI 185)) "function.c":965 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 185)
        (nil)))
(insn 143 142 144 17 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":966 86 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       15
;;              11 [always] 
;;              17 (FALLTHRU)
;;              16 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 186
(code_label 144 143 145 18 145 (nil) [3 uses])
(note 145 144 146 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 18 (set (reg:SI 186)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])) "function.c":969 86 {*movsi_internal}
     (nil))
(insn 147 146 337 18 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
        (reg:SI 186)) "function.c":969 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(jump_insn 337 147 338 18 (set (pc)
        (label_ref 300)) "function.c":969 683 {jump}
     (nil)
 -> 300)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 338 337 302)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       36
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 187
(code_label 302 338 150 19 157 (nil) [1 uses])
(note 150 302 151 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 19 (set (reg:SI 187)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])) "function.c":971 86 {*movsi_internal}
     (nil))
(insn 152 151 339 19 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
        (reg:SI 187)) "function.c":971 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(jump_insn 339 152 340 19 (set (pc)
        (label_ref 290)) "function.c":971 683 {jump}
     (nil)
 -> 290)
;;  succ:       34 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 340 339 292)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       34
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 130 131 132 133 134 135 136 137 138 139 188 189 190 191 192 193 194 195 196 197 198 199 200
(code_label 292 340 155 20 156 (nil) [1 uses])
(note 155 292 156 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 20 (set (reg/f:DI 188)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 157 156 158 20 (set (reg/f:DI 127 [ _41 ])
        (mem/f:DI (reg/f:DI 188) [12 user_109(D)->serwer+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 188)
        (nil)))
(insn 158 157 159 20 (set (reg/f:DI 128 [ _42 ])
        (mem/f:DI (plus:DI (reg/f:DI 127 [ _41 ])
                (const_int 16 [0x10])) [9 _41->mapa+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ _41 ])
        (nil)))
(insn 159 158 160 20 (set (reg:SI 189)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 160 159 161 20 (set (reg:DI 129 [ _43 ])
        (sign_extend:DI (reg:SI 189))) "function.c":973 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 189)
        (nil)))
(insn 161 160 162 20 (parallel [
            (set (reg:DI 130 [ _44 ])
                (ashift:DI (reg:DI 129 [ _43 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 129 [ _43 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 162 161 163 20 (parallel [
            (set (reg/f:DI 131 [ _45 ])
                (plus:DI (reg/f:DI 128 [ _42 ])
                    (reg:DI 130 [ _44 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _44 ])
        (expr_list:REG_DEAD (reg/f:DI 128 [ _42 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 163 162 164 20 (set (reg/f:DI 132 [ _46 ])
        (mem/f:DI (reg/f:DI 131 [ _45 ]) [10 *_45+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ _45 ])
        (nil)))
(insn 164 163 165 20 (set (reg:SI 190)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 165 164 166 20 (set (reg:DI 133 [ _47 ])
        (sign_extend:DI (reg:SI 190))) "function.c":973 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 190)
        (nil)))
(insn 166 165 167 20 (parallel [
            (set (reg/f:DI 134 [ _48 ])
                (plus:DI (reg/f:DI 132 [ _46 ])
                    (reg:DI 133 [ _47 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 133 [ _47 ])
        (expr_list:REG_DEAD (reg/f:DI 132 [ _46 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 167 166 168 20 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (nil))
(insn 168 167 169 20 (set (reg/f:DI 135 [ _49 ])
        (mem/f:DI (reg/f:DI 191) [12 user_109(D)->serwer+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (nil)))
(insn 169 168 170 20 (set (reg/f:DI 136 [ _50 ])
        (mem/f:DI (plus:DI (reg/f:DI 135 [ _49 ])
                (const_int 32 [0x20])) [14 _49->player1+0 S8 A64])) "function.c":973 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ _49 ])
        (nil)))
(insn 170 169 171 20 (set (reg:QI 137 [ _51 ])
        (mem:QI (reg/f:DI 134 [ _48 ]) [0 *_48+0 S1 A8])) "function.c":973 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ _48 ])
        (nil)))
(insn 171 170 172 20 (set (reg:SI 193)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 172 171 173 20 (set (reg:DI 192)
        (sign_extend:DI (reg:SI 193))) "function.c":973 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 193)
        (nil)))
(insn 173 172 174 20 (set (reg:SI 195)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":973 86 {*movsi_internal}
     (nil))
(insn 174 173 175 20 (set (reg:DI 194)
        (sign_extend:DI (reg:SI 195))) "function.c":973 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 195)
        (nil)))
(insn 175 174 176 20 (parallel [
            (set (reg:DI 196)
                (mult:DI (reg:DI 194)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 194)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 176 175 177 20 (parallel [
            (set (reg:DI 197)
                (plus:DI (reg/f:DI 136 [ _50 ])
                    (reg:DI 196)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 196)
        (expr_list:REG_DEAD (reg/f:DI 136 [ _50 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 177 176 178 20 (parallel [
            (set (reg:DI 198)
                (plus:DI (reg:DI 197)
                    (reg:DI 192)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_DEAD (reg:DI 192)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 178 177 179 20 (parallel [
            (set (reg/f:DI 199)
                (plus:DI (reg:DI 198)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":973 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 198)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 20 (set (mem/j:QI (reg/f:DI 199) [0 _50->area S1 A8])
        (reg:QI 137 [ _51 ])) "function.c":973 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (expr_list:REG_DEAD (reg:QI 137 [ _51 ])
            (nil))))
(insn 180 179 181 20 (set (reg/f:DI 200)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (nil))
(insn 181 180 182 20 (set (reg/f:DI 138 [ _52 ])
        (mem/f:DI (reg/f:DI 200) [12 user_109(D)->serwer+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 200)
        (nil)))
(insn 182 181 183 20 (set (reg:SI 139 [ _53 ])
        (mem:SI (plus:DI (reg/f:DI 138 [ _52 ])
                (const_int 36068 [0x8ce4])) [3 _52->bestia.y+0 S4 A32])) "function.c":974 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ _52 ])
        (nil)))
(insn 183 182 184 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 139 [ _53 ]))) "function.c":974 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 139 [ _53 ])
        (nil)))
(jump_insn 184 183 185 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":974 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 204)
;;  succ:       21 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 141 201
(note 185 184 186 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 21 (set (reg/f:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (nil))
(insn 187 186 188 21 (set (reg/f:DI 140 [ _54 ])
        (mem/f:DI (reg/f:DI 201) [12 user_109(D)->serwer+0 S8 A64])) "function.c":974 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 201)
        (nil)))
(insn 188 187 189 21 (set (reg:SI 141 [ _55 ])
        (mem:SI (plus:DI (reg/f:DI 140 [ _54 ])
                (const_int 36064 [0x8ce0])) [3 _54->bestia.x+0 S4 A64])) "function.c":974 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140 [ _54 ])
        (nil)))
(insn 189 188 190 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 141 [ _55 ]))) "function.c":974 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 141 [ _55 ])
        (nil)))
(jump_insn 190 189 191 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":974 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 204)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 202 203 204 205 206 207 208 209 210
(note 191 190 192 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 22 (set (reg/f:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":976 85 {*movdi_internal}
     (nil))
(insn 193 192 194 22 (set (reg/f:DI 142 [ _56 ])
        (mem/f:DI (reg/f:DI 202) [12 user_109(D)->serwer+0 S8 A64])) "function.c":976 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202)
        (nil)))
(insn 194 193 195 22 (set (reg/f:DI 143 [ _57 ])
        (mem/f:DI (plus:DI (reg/f:DI 142 [ _56 ])
                (const_int 32 [0x20])) [14 _56->player1+0 S8 A64])) "function.c":976 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _56 ])
        (nil)))
(insn 195 194 196 22 (set (reg:SI 204)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":976 86 {*movsi_internal}
     (nil))
(insn 196 195 197 22 (set (reg:DI 203)
        (sign_extend:DI (reg:SI 204))) "function.c":976 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 204)
        (nil)))
(insn 197 196 198 22 (set (reg:SI 206)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":976 86 {*movsi_internal}
     (nil))
(insn 198 197 199 22 (set (reg:DI 205)
        (sign_extend:DI (reg:SI 206))) "function.c":976 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 206)
        (nil)))
(insn 199 198 200 22 (parallel [
            (set (reg:DI 207)
                (mult:DI (reg:DI 205)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 205)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 200 199 201 22 (parallel [
            (set (reg:DI 208)
                (plus:DI (reg/f:DI 143 [ _57 ])
                    (reg:DI 207)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 207)
        (expr_list:REG_DEAD (reg/f:DI 143 [ _57 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 201 200 202 22 (parallel [
            (set (reg:DI 209)
                (plus:DI (reg:DI 208)
                    (reg:DI 203)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 208)
        (expr_list:REG_DEAD (reg:DI 203)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 202 201 203 22 (parallel [
            (set (reg/f:DI 210)
                (plus:DI (reg:DI 209)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":976 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 209)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 203 202 204 22 (set (mem/j:QI (reg/f:DI 210) [0 _57->area S1 A8])
        (const_int 42 [0x2a])) "function.c":976 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 210)
        (nil)))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       20
;;              21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 204 203 205 23 151 (nil) [2 uses])
(note 205 204 206 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 341 23 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
        (const_int 0 [0])) "function.c":979 86 {*movsi_internal}
     (nil))
(jump_insn 341 206 342 23 (set (pc)
        (label_ref 251)) "function.c":979 683 {jump}
     (nil)
 -> 251)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 342 341 256)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       29
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 211 212 213 214
(code_label 256 342 209 24 154 (nil) [1 uses])
(note 209 256 210 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 24 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 211 210 212 24 (set (reg/f:DI 144 [ _58 ])
        (mem/f:DI (reg/f:DI 211) [12 user_109(D)->serwer+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 211)
        (nil)))
(insn 212 211 213 24 (set (reg:SI 213)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 213 212 214 24 (set (reg:DI 212)
        (sign_extend:DI (reg:SI 213))) "function.c":981 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 213)
        (nil)))
(insn 214 213 215 24 (parallel [
            (set (reg:DI 214)
                (plus:DI (reg:DI 212)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":981 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 212)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 215 214 216 24 (set (reg:SI 145 [ _59 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 214)
                    (const_int 4 [0x4]))
                (reg/f:DI 144 [ _58 ])) [3 _58->skarb.value_all_dropped_coin S4 A32])) "function.c":981 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 214)
        (expr_list:REG_DEAD (reg/f:DI 144 [ _58 ])
            (nil))))
(insn 216 215 217 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 145 [ _59 ])
            (const_int 0 [0]))) "function.c":981 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 145 [ _59 ])
        (nil)))
(jump_insn 217 216 218 24 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":981 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 248)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 215 216 217 218
(note 218 217 219 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 25 (set (reg/f:DI 215)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 220 219 221 25 (set (reg/f:DI 146 [ _60 ])
        (mem/f:DI (reg/f:DI 215) [12 user_109(D)->serwer+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 215)
        (nil)))
(insn 221 220 222 25 (set (reg:SI 217)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 222 221 223 25 (set (reg:DI 216)
        (sign_extend:DI (reg:SI 217))) "function.c":981 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 217)
        (nil)))
(insn 223 222 224 25 (parallel [
            (set (reg:DI 218)
                (plus:DI (reg:DI 216)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":981 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 216)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 224 223 225 25 (set (reg:SI 147 [ _61 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 218)
                    (const_int 8 [0x8]))
                (reg/f:DI 146 [ _60 ])) [3 _60->skarb.dropped_coin S4 A64])) "function.c":981 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 218)
        (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
            (nil))))
(insn 225 224 226 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 147 [ _61 ]))) "function.c":981 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 147 [ _61 ])
        (nil)))
(jump_insn 226 225 227 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":981 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 248)
;;  succ:       26 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 219 220 221
(note 227 226 228 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 26 (set (reg/f:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (nil))
(insn 229 228 230 26 (set (reg/f:DI 148 [ _62 ])
        (mem/f:DI (reg/f:DI 219) [12 user_109(D)->serwer+0 S8 A64])) "function.c":981 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 219)
        (nil)))
(insn 230 229 231 26 (set (reg:SI 221)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":981 86 {*movsi_internal}
     (nil))
(insn 231 230 232 26 (set (reg:DI 220)
        (sign_extend:DI (reg:SI 221))) "function.c":981 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 221)
        (nil)))
(insn 232 231 233 26 (set (reg:SI 149 [ _63 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 220)
                        (const_int 8 [0x8]))
                    (reg/f:DI 148 [ _62 ]))
                (const_int 24068 [0x5e04])) [3 _62->skarb.dropped_coin S4 A32])) "function.c":981 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 220)
        (expr_list:REG_DEAD (reg/f:DI 148 [ _62 ])
            (nil))))
(insn 233 232 234 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 149 [ _63 ]))) "function.c":981 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 149 [ _63 ])
        (nil)))
(jump_insn 234 233 235 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":981 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 248)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 222 223 224 225 226 227 228 229 230
(note 235 234 236 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 27 (set (reg/f:DI 222)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":983 85 {*movdi_internal}
     (nil))
(insn 237 236 238 27 (set (reg/f:DI 150 [ _64 ])
        (mem/f:DI (reg/f:DI 222) [12 user_109(D)->serwer+0 S8 A64])) "function.c":983 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 222)
        (nil)))
(insn 238 237 239 27 (set (reg/f:DI 151 [ _65 ])
        (mem/f:DI (plus:DI (reg/f:DI 150 [ _64 ])
                (const_int 32 [0x20])) [14 _64->player1+0 S8 A64])) "function.c":983 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150 [ _64 ])
        (nil)))
(insn 239 238 240 27 (set (reg:SI 224)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":983 86 {*movsi_internal}
     (nil))
(insn 240 239 241 27 (set (reg:DI 223)
        (sign_extend:DI (reg:SI 224))) "function.c":983 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 224)
        (nil)))
(insn 241 240 242 27 (set (reg:SI 226)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":983 86 {*movsi_internal}
     (nil))
(insn 242 241 243 27 (set (reg:DI 225)
        (sign_extend:DI (reg:SI 226))) "function.c":983 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 226)
        (nil)))
(insn 243 242 244 27 (parallel [
            (set (reg:DI 227)
                (mult:DI (reg:DI 225)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 225)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 244 243 245 27 (parallel [
            (set (reg:DI 228)
                (plus:DI (reg/f:DI 151 [ _65 ])
                    (reg:DI 227)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 227)
        (expr_list:REG_DEAD (reg/f:DI 151 [ _65 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 245 244 246 27 (parallel [
            (set (reg:DI 229)
                (plus:DI (reg:DI 228)
                    (reg:DI 223)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 228)
        (expr_list:REG_DEAD (reg:DI 223)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 246 245 247 27 (parallel [
            (set (reg/f:DI 230)
                (plus:DI (reg:DI 229)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":983 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 229)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 247 246 248 27 (set (mem/j:QI (reg/f:DI 230) [0 _65->area S1 A8])
        (const_int 68 [0x44])) "function.c":983 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 230)
        (nil)))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       24
;;              25
;;              26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 248 247 249 28 153 (nil) [3 uses])
(note 249 248 250 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":979 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              23 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 231
(code_label 251 250 252 29 152 (nil) [1 uses])
(note 252 251 253 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 29 (set (reg/f:DI 231)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":979 85 {*movdi_internal}
     (nil))
(insn 254 253 255 29 (set (reg/f:DI 152 [ _66 ])
        (mem/f:DI (reg/f:DI 231) [12 user_109(D)->serwer+0 S8 A64])) "function.c":979 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 231)
        (nil)))
(insn 255 254 257 29 (set (reg:SI 153 [ _67 ])
        (mem:SI (plus:DI (reg/f:DI 152 [ _66 ])
                (const_int 24060 [0x5dfc])) [3 _66->skarb.count_drop_coin+0 S4 A32])) "function.c":979 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _66 ])
        (nil)))
(insn 257 255 258 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
            (reg:SI 153 [ _67 ]))) "function.c":979 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 153 [ _67 ])
        (nil)))
(jump_insn 258 257 259 29 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 256)
            (pc))) "function.c":979 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 256)
;;  succ:       24
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 232
(note 259 258 260 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 30 (set (reg/f:DI 232)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 261 260 262 30 (set (reg/f:DI 154 [ _68 ])
        (mem/f:DI (reg/f:DI 232) [12 user_109(D)->serwer+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 232)
        (nil)))
(insn 262 261 263 30 (set (reg/f:DI 155 [ _69 ])
        (mem/f:DI (plus:DI (reg/f:DI 154 [ _68 ])
                (const_int 32 [0x20])) [14 _68->player1+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ _68 ])
        (nil)))
(insn 263 262 264 30 (set (reg:SI 156 [ _70 ])
        (mem:SI (plus:DI (reg/f:DI 155 [ _69 ])
                (const_int 16 [0x10])) [3 _69->y_current+0 S4 A64])) "function.c":987 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155 [ _69 ])
        (nil)))
(insn 264 263 265 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 156 [ _70 ]))) "function.c":987 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 156 [ _70 ])
        (nil)))
(jump_insn 265 264 266 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":987 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 286)
;;  succ:       31 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 233
(note 266 265 267 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 31 (set (reg/f:DI 233)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (nil))
(insn 268 267 269 31 (set (reg/f:DI 157 [ _71 ])
        (mem/f:DI (reg/f:DI 233) [12 user_109(D)->serwer+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 233)
        (nil)))
(insn 269 268 270 31 (set (reg/f:DI 158 [ _72 ])
        (mem/f:DI (plus:DI (reg/f:DI 157 [ _71 ])
                (const_int 32 [0x20])) [14 _71->player1+0 S8 A64])) "function.c":987 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _71 ])
        (nil)))
(insn 270 269 271 31 (set (reg:SI 159 [ _73 ])
        (mem:SI (plus:DI (reg/f:DI 158 [ _72 ])
                (const_int 12 [0xc])) [3 _72->x_current+0 S4 A32])) "function.c":987 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158 [ _72 ])
        (nil)))
(insn 271 270 272 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 159 [ _73 ]))) "function.c":987 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 159 [ _73 ])
        (nil)))
(jump_insn 272 271 273 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":987 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 286)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 234 235 236 237 238 239 240 241 242
(note 273 272 274 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 32 (set (reg/f:DI 234)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":989 85 {*movdi_internal}
     (nil))
(insn 275 274 276 32 (set (reg/f:DI 160 [ _74 ])
        (mem/f:DI (reg/f:DI 234) [12 user_109(D)->serwer+0 S8 A64])) "function.c":989 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 234)
        (nil)))
(insn 276 275 277 32 (set (reg/f:DI 161 [ _75 ])
        (mem/f:DI (plus:DI (reg/f:DI 160 [ _74 ])
                (const_int 32 [0x20])) [14 _74->player1+0 S8 A64])) "function.c":989 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160 [ _74 ])
        (nil)))
(insn 277 276 278 32 (set (reg:SI 236)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":989 86 {*movsi_internal}
     (nil))
(insn 278 277 279 32 (set (reg:DI 235)
        (sign_extend:DI (reg:SI 236))) "function.c":989 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 236)
        (nil)))
(insn 279 278 280 32 (set (reg:SI 238)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":989 86 {*movsi_internal}
     (nil))
(insn 280 279 281 32 (set (reg:DI 237)
        (sign_extend:DI (reg:SI 238))) "function.c":989 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 238)
        (nil)))
(insn 281 280 282 32 (parallel [
            (set (reg:DI 239)
                (mult:DI (reg:DI 237)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 237)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 282 281 283 32 (parallel [
            (set (reg:DI 240)
                (plus:DI (reg/f:DI 161 [ _75 ])
                    (reg:DI 239)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 239)
        (expr_list:REG_DEAD (reg/f:DI 161 [ _75 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 283 282 284 32 (parallel [
            (set (reg:DI 241)
                (plus:DI (reg:DI 240)
                    (reg:DI 235)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 240)
        (expr_list:REG_DEAD (reg:DI 235)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 284 283 285 32 (parallel [
            (set (reg/f:DI 242)
                (plus:DI (reg:DI 241)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":989 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 241)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 285 284 286 32 (set (mem/j:QI (reg/f:DI 242) [0 _75->area S1 A8])
        (const_int 50 [0x32])) "function.c":989 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 242)
        (nil)))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       30
;;              31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 286 285 287 33 155 (nil) [2 uses])
(note 287 286 288 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":992 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 289 288 290 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":971 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              19 [always] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243
(code_label 290 289 291 34 150 (nil) [1 uses])
(note 291 290 293 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 293 291 294 34 (set (reg:SI 243)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":971 86 {*movsi_internal}
     (nil))
(insn 294 293 295 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 243)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32]))) "function.c":971 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 243)
        (nil)))
(jump_insn 295 294 296 34 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 292)
            (pc))) "function.c":971 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 292)
;;  succ:       20
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 296 295 297 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":994 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 298 297 299 35 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":995 86 {*movsi_internal}
     (nil))
(insn 299 298 300 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":969 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       36 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU,DFS_BACK)
;;              18 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244
(code_label 300 299 301 36 149 (nil) [1 uses])
(note 301 300 303 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 303 301 304 36 (set (reg:SI 244)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":969 86 {*movsi_internal}
     (nil))
(insn 304 303 305 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 244)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32]))) "function.c":969 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 244)
        (nil)))
(jump_insn 305 304 306 36 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) "function.c":969 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 302)
;;  succ:       19
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 1, flags: (RTL)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 162 163 164 165 245 246 247 248 249 250 251 252 253
(note 306 305 307 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 37 (set (reg/f:DI 245)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":998 85 {*movdi_internal}
     (nil))
(insn 308 307 309 37 (set (reg/f:DI 162 [ _76 ])
        (mem/f:DI (reg/f:DI 245) [12 user_109(D)->serwer+0 S8 A64])) "function.c":998 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 245)
        (nil)))
(insn 309 308 310 37 (set (reg/f:DI 163 [ _77 ])
        (mem/f:DI (plus:DI (reg/f:DI 162 [ _76 ])
                (const_int 32 [0x20])) [14 _76->player1+0 S8 A64])) "function.c":998 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ _76 ])
        (nil)))
(insn 310 309 311 37 (set (reg:SI 247)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])) "function.c":998 86 {*movsi_internal}
     (nil))
(insn 311 310 312 37 (set (reg:DI 246)
        (sign_extend:DI (reg:SI 247))) "function.c":998 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 247)
        (nil)))
(insn 312 311 313 37 (set (reg:SI 249)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "function.c":998 86 {*movsi_internal}
     (nil))
(insn 313 312 314 37 (set (reg:DI 248)
        (sign_extend:DI (reg:SI 249))) "function.c":998 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 249)
        (nil)))
(insn 314 313 315 37 (parallel [
            (set (reg:DI 250)
                (mult:DI (reg:DI 248)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 248)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 315 314 316 37 (parallel [
            (set (reg:DI 251)
                (plus:DI (reg/f:DI 163 [ _77 ])
                    (reg:DI 250)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 250)
        (expr_list:REG_DEAD (reg/f:DI 163 [ _77 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 316 315 317 37 (parallel [
            (set (reg:DI 252)
                (plus:DI (reg:DI 251)
                    (reg:DI 246)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 251)
        (expr_list:REG_DEAD (reg:DI 246)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 317 316 318 37 (parallel [
            (set (reg/f:DI 253)
                (plus:DI (reg:DI 252)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":998 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 252)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 318 317 319 37 (set (mem/j:QI (reg/f:DI 253) [0 _77->area S1 A8])
        (const_int 49 [0x31])) "function.c":998 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 253)
        (nil)))
(insn 319 318 322 37 (set (reg:SI 164 [ _144 ])
        (const_int 0 [0])) "function.c":1000 86 {*movsi_internal}
     (nil))
(insn 322 319 326 37 (set (reg:SI 165 [ <retval> ])
        (reg:SI 164 [ _144 ])) "function.c":1000 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 164 [ _144 ])
        (nil)))
(insn 326 322 327 37 (set (reg/i:SI 0 ax)
        (reg:SI 165 [ <retval> ])) "function.c":1001 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 165 [ <retval> ])
        (nil)))
(insn 327 326 0 37 (use (reg/i:SI 0 ax)) "function.c":1001 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function wizja2 (wizja2, funcdef_no=21, decl_uid=6246, cgraph_uid=21, symbol_order=24)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 38 n_edges 55 count 38 (    1)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
;;
;; Loop 1
;;  header 36, latch 35
;;  depth 1, outer 0
;;  nodes: 36 35 34 33 19 30 31 32 29 28 23 20 21 22 24 25 26 27
;;
;; Loop 2
;;  header 34, latch 33
;;  depth 2, outer 1
;;  nodes: 34 33 30 31 32 29 28 23 20 21 22 24 25 26 27
;;
;; Loop 3
;;  header 29, latch 28
;;  depth 3, outer 2
;;  nodes: 29 28 24 25 26 27
;; 2 succs { 3 4 }
;; 3 succs { 10 }
;; 4 succs { 5 9 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 10 }
;; 8 succs { 10 }
;; 9 succs { 10 }
;; 10 succs { 11 12 }
;; 11 succs { 18 }
;; 12 succs { 13 17 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 16 18 }
;; 16 succs { 18 }
;; 17 succs { 18 }
;; 18 succs { 36 }
;; 19 succs { 34 }
;; 20 succs { 21 23 }
;; 21 succs { 22 23 }
;; 22 succs { 23 }
;; 23 succs { 29 }
;; 24 succs { 25 28 }
;; 25 succs { 26 28 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { 29 }
;; 29 succs { 24 30 }
;; 30 succs { 31 33 }
;; 31 succs { 32 33 }
;; 32 succs { 33 }
;; 33 succs { 34 }
;; 34 succs { 20 35 }
;; 35 succs { 36 }
;; 36 succs { 19 37 }
;; 37 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r165,l0) best AREG, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a4(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a7(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a17(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a18(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a19(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a22(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a23(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a32(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a33(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a39(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a40(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a41(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a45(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a46(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a47(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a48(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a49(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a50(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a51(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a56(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a57(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a58(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a61(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a63(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a65(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a66(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a67(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a68(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a69(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a70(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a71(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a75(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a76(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a77(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a78(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a79(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a80(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a81(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a83(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a84(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a85(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a86(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a87(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a89(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a92(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a93(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a94(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a95(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a97(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a98(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a99(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a100(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a101(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a102(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a103(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a104(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a105(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a106(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a107(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a108(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a109(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a110(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a111(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a112(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a113(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a114(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a115(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a116(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a117(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a118(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a119(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a120(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a121(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a122(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a123(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a124(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a125(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a126(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a127(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a128(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a129(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a130(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a131(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a132(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a133(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a134(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a135(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a136(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a137(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a138(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a139(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a140(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a141(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a142(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a143(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a144(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a145(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a146(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a147(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a148(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a149(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a150(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a151(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a152(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a153(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a154(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a155(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a156(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a157(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a158(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a159(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a160(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a161(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a162(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a163(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a164(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a165(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a166(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 327(l0): point = 0
   Insn 326(l0): point = 2
   Insn 322(l0): point = 4
   Insn 319(l0): point = 6
   Insn 318(l0): point = 8
   Insn 317(l0): point = 10
   Insn 316(l0): point = 12
   Insn 315(l0): point = 14
   Insn 314(l0): point = 16
   Insn 313(l0): point = 18
   Insn 312(l0): point = 20
   Insn 311(l0): point = 22
   Insn 310(l0): point = 24
   Insn 309(l0): point = 26
   Insn 308(l0): point = 28
   Insn 307(l0): point = 30
   Insn 339(l0): point = 33
   Insn 152(l0): point = 35
   Insn 151(l0): point = 37
   Insn 305(l0): point = 40
   Insn 304(l0): point = 42
   Insn 303(l0): point = 44
   Insn 299(l0): point = 47
   Insn 298(l0): point = 49
   Insn 297(l0): point = 51
   Insn 295(l0): point = 54
   Insn 294(l0): point = 56
   Insn 293(l0): point = 58
   Insn 289(l0): point = 61
   Insn 288(l0): point = 63
   Insn 265(l0): point = 66
   Insn 264(l0): point = 68
   Insn 263(l0): point = 70
   Insn 262(l0): point = 72
   Insn 261(l0): point = 74
   Insn 260(l0): point = 76
   Insn 258(l0): point = 79
   Insn 257(l0): point = 81
   Insn 255(l0): point = 83
   Insn 254(l0): point = 85
   Insn 253(l0): point = 87
   Insn 250(l0): point = 90
   Insn 217(l0): point = 93
   Insn 216(l0): point = 95
   Insn 215(l0): point = 97
   Insn 214(l0): point = 99
   Insn 213(l0): point = 101
   Insn 212(l0): point = 103
   Insn 211(l0): point = 105
   Insn 210(l0): point = 107
   Insn 226(l0): point = 110
   Insn 225(l0): point = 112
   Insn 224(l0): point = 114
   Insn 223(l0): point = 116
   Insn 222(l0): point = 118
   Insn 221(l0): point = 120
   Insn 220(l0): point = 122
   Insn 219(l0): point = 124
   Insn 234(l0): point = 127
   Insn 233(l0): point = 129
   Insn 232(l0): point = 131
   Insn 231(l0): point = 133
   Insn 230(l0): point = 135
   Insn 229(l0): point = 137
   Insn 228(l0): point = 139
   Insn 247(l0): point = 142
   Insn 246(l0): point = 144
   Insn 245(l0): point = 146
   Insn 244(l0): point = 148
   Insn 243(l0): point = 150
   Insn 242(l0): point = 152
   Insn 241(l0): point = 154
   Insn 240(l0): point = 156
   Insn 239(l0): point = 158
   Insn 238(l0): point = 160
   Insn 237(l0): point = 162
   Insn 236(l0): point = 164
   Insn 341(l0): point = 167
   Insn 206(l0): point = 169
   Insn 184(l0): point = 172
   Insn 183(l0): point = 174
   Insn 182(l0): point = 176
   Insn 181(l0): point = 178
   Insn 180(l0): point = 180
   Insn 179(l0): point = 182
   Insn 178(l0): point = 184
   Insn 177(l0): point = 186
   Insn 176(l0): point = 188
   Insn 175(l0): point = 190
   Insn 174(l0): point = 192
   Insn 173(l0): point = 194
   Insn 172(l0): point = 196
   Insn 171(l0): point = 198
   Insn 170(l0): point = 200
   Insn 169(l0): point = 202
   Insn 168(l0): point = 204
   Insn 167(l0): point = 206
   Insn 166(l0): point = 208
   Insn 165(l0): point = 210
   Insn 164(l0): point = 212
   Insn 163(l0): point = 214
   Insn 162(l0): point = 216
   Insn 161(l0): point = 218
   Insn 160(l0): point = 220
   Insn 159(l0): point = 222
   Insn 158(l0): point = 224
   Insn 157(l0): point = 226
   Insn 156(l0): point = 228
   Insn 190(l0): point = 231
   Insn 189(l0): point = 233
   Insn 188(l0): point = 235
   Insn 187(l0): point = 237
   Insn 186(l0): point = 239
   Insn 203(l0): point = 242
   Insn 202(l0): point = 244
   Insn 201(l0): point = 246
   Insn 200(l0): point = 248
   Insn 199(l0): point = 250
   Insn 198(l0): point = 252
   Insn 197(l0): point = 254
   Insn 196(l0): point = 256
   Insn 195(l0): point = 258
   Insn 194(l0): point = 260
   Insn 193(l0): point = 262
   Insn 192(l0): point = 264
   Insn 272(l0): point = 267
   Insn 271(l0): point = 269
   Insn 270(l0): point = 271
   Insn 269(l0): point = 273
   Insn 268(l0): point = 275
   Insn 267(l0): point = 277
   Insn 285(l0): point = 280
   Insn 284(l0): point = 282
   Insn 283(l0): point = 284
   Insn 282(l0): point = 286
   Insn 281(l0): point = 288
   Insn 280(l0): point = 290
   Insn 279(l0): point = 292
   Insn 278(l0): point = 294
   Insn 277(l0): point = 296
   Insn 276(l0): point = 298
   Insn 275(l0): point = 300
   Insn 274(l0): point = 302
   Insn 337(l0): point = 305
   Insn 147(l0): point = 307
   Insn 146(l0): point = 309
   Insn 143(l0): point = 312
   Insn 142(l0): point = 314
   Insn 141(l0): point = 316
   Insn 140(l0): point = 318
   Insn 139(l0): point = 320
   Insn 138(l0): point = 322
   Insn 137(l0): point = 324
   Insn 136(l0): point = 326
   Insn 135(l0): point = 328
   Insn 134(l0): point = 330
   Insn 133(l0): point = 332
   Insn 132(l0): point = 334
   Insn 131(l0): point = 336
   Insn 335(l0): point = 339
   Insn 124(l0): point = 341
   Insn 122(l0): point = 344
   Insn 121(l0): point = 346
   Insn 120(l0): point = 348
   Insn 119(l0): point = 350
   Insn 118(l0): point = 352
   Insn 117(l0): point = 354
   Insn 114(l0): point = 357
   Insn 112(l0): point = 360
   Insn 111(l0): point = 362
   Insn 110(l0): point = 364
   Insn 109(l0): point = 366
   Insn 108(l0): point = 368
   Insn 107(l0): point = 370
   Insn 106(l0): point = 372
   Insn 105(l0): point = 374
   Insn 103(l0): point = 377
   Insn 102(l0): point = 379
   Insn 101(l0): point = 381
   Insn 100(l0): point = 383
   Insn 99(l0): point = 385
   Insn 98(l0): point = 387
   Insn 333(l0): point = 390
   Insn 93(l0): point = 392
   Insn 92(l0): point = 394
   Insn 91(l0): point = 396
   Insn 90(l0): point = 398
   Insn 89(l0): point = 400
   Insn 88(l0): point = 402
   Insn 87(l0): point = 404
   Insn 85(l0): point = 407
   Insn 84(l0): point = 409
   Insn 83(l0): point = 411
   Insn 82(l0): point = 413
   Insn 81(l0): point = 415
   Insn 80(l0): point = 417
   Insn 77(l0): point = 420
   Insn 76(l0): point = 422
   Insn 75(l0): point = 424
   Insn 74(l0): point = 426
   Insn 73(l0): point = 428
   Insn 72(l0): point = 430
   Insn 71(l0): point = 432
   Insn 70(l0): point = 434
   Insn 69(l0): point = 436
   Insn 68(l0): point = 438
   Insn 67(l0): point = 440
   Insn 66(l0): point = 442
   Insn 65(l0): point = 444
   Insn 331(l0): point = 447
   Insn 58(l0): point = 449
   Insn 56(l0): point = 452
   Insn 55(l0): point = 454
   Insn 54(l0): point = 456
   Insn 53(l0): point = 458
   Insn 52(l0): point = 460
   Insn 51(l0): point = 462
   Insn 48(l0): point = 465
   Insn 46(l0): point = 468
   Insn 45(l0): point = 470
   Insn 44(l0): point = 472
   Insn 43(l0): point = 474
   Insn 42(l0): point = 476
   Insn 41(l0): point = 478
   Insn 40(l0): point = 480
   Insn 39(l0): point = 482
   Insn 37(l0): point = 485
   Insn 36(l0): point = 487
   Insn 35(l0): point = 489
   Insn 34(l0): point = 491
   Insn 33(l0): point = 493
   Insn 32(l0): point = 495
   Insn 329(l0): point = 498
   Insn 27(l0): point = 500
   Insn 26(l0): point = 502
   Insn 25(l0): point = 504
   Insn 24(l0): point = 506
   Insn 23(l0): point = 508
   Insn 22(l0): point = 510
   Insn 21(l0): point = 512
   Insn 19(l0): point = 515
   Insn 18(l0): point = 517
   Insn 17(l0): point = 519
   Insn 16(l0): point = 521
   Insn 15(l0): point = 523
   Insn 14(l0): point = 525
   Insn 13(l0): point = 527
   Insn 12(l0): point = 529
   Insn 11(l0): point = 531
   Insn 10(l0): point = 533
   Insn 9(l0): point = 535
   Insn 8(l0): point = 537
   Insn 7(l0): point = 539
   Insn 6(l0): point = 541
   Insn 2(l0): point = 543
 a0(r165): [3..4]
 a1(r164): [5..6]
 a2(r253): [9..10]
 a3(r252): [11..12]
 a4(r246): [13..22]
 a5(r251): [13..14]
 a6(r250): [15..16]
 a7(r163): [15..26]
 a8(r248): [17..18]
 a9(r249): [19..20]
 a10(r247): [23..24]
 a11(r162): [27..28]
 a12(r245): [29..30]
 a13(r244): [43..44]
 a14(r243): [57..58]
 a15(r242): [281..282]
 a16(r241): [283..284]
 a17(r235): [285..294]
 a18(r240): [285..286]
 a19(r239): [287..288]
 a20(r161): [287..298]
 a21(r237): [289..290]
 a22(r238): [291..292]
 a23(r236): [295..296]
 a24(r160): [299..300]
 a25(r234): [301..302]
 a26(r159): [270..271]
 a27(r158): [272..273]
 a28(r157): [274..275]
 a29(r233): [276..277]
 a30(r156): [69..70]
 a31(r155): [71..72]
 a32(r154): [73..74]
 a33(r232): [75..76]
 a34(r153): [82..83]
 a35(r152): [84..85]
 a36(r231): [86..87]
 a37(r230): [143..144]
 a38(r229): [145..146]
 a39(r223): [147..156]
 a40(r228): [147..148]
 a41(r227): [149..150]
 a42(r151): [149..160]
 a43(r225): [151..152]
 a44(r226): [153..154]
 a45(r224): [157..158]
 a46(r150): [161..162]
 a47(r222): [163..164]
 a48(r149): [130..131]
 a49(r148): [132..137]
 a50(r220): [132..133]
 a51(r221): [134..135]
 a52(r219): [138..139]
 a53(r147): [113..114]
 a54(r146): [115..122]
 a55(r218): [115..116]
 a56(r216): [117..118]
 a57(r217): [119..120]
 a58(r215): [123..124]
 a59(r145): [96..97]
 a60(r144): [98..105]
 a61(r214): [98..99]
 a62(r212): [100..101]
 a63(r213): [102..103]
 a64(r211): [106..107]
 a65(r210): [243..244]
 a66(r209): [245..246]
 a67(r203): [247..256]
 a68(r208): [247..248]
 a69(r207): [249..250]
 a70(r143): [249..260]
 a71(r205): [251..252]
 a72(r206): [253..254]
 a73(r204): [257..258]
 a74(r142): [261..262]
 a75(r202): [263..264]
 a76(r141): [234..235]
 a77(r140): [236..237]
 a78(r201): [238..239]
 a79(r139): [175..176]
 a80(r138): [177..178]
 a81(r200): [179..180]
 a82(r199): [183..184]
 a83(r137): [183..200]
 a84(r198): [185..186]
 a85(r192): [187..196]
 a86(r197): [187..188]
 a87(r196): [189..190]
 a88(r136): [189..202]
 a89(r194): [191..192]
 a90(r195): [193..194]
 a91(r193): [197..198]
 a92(r134): [201..208]
 a93(r135): [203..204]
 a94(r191): [205..206]
 a95(r133): [209..210]
 a96(r132): [209..214]
 a97(r190): [211..212]
 a98(r131): [215..216]
 a99(r130): [217..218]
 a100(r128): [217..224]
 a101(r129): [219..220]
 a102(r189): [221..222]
 a103(r127): [225..226]
 a104(r188): [227..228]
 a105(r187): [36..37]
 a106(r186): [308..309]
 a107(r185): [315..316]
 a108(r126): [317..318]
 a109(r125): [319..320]
 a110(r124): [321..322]
 a111(r184): [323..324]
 a112(r183): [327..328]
 a113(r123): [329..330]
 a114(r122): [331..332]
 a115(r121): [333..334]
 a116(r182): [335..336]
 a117(r120): [347..348]
 a118(r119): [349..350]
 a119(r118): [351..352]
 a120(r181): [353..354]
 a121(r117): [363..364]
 a122(r116): [365..366]
 a123(r115): [367..368]
 a124(r180): [369..370]
 a125(r114): [380..381]
 a126(r113): [382..383]
 a127(r112): [384..385]
 a128(r179): [386..387]
 a129(r178): [393..394]
 a130(r111): [395..396]
 a131(r110): [397..398]
 a132(r177): [399..400]
 a133(r109): [410..411]
 a134(r108): [412..413]
 a135(r107): [414..415]
 a136(r176): [416..417]
 a137(r175): [423..424]
 a138(r106): [425..426]
 a139(r105): [427..428]
 a140(r104): [429..430]
 a141(r174): [431..432]
 a142(r173): [435..436]
 a143(r103): [437..438]
 a144(r102): [439..440]
 a145(r101): [441..442]
 a146(r172): [443..444]
 a147(r100): [455..456]
 a148(r99): [457..458]
 a149(r98): [459..460]
 a150(r171): [461..462]
 a151(r97): [471..472]
 a152(r96): [473..474]
 a153(r95): [475..476]
 a154(r170): [477..478]
 a155(r94): [488..489]
 a156(r93): [490..491]
 a157(r92): [492..493]
 a158(r169): [494..495]
 a159(r168): [501..502]
 a160(r91): [503..504]
 a161(r90): [505..506]
 a162(r167): [507..508]
 a163(r89): [518..519]
 a164(r88): [520..521]
 a165(r87): [522..523]
 a166(r166): [524..525]
Compressing live ranges: from 546 to 302 - 55%
Ranges after the compression:
 a0(r165): [0..1]
 a1(r164): [2..3]
 a2(r253): [4..5]
 a3(r252): [6..7]
 a4(r246): [8..15]
 a5(r251): [8..9]
 a6(r250): [10..11]
 a7(r163): [10..17]
 a8(r248): [12..13]
 a9(r249): [14..15]
 a10(r247): [16..17]
 a11(r162): [18..19]
 a12(r245): [20..21]
 a13(r244): [24..25]
 a14(r243): [26..27]
 a15(r242): [162..163]
 a16(r241): [164..165]
 a17(r235): [166..173]
 a18(r240): [166..167]
 a19(r239): [168..169]
 a20(r161): [168..175]
 a21(r237): [170..171]
 a22(r238): [172..173]
 a23(r236): [174..175]
 a24(r160): [176..177]
 a25(r234): [178..179]
 a26(r159): [154..155]
 a27(r158): [156..157]
 a28(r157): [158..159]
 a29(r233): [160..161]
 a30(r156): [28..29]
 a31(r155): [30..31]
 a32(r154): [32..33]
 a33(r232): [34..35]
 a34(r153): [36..37]
 a35(r152): [38..39]
 a36(r231): [40..41]
 a37(r230): [70..71]
 a38(r229): [72..73]
 a39(r223): [74..81]
 a40(r228): [74..75]
 a41(r227): [76..77]
 a42(r151): [76..83]
 a43(r225): [78..79]
 a44(r226): [80..81]
 a45(r224): [82..83]
 a46(r150): [84..85]
 a47(r222): [86..87]
 a48(r149): [62..63]
 a49(r148): [64..67]
 a50(r220): [64..65]
 a51(r221): [66..67]
 a52(r219): [68..69]
 a53(r147): [52..53]
 a54(r146): [54..59]
 a55(r218): [54..55]
 a56(r216): [56..57]
 a57(r217): [58..59]
 a58(r215): [60..61]
 a59(r145): [42..43]
 a60(r144): [44..49]
 a61(r214): [44..45]
 a62(r212): [46..47]
 a63(r213): [48..49]
 a64(r211): [50..51]
 a65(r210): [136..137]
 a66(r209): [138..139]
 a67(r203): [140..147]
 a68(r208): [140..141]
 a69(r207): [142..143]
 a70(r143): [142..149]
 a71(r205): [144..145]
 a72(r206): [146..147]
 a73(r204): [148..149]
 a74(r142): [150..151]
 a75(r202): [152..153]
 a76(r141): [130..131]
 a77(r140): [132..133]
 a78(r201): [134..135]
 a79(r139): [88..89]
 a80(r138): [90..91]
 a81(r200): [92..93]
 a82(r199): [94..95]
 a83(r137): [94..107]
 a84(r198): [96..97]
 a85(r192): [98..105]
 a86(r197): [98..99]
 a87(r196): [100..101]
 a88(r136): [100..109]
 a89(r194): [102..103]
 a90(r195): [104..105]
 a91(r193): [106..107]
 a92(r134): [108..113]
 a93(r135): [110..111]
 a94(r191): [112..113]
 a95(r133): [114..115]
 a96(r132): [114..117]
 a97(r190): [116..117]
 a98(r131): [118..119]
 a99(r130): [120..121]
 a100(r128): [120..125]
 a101(r129): [122..123]
 a102(r189): [124..125]
 a103(r127): [126..127]
 a104(r188): [128..129]
 a105(r187): [22..23]
 a106(r186): [180..181]
 a107(r185): [182..183]
 a108(r126): [184..185]
 a109(r125): [186..187]
 a110(r124): [188..189]
 a111(r184): [190..191]
 a112(r183): [192..193]
 a113(r123): [194..195]
 a114(r122): [196..197]
 a115(r121): [198..199]
 a116(r182): [200..201]
 a117(r120): [202..203]
 a118(r119): [204..205]
 a119(r118): [206..207]
 a120(r181): [208..209]
 a121(r117): [210..211]
 a122(r116): [212..213]
 a123(r115): [214..215]
 a124(r180): [216..217]
 a125(r114): [218..219]
 a126(r113): [220..221]
 a127(r112): [222..223]
 a128(r179): [224..225]
 a129(r178): [226..227]
 a130(r111): [228..229]
 a131(r110): [230..231]
 a132(r177): [232..233]
 a133(r109): [234..235]
 a134(r108): [236..237]
 a135(r107): [238..239]
 a136(r176): [240..241]
 a137(r175): [242..243]
 a138(r106): [244..245]
 a139(r105): [246..247]
 a140(r104): [248..249]
 a141(r174): [250..251]
 a142(r173): [252..253]
 a143(r103): [254..255]
 a144(r102): [256..257]
 a145(r101): [258..259]
 a146(r172): [260..261]
 a147(r100): [262..263]
 a148(r99): [264..265]
 a149(r98): [266..267]
 a150(r171): [268..269]
 a151(r97): [270..271]
 a152(r96): [272..273]
 a153(r95): [274..275]
 a154(r170): [276..277]
 a155(r94): [278..279]
 a156(r93): [280..281]
 a157(r92): [282..283]
 a158(r169): [284..285]
 a159(r168): [286..287]
 a160(r91): [288..289]
 a161(r90): [290..291]
 a162(r167): [292..293]
 a163(r89): [294..295]
 a164(r88): [296..297]
 a165(r87): [298..299]
 a166(r166): [300..301]
  pref0:a0(r165)<-hr0@500
  regions=1, blocks=38, points=302
    allocnos=167 (big 0), copies=0, conflicts=0, ranges=167
Disposition:
  165:r87  l0     0  164:r88  l0     0  163:r89  l0     0  161:r90  l0     0
  160:r91  l0     0  157:r92  l0     0  156:r93  l0     0  155:r94  l0     0
  153:r95  l0     0  152:r96  l0     0  151:r97  l0     0  149:r98  l0     0
  148:r99  l0     0  147:r100 l0     0  145:r101 l0     0  144:r102 l0     0
  143:r103 l0     0  140:r104 l0     0  139:r105 l0     0  138:r106 l0     0
  135:r107 l0     0  134:r108 l0     0  133:r109 l0     0  131:r110 l0     0
  130:r111 l0     0  127:r112 l0     0  126:r113 l0     0  125:r114 l0     0
  123:r115 l0     0  122:r116 l0     0  121:r117 l0     0  119:r118 l0     0
  118:r119 l0     0  117:r120 l0     0  115:r121 l0     0  114:r122 l0     0
  113:r123 l0     0  110:r124 l0     0  109:r125 l0     0  108:r126 l0     0
  103:r127 l0     0  100:r128 l0     0  101:r129 l0     1   99:r130 l0     1
   98:r131 l0     0   96:r132 l0     1   95:r133 l0     0   92:r134 l0     1
   93:r135 l0     0   88:r136 l0     4   83:r137 l0     0   80:r138 l0     0
   79:r139 l0     0   77:r140 l0     0   76:r141 l0     0   74:r142 l0     0
   70:r143 l0     2   60:r144 l0     0   59:r145 l0     0   54:r146 l0     0
   53:r147 l0     0   49:r148 l0     0   48:r149 l0     0   46:r150 l0     0
   42:r151 l0     2   35:r152 l0     0   34:r153 l0     0   32:r154 l0     0
   31:r155 l0     0   30:r156 l0     0   28:r157 l0     0   27:r158 l0     0
   26:r159 l0     0   24:r160 l0     0   20:r161 l0     2   11:r162 l0     0
    7:r163 l0     2    1:r164 l0     0    0:r165 l0     0  166:r166 l0     0
  162:r167 l0     0  159:r168 l0     0  158:r169 l0     0  154:r170 l0     0
  150:r171 l0     0  146:r172 l0     0  142:r173 l0     0  141:r174 l0     0
  137:r175 l0     0  136:r176 l0     0  132:r177 l0     0  129:r178 l0     0
  128:r179 l0     0  124:r180 l0     0  120:r181 l0     0  116:r182 l0     0
  112:r183 l0     0  111:r184 l0     0  107:r185 l0     0  106:r186 l0     0
  105:r187 l0     0  104:r188 l0     0  102:r189 l0     1   97:r190 l0     0
   94:r191 l0     0   85:r192 l0     1   91:r193 l0     1   89:r194 l0     2
   90:r195 l0     2   87:r196 l0     2   86:r197 l0     2   84:r198 l0     1
   82:r199 l0     1   81:r200 l0     0   78:r201 l0     0   75:r202 l0     0
   67:r203 l0     0   73:r204 l0     0   71:r205 l0     1   72:r206 l0     1
   69:r207 l0     1   68:r208 l0     1   66:r209 l0     0   65:r210 l0     0
   64:r211 l0     0   62:r212 l0     1   63:r213 l0     1   61:r214 l0     1
   58:r215 l0     0   56:r216 l0     1   57:r217 l0     1   55:r218 l0     1
   52:r219 l0     0   50:r220 l0     1   51:r221 l0     1   47:r222 l0     0
   39:r223 l0     0   45:r224 l0     0   43:r225 l0     1   44:r226 l0     1
   41:r227 l0     1   40:r228 l0     1   38:r229 l0     0   37:r230 l0     0
   36:r231 l0     0   33:r232 l0     0   29:r233 l0     0   25:r234 l0     0
   17:r235 l0     0   23:r236 l0     0   21:r237 l0     1   22:r238 l0     1
   19:r239 l0     1   18:r240 l0     1   16:r241 l0     0   15:r242 l0     0
   14:r243 l0     0   13:r244 l0     0   12:r245 l0     0    4:r246 l0     0
   10:r247 l0     0    8:r248 l0     1    9:r249 l0     1    6:r250 l0     1
    5:r251 l0     1    3:r252 l0     0    2:r253 l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


wizja2

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,37u} r7={1d,37u} r16={1d,36u} r17={52d,18u} r20={1d,136u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} 
;;    total ref usage 673{239d,434u,0e} in 255{255 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 166
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])
        (reg:DI 5 di [ user ])) "function.c":1004 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ user ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
        (const_int 0 [0])) "function.c":1005 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":1006 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1007 86 {*movsi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1008 86 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1009 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1010 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":1011 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":1012 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1014 85 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (reg/f:DI 166) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1014 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 166)
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 87 [ _1 ])
                (const_int 40 [0x28])) [14 _1->player2+0 S8 A64])) "function.c":1014 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(insn 17 16 18 2 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 16 [0x10])) [3 _2->y_current+0 S4 A64])) "function.c":1014 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 18 17 19 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 89 [ _3 ])
            (const_int 1 [0x1]))) "function.c":1014 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (nil)))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "function.c":1014 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 90 91 167 168
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1016 86 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":1017 86 {*movsi_internal}
     (nil))
(insn 23 22 24 3 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1018 85 {*movdi_internal}
     (nil))
(insn 24 23 25 3 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (reg/f:DI 167) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1018 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 25 24 26 3 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 90 [ _4 ])
                (const_int 40 [0x28])) [14 _4->player2+0 S8 A64])) "function.c":1018 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
        (nil)))
(insn 26 25 27 3 (set (reg:SI 168)
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1018 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 27 26 329 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 168)) "function.c":1018 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 168)
        (nil)))
(jump_insn 329 27 330 3 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 330 329 30)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 169
(code_label 30 330 31 4 160 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1020 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 92 [ _6 ])
        (mem/f:DI (reg/f:DI 169) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1020 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 34 33 35 4 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 92 [ _6 ])
                (const_int 40 [0x28])) [14 _6->player2+0 S8 A64])) "function.c":1020 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _6 ])
        (nil)))
(insn 35 34 36 4 (set (reg:SI 94 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 93 [ _7 ])
                (const_int 16 [0x10])) [3 _7->y_current+0 S4 A64])) "function.c":1020 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
        (nil)))
(insn 36 35 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 94 [ _8 ])
            (const_int 17 [0x11]))) "function.c":1020 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
        (nil)))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "function.c":1020 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 63)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 170
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (const_int 16 [0x10])) "function.c":1022 86 {*movsi_internal}
     (nil))
(insn 40 39 41 5 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (const_int 20 [0x14])) "function.c":1023 86 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1024 85 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (reg/f:DI 170) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1024 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (nil)))
(insn 43 42 44 5 (set (reg/f:DI 96 [ _10 ])
        (mem/f:DI (plus:DI (reg/f:DI 95 [ _9 ])
                (const_int 40 [0x28])) [14 _9->player2+0 S8 A64])) "function.c":1024 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
        (nil)))
(insn 44 43 45 5 (set (reg:SI 97 [ _11 ])
        (mem:SI (plus:DI (reg/f:DI 96 [ _10 ])
                (const_int 16 [0x10])) [3 _10->y_current+0 S4 A64])) "function.c":1024 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _10 ])
        (nil)))
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 97 [ _11 ])
            (const_int 18 [0x12]))) "function.c":1024 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
        (nil)))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "function.c":1024 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 49)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1026 86 {*movsi_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 171
(code_label 49 48 50 7 163 (nil) [1 uses])
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 7 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1028 85 {*movdi_internal}
     (nil))
(insn 52 51 53 7 (set (reg/f:DI 98 [ _12 ])
        (mem/f:DI (reg/f:DI 171) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1028 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (nil)))
(insn 53 52 54 7 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 98 [ _12 ])
                (const_int 40 [0x28])) [14 _12->player2+0 S8 A64])) "function.c":1028 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
        (nil)))
(insn 54 53 55 7 (set (reg:SI 100 [ _14 ])
        (mem:SI (plus:DI (reg/f:DI 99 [ _13 ])
                (const_int 16 [0x10])) [3 _13->y_current+0 S4 A64])) "function.c":1028 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
        (nil)))
(insn 55 54 56 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ _14 ])
            (const_int 19 [0x13]))) "function.c":1028 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (nil)))
(jump_insn 56 55 57 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 78)
            (pc))) "function.c":1028 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 78)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 331 8 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 3 [0x3])) "function.c":1030 86 {*movsi_internal}
     (nil))
(jump_insn 331 58 332 8 (set (pc)
        (label_ref 78)) 683 {jump}
     (nil)
 -> 78)
;;  succ:       10 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 332 331 63)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 101 102 103 104 105 106 172 173 174 175
(code_label 63 332 64 9 162 (nil) [1 uses])
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg/f:DI 172)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1035 85 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (reg/f:DI 172) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1035 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172)
        (nil)))
(insn 67 66 68 9 (set (reg/f:DI 102 [ _16 ])
        (mem/f:DI (plus:DI (reg/f:DI 101 [ _15 ])
                (const_int 40 [0x28])) [14 _15->player2+0 S8 A64])) "function.c":1035 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 68 67 69 9 (set (reg:SI 103 [ _17 ])
        (mem:SI (plus:DI (reg/f:DI 102 [ _16 ])
                (const_int 16 [0x10])) [3 _16->y_current+0 S4 A64])) "function.c":1035 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _16 ])
        (nil)))
(insn 69 68 70 9 (parallel [
            (set (reg:SI 173)
                (plus:SI (reg:SI 103 [ _17 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1035 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 103 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])
        (reg:SI 173)) "function.c":1035 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(insn 71 70 72 9 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1036 85 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg/f:DI 104 [ _18 ])
        (mem/f:DI (reg/f:DI 174) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1036 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (nil)))
(insn 73 72 74 9 (set (reg/f:DI 105 [ _19 ])
        (mem/f:DI (plus:DI (reg/f:DI 104 [ _18 ])
                (const_int 40 [0x28])) [14 _18->player2+0 S8 A64])) "function.c":1036 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
        (nil)))
(insn 74 73 75 9 (set (reg:SI 106 [ _20 ])
        (mem:SI (plus:DI (reg/f:DI 105 [ _19 ])
                (const_int 16 [0x10])) [3 _19->y_current+0 S4 A64])) "function.c":1036 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _19 ])
        (nil)))
(insn 75 74 76 9 (parallel [
            (set (reg:SI 175)
                (plus:SI (reg:SI 106 [ _20 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1036 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 106 [ _20 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 76 75 77 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32])
        (reg:SI 175)) "function.c":1036 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 175)
        (nil)))
(insn 77 76 78 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1037 86 {*movsi_internal}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       7
;;              3 [always] 
;;              9 (FALLTHRU)
;;              8 [always] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 107 108 109 176
(code_label 78 77 79 10 161 (nil) [3 uses])
(note 79 78 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 10 (set (reg/f:DI 176)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1040 85 {*movdi_internal}
     (nil))
(insn 81 80 82 10 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (reg/f:DI 176) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1040 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (nil)))
(insn 82 81 83 10 (set (reg/f:DI 108 [ _22 ])
        (mem/f:DI (plus:DI (reg/f:DI 107 [ _21 ])
                (const_int 40 [0x28])) [14 _21->player2+0 S8 A64])) "function.c":1040 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
        (nil)))
(insn 83 82 84 10 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 108 [ _22 ])
                (const_int 12 [0xc])) [3 _22->x_current+0 S4 A32])) "function.c":1040 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 84 83 85 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 109 [ _23 ])
            (const_int 1 [0x1]))) "function.c":1040 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (nil)))
(jump_insn 85 84 86 10 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 96)
            (pc))) "function.c":1040 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 96)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 110 111 177 178
(note 86 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 0 [0])) "function.c":1042 86 {*movsi_internal}
     (nil))
(insn 88 87 89 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 5 [0x5])) "function.c":1043 86 {*movsi_internal}
     (nil))
(insn 89 88 90 11 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1044 85 {*movdi_internal}
     (nil))
(insn 90 89 91 11 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (reg/f:DI 177) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1044 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 91 90 92 11 (set (reg/f:DI 111 [ _25 ])
        (mem/f:DI (plus:DI (reg/f:DI 110 [ _24 ])
                (const_int 40 [0x28])) [14 _24->player2+0 S8 A64])) "function.c":1044 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
        (nil)))
(insn 92 91 93 11 (set (reg:SI 178)
        (mem:SI (plus:DI (reg/f:DI 111 [ _25 ])
                (const_int 12 [0xc])) [3 _25->x_current+0 S4 A32])) "function.c":1044 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111 [ _25 ])
        (nil)))
(insn 93 92 333 11 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (reg:SI 178)) "function.c":1044 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 178)
        (nil)))
(jump_insn 333 93 334 11 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 334 333 96)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112 113 114 179
(code_label 96 334 97 12 165 (nil) [1 uses])
(note 97 96 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 12 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1046 85 {*movdi_internal}
     (nil))
(insn 99 98 100 12 (set (reg/f:DI 112 [ _26 ])
        (mem/f:DI (reg/f:DI 179) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1046 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 100 99 101 12 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 112 [ _26 ])
                (const_int 40 [0x28])) [14 _26->player2+0 S8 A64])) "function.c":1046 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ _26 ])
        (nil)))
(insn 101 100 102 12 (set (reg:SI 114 [ _28 ])
        (mem:SI (plus:DI (reg/f:DI 113 [ _27 ])
                (const_int 12 [0xc])) [3 _27->x_current+0 S4 A32])) "function.c":1046 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 102 101 103 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 114 [ _28 ])
            (const_int 27 [0x1b]))) "function.c":1046 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 114 [ _28 ])
        (nil)))
(jump_insn 103 102 104 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) "function.c":1046 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 129)
;;  succ:       13 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 180
(note 104 103 105 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (const_int 26 [0x1a])) "function.c":1048 86 {*movsi_internal}
     (nil))
(insn 106 105 107 13 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (const_int 30 [0x1e])) "function.c":1049 86 {*movsi_internal}
     (nil))
(insn 107 106 108 13 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1050 85 {*movdi_internal}
     (nil))
(insn 108 107 109 13 (set (reg/f:DI 115 [ _29 ])
        (mem/f:DI (reg/f:DI 180) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1050 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180)
        (nil)))
(insn 109 108 110 13 (set (reg/f:DI 116 [ _30 ])
        (mem/f:DI (plus:DI (reg/f:DI 115 [ _29 ])
                (const_int 40 [0x28])) [14 _29->player2+0 S8 A64])) "function.c":1050 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
        (nil)))
(insn 110 109 111 13 (set (reg:SI 117 [ _31 ])
        (mem:SI (plus:DI (reg/f:DI 116 [ _30 ])
                (const_int 12 [0xc])) [3 _30->x_current+0 S4 A32])) "function.c":1050 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
        (nil)))
(insn 111 110 112 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 117 [ _31 ])
            (const_int 28 [0x1c]))) "function.c":1050 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 117 [ _31 ])
        (nil)))
(jump_insn 112 111 113 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 115)
            (pc))) "function.c":1050 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 115)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 113 112 114 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 14 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1052 86 {*movsi_internal}
     (nil))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 181
(code_label 115 114 116 15 168 (nil) [1 uses])
(note 116 115 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 15 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1054 85 {*movdi_internal}
     (nil))
(insn 118 117 119 15 (set (reg/f:DI 118 [ _32 ])
        (mem/f:DI (reg/f:DI 181) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1054 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (nil)))
(insn 119 118 120 15 (set (reg/f:DI 119 [ _33 ])
        (mem/f:DI (plus:DI (reg/f:DI 118 [ _32 ])
                (const_int 40 [0x28])) [14 _32->player2+0 S8 A64])) "function.c":1054 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ _32 ])
        (nil)))
(insn 120 119 121 15 (set (reg:SI 120 [ _34 ])
        (mem:SI (plus:DI (reg/f:DI 119 [ _33 ])
                (const_int 12 [0xc])) [3 _33->x_current+0 S4 A32])) "function.c":1054 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ _33 ])
        (nil)))
(insn 121 120 122 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 120 [ _34 ])
            (const_int 29 [0x1d]))) "function.c":1054 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 120 [ _34 ])
        (nil)))
(jump_insn 122 121 123 15 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 144)
            (pc))) "function.c":1054 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 144)
;;  succ:       16 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 123 122 124 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 335 16 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 3 [0x3])) "function.c":1056 86 {*movsi_internal}
     (nil))
(jump_insn 335 124 336 16 (set (pc)
        (label_ref 144)) 683 {jump}
     (nil)
 -> 144)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 336 335 129)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       12
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 121 122 123 124 125 126 182 183 184 185
(code_label 129 336 130 17 167 (nil) [1 uses])
(note 130 129 131 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 131 130 132 17 (set (reg/f:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1061 85 {*movdi_internal}
     (nil))
(insn 132 131 133 17 (set (reg/f:DI 121 [ _35 ])
        (mem/f:DI (reg/f:DI 182) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1061 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 182)
        (nil)))
(insn 133 132 134 17 (set (reg/f:DI 122 [ _36 ])
        (mem/f:DI (plus:DI (reg/f:DI 121 [ _35 ])
                (const_int 40 [0x28])) [14 _35->player2+0 S8 A64])) "function.c":1061 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121 [ _35 ])
        (nil)))
(insn 134 133 135 17 (set (reg:SI 123 [ _37 ])
        (mem:SI (plus:DI (reg/f:DI 122 [ _36 ])
                (const_int 12 [0xc])) [3 _36->x_current+0 S4 A32])) "function.c":1061 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122 [ _36 ])
        (nil)))
(insn 135 134 136 17 (parallel [
            (set (reg:SI 183)
                (plus:SI (reg:SI 123 [ _37 ])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1061 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 123 [ _37 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 136 135 137 17 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])
        (reg:SI 183)) "function.c":1061 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 183)
        (nil)))
(insn 137 136 138 17 (set (reg/f:DI 184)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1062 85 {*movdi_internal}
     (nil))
(insn 138 137 139 17 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (reg/f:DI 184) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1062 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 184)
        (nil)))
(insn 139 138 140 17 (set (reg/f:DI 125 [ _39 ])
        (mem/f:DI (plus:DI (reg/f:DI 124 [ _38 ])
                (const_int 40 [0x28])) [14 _38->player2+0 S8 A64])) "function.c":1062 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
        (nil)))
(insn 140 139 141 17 (set (reg:SI 126 [ _40 ])
        (mem:SI (plus:DI (reg/f:DI 125 [ _39 ])
                (const_int 12 [0xc])) [3 _39->x_current+0 S4 A32])) "function.c":1062 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ _39 ])
        (nil)))
(insn 141 140 142 17 (parallel [
            (set (reg:SI 185)
                (plus:SI (reg:SI 126 [ _40 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1062 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 126 [ _40 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 142 141 143 17 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32])
        (reg:SI 185)) "function.c":1062 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 185)
        (nil)))
(insn 143 142 144 17 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])
        (const_int 2 [0x2])) "function.c":1063 86 {*movsi_internal}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       15
;;              11 [always] 
;;              17 (FALLTHRU)
;;              16 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 186
(code_label 144 143 145 18 166 (nil) [3 uses])
(note 145 144 146 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 18 (set (reg:SI 186)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 y_low+0 S4 A32])) "function.c":1066 86 {*movsi_internal}
     (nil))
(insn 147 146 337 18 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
        (reg:SI 186)) "function.c":1066 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 186)
        (nil)))
(jump_insn 337 147 338 18 (set (pc)
        (label_ref 300)) "function.c":1066 683 {jump}
     (nil)
 -> 300)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 338 337 302)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       36
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 187
(code_label 302 338 150 19 178 (nil) [1 uses])
(note 150 302 151 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 19 (set (reg:SI 187)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x_low+0 S4 A32])) "function.c":1068 86 {*movsi_internal}
     (nil))
(insn 152 151 339 19 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
        (reg:SI 187)) "function.c":1068 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(jump_insn 339 152 340 19 (set (pc)
        (label_ref 290)) "function.c":1068 683 {jump}
     (nil)
 -> 290)
;;  succ:       34 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 340 339 292)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       34
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 127 128 129 130 131 132 133 134 135 136 137 138 139 188 189 190 191 192 193 194 195 196 197 198 199 200
(code_label 292 340 155 20 177 (nil) [1 uses])
(note 155 292 156 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 20 (set (reg/f:DI 188)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 157 156 158 20 (set (reg/f:DI 127 [ _41 ])
        (mem/f:DI (reg/f:DI 188) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 188)
        (nil)))
(insn 158 157 159 20 (set (reg/f:DI 128 [ _42 ])
        (mem/f:DI (plus:DI (reg/f:DI 127 [ _41 ])
                (const_int 16 [0x10])) [9 _41->mapa+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ _41 ])
        (nil)))
(insn 159 158 160 20 (set (reg:SI 189)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 160 159 161 20 (set (reg:DI 129 [ _43 ])
        (sign_extend:DI (reg:SI 189))) "function.c":1070 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 189)
        (nil)))
(insn 161 160 162 20 (parallel [
            (set (reg:DI 130 [ _44 ])
                (ashift:DI (reg:DI 129 [ _43 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 129 [ _43 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 162 161 163 20 (parallel [
            (set (reg/f:DI 131 [ _45 ])
                (plus:DI (reg/f:DI 128 [ _42 ])
                    (reg:DI 130 [ _44 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _44 ])
        (expr_list:REG_DEAD (reg/f:DI 128 [ _42 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 163 162 164 20 (set (reg/f:DI 132 [ _46 ])
        (mem/f:DI (reg/f:DI 131 [ _45 ]) [10 *_45+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ _45 ])
        (nil)))
(insn 164 163 165 20 (set (reg:SI 190)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 165 164 166 20 (set (reg:DI 133 [ _47 ])
        (sign_extend:DI (reg:SI 190))) "function.c":1070 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 190)
        (nil)))
(insn 166 165 167 20 (parallel [
            (set (reg/f:DI 134 [ _48 ])
                (plus:DI (reg/f:DI 132 [ _46 ])
                    (reg:DI 133 [ _47 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 133 [ _47 ])
        (expr_list:REG_DEAD (reg/f:DI 132 [ _46 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 167 166 168 20 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (nil))
(insn 168 167 169 20 (set (reg/f:DI 135 [ _49 ])
        (mem/f:DI (reg/f:DI 191) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (nil)))
(insn 169 168 170 20 (set (reg/f:DI 136 [ _50 ])
        (mem/f:DI (plus:DI (reg/f:DI 135 [ _49 ])
                (const_int 40 [0x28])) [14 _49->player2+0 S8 A64])) "function.c":1070 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ _49 ])
        (nil)))
(insn 170 169 171 20 (set (reg:QI 137 [ _51 ])
        (mem:QI (reg/f:DI 134 [ _48 ]) [0 *_48+0 S1 A8])) "function.c":1070 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ _48 ])
        (nil)))
(insn 171 170 172 20 (set (reg:SI 193)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 172 171 173 20 (set (reg:DI 192)
        (sign_extend:DI (reg:SI 193))) "function.c":1070 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 193)
        (nil)))
(insn 173 172 174 20 (set (reg:SI 195)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1070 86 {*movsi_internal}
     (nil))
(insn 174 173 175 20 (set (reg:DI 194)
        (sign_extend:DI (reg:SI 195))) "function.c":1070 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 195)
        (nil)))
(insn 175 174 176 20 (parallel [
            (set (reg:DI 196)
                (mult:DI (reg:DI 194)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 194)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 176 175 177 20 (parallel [
            (set (reg:DI 197)
                (plus:DI (reg/f:DI 136 [ _50 ])
                    (reg:DI 196)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 196)
        (expr_list:REG_DEAD (reg/f:DI 136 [ _50 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 177 176 178 20 (parallel [
            (set (reg:DI 198)
                (plus:DI (reg:DI 197)
                    (reg:DI 192)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_DEAD (reg:DI 192)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 178 177 179 20 (parallel [
            (set (reg/f:DI 199)
                (plus:DI (reg:DI 198)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1070 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 198)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 179 178 180 20 (set (mem/j:QI (reg/f:DI 199) [0 _50->area S1 A8])
        (reg:QI 137 [ _51 ])) "function.c":1070 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (expr_list:REG_DEAD (reg:QI 137 [ _51 ])
            (nil))))
(insn 180 179 181 20 (set (reg/f:DI 200)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (nil))
(insn 181 180 182 20 (set (reg/f:DI 138 [ _52 ])
        (mem/f:DI (reg/f:DI 200) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 200)
        (nil)))
(insn 182 181 183 20 (set (reg:SI 139 [ _53 ])
        (mem:SI (plus:DI (reg/f:DI 138 [ _52 ])
                (const_int 36068 [0x8ce4])) [3 _52->bestia.y+0 S4 A32])) "function.c":1071 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ _52 ])
        (nil)))
(insn 183 182 184 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 139 [ _53 ]))) "function.c":1071 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 139 [ _53 ])
        (nil)))
(jump_insn 184 183 185 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":1071 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 204)
;;  succ:       21 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 141 201
(note 185 184 186 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 21 (set (reg/f:DI 201)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (nil))
(insn 187 186 188 21 (set (reg/f:DI 140 [ _54 ])
        (mem/f:DI (reg/f:DI 201) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1071 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 201)
        (nil)))
(insn 188 187 189 21 (set (reg:SI 141 [ _55 ])
        (mem:SI (plus:DI (reg/f:DI 140 [ _54 ])
                (const_int 36064 [0x8ce0])) [3 _54->bestia.x+0 S4 A64])) "function.c":1071 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140 [ _54 ])
        (nil)))
(insn 189 188 190 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 141 [ _55 ]))) "function.c":1071 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 141 [ _55 ])
        (nil)))
(jump_insn 190 189 191 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) "function.c":1071 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 204)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 202 203 204 205 206 207 208 209 210
(note 191 190 192 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 192 191 193 22 (set (reg/f:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1073 85 {*movdi_internal}
     (nil))
(insn 193 192 194 22 (set (reg/f:DI 142 [ _56 ])
        (mem/f:DI (reg/f:DI 202) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1073 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202)
        (nil)))
(insn 194 193 195 22 (set (reg/f:DI 143 [ _57 ])
        (mem/f:DI (plus:DI (reg/f:DI 142 [ _56 ])
                (const_int 40 [0x28])) [14 _56->player2+0 S8 A64])) "function.c":1073 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _56 ])
        (nil)))
(insn 195 194 196 22 (set (reg:SI 204)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1073 86 {*movsi_internal}
     (nil))
(insn 196 195 197 22 (set (reg:DI 203)
        (sign_extend:DI (reg:SI 204))) "function.c":1073 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 204)
        (nil)))
(insn 197 196 198 22 (set (reg:SI 206)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1073 86 {*movsi_internal}
     (nil))
(insn 198 197 199 22 (set (reg:DI 205)
        (sign_extend:DI (reg:SI 206))) "function.c":1073 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 206)
        (nil)))
(insn 199 198 200 22 (parallel [
            (set (reg:DI 207)
                (mult:DI (reg:DI 205)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 205)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 200 199 201 22 (parallel [
            (set (reg:DI 208)
                (plus:DI (reg/f:DI 143 [ _57 ])
                    (reg:DI 207)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 207)
        (expr_list:REG_DEAD (reg/f:DI 143 [ _57 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 201 200 202 22 (parallel [
            (set (reg:DI 209)
                (plus:DI (reg:DI 208)
                    (reg:DI 203)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 208)
        (expr_list:REG_DEAD (reg:DI 203)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 202 201 203 22 (parallel [
            (set (reg/f:DI 210)
                (plus:DI (reg:DI 209)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1073 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 209)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 203 202 204 22 (set (mem/j:QI (reg/f:DI 210) [0 _57->area S1 A8])
        (const_int 42 [0x2a])) "function.c":1073 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 210)
        (nil)))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       20
;;              21
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 204 203 205 23 172 (nil) [2 uses])
(note 205 204 206 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 341 23 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
        (const_int 0 [0])) "function.c":1076 86 {*movsi_internal}
     (nil))
(jump_insn 341 206 342 23 (set (pc)
        (label_ref 251)) "function.c":1076 683 {jump}
     (nil)
 -> 251)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 342 341 256)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       29
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 144 145 211 212 213 214
(code_label 256 342 209 24 175 (nil) [1 uses])
(note 209 256 210 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 210 209 211 24 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 211 210 212 24 (set (reg/f:DI 144 [ _58 ])
        (mem/f:DI (reg/f:DI 211) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 211)
        (nil)))
(insn 212 211 213 24 (set (reg:SI 213)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 213 212 214 24 (set (reg:DI 212)
        (sign_extend:DI (reg:SI 213))) "function.c":1078 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 213)
        (nil)))
(insn 214 213 215 24 (parallel [
            (set (reg:DI 214)
                (plus:DI (reg:DI 212)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1078 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 212)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 215 214 216 24 (set (reg:SI 145 [ _59 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 214)
                    (const_int 4 [0x4]))
                (reg/f:DI 144 [ _58 ])) [3 _58->skarb.value_all_dropped_coin S4 A32])) "function.c":1078 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 214)
        (expr_list:REG_DEAD (reg/f:DI 144 [ _58 ])
            (nil))))
(insn 216 215 217 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 145 [ _59 ])
            (const_int 0 [0]))) "function.c":1078 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 145 [ _59 ])
        (nil)))
(jump_insn 217 216 218 24 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":1078 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 248)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 147 215 216 217 218
(note 218 217 219 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 25 (set (reg/f:DI 215)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 220 219 221 25 (set (reg/f:DI 146 [ _60 ])
        (mem/f:DI (reg/f:DI 215) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 215)
        (nil)))
(insn 221 220 222 25 (set (reg:SI 217)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 222 221 223 25 (set (reg:DI 216)
        (sign_extend:DI (reg:SI 217))) "function.c":1078 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 217)
        (nil)))
(insn 223 222 224 25 (parallel [
            (set (reg:DI 218)
                (plus:DI (reg:DI 216)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1078 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 216)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 224 223 225 25 (set (reg:SI 147 [ _61 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 218)
                    (const_int 8 [0x8]))
                (reg/f:DI 146 [ _60 ])) [3 _60->skarb.dropped_coin S4 A64])) "function.c":1078 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 218)
        (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
            (nil))))
(insn 225 224 226 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 147 [ _61 ]))) "function.c":1078 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 147 [ _61 ])
        (nil)))
(jump_insn 226 225 227 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":1078 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 248)
;;  succ:       26 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 219 220 221
(note 227 226 228 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 228 227 229 26 (set (reg/f:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (nil))
(insn 229 228 230 26 (set (reg/f:DI 148 [ _62 ])
        (mem/f:DI (reg/f:DI 219) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1078 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 219)
        (nil)))
(insn 230 229 231 26 (set (reg:SI 221)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])) "function.c":1078 86 {*movsi_internal}
     (nil))
(insn 231 230 232 26 (set (reg:DI 220)
        (sign_extend:DI (reg:SI 221))) "function.c":1078 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 221)
        (nil)))
(insn 232 231 233 26 (set (reg:SI 149 [ _63 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 220)
                        (const_int 8 [0x8]))
                    (reg/f:DI 148 [ _62 ]))
                (const_int 24068 [0x5e04])) [3 _62->skarb.dropped_coin S4 A32])) "function.c":1078 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 220)
        (expr_list:REG_DEAD (reg/f:DI 148 [ _62 ])
            (nil))))
(insn 233 232 234 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 149 [ _63 ]))) "function.c":1078 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 149 [ _63 ])
        (nil)))
(jump_insn 234 233 235 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "function.c":1078 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 248)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 150 151 222 223 224 225 226 227 228 229 230
(note 235 234 236 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 27 (set (reg/f:DI 222)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1080 85 {*movdi_internal}
     (nil))
(insn 237 236 238 27 (set (reg/f:DI 150 [ _64 ])
        (mem/f:DI (reg/f:DI 222) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1080 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 222)
        (nil)))
(insn 238 237 239 27 (set (reg/f:DI 151 [ _65 ])
        (mem/f:DI (plus:DI (reg/f:DI 150 [ _64 ])
                (const_int 40 [0x28])) [14 _64->player2+0 S8 A64])) "function.c":1080 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150 [ _64 ])
        (nil)))
(insn 239 238 240 27 (set (reg:SI 224)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1080 86 {*movsi_internal}
     (nil))
(insn 240 239 241 27 (set (reg:DI 223)
        (sign_extend:DI (reg:SI 224))) "function.c":1080 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 224)
        (nil)))
(insn 241 240 242 27 (set (reg:SI 226)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1080 86 {*movsi_internal}
     (nil))
(insn 242 241 243 27 (set (reg:DI 225)
        (sign_extend:DI (reg:SI 226))) "function.c":1080 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 226)
        (nil)))
(insn 243 242 244 27 (parallel [
            (set (reg:DI 227)
                (mult:DI (reg:DI 225)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 225)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 244 243 245 27 (parallel [
            (set (reg:DI 228)
                (plus:DI (reg/f:DI 151 [ _65 ])
                    (reg:DI 227)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 227)
        (expr_list:REG_DEAD (reg/f:DI 151 [ _65 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 245 244 246 27 (parallel [
            (set (reg:DI 229)
                (plus:DI (reg:DI 228)
                    (reg:DI 223)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 228)
        (expr_list:REG_DEAD (reg:DI 223)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 246 245 247 27 (parallel [
            (set (reg/f:DI 230)
                (plus:DI (reg:DI 229)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1080 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 229)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 247 246 248 27 (set (mem/j:QI (reg/f:DI 230) [0 _65->area S1 A8])
        (const_int 68 [0x44])) "function.c":1080 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 230)
        (nil)))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       24
;;              25
;;              26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 248 247 249 28 174 (nil) [3 uses])
(note 249 248 250 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1076 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              23 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 153 231
(code_label 251 250 252 29 173 (nil) [1 uses])
(note 252 251 253 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 253 252 254 29 (set (reg/f:DI 231)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1076 85 {*movdi_internal}
     (nil))
(insn 254 253 255 29 (set (reg/f:DI 152 [ _66 ])
        (mem/f:DI (reg/f:DI 231) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1076 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 231)
        (nil)))
(insn 255 254 257 29 (set (reg:SI 153 [ _67 ])
        (mem:SI (plus:DI (reg/f:DI 152 [ _66 ])
                (const_int 24060 [0x5dfc])) [3 _66->skarb.count_drop_coin+0 S4 A32])) "function.c":1076 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _66 ])
        (nil)))
(insn 257 255 258 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -44 [0xffffffffffffffd4])) [3 m+0 S4 A32])
            (reg:SI 153 [ _67 ]))) "function.c":1076 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 153 [ _67 ])
        (nil)))
(jump_insn 258 257 259 29 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 256)
            (pc))) "function.c":1076 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 256)
;;  succ:       24
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 155 156 232
(note 259 258 260 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 30 (set (reg/f:DI 232)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 261 260 262 30 (set (reg/f:DI 154 [ _68 ])
        (mem/f:DI (reg/f:DI 232) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 232)
        (nil)))
(insn 262 261 263 30 (set (reg/f:DI 155 [ _69 ])
        (mem/f:DI (plus:DI (reg/f:DI 154 [ _68 ])
                (const_int 32 [0x20])) [14 _68->player1+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ _68 ])
        (nil)))
(insn 263 262 264 30 (set (reg:SI 156 [ _70 ])
        (mem:SI (plus:DI (reg/f:DI 155 [ _69 ])
                (const_int 16 [0x10])) [3 _69->y_current+0 S4 A64])) "function.c":1084 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155 [ _69 ])
        (nil)))
(insn 264 263 265 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
            (reg:SI 156 [ _70 ]))) "function.c":1084 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 156 [ _70 ])
        (nil)))
(jump_insn 265 264 266 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":1084 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 286)
;;  succ:       31 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 233
(note 266 265 267 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 31 (set (reg/f:DI 233)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (nil))
(insn 268 267 269 31 (set (reg/f:DI 157 [ _71 ])
        (mem/f:DI (reg/f:DI 233) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 233)
        (nil)))
(insn 269 268 270 31 (set (reg/f:DI 158 [ _72 ])
        (mem/f:DI (plus:DI (reg/f:DI 157 [ _71 ])
                (const_int 32 [0x20])) [14 _71->player1+0 S8 A64])) "function.c":1084 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _71 ])
        (nil)))
(insn 270 269 271 31 (set (reg:SI 159 [ _73 ])
        (mem:SI (plus:DI (reg/f:DI 158 [ _72 ])
                (const_int 12 [0xc])) [3 _72->x_current+0 S4 A32])) "function.c":1084 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158 [ _72 ])
        (nil)))
(insn 271 270 272 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
            (reg:SI 159 [ _73 ]))) "function.c":1084 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 159 [ _73 ])
        (nil)))
(jump_insn 272 271 273 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 286)
            (pc))) "function.c":1084 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 286)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 234 235 236 237 238 239 240 241 242
(note 273 272 274 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 274 273 275 32 (set (reg/f:DI 234)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1086 85 {*movdi_internal}
     (nil))
(insn 275 274 276 32 (set (reg/f:DI 160 [ _74 ])
        (mem/f:DI (reg/f:DI 234) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1086 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 234)
        (nil)))
(insn 276 275 277 32 (set (reg/f:DI 161 [ _75 ])
        (mem/f:DI (plus:DI (reg/f:DI 160 [ _74 ])
                (const_int 40 [0x28])) [14 _74->player2+0 S8 A64])) "function.c":1086 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160 [ _74 ])
        (nil)))
(insn 277 276 278 32 (set (reg:SI 236)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])) "function.c":1086 86 {*movsi_internal}
     (nil))
(insn 278 277 279 32 (set (reg:DI 235)
        (sign_extend:DI (reg:SI 236))) "function.c":1086 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 236)
        (nil)))
(insn 279 278 280 32 (set (reg:SI 238)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])) "function.c":1086 86 {*movsi_internal}
     (nil))
(insn 280 279 281 32 (set (reg:DI 237)
        (sign_extend:DI (reg:SI 238))) "function.c":1086 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 238)
        (nil)))
(insn 281 280 282 32 (parallel [
            (set (reg:DI 239)
                (mult:DI (reg:DI 237)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 237)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 282 281 283 32 (parallel [
            (set (reg:DI 240)
                (plus:DI (reg/f:DI 161 [ _75 ])
                    (reg:DI 239)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 239)
        (expr_list:REG_DEAD (reg/f:DI 161 [ _75 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 283 282 284 32 (parallel [
            (set (reg:DI 241)
                (plus:DI (reg:DI 240)
                    (reg:DI 235)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 240)
        (expr_list:REG_DEAD (reg:DI 235)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 284 283 285 32 (parallel [
            (set (reg/f:DI 242)
                (plus:DI (reg:DI 241)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1086 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 241)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 285 284 286 32 (set (mem/j:QI (reg/f:DI 242) [0 _75->area S1 A8])
        (const_int 49 [0x31])) "function.c":1086 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 242)
        (nil)))
;;  succ:       33 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       30
;;              31
;;              32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 286 285 287 33 176 (nil) [2 uses])
(note 287 286 288 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1089 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 289 288 290 33 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1068 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       34 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 (FALLTHRU,DFS_BACK)
;;              19 [always] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243
(code_label 290 289 291 34 171 (nil) [1 uses])
(note 291 290 293 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 293 291 294 34 (set (reg:SI 243)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 j+0 S4 A32])) "function.c":1068 86 {*movsi_internal}
     (nil))
(insn 294 293 295 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 243)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [3 x_upp+0 S4 A32]))) "function.c":1068 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 243)
        (nil)))
(jump_insn 295 294 296 34 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 292)
            (pc))) "function.c":1068 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 292)
;;  succ:       20
;;              35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 296 295 297 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 q+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1091 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 298 297 299 35 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 w+0 S4 A32])
        (const_int 0 [0])) "function.c":1092 86 {*movsi_internal}
     (nil))
(insn 299 298 300 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1066 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       36 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU,DFS_BACK)
;;              18 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 244
(code_label 300 299 301 36 170 (nil) [1 uses])
(note 301 300 303 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 303 301 304 36 (set (reg:SI 244)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 i+0 S4 A32])) "function.c":1066 86 {*movsi_internal}
     (nil))
(insn 304 303 305 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 244)
            (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [3 y_upp+0 S4 A32]))) "function.c":1066 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 244)
        (nil)))
(jump_insn 305 304 306 36 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 302)
            (pc))) "function.c":1066 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 302)
;;  succ:       19
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 1, flags: (RTL)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 17 [flags] 162 163 164 165 245 246 247 248 249 250 251 252 253
(note 306 305 307 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 307 306 308 37 (set (reg/f:DI 245)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [23 user+0 S8 A64])) "function.c":1095 85 {*movdi_internal}
     (nil))
(insn 308 307 309 37 (set (reg/f:DI 162 [ _76 ])
        (mem/f:DI (reg/f:DI 245) [12 user_109(D)->serwer+0 S8 A64])) "function.c":1095 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 245)
        (nil)))
(insn 309 308 310 37 (set (reg/f:DI 163 [ _77 ])
        (mem/f:DI (plus:DI (reg/f:DI 162 [ _76 ])
                (const_int 40 [0x28])) [14 _76->player2+0 S8 A64])) "function.c":1095 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ _76 ])
        (nil)))
(insn 310 309 311 37 (set (reg:SI 247)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 x+0 S4 A32])) "function.c":1095 86 {*movsi_internal}
     (nil))
(insn 311 310 312 37 (set (reg:DI 246)
        (sign_extend:DI (reg:SI 247))) "function.c":1095 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 247)
        (nil)))
(insn 312 311 313 37 (set (reg:SI 249)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "function.c":1095 86 {*movsi_internal}
     (nil))
(insn 313 312 314 37 (set (reg:DI 248)
        (sign_extend:DI (reg:SI 249))) "function.c":1095 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 249)
        (nil)))
(insn 314 313 315 37 (parallel [
            (set (reg:DI 250)
                (mult:DI (reg:DI 248)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 248)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 315 314 316 37 (parallel [
            (set (reg:DI 251)
                (plus:DI (reg/f:DI 163 [ _77 ])
                    (reg:DI 250)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 250)
        (expr_list:REG_DEAD (reg/f:DI 163 [ _77 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 316 315 317 37 (parallel [
            (set (reg:DI 252)
                (plus:DI (reg:DI 251)
                    (reg:DI 246)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 251)
        (expr_list:REG_DEAD (reg:DI 246)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 317 316 318 37 (parallel [
            (set (reg/f:DI 253)
                (plus:DI (reg:DI 252)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1095 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 252)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 318 317 319 37 (set (mem/j:QI (reg/f:DI 253) [0 _77->area S1 A8])
        (const_int 50 [0x32])) "function.c":1095 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 253)
        (nil)))
(insn 319 318 322 37 (set (reg:SI 164 [ _144 ])
        (const_int 0 [0])) "function.c":1097 86 {*movsi_internal}
     (nil))
(insn 322 319 326 37 (set (reg:SI 165 [ <retval> ])
        (reg:SI 164 [ _144 ])) "function.c":1097 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 164 [ _144 ])
        (nil)))
(insn 326 322 327 37 (set (reg/i:SI 0 ax)
        (reg:SI 165 [ <retval> ])) "function.c":1098 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 165 [ <retval> ])
        (nil)))
(insn 327 326 0 37 (use (reg/i:SI 0 ax)) "function.c":1098 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function druk_wizja (druk_wizja, funcdef_no=22, decl_uid=6248, cgraph_uid=22, symbol_order=25)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 19 n_edges 26 count 19 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
;;
;; Loop 1
;;  header 17, latch 16
;;  depth 1, outer 0
;;  nodes: 17 16 15 14 3 13 5 7 12 8 9 10 11 6 4
;;
;; Loop 2
;;  header 15, latch 14
;;  depth 2, outer 1
;;  nodes: 15 14 13 5 7 12 8 9 10 11 6 4
;; 2 succs { 17 }
;; 3 succs { 15 }
;; 4 succs { 5 6 }
;; 5 succs { 14 }
;; 6 succs { 7 8 }
;; 7 succs { 14 }
;; 8 succs { 12 9 }
;; 9 succs { 12 10 }
;; 10 succs { 12 11 }
;; 11 succs { 12 13 }
;; 12 succs { 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 4 16 }
;; 16 succs { 17 }
;; 17 succs { 3 18 }
;; 18 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 166.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 192.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a105 (r122,l0) best SIREG, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r120,l0) best AREG, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r118,l0) best SIREG, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r113,l0) best SIREG, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a90 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a91 (r92,l0) best DIREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a104 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a106 (r87,l0) best DREG, allocno GENERAL_REGS

  a0(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a4(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a6(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a7(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a8(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a11(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a16(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a18(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a19(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a20(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a21(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a22(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a25(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a26(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a30(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a31(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a33(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a34(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a35(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a36(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a37(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a38(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a39(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a40(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a42(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a43(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a45(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a46(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a47(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a48(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a49(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a50(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a51(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a55(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a56(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a57(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a58(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a59(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a60(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a61(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a65(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a67(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a68(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a69(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a70(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a71(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a74(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a75(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a76(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a77(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a78(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a79(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a80(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a81(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a82(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a83(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a84(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a85(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a86(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a88(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a89(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a90(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a92(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a93(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a94(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a95(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a97(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a98(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a99(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a100(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a101(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a102(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a103(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a104(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a105(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a106(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a107(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000

   Insn 217(l0): point = 0
   Insn 216(l0): point = 2
   Insn 212(l0): point = 4
   Insn 209(l0): point = 6
   Insn 221(l0): point = 9
   Insn 18(l0): point = 11
   Insn 207(l0): point = 14
   Insn 206(l0): point = 16
   Insn 202(l0): point = 19
   Insn 200(l0): point = 22
   Insn 199(l0): point = 24
   Insn 195(l0): point = 27
   Insn 192(l0): point = 30
   Insn 191(l0): point = 32
   Insn 190(l0): point = 34
   Insn 189(l0): point = 36
   Insn 188(l0): point = 38
   Insn 187(l0): point = 40
   Insn 186(l0): point = 42
   Insn 185(l0): point = 44
   Insn 184(l0): point = 46
   Insn 183(l0): point = 48
   Insn 182(l0): point = 50
   Insn 181(l0): point = 52
   Insn 180(l0): point = 54
   Insn 179(l0): point = 56
   Insn 178(l0): point = 58
   Insn 177(l0): point = 60
   Insn 176(l0): point = 62
   Insn 223(l0): point = 65
   Insn 57(l0): point = 67
   Insn 56(l0): point = 69
   Insn 55(l0): point = 71
   Insn 54(l0): point = 73
   Insn 53(l0): point = 75
   Insn 52(l0): point = 77
   Insn 51(l0): point = 79
   Insn 50(l0): point = 81
   Insn 49(l0): point = 83
   Insn 48(l0): point = 85
   Insn 47(l0): point = 87
   Insn 46(l0): point = 89
   Insn 45(l0): point = 91
   Insn 225(l0): point = 94
   Insn 79(l0): point = 96
   Insn 78(l0): point = 98
   Insn 77(l0): point = 100
   Insn 227(l0): point = 103
   Insn 171(l0): point = 105
   Insn 170(l0): point = 107
   Insn 169(l0): point = 109
   Insn 168(l0): point = 111
   Insn 167(l0): point = 113
   Insn 166(l0): point = 115
   Insn 165(l0): point = 117
   Insn 164(l0): point = 119
   Insn 163(l0): point = 121
   Insn 162(l0): point = 123
   Insn 161(l0): point = 125
   Insn 160(l0): point = 127
   Insn 159(l0): point = 129
   Insn 158(l0): point = 131
   Insn 157(l0): point = 133
   Insn 156(l0): point = 135
   Insn 155(l0): point = 137
   Insn 154(l0): point = 139
   Insn 153(l0): point = 141
   Insn 152(l0): point = 143
   Insn 151(l0): point = 145
   Insn 150(l0): point = 147
   Insn 149(l0): point = 149
   Insn 148(l0): point = 151
   Insn 147(l0): point = 153
   Insn 146(l0): point = 155
   Insn 145(l0): point = 157
   Insn 97(l0): point = 160
   Insn 96(l0): point = 162
   Insn 95(l0): point = 164
   Insn 94(l0): point = 166
   Insn 93(l0): point = 168
   Insn 92(l0): point = 170
   Insn 91(l0): point = 172
   Insn 90(l0): point = 174
   Insn 89(l0): point = 176
   Insn 88(l0): point = 178
   Insn 87(l0): point = 180
   Insn 86(l0): point = 182
   Insn 85(l0): point = 184
   Insn 84(l0): point = 186
   Insn 75(l0): point = 189
   Insn 74(l0): point = 191
   Insn 73(l0): point = 193
   Insn 72(l0): point = 195
   Insn 71(l0): point = 197
   Insn 70(l0): point = 199
   Insn 69(l0): point = 201
   Insn 68(l0): point = 203
   Insn 67(l0): point = 205
   Insn 66(l0): point = 207
   Insn 65(l0): point = 209
   Insn 64(l0): point = 211
   Insn 63(l0): point = 213
   Insn 62(l0): point = 215
   Insn 43(l0): point = 218
   Insn 42(l0): point = 220
   Insn 41(l0): point = 222
   Insn 40(l0): point = 224
   Insn 39(l0): point = 226
   Insn 38(l0): point = 228
   Insn 37(l0): point = 230
   Insn 36(l0): point = 232
   Insn 35(l0): point = 234
   Insn 34(l0): point = 236
   Insn 33(l0): point = 238
   Insn 32(l0): point = 240
   Insn 31(l0): point = 242
   Insn 30(l0): point = 244
   Insn 29(l0): point = 246
   Insn 28(l0): point = 248
   Insn 27(l0): point = 250
   Insn 26(l0): point = 252
   Insn 25(l0): point = 254
   Insn 24(l0): point = 256
   Insn 23(l0): point = 258
   Insn 22(l0): point = 260
   Insn 112(l0): point = 263
   Insn 111(l0): point = 265
   Insn 110(l0): point = 267
   Insn 109(l0): point = 269
   Insn 108(l0): point = 271
   Insn 107(l0): point = 273
   Insn 106(l0): point = 275
   Insn 105(l0): point = 277
   Insn 104(l0): point = 279
   Insn 103(l0): point = 281
   Insn 102(l0): point = 283
   Insn 101(l0): point = 285
   Insn 100(l0): point = 287
   Insn 99(l0): point = 289
   Insn 127(l0): point = 292
   Insn 126(l0): point = 294
   Insn 125(l0): point = 296
   Insn 124(l0): point = 298
   Insn 123(l0): point = 300
   Insn 122(l0): point = 302
   Insn 121(l0): point = 304
   Insn 120(l0): point = 306
   Insn 119(l0): point = 308
   Insn 118(l0): point = 310
   Insn 117(l0): point = 312
   Insn 116(l0): point = 314
   Insn 115(l0): point = 316
   Insn 114(l0): point = 318
   Insn 142(l0): point = 321
   Insn 141(l0): point = 323
   Insn 140(l0): point = 325
   Insn 139(l0): point = 327
   Insn 138(l0): point = 329
   Insn 137(l0): point = 331
   Insn 136(l0): point = 333
   Insn 135(l0): point = 335
   Insn 134(l0): point = 337
   Insn 133(l0): point = 339
   Insn 132(l0): point = 341
   Insn 131(l0): point = 343
   Insn 130(l0): point = 345
   Insn 129(l0): point = 347
   Insn 219(l0): point = 350
   Insn 14(l0): point = 352
   Insn 13(l0): point = 354
   Insn 12(l0): point = 356
   Insn 11(l0): point = 358
   Insn 10(l0): point = 360
   Insn 9(l0): point = 362
   Insn 8(l0): point = 364
   Insn 7(l0): point = 366
   Insn 6(l0): point = 368
   Insn 2(l0): point = 370
 a0(r120): [3..4]
 a1(r119): [5..6]
 a2(r118): [37..38]
 a3(r117): [39..40]
 a4(r194): [41..42]
 a5(r193): [43..44]
 a6(r187): [45..54]
 a7(r192): [45..46]
 a8(r191): [47..48]
 a9(r116): [47..58]
 a10(r189): [49..50]
 a11(r190): [51..52]
 a12(r188): [55..56]
 a13(r115): [59..60]
 a14(r186): [61..62]
 a15(r114): [108..113]
 a16(r113): [122..123]
 a17(r112): [124..125]
 a18(r185): [126..127]
 a19(r184): [128..129]
 a20(r178): [130..139]
 a21(r183): [130..131]
 a22(r182): [132..133]
 a23(r111): [132..143]
 a24(r180): [134..135]
 a25(r181): [136..137]
 a26(r179): [140..141]
 a27(r110): [144..145]
 a28(r177): [146..147]
 a29(r109): [152..157]
 a30(r108): [324..325]
 a31(r176): [326..327]
 a32(r175): [328..329]
 a33(r169): [330..339]
 a34(r174): [330..331]
 a35(r173): [332..333]
 a36(r107): [332..343]
 a37(r171): [334..335]
 a38(r172): [336..337]
 a39(r170): [340..341]
 a40(r106): [344..345]
 a41(r168): [346..347]
 a42(r105): [295..296]
 a43(r167): [297..298]
 a44(r166): [299..300]
 a45(r160): [301..310]
 a46(r165): [301..302]
 a47(r164): [303..304]
 a48(r104): [303..314]
 a49(r162): [305..306]
 a50(r163): [307..308]
 a51(r161): [311..312]
 a52(r103): [315..316]
 a53(r159): [317..318]
 a54(r102): [266..267]
 a55(r158): [268..269]
 a56(r157): [270..271]
 a57(r151): [272..281]
 a58(r156): [272..273]
 a59(r155): [274..275]
 a60(r101): [274..285]
 a61(r153): [276..277]
 a62(r154): [278..279]
 a63(r152): [282..283]
 a64(r100): [286..287]
 a65(r150): [288..289]
 a66(r99): [163..164]
 a67(r149): [165..166]
 a68(r148): [167..168]
 a69(r142): [169..178]
 a70(r147): [169..170]
 a71(r146): [171..172]
 a72(r98): [171..182]
 a73(r144): [173..174]
 a74(r145): [175..176]
 a75(r143): [179..180]
 a76(r97): [183..184]
 a77(r141): [185..186]
 a78(r96): [192..193]
 a79(r140): [194..195]
 a80(r139): [196..197]
 a81(r133): [198..207]
 a82(r138): [198..199]
 a83(r137): [200..201]
 a84(r95): [200..211]
 a85(r135): [202..203]
 a86(r136): [204..205]
 a87(r134): [208..209]
 a88(r94): [212..213]
 a89(r132): [214..215]
 a90(r93): [70..75]
 a91(r92): [86..91]
 a92(r91): [221..222]
 a93(r131): [223..224]
 a94(r130): [225..226]
 a95(r124): [227..236]
 a96(r129): [227..228]
 a97(r128): [229..230]
 a98(r90): [229..240]
 a99(r126): [231..232]
 a100(r127): [233..234]
 a101(r125): [237..238]
 a102(r89): [241..242]
 a103(r123): [243..244]
 a104(r88): [249..256]
 a105(r122): [251..254]
 a106(r87): [253..258]
 a107(r121): [259..260]
Compressing live ranges: from 373 to 180 - 48%
Ranges after the compression:
 a0(r120): [0..1]
 a1(r119): [2..3]
 a2(r118): [4..5]
 a3(r117): [6..7]
 a4(r194): [8..9]
 a5(r193): [10..11]
 a6(r187): [12..19]
 a7(r192): [12..13]
 a8(r191): [14..15]
 a9(r116): [14..21]
 a10(r189): [16..17]
 a11(r190): [18..19]
 a12(r188): [20..21]
 a13(r115): [22..23]
 a14(r186): [24..25]
 a15(r114): [30..31]
 a16(r113): [32..33]
 a17(r112): [34..35]
 a18(r185): [36..37]
 a19(r184): [38..39]
 a20(r178): [40..47]
 a21(r183): [40..41]
 a22(r182): [42..43]
 a23(r111): [42..49]
 a24(r180): [44..45]
 a25(r181): [46..47]
 a26(r179): [48..49]
 a27(r110): [50..51]
 a28(r177): [52..53]
 a29(r109): [54..55]
 a30(r108): [160..161]
 a31(r176): [162..163]
 a32(r175): [164..165]
 a33(r169): [166..173]
 a34(r174): [166..167]
 a35(r173): [168..169]
 a36(r107): [168..175]
 a37(r171): [170..171]
 a38(r172): [172..173]
 a39(r170): [174..175]
 a40(r106): [176..177]
 a41(r168): [178..179]
 a42(r105): [140..141]
 a43(r167): [142..143]
 a44(r166): [144..145]
 a45(r160): [146..153]
 a46(r165): [146..147]
 a47(r164): [148..149]
 a48(r104): [148..155]
 a49(r162): [150..151]
 a50(r163): [152..153]
 a51(r161): [154..155]
 a52(r103): [156..157]
 a53(r159): [158..159]
 a54(r102): [120..121]
 a55(r158): [122..123]
 a56(r157): [124..125]
 a57(r151): [126..133]
 a58(r156): [126..127]
 a59(r155): [128..129]
 a60(r101): [128..135]
 a61(r153): [130..131]
 a62(r154): [132..133]
 a63(r152): [134..135]
 a64(r100): [136..137]
 a65(r150): [138..139]
 a66(r99): [56..57]
 a67(r149): [58..59]
 a68(r148): [60..61]
 a69(r142): [62..69]
 a70(r147): [62..63]
 a71(r146): [64..65]
 a72(r98): [64..71]
 a73(r144): [66..67]
 a74(r145): [68..69]
 a75(r143): [70..71]
 a76(r97): [72..73]
 a77(r141): [74..75]
 a78(r96): [76..77]
 a79(r140): [78..79]
 a80(r139): [80..81]
 a81(r133): [82..89]
 a82(r138): [82..83]
 a83(r137): [84..85]
 a84(r95): [84..91]
 a85(r135): [86..87]
 a86(r136): [88..89]
 a87(r134): [90..91]
 a88(r94): [92..93]
 a89(r132): [94..95]
 a90(r93): [26..27]
 a91(r92): [28..29]
 a92(r91): [96..97]
 a93(r131): [98..99]
 a94(r130): [100..101]
 a95(r124): [102..109]
 a96(r129): [102..103]
 a97(r128): [104..105]
 a98(r90): [104..111]
 a99(r126): [106..107]
 a100(r127): [108..109]
 a101(r125): [110..111]
 a102(r89): [112..113]
 a103(r123): [114..115]
 a104(r88): [116..117]
 a105(r122): [116..117]
 a106(r87): [116..117]
 a107(r121): [118..119]
  pref0:a105(r122)<-hr4@500
  pref1:a0(r120)<-hr0@500
  pref2:a2(r118)<-hr4@500
  pref3:a15(r114)<-hr5@500
  pref4:a16(r113)<-hr4@500
  pref5:a29(r109)<-hr5@500
  pref6:a90(r93)<-hr5@500
  pref7:a91(r92)<-hr5@500
  pref8:a104(r88)<-hr5@500
  pref9:a106(r87)<-hr1@500
  regions=1, blocks=19, points=180
    allocnos=108 (big 0), copies=0, conflicts=0, ranges=108
Disposition:
  106:r87  l0     1  104:r88  l0     0  102:r89  l0     0   98:r90  l0     2
   92:r91  l0     0   91:r92  l0     0   90:r93  l0     0   88:r94  l0     0
   84:r95  l0     2   78:r96  l0     0   76:r97  l0     0   72:r98  l0     2
   66:r99  l0     0   64:r100 l0     0   60:r101 l0     2   54:r102 l0     0
   52:r103 l0     0   48:r104 l0     2   42:r105 l0     0   40:r106 l0     0
   36:r107 l0     2   30:r108 l0     0   29:r109 l0     0   27:r110 l0     0
   23:r111 l0     2   17:r112 l0     0   16:r113 l0     0   15:r114 l0     0
   13:r115 l0     0    9:r116 l0     2    3:r117 l0     0    2:r118 l0     0
    1:r119 l0     0    0:r120 l0     0  107:r121 l0     0  105:r122 l0     2
  103:r123 l0     0   95:r124 l0     0  101:r125 l0     0   99:r126 l0     1
  100:r127 l0     1   97:r128 l0     1   96:r129 l0     1   94:r130 l0     0
   93:r131 l0     0   89:r132 l0     0   81:r133 l0     0   87:r134 l0     0
   85:r135 l0     1   86:r136 l0     1   83:r137 l0     1   82:r138 l0     1
   80:r139 l0     0   79:r140 l0     0   77:r141 l0     0   69:r142 l0     0
   75:r143 l0     0   73:r144 l0     1   74:r145 l0     1   71:r146 l0     1
   70:r147 l0     1   68:r148 l0     0   67:r149 l0     0   65:r150 l0     0
   57:r151 l0     0   63:r152 l0     0   61:r153 l0     1   62:r154 l0     1
   59:r155 l0     1   58:r156 l0     1   56:r157 l0     0   55:r158 l0     0
   53:r159 l0     0   45:r160 l0     0   51:r161 l0     0   49:r162 l0     1
   50:r163 l0     1   47:r164 l0     1   46:r165 l0     1   44:r166 l0     0
   43:r167 l0     0   41:r168 l0     0   33:r169 l0     0   39:r170 l0     0
   37:r171 l0     1   38:r172 l0     1   35:r173 l0     1   34:r174 l0     1
   32:r175 l0     0   31:r176 l0     0   28:r177 l0     0   20:r178 l0     0
   26:r179 l0     0   24:r180 l0     1   25:r181 l0     1   22:r182 l0     1
   21:r183 l0     1   19:r184 l0     0   18:r185 l0     0   14:r186 l0     0
    6:r187 l0     0   12:r188 l0     0   10:r189 l0     1   11:r190 l0     1
    8:r191 l0     1    7:r192 l0     1    5:r193 l0     0    4:r194 l0     0
+++Costs: overall -10000, reg -10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


druk_wizja

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={17d,6u} r1={19d,7u} r2={12d} r4={21d,9u} r5={23d,12u} r6={1d,18u} r7={1d,29u} r8={11d} r9={11d} r10={11d} r11={11d} r12={11d} r13={11d} r14={11d} r15={11d} r16={1d,17u} r17={54d,8u} r18={11d} r19={11d} r20={1d,53u,1e} r21={12d} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={12d} r38={12d} r39={11d} r40={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} 
;;    total ref usage 1262{994d,267u,1e} in 178{167 regular + 11 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])
        (reg:DI 5 di [ user ])) "function.c":1101 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ user ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 1 dx)
        (const_int 7 [0x7])) "function.c":1102 86 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 4 si)
        (const_int 7 [0x7])) "function.c":1102 86 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1102 86 {*movsi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":1102 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 10 9 11 2 (set (reg:SI 1 dx)
        (const_int 3 [0x3])) "function.c":1103 86 {*movsi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:SI 4 si)
        (const_int 0 [0])) "function.c":1103 86 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:SI 5 di)
        (const_int 3 [0x3])) "function.c":1103 86 {*movsi_internal}
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("init_pair") [flags 0x41]  <function_decl 0x7f7cd1099700 init_pair>) [0 init_pair S1 A8])
            (const_int 0 [0]))) "function.c":1103 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 14 13 219 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1105 86 {*movsi_internal}
     (nil))
(jump_insn 219 14 220 2 (set (pc)
        (label_ref 203)) "function.c":1105 683 {jump}
     (nil)
 -> 203)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 220 219 205)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       17
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 205 220 17 3 189 (nil) [1 uses])
(note 17 205 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 221 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
        (const_int 0 [0])) "function.c":1107 86 {*movsi_internal}
     (nil))
(jump_insn 221 18 222 3 (set (pc)
        (label_ref 196)) "function.c":1107 683 {jump}
     (nil)
 -> 196)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 222 221 198)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       15
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 121 122 123 124 125 126 127 128 129 130 131
(code_label 198 222 21 4 188 (nil) [1 uses])
(note 21 198 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 121)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1109 86 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (parallel [
            (set (reg:SI 87 [ _1 ])
                (plus:SI (reg:SI 121)
                    (const_int 100 [0x64])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1109 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 121)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 100 [0x64]))
                (nil)))))
(insn 24 23 25 4 (set (reg/f:DI 88 [ stdscr.128_2 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1109 85 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 122)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1109 86 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (set (reg:SI 1 dx)
        (reg:SI 87 [ _1 ])) "function.c":1109 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(insn 27 26 28 4 (set (reg:SI 4 si)
        (reg:SI 122)) "function.c":1109 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg/f:DI 88 [ stdscr.128_2 ])) "function.c":1109 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ stdscr.128_2 ])
        (nil)))
(call_insn 29 28 30 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wmove") [flags 0x41]  <function_decl 0x7f7cd10c9f00 wmove>) [0 wmove S1 A8])
            (const_int 0 [0]))) "function.c":1109 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (nil)))))
(insn 30 29 31 4 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1110 85 {*movdi_internal}
     (nil))
(insn 31 30 32 4 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (reg/f:DI 123) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1110 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123)
        (nil)))
(insn 32 31 33 4 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 89 [ _3 ])
                (const_int 32 [0x20])) [14 _3->player1+0 S8 A64])) "function.c":1110 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
        (nil)))
(insn 33 32 34 4 (set (reg:SI 125)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1110 86 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 124)
        (sign_extend:DI (reg:SI 125))) "function.c":1110 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(insn 35 34 36 4 (set (reg:SI 127)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1110 86 {*movsi_internal}
     (nil))
(insn 36 35 37 4 (set (reg:DI 126)
        (sign_extend:DI (reg:SI 127))) "function.c":1110 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(insn 37 36 38 4 (parallel [
            (set (reg:DI 128)
                (mult:DI (reg:DI 126)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 126)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 38 37 39 4 (parallel [
            (set (reg:DI 129)
                (plus:DI (reg/f:DI 90 [ _4 ])
                    (reg:DI 128)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 128)
        (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 39 38 40 4 (parallel [
            (set (reg:DI 130)
                (plus:DI (reg:DI 129)
                    (reg:DI 124)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 129)
        (expr_list:REG_DEAD (reg:DI 124)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 40 39 41 4 (parallel [
            (set (reg/f:DI 131)
                (plus:DI (reg:DI 130)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1110 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 130)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 41 40 42 4 (set (reg:QI 91 [ _5 ])
        (mem/j:QI (reg/f:DI 131) [0 _4->area S1 A8])) "function.c":1110 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131)
        (nil)))
(insn 42 41 43 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 91 [ _5 ])
            (const_int 77 [0x4d]))) "function.c":1110 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 91 [ _5 ])
        (nil)))
(jump_insn 43 42 44 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "function.c":1110 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 60)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93
(note 44 43 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 5 (set (reg/f:DI 92 [ stdscr.129_6 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1112 85 {*movdi_internal}
     (nil))
(insn 46 45 47 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1112 85 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":1112 86 {*movsi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:DI 5 di)
        (reg/f:DI 92 [ stdscr.129_6 ])) "function.c":1112 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ stdscr.129_6 ])
        (nil)))
(call_insn 49 48 50 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":1112 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 50 49 51 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f7cd0ed46c0 *.LC2>)) "function.c":1113 85 {*movdi_internal}
     (nil))
(insn 51 50 52 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1113 88 {*movqi_internal}
     (nil))
(call_insn 52 51 53 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1113 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 53 52 54 5 (set (reg/f:DI 93 [ stdscr.130_7 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1114 85 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1114 85 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (set (reg:SI 4 si)
        (const_int 256 [0x100])) "function.c":1114 86 {*movsi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:DI 5 di)
        (reg/f:DI 93 [ stdscr.130_7 ])) "function.c":1114 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ stdscr.130_7 ])
        (nil)))
(call_insn 57 56 223 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":1114 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 223 57 224 5 (set (pc)
        (label_ref 193)) 683 {jump}
     (nil)
 -> 193)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 224 223 60)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 132 133 134 135 136 137 138 139 140
(code_label 60 224 61 6 183 (nil) [1 uses])
(note 61 60 62 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 6 (set (reg/f:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1116 85 {*movdi_internal}
     (nil))
(insn 63 62 64 6 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (reg/f:DI 132) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1116 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132)
        (nil)))
(insn 64 63 65 6 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 94 [ _8 ])
                (const_int 32 [0x20])) [14 _8->player1+0 S8 A64])) "function.c":1116 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _8 ])
        (nil)))
(insn 65 64 66 6 (set (reg:SI 134)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1116 86 {*movsi_internal}
     (nil))
(insn 66 65 67 6 (set (reg:DI 133)
        (sign_extend:DI (reg:SI 134))) "function.c":1116 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 67 66 68 6 (set (reg:SI 136)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1116 86 {*movsi_internal}
     (nil))
(insn 68 67 69 6 (set (reg:DI 135)
        (sign_extend:DI (reg:SI 136))) "function.c":1116 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 136)
        (nil)))
(insn 69 68 70 6 (parallel [
            (set (reg:DI 137)
                (mult:DI (reg:DI 135)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 135)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 70 69 71 6 (parallel [
            (set (reg:DI 138)
                (plus:DI (reg/f:DI 95 [ _9 ])
                    (reg:DI 137)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137)
        (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 71 70 72 6 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg:DI 138)
                    (reg:DI 133)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 138)
        (expr_list:REG_DEAD (reg:DI 133)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 72 71 73 6 (parallel [
            (set (reg/f:DI 140)
                (plus:DI (reg:DI 139)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1116 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 139)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 73 72 74 6 (set (reg:QI 96 [ _10 ])
        (mem/j:QI (reg/f:DI 140) [0 _9->area S1 A8])) "function.c":1116 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140)
        (nil)))
(insn 74 73 75 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 96 [ _10 ])
            (const_int 46 [0x2e]))) "function.c":1116 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 96 [ _10 ])
        (nil)))
(jump_insn 75 74 76 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) "function.c":1116 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 82)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
(note 76 75 77 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 7 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f7cd0ed47e0 *.LC4>)) "function.c":1118 85 {*movdi_internal}
     (nil))
(insn 78 77 79 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1118 88 {*movqi_internal}
     (nil))
(call_insn 79 78 225 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1118 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(jump_insn 225 79 226 7 (set (pc)
        (label_ref 193)) 683 {jump}
     (nil)
 -> 193)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 226 225 82)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 141 142 143 144 145 146 147 148 149
(code_label 82 226 83 8 185 (nil) [1 uses])
(note 83 82 84 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 8 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 85 84 86 8 (set (reg/f:DI 97 [ _11 ])
        (mem/f:DI (reg/f:DI 141) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))
(insn 86 85 87 8 (set (reg/f:DI 98 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 97 [ _11 ])
                (const_int 32 [0x20])) [14 _11->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
        (nil)))
(insn 87 86 88 8 (set (reg:SI 143)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 88 87 89 8 (set (reg:DI 142)
        (sign_extend:DI (reg:SI 143))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 143)
        (nil)))
(insn 89 88 90 8 (set (reg:SI 145)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 90 89 91 8 (set (reg:DI 144)
        (sign_extend:DI (reg:SI 145))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 91 90 92 8 (parallel [
            (set (reg:DI 146)
                (mult:DI (reg:DI 144)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 144)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 92 91 93 8 (parallel [
            (set (reg:DI 147)
                (plus:DI (reg/f:DI 98 [ _12 ])
                    (reg:DI 146)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 146)
        (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 93 92 94 8 (parallel [
            (set (reg:DI 148)
                (plus:DI (reg:DI 147)
                    (reg:DI 142)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 147)
        (expr_list:REG_DEAD (reg:DI 142)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 94 93 95 8 (parallel [
            (set (reg/f:DI 149)
                (plus:DI (reg:DI 148)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 148)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 95 94 96 8 (set (reg:QI 99 [ _13 ])
        (mem/j:QI (reg/f:DI 149) [0 _12->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149)
        (nil)))
(insn 96 95 97 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 99 [ _13 ])
            (const_int 99 [0x63]))) "function.c":1120 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 99 [ _13 ])
        (nil)))
(jump_insn 97 96 98 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "function.c":1120 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 143)
;;  succ:       12
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 150 151 152 153 154 155 156 157 158
(note 98 97 99 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 9 (set (reg/f:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 100 99 101 9 (set (reg/f:DI 100 [ _14 ])
        (mem/f:DI (reg/f:DI 150) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150)
        (nil)))
(insn 101 100 102 9 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 100 [ _14 ])
                (const_int 32 [0x20])) [14 _14->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _14 ])
        (nil)))
(insn 102 101 103 9 (set (reg:SI 152)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 103 102 104 9 (set (reg:DI 151)
        (sign_extend:DI (reg:SI 152))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(insn 104 103 105 9 (set (reg:SI 154)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 105 104 106 9 (set (reg:DI 153)
        (sign_extend:DI (reg:SI 154))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 154)
        (nil)))
(insn 106 105 107 9 (parallel [
            (set (reg:DI 155)
                (mult:DI (reg:DI 153)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 153)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 107 106 108 9 (parallel [
            (set (reg:DI 156)
                (plus:DI (reg/f:DI 101 [ _15 ])
                    (reg:DI 155)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 155)
        (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 108 107 109 9 (parallel [
            (set (reg:DI 157)
                (plus:DI (reg:DI 156)
                    (reg:DI 151)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 156)
        (expr_list:REG_DEAD (reg:DI 151)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 109 108 110 9 (parallel [
            (set (reg/f:DI 158)
                (plus:DI (reg:DI 157)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 157)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 110 109 111 9 (set (reg:QI 102 [ _16 ])
        (mem/j:QI (reg/f:DI 158) [0 _15->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158)
        (nil)))
(insn 111 110 112 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 102 [ _16 ])
            (const_int 68 [0x44]))) "function.c":1120 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 102 [ _16 ])
        (nil)))
(jump_insn 112 111 113 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "function.c":1120 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 143)
;;  succ:       12
;;              10 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 159 160 161 162 163 164 165 166 167
(note 113 112 114 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 10 (set (reg/f:DI 159)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 115 114 116 10 (set (reg/f:DI 103 [ _17 ])
        (mem/f:DI (reg/f:DI 159) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 159)
        (nil)))
(insn 116 115 117 10 (set (reg/f:DI 104 [ _18 ])
        (mem/f:DI (plus:DI (reg/f:DI 103 [ _17 ])
                (const_int 32 [0x20])) [14 _17->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
        (nil)))
(insn 117 116 118 10 (set (reg:SI 161)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 118 117 119 10 (set (reg:DI 160)
        (sign_extend:DI (reg:SI 161))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
(insn 119 118 120 10 (set (reg:SI 163)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 120 119 121 10 (set (reg:DI 162)
        (sign_extend:DI (reg:SI 163))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 163)
        (nil)))
(insn 121 120 122 10 (parallel [
            (set (reg:DI 164)
                (mult:DI (reg:DI 162)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 162)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 122 121 123 10 (parallel [
            (set (reg:DI 165)
                (plus:DI (reg/f:DI 104 [ _18 ])
                    (reg:DI 164)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 164)
        (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 123 122 124 10 (parallel [
            (set (reg:DI 166)
                (plus:DI (reg:DI 165)
                    (reg:DI 160)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 165)
        (expr_list:REG_DEAD (reg:DI 160)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 124 123 125 10 (parallel [
            (set (reg/f:DI 167)
                (plus:DI (reg:DI 166)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 166)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 125 124 126 10 (set (reg:QI 105 [ _19 ])
        (mem/j:QI (reg/f:DI 167) [0 _18->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 126 125 127 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 105 [ _19 ])
            (const_int 116 [0x74]))) "function.c":1120 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 105 [ _19 ])
        (nil)))
(jump_insn 127 126 128 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "function.c":1120 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 143)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 168 169 170 171 172 173 174 175 176
(note 128 127 129 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 11 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (nil))
(insn 130 129 131 11 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (reg/f:DI 168) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (nil)))
(insn 131 130 132 11 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 106 [ _20 ])
                (const_int 32 [0x20])) [14 _20->player1+0 S8 A64])) "function.c":1120 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 132 131 133 11 (set (reg:SI 170)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 133 132 134 11 (set (reg:DI 169)
        (sign_extend:DI (reg:SI 170))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 170)
        (nil)))
(insn 134 133 135 11 (set (reg:SI 172)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1120 86 {*movsi_internal}
     (nil))
(insn 135 134 136 11 (set (reg:DI 171)
        (sign_extend:DI (reg:SI 172))) "function.c":1120 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 136 135 137 11 (parallel [
            (set (reg:DI 173)
                (mult:DI (reg:DI 171)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 171)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 137 136 138 11 (parallel [
            (set (reg:DI 174)
                (plus:DI (reg/f:DI 107 [ _21 ])
                    (reg:DI 173)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 173)
        (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 138 137 139 11 (parallel [
            (set (reg:DI 175)
                (plus:DI (reg:DI 174)
                    (reg:DI 169)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_DEAD (reg:DI 169)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 139 138 140 11 (parallel [
            (set (reg/f:DI 176)
                (plus:DI (reg:DI 175)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1120 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 175)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 140 139 141 11 (set (reg:QI 108 [ _22 ])
        (mem/j:QI (reg/f:DI 176) [0 _21->area S1 A8])) "function.c":1120 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176)
        (nil)))
(insn 141 140 142 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 108 [ _22 ])
            (const_int 84 [0x54]))) "function.c":1120 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 108 [ _22 ])
        (nil)))
(jump_insn 142 141 143 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 174)
            (pc))) "function.c":1120 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 174)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       8
;;              9
;;              10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 109 110 111 112 113 114 177 178 179 180 181 182 183 184 185
(code_label 143 142 144 12 186 (nil) [3 uses])
(note 144 143 145 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 12 (set (reg/f:DI 109 [ stdscr.131_23 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1122 85 {*movdi_internal}
     (nil))
(insn 146 145 147 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1122 85 {*movdi_internal}
     (nil))
(insn 147 146 148 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":1122 86 {*movsi_internal}
     (nil))
(insn 148 147 149 12 (set (reg:DI 5 di)
        (reg/f:DI 109 [ stdscr.131_23 ])) "function.c":1122 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ stdscr.131_23 ])
        (nil)))
(call_insn 149 148 150 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_on") [flags 0x41]  <function_decl 0x7f7cd10c4100 wattr_on>) [0 wattr_on S1 A8])
            (const_int 0 [0]))) "function.c":1122 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 150 149 151 12 (set (reg/f:DI 177)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1123 85 {*movdi_internal}
     (nil))
(insn 151 150 152 12 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (reg/f:DI 177) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1123 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 177)
        (nil)))
(insn 152 151 153 12 (set (reg/f:DI 111 [ _25 ])
        (mem/f:DI (plus:DI (reg/f:DI 110 [ _24 ])
                (const_int 32 [0x20])) [14 _24->player1+0 S8 A64])) "function.c":1123 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
        (nil)))
(insn 153 152 154 12 (set (reg:SI 179)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1123 86 {*movsi_internal}
     (nil))
(insn 154 153 155 12 (set (reg:DI 178)
        (sign_extend:DI (reg:SI 179))) "function.c":1123 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 179)
        (nil)))
(insn 155 154 156 12 (set (reg:SI 181)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1123 86 {*movsi_internal}
     (nil))
(insn 156 155 157 12 (set (reg:DI 180)
        (sign_extend:DI (reg:SI 181))) "function.c":1123 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 181)
        (nil)))
(insn 157 156 158 12 (parallel [
            (set (reg:DI 182)
                (mult:DI (reg:DI 180)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 180)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 158 157 159 12 (parallel [
            (set (reg:DI 183)
                (plus:DI (reg/f:DI 111 [ _25 ])
                    (reg:DI 182)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 182)
        (expr_list:REG_DEAD (reg/f:DI 111 [ _25 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 159 158 160 12 (parallel [
            (set (reg:DI 184)
                (plus:DI (reg:DI 183)
                    (reg:DI 178)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 183)
        (expr_list:REG_DEAD (reg:DI 178)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 160 159 161 12 (parallel [
            (set (reg/f:DI 185)
                (plus:DI (reg:DI 184)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1123 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 184)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 12 (set (reg:QI 112 [ _26 ])
        (mem/j:QI (reg/f:DI 185) [0 _25->area S1 A8])) "function.c":1123 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (nil)))
(insn 162 161 163 12 (set (reg:SI 113 [ _27 ])
        (sign_extend:SI (reg:QI 112 [ _26 ]))) "function.c":1123 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 112 [ _26 ])
        (nil)))
(insn 163 162 164 12 (set (reg:SI 4 si)
        (reg:SI 113 [ _27 ])) "function.c":1123 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 113 [ _27 ])
        (nil)))
(insn 164 163 165 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":1123 85 {*movdi_internal}
     (nil))
(insn 165 164 166 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1123 88 {*movqi_internal}
     (nil))
(call_insn 166 165 167 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1123 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 167 166 168 12 (set (reg/f:DI 114 [ stdscr.132_28 ])
        (mem/f/c:DI (symbol_ref:DI ("stdscr") [flags 0x40]  <var_decl 0x7f7cd108ac60 stdscr>) [11 stdscr+0 S8 A64])) "function.c":1124 85 {*movdi_internal}
     (nil))
(insn 168 167 169 12 (set (reg:DI 1 dx)
        (const_int 0 [0])) "function.c":1124 85 {*movdi_internal}
     (nil))
(insn 169 168 170 12 (set (reg:SI 4 si)
        (const_int 768 [0x300])) "function.c":1124 86 {*movsi_internal}
     (nil))
(insn 170 169 171 12 (set (reg:DI 5 di)
        (reg/f:DI 114 [ stdscr.132_28 ])) "function.c":1124 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ stdscr.132_28 ])
        (nil)))
(call_insn 171 170 227 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("wattr_off") [flags 0x41]  <function_decl 0x7f7cd10c4200 wattr_off>) [0 wattr_off S1 A8])
            (const_int 0 [0]))) "function.c":1124 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn 227 171 228 12 (set (pc)
        (label_ref 193)) "function.c":1124 683 {jump}
     (nil)
 -> 193)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 228 227 174)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 116 117 118 186 187 188 189 190 191 192 193 194
(code_label 174 228 175 13 187 (nil) [1 uses])
(note 175 174 176 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 13 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [23 user+0 S8 A64])) "function.c":1128 85 {*movdi_internal}
     (nil))
(insn 177 176 178 13 (set (reg/f:DI 115 [ _29 ])
        (mem/f:DI (reg/f:DI 186) [12 user_44(D)->serwer+0 S8 A64])) "function.c":1128 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 186)
        (nil)))
(insn 178 177 179 13 (set (reg/f:DI 116 [ _30 ])
        (mem/f:DI (plus:DI (reg/f:DI 115 [ _29 ])
                (const_int 32 [0x20])) [14 _29->player1+0 S8 A64])) "function.c":1128 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
        (nil)))
(insn 179 178 180 13 (set (reg:SI 188)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])) "function.c":1128 86 {*movsi_internal}
     (nil))
(insn 180 179 181 13 (set (reg:DI 187)
        (sign_extend:DI (reg:SI 188))) "function.c":1128 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 188)
        (nil)))
(insn 181 180 182 13 (set (reg:SI 190)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1128 86 {*movsi_internal}
     (nil))
(insn 182 181 183 13 (set (reg:DI 189)
        (sign_extend:DI (reg:SI 190))) "function.c":1128 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 190)
        (nil)))
(insn 183 182 184 13 (parallel [
            (set (reg:DI 191)
                (mult:DI (reg:DI 189)
                    (const_int 150 [0x96])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 349 {*muldi3_1}
     (expr_list:REG_DEAD (reg:DI 189)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 184 183 185 13 (parallel [
            (set (reg:DI 192)
                (plus:DI (reg/f:DI 116 [ _30 ])
                    (reg:DI 191)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 191)
        (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 185 184 186 13 (parallel [
            (set (reg:DI 193)
                (plus:DI (reg:DI 192)
                    (reg:DI 187)))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 192)
        (expr_list:REG_DEAD (reg:DI 187)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 186 185 187 13 (parallel [
            (set (reg/f:DI 194)
                (plus:DI (reg:DI 193)
                    (const_int 51 [0x33])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1128 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 193)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 187 186 188 13 (set (reg:QI 117 [ _31 ])
        (mem/j:QI (reg/f:DI 194) [0 _30->area S1 A8])) "function.c":1128 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (nil)))
(insn 188 187 189 13 (set (reg:SI 118 [ _32 ])
        (sign_extend:SI (reg:QI 117 [ _31 ]))) "function.c":1128 155 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 117 [ _31 ])
        (nil)))
(insn 189 188 190 13 (set (reg:SI 4 si)
        (reg:SI 118 [ _32 ])) "function.c":1128 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 118 [ _32 ])
        (nil)))
(insn 190 189 191 13 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f7cd0ed4750 *.LC3>)) "function.c":1128 85 {*movdi_internal}
     (nil))
(insn 191 190 192 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) "function.c":1128 88 {*movqi_internal}
     (nil))
(call_insn 192 191 193 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printw") [flags 0x41]  <function_decl 0x7f7cd10b4c00 printw>) [0 printw S1 A8])
            (const_int 0 [0]))) "function.c":1128 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;;              5 [always] 
;;              7 [always] 
;;              12 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 193 192 194 14 184 (nil) [3 uses])
(note 194 193 195 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 195 194 196 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1107 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 196 195 197 15 182 (nil) [1 uses])
(note 197 196 199 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 199 197 200 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 j+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":1107 11 {*cmpsi_1}
     (nil))
(jump_insn 200 199 201 15 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 198)
            (pc))) "function.c":1107 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 198)
;;  succ:       4
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(note 201 200 202 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1105 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 203 202 204 17 181 (nil) [1 uses])
(note 204 203 206 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 206 204 207 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (const_int 4 [0x4]))) "function.c":1105 11 {*cmpsi_1}
     (nil))
(jump_insn 207 206 208 17 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) "function.c":1105 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 205)
;;  succ:       3
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 1, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 119 120
(note 208 207 209 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 212 18 (set (reg:SI 119 [ _55 ])
        (const_int 0 [0])) "function.c":1132 86 {*movsi_internal}
     (nil))
(insn 212 209 216 18 (set (reg:SI 120 [ <retval> ])
        (reg:SI 119 [ _55 ])) "function.c":1132 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 119 [ _55 ])
        (nil)))
(insn 216 212 217 18 (set (reg/i:SI 0 ax)
        (reg:SI 120 [ <retval> ])) "function.c":1133 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 120 [ <retval> ])
        (nil)))
(insn 217 216 0 18 (use (reg/i:SI 0 ax)) "function.c":1133 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function bestia_move (bestia_move, funcdef_no=23, decl_uid=6253, cgraph_uid=23, symbol_order=26)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 14 n_edges 18 count 14 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 13 12
;; 2 succs { 3 11 }
;; 3 succs { 4 6 }
;; 4 succs { 5 9 }
;; 5 succs { 12 }
;; 6 succs { 7 10 }
;; 7 succs { 12 8 }
;; 8 succs { 12 }
;; 9 succs { 12 }
;; 10 succs { 12 }
;; 11 succs { 13 }
;; 13 succs { 12 }
;; 12 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r102,l0) best SIREG, allocno GENERAL_REGS
    r101: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r101,l0) best AREG, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a2(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a4(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a11(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a18(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a25(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a26(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:53000 NO_REX_SSE_REGS:53000 SSE_REGS:53000 MMX_REGS:78000 INT_SSE_REGS:78000 ALL_REGS:1272000 MEM:31000
  a31(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a32(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:2000

   Insn 87(l0): point = 0
   Insn 86(l0): point = 2
   Insn 82(l0): point = 4
   Insn 79(l0): point = 6
   Insn 99(l0): point = 9
   Insn 76(l0): point = 12
   Insn 75(l0): point = 14
   Insn 74(l0): point = 16
   Insn 73(l0): point = 18
   Insn 72(l0): point = 20
   Insn 71(l0): point = 22
   Insn 70(l0): point = 24
   Insn 69(l0): point = 26
   Insn 68(l0): point = 28
   Insn 96(l0): point = 31
   Insn 63(l0): point = 33
   Insn 62(l0): point = 35
   Insn 61(l0): point = 37
   Insn 60(l0): point = 39
   Insn 59(l0): point = 41
   Insn 58(l0): point = 43
   Insn 57(l0): point = 45
   Insn 56(l0): point = 47
   Insn 55(l0): point = 49
   Insn 94(l0): point = 52
   Insn 50(l0): point = 54
   Insn 49(l0): point = 56
   Insn 48(l0): point = 58
   Insn 47(l0): point = 60
   Insn 46(l0): point = 62
   Insn 45(l0): point = 64
   Insn 44(l0): point = 66
   Insn 43(l0): point = 68
   Insn 42(l0): point = 70
   Insn 92(l0): point = 73
   Insn 37(l0): point = 75
   Insn 36(l0): point = 77
   Insn 35(l0): point = 79
   Insn 34(l0): point = 81
   Insn 33(l0): point = 83
   Insn 32(l0): point = 85
   Insn 31(l0): point = 87
   Insn 30(l0): point = 89
   Insn 29(l0): point = 91
   Insn 27(l0): point = 94
   Insn 26(l0): point = 96
   Insn 24(l0): point = 99
   Insn 23(l0): point = 101
   Insn 90(l0): point = 104
   Insn 17(l0): point = 107
   Insn 16(l0): point = 109
   Insn 14(l0): point = 112
   Insn 13(l0): point = 114
   Insn 11(l0): point = 117
   Insn 10(l0): point = 119
   Insn 9(l0): point = 121
   Insn 5(l0): point = 123
   Insn 4(l0): point = 125
   Insn 3(l0): point = 127
   Insn 2(l0): point = 129
 a0(r101): [3..4]
 a1(r100): [5..6]
 a2(r119): [13..14]
 a3(r99): [13..16]
 a4(r98): [17..18]
 a5(r118): [19..20]
 a6(r117): [23..24]
 a7(r97): [23..26]
 a8(r116): [27..28]
 a9(r115): [34..35]
 a10(r96): [34..37]
 a11(r95): [38..39]
 a12(r114): [40..41]
 a13(r113): [44..45]
 a14(r94): [44..47]
 a15(r112): [48..49]
 a16(r111): [55..56]
 a17(r93): [55..58]
 a18(r92): [59..60]
 a19(r110): [61..62]
 a20(r109): [65..66]
 a21(r91): [65..68]
 a22(r108): [69..70]
 a23(r107): [76..77]
 a24(r90): [76..79]
 a25(r89): [80..81]
 a26(r106): [82..83]
 a27(r105): [86..87]
 a28(r88): [86..89]
 a29(r104): [90..91]
 a30(r87): [110..121] [97..103]
 a31(r103): [124..125]
 a32(r102): [126..127]
Compressing live ranges: from 132 to 52 - 39%
Ranges after the compression:
 a0(r101): [0..1]
 a1(r100): [2..3]
 a2(r119): [4..5]
 a3(r99): [4..5]
 a4(r98): [6..7]
 a5(r118): [8..9]
 a6(r117): [10..11]
 a7(r97): [10..11]
 a8(r116): [12..13]
 a9(r115): [14..15]
 a10(r96): [14..15]
 a11(r95): [16..17]
 a12(r114): [18..19]
 a13(r113): [20..21]
 a14(r94): [20..21]
 a15(r112): [22..23]
 a16(r111): [24..25]
 a17(r93): [24..25]
 a18(r92): [26..27]
 a19(r110): [28..29]
 a20(r109): [30..31]
 a21(r91): [30..31]
 a22(r108): [32..33]
 a23(r107): [34..35]
 a24(r90): [34..35]
 a25(r89): [36..37]
 a26(r106): [38..39]
 a27(r105): [40..41]
 a28(r88): [40..41]
 a29(r104): [42..43]
 a30(r87): [44..47]
 a31(r103): [48..49]
 a32(r102): [50..51]
  pref0:a32(r102)<-hr4@500
  pref1:a0(r101)<-hr0@500
  regions=1, blocks=14, points=52
    allocnos=33 (big 0), copies=0, conflicts=0, ranges=33
Disposition:
   30:r87  l0     0   28:r88  l0     1   25:r89  l0     0   24:r90  l0     1
   21:r91  l0     1   18:r92  l0     0   17:r93  l0     1   14:r94  l0     1
   11:r95  l0     0   10:r96  l0     1    7:r97  l0     1    4:r98  l0     0
    3:r99  l0     1    1:r100 l0     0    0:r101 l0     0   32:r102 l0     0
   31:r103 l0     0   29:r104 l0     0   27:r105 l0     0   26:r106 l0     0
   23:r107 l0     0   22:r108 l0     0   20:r109 l0     0   19:r110 l0     0
   16:r111 l0     0   15:r112 l0     0   13:r113 l0     0   12:r114 l0     0
    9:r115 l0     0    8:r116 l0     0    6:r117 l0     0    5:r118 l0     0
    2:r119 l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


bestia_move

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r6={1d,13u} r7={1d,13u} r16={1d,12u} r17={9d,5u} r20={1d,32u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,5u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} 
;;    total ref usage 178{62d,116u,0e} in 60{60 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 102 103
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1138 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(insn 3 2 4 2 (set (reg:SI 102)
        (reg:SI 4 si [ direction ])) "function.c":1138 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ direction ])
        (nil)))
(insn 4 3 5 2 (set (reg:QI 103)
        (subreg:QI (reg:SI 102) 0)) "function.c":1138 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 102)
        (nil)))
(insn 5 4 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 direction+0 S1 A32])
        (reg:QI 103)) "function.c":1138 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 103)
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:SI 87 [ _1 ])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 direction+0 S1 A32]))) "function.c":1139 155 {extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 100 [0x64]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1139 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 66)
;;  succ:       3 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 87 [ _1 ])
            (const_int 100 [0x64]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "function.c":1139 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 97 [0x61]))) "function.c":1139 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(jump_insn 17 16 89 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) "function.c":1139 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 40)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 89 17 90 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 90 89 91 5 (set (pc)
        (label_ref 77)) "function.c":1139 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 91 90 21)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       3
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(code_label 21 91 22 6 193 (nil) [1 uses])
(note 22 21 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 115 [0x73]))) "function.c":1139 11 {*cmpsi_1}
     (nil))
(jump_insn 24 23 25 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "function.c":1139 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 53)
;;  succ:       7 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
;; lr  def 	 17 [flags]
(note 25 24 26 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (const_int 119 [0x77]))) "function.c":1139 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
        (nil)))
(jump_insn 27 26 28 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) "function.c":1139 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 77)
;;  succ:       12
;;              8 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 88 89 90 104 105 106 107
(note 28 27 29 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 8 (set (reg/f:DI 104)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1142 85 {*movdi_internal}
     (nil))
(insn 30 29 31 8 (set (reg:SI 88 [ _2 ])
        (mem:SI (plus:DI (reg/f:DI 104)
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1142 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104)
        (nil)))
(insn 31 30 32 8 (set (reg/f:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1142 85 {*movdi_internal}
     (nil))
(insn 32 31 33 8 (set (mem:SI (plus:DI (reg/f:DI 105)
                (const_int 36076 [0x8cec])) [3 serwer_17(D)->bestia.y_ostatnie+0 S4 A32])
        (reg:SI 88 [ _2 ])) "function.c":1142 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105)
        (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
            (nil))))
(insn 33 32 34 8 (set (reg/f:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1143 85 {*movdi_internal}
     (nil))
(insn 34 33 35 8 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 106)
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1143 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106)
        (nil)))
(insn 35 34 36 8 (parallel [
            (set (reg:SI 90 [ _4 ])
                (plus:SI (reg:SI 89 [ _3 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1143 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 8 (set (reg/f:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1143 85 {*movdi_internal}
     (nil))
(insn 37 36 92 8 (set (mem:SI (plus:DI (reg/f:DI 107)
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])
        (reg:SI 90 [ _4 ])) "function.c":1143 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
            (nil))))
(jump_insn 92 37 93 8 (set (pc)
        (label_ref 77)) "function.c":1144 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 93 92 40)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       4
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 108 109 110 111
(code_label 40 93 41 9 194 (nil) [1 uses])
(note 41 40 42 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 9 (set (reg/f:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1146 85 {*movdi_internal}
     (nil))
(insn 43 42 44 9 (set (reg:SI 91 [ _5 ])
        (mem:SI (plus:DI (reg/f:DI 108)
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1146 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108)
        (nil)))
(insn 44 43 45 9 (set (reg/f:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1146 85 {*movdi_internal}
     (nil))
(insn 45 44 46 9 (set (mem:SI (plus:DI (reg/f:DI 109)
                (const_int 36072 [0x8ce8])) [3 serwer_17(D)->bestia.x_ostatnie+0 S4 A64])
        (reg:SI 91 [ _5 ])) "function.c":1146 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109)
        (expr_list:REG_DEAD (reg:SI 91 [ _5 ])
            (nil))))
(insn 46 45 47 9 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1147 85 {*movdi_internal}
     (nil))
(insn 47 46 48 9 (set (reg:SI 92 [ _6 ])
        (mem:SI (plus:DI (reg/f:DI 110)
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1147 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110)
        (nil)))
(insn 48 47 49 9 (parallel [
            (set (reg:SI 93 [ _7 ])
                (plus:SI (reg:SI 92 [ _6 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1147 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 49 48 50 9 (set (reg/f:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1147 85 {*movdi_internal}
     (nil))
(insn 50 49 94 9 (set (mem:SI (plus:DI (reg/f:DI 111)
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])
        (reg:SI 93 [ _7 ])) "function.c":1147 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111)
        (expr_list:REG_DEAD (reg:SI 93 [ _7 ])
            (nil))))
(jump_insn 94 50 95 9 (set (pc)
        (label_ref 77)) "function.c":1148 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 95 94 53)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       6
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 94 95 96 112 113 114 115
(code_label 53 95 54 10 196 (nil) [1 uses])
(note 54 53 55 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 10 (set (reg/f:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1150 85 {*movdi_internal}
     (nil))
(insn 56 55 57 10 (set (reg:SI 94 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 112)
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1150 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112)
        (nil)))
(insn 57 56 58 10 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1150 85 {*movdi_internal}
     (nil))
(insn 58 57 59 10 (set (mem:SI (plus:DI (reg/f:DI 113)
                (const_int 36076 [0x8cec])) [3 serwer_17(D)->bestia.y_ostatnie+0 S4 A32])
        (reg:SI 94 [ _8 ])) "function.c":1150 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113)
        (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
            (nil))))
(insn 59 58 60 10 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1151 85 {*movdi_internal}
     (nil))
(insn 60 59 61 10 (set (reg:SI 95 [ _9 ])
        (mem:SI (plus:DI (reg/f:DI 114)
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])) "function.c":1151 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114)
        (nil)))
(insn 61 60 62 10 (parallel [
            (set (reg:SI 96 [ _10 ])
                (plus:SI (reg:SI 95 [ _9 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1151 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 95 [ _9 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 62 61 63 10 (set (reg/f:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1151 85 {*movdi_internal}
     (nil))
(insn 63 62 96 10 (set (mem:SI (plus:DI (reg/f:DI 115)
                (const_int 36068 [0x8ce4])) [3 serwer_17(D)->bestia.y+0 S4 A32])
        (reg:SI 96 [ _10 ])) "function.c":1151 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115)
        (expr_list:REG_DEAD (reg:SI 96 [ _10 ])
            (nil))))
(jump_insn 96 63 97 10 (set (pc)
        (label_ref 77)) "function.c":1152 683 {jump}
     (nil)
 -> 77)
;;  succ:       12 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 97 96 66)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 13, flags: (RTL)
;;  pred:       2
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 116 117 118 119
(code_label 66 97 67 11 192 (nil) [1 uses])
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 11 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1154 85 {*movdi_internal}
     (nil))
(insn 69 68 70 11 (set (reg:SI 97 [ _11 ])
        (mem:SI (plus:DI (reg/f:DI 116)
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1154 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (nil)))
(insn 70 69 71 11 (set (reg/f:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1154 85 {*movdi_internal}
     (nil))
(insn 71 70 72 11 (set (mem:SI (plus:DI (reg/f:DI 117)
                (const_int 36072 [0x8ce8])) [3 serwer_17(D)->bestia.x_ostatnie+0 S4 A64])
        (reg:SI 97 [ _11 ])) "function.c":1154 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117)
        (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
            (nil))))
(insn 72 71 73 11 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1155 85 {*movdi_internal}
     (nil))
(insn 73 72 74 11 (set (reg:SI 98 [ _12 ])
        (mem:SI (plus:DI (reg/f:DI 118)
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])) "function.c":1155 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118)
        (nil)))
(insn 74 73 75 11 (parallel [
            (set (reg:SI 99 [ _13 ])
                (plus:SI (reg:SI 98 [ _12 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1155 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 75 74 76 11 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1155 85 {*movdi_internal}
     (nil))
(insn 76 75 98 11 (set (mem:SI (plus:DI (reg/f:DI 119)
                (const_int 36064 [0x8ce0])) [3 serwer_17(D)->bestia.x+0 S4 A64])
        (reg:SI 99 [ _13 ])) "function.c":1155 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119)
        (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
            (nil))))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 12, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 98 76 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 77 13 (const_int 0 [0]) "function.c":1156 718 {nop}
     (nil))
;;  succ:       12 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 13, next block 1, flags: (RTL)
;;  pred:       7
;;              5 [always] 
;;              8 [always] 
;;              9 [always] 
;;              13 [always]  (FALLTHRU)
;;              10 [always] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 100 101
(code_label 77 99 78 12 195 (nil) [5 uses])
(note 78 77 79 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 82 12 (set (reg/f:DI 100 [ _26 ])
        (const_int 0 [0])) "function.c":1159 85 {*movdi_internal}
     (nil))
(insn 82 79 86 12 (set (reg/f:DI 101 [ <retval> ])
        (reg/f:DI 100 [ _26 ])) "function.c":1159 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _26 ])
        (nil)))
(insn 86 82 87 12 (set (reg/i:DI 0 ax)
        (reg/f:DI 101 [ <retval> ])) "function.c":1160 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ <retval> ])
        (nil)))
(insn 87 86 0 12 (use (reg/i:DI 0 ax)) "function.c":1160 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function collect_skarb (collect_skarb, funcdef_no=24, decl_uid=6255, cgraph_uid=24, symbol_order=27)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 60 n_edges 91 count 60 (    1)
;; 9 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
;;
;; Loop 8
;;  header 57, latch 56
;;  depth 1, outer 0
;;  nodes: 57 56 52 53 54
;;
;; Loop 7
;;  header 50, latch 49
;;  depth 1, outer 0
;;  nodes: 50 49 45 46 47
;;
;; Loop 6
;;  header 43, latch 42
;;  depth 1, outer 0
;;  nodes: 43 42 38 39 40
;;
;; Loop 5
;;  header 36, latch 35
;;  depth 1, outer 0
;;  nodes: 36 35 31 32 33
;;
;; Loop 4
;;  header 29, latch 28
;;  depth 1, outer 0
;;  nodes: 29 28 24 25 26
;;
;; Loop 3
;;  header 22, latch 21
;;  depth 1, outer 0
;;  nodes: 22 21 17 18 19
;;
;; Loop 2
;;  header 15, latch 14
;;  depth 1, outer 0
;;  nodes: 15 14 10 11 12
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 3 4 5
;; 2 succs { 8 }
;; 3 succs { 4 7 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 59 }
;; 7 succs { 8 }
;; 8 succs { 3 9 }
;; 9 succs { 15 }
;; 10 succs { 11 14 }
;; 11 succs { 12 14 }
;; 12 succs { 13 14 }
;; 13 succs { 59 }
;; 14 succs { 15 }
;; 15 succs { 10 16 }
;; 16 succs { 22 }
;; 17 succs { 18 21 }
;; 18 succs { 19 21 }
;; 19 succs { 20 21 }
;; 20 succs { 59 }
;; 21 succs { 22 }
;; 22 succs { 17 23 }
;; 23 succs { 29 }
;; 24 succs { 25 28 }
;; 25 succs { 26 28 }
;; 26 succs { 27 28 }
;; 27 succs { 59 }
;; 28 succs { 29 }
;; 29 succs { 24 30 }
;; 30 succs { 36 }
;; 31 succs { 32 35 }
;; 32 succs { 33 35 }
;; 33 succs { 34 35 }
;; 34 succs { 59 }
;; 35 succs { 36 }
;; 36 succs { 31 37 }
;; 37 succs { 43 }
;; 38 succs { 39 42 }
;; 39 succs { 40 42 }
;; 40 succs { 41 42 }
;; 41 succs { 59 }
;; 42 succs { 43 }
;; 43 succs { 38 44 }
;; 44 succs { 50 }
;; 45 succs { 46 49 }
;; 46 succs { 47 49 }
;; 47 succs { 48 49 }
;; 48 succs { 59 }
;; 49 succs { 50 }
;; 50 succs { 45 51 }
;; 51 succs { 57 }
;; 52 succs { 53 56 }
;; 53 succs { 54 56 }
;; 54 succs { 55 56 }
;; 55 succs { 59 }
;; 56 succs { 57 }
;; 57 succs { 52 58 }
;; 58 succs { 59 }
;; 59 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r406: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r406,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r405: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r405,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r404: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r404,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r403: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r403,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r402: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r402,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r401: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r401,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r400: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r400,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r399: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r399,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r398: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r398,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r397: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r397,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r396: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r396,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r395: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r395,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r394: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r394,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r393,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r392: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r392,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r391: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r391,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r390: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r390,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r389: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r389,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r388: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r388,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r387: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r387,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r386: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r386,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r385: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r385,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r384,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r383,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r382: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r382,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r381,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r380,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r379,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r378: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r378,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r377: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r377,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r376,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r375,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r374,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r373: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r373,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r372: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r372,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r371,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r370: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r370,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r369: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r369,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r368: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r368,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r367,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r366: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r366,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r365,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r364,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r363,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r362: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r362,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r361,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r360: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r360,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r359: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r359,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r358,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r357: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r357,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r356,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r355,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r354,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r353,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r352: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r352,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r351,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r350: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r350,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r349,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r348: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r348,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r347,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r346,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r345,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r344,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r343,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r342,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r341: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r341,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r340,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r339,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r338: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r338,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r337,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r336,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r335,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r334,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r333,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r332,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r331,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r330,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r329,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r328,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a172 (r327,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r326,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a176 (r325,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a175 (r324,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a173 (r323,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r322,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r321,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r320,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r319,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r318,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r317,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r316,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a190 (r315,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r314,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r313: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r313,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r312,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r311,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r310,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r309,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a201 (r308,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a200 (r307,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r304,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a212 (r303,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r301,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a223 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r297,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a228 (r295,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r294,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a225 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a233 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a238 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a239 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a241 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a245 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a250 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a251 (r286,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a255 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a257 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a261 (r283,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a260 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a259 (r281,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a264 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a266 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a265 (r278,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a263 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a271 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a276 (r275,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a277 (r274,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a279 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a283 (r272,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a288 (r271,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a289 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a293 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a297 (r268,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a296 (r267,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a295 (r266,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a300 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a302 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a301 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a299 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a307 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a312 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a313 (r259,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a314 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a316 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a317 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a319 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r254,l0) best AREG, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a214 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a224 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a229 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a230 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a231 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a232 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a234 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a235 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a237 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a236 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a242 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a243 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a244 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a246 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a247 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a249 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a248 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a253 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a252 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a254 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a256 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a258 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a262 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a267 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a268 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a269 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a270 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a272 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a273 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a275 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a274 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a278 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a280 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a281 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a282 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a284 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a285 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a287 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a286 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a291 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a292 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a290 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a294 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a298 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a303 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a304 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a305 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a306 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a308 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a309 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a311 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a310 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a315 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a318 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r254,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a1(r253,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:54000 NO_REX_SSE_REGS:54000 SSE_REGS:54000 MMX_REGS:67000 INT_SSE_REGS:67000 ALL_REGS:1112000 MEM:14000
  a2(r252,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r406,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r251,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r250,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r405,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r248,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a10(r245,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r246,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a12(r404,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r403,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r399,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r402,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r400,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r401,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a21(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r398,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r394,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r397,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a25(r395,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a26(r396,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r393,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r390,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r391,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a32(r392,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r386,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r389,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a36(r387,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a37(r388,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a38(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a39(r382,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r385,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a41(r383,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r384,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r236,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r381,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a46(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a47(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r380,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a49(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a50(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a51(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r379,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a54(r378,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r227,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a56(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a57(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a58(r377,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r376,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a61(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a62(r373,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a63(r374,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a64(r375,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a65(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r369,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a67(r372,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a68(r370,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a69(r371,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a70(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a71(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a72(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a73(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r368,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a75(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a77(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a78(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a79(r367,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a80(r366,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a81(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r365,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a83(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a84(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a85(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a86(r364,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a87(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a89(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a90(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a91(r363,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a92(r362,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a93(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a94(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a95(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a96(r361,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a97(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a98(r360,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a99(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a100(r357,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a101(r358,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a102(r359,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a103(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a104(r353,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a105(r356,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a106(r354,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a107(r355,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a108(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a109(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a110(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a111(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a112(r352,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a113(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a114(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a115(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a116(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a117(r351,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a118(r350,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a119(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a120(r349,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a121(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a122(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a123(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a124(r348,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a125(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a126(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a127(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a128(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a129(r347,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a130(r346,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a131(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a132(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a133(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a134(r345,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a135(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a136(r342,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a137(r343,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a138(r344,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a139(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a140(r338,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a141(r341,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a142(r339,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a143(r340,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a144(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a145(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a146(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a147(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a148(r337,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a149(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a150(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a151(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a152(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a153(r336,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a154(r335,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a155(r334,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a156(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a157(r333,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a158(r332,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a159(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a160(r331,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a161(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a162(r330,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a163(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a164(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a165(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a166(r329,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a167(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a168(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a169(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a170(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a171(r328,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a172(r327,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a173(r323,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a174(r326,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a175(r324,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a176(r325,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a177(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a178(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a179(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a180(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a181(r322,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a182(r318,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a183(r321,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a184(r319,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a185(r320,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a186(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a187(r317,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a188(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a189(r314,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a190(r315,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a191(r316,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a192(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a193(r310,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a194(r313,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a195(r311,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a196(r312,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a197(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a198(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a199(r309,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a200(r307,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a201(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a202(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a203(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a204(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a205(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a206(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a207(r304,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a208(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a209(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a210(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a211(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a212(r303,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a213(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a214(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a215(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a216(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a217(r301,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a218(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a219(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a220(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a221(r297,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a222(r298,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a223(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a224(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a225(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a226(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a227(r294,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a228(r295,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a229(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a230(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a231(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a232(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a233(r292,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a234(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a235(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a236(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a237(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a238(r291,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a239(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a240(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a241(r289,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a242(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a243(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a244(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a245(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a246(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a247(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a248(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a249(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a250(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a251(r286,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a252(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a253(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a254(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a255(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a256(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a257(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a258(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a259(r281,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a260(r282,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a261(r283,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a262(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a263(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a264(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a265(r278,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a266(r279,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a267(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a268(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a269(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a270(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a271(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a272(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a273(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a274(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a275(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a276(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a277(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a278(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a279(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a280(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a281(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a282(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a283(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a284(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a285(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a286(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a287(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a288(r271,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a289(r270,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a290(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a291(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a292(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a293(r269,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a294(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a295(r266,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a296(r267,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a297(r268,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a298(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a299(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a300(r265,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a301(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a302(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a303(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a304(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a305(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a306(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a307(r261,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a308(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a309(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a310(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a311(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a312(r260,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a313(r259,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a314(r258,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a315(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a316(r257,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a317(r256,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a318(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a319(r255,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 554(l0): point = 0
   Insn 553(l0): point = 2
   Insn 549(l0): point = 4
   Insn 546(l0): point = 7
   Insn 586(l0): point = 10
   Insn 532(l0): point = 12
   Insn 531(l0): point = 14
   Insn 530(l0): point = 16
   Insn 529(l0): point = 18
   Insn 528(l0): point = 20
   Insn 527(l0): point = 22
   Insn 526(l0): point = 24
   Insn 525(l0): point = 26
   Insn 524(l0): point = 28
   Insn 523(l0): point = 30
   Insn 522(l0): point = 32
   Insn 521(l0): point = 34
   Insn 520(l0): point = 36
   Insn 519(l0): point = 38
   Insn 518(l0): point = 40
   Insn 517(l0): point = 42
   Insn 516(l0): point = 44
   Insn 515(l0): point = 46
   Insn 514(l0): point = 48
   Insn 513(l0): point = 50
   Insn 512(l0): point = 52
   Insn 511(l0): point = 54
   Insn 510(l0): point = 56
   Insn 509(l0): point = 58
   Insn 508(l0): point = 60
   Insn 507(l0): point = 62
   Insn 506(l0): point = 64
   Insn 505(l0): point = 66
   Insn 504(l0): point = 68
   Insn 487(l0): point = 71
   Insn 486(l0): point = 73
   Insn 485(l0): point = 75
   Insn 484(l0): point = 77
   Insn 483(l0): point = 79
   Insn 482(l0): point = 81
   Insn 481(l0): point = 83
   Insn 544(l0): point = 86
   Insn 543(l0): point = 88
   Insn 541(l0): point = 90
   Insn 540(l0): point = 92
   Insn 537(l0): point = 95
   Insn 495(l0): point = 98
   Insn 494(l0): point = 100
   Insn 493(l0): point = 102
   Insn 492(l0): point = 104
   Insn 491(l0): point = 106
   Insn 490(l0): point = 108
   Insn 489(l0): point = 110
   Insn 502(l0): point = 113
   Insn 501(l0): point = 115
   Insn 500(l0): point = 117
   Insn 499(l0): point = 119
   Insn 498(l0): point = 121
   Insn 497(l0): point = 123
   Insn 584(l0): point = 126
   Insn 477(l0): point = 128
   Insn 582(l0): point = 131
   Insn 463(l0): point = 133
   Insn 462(l0): point = 135
   Insn 461(l0): point = 137
   Insn 460(l0): point = 139
   Insn 459(l0): point = 141
   Insn 458(l0): point = 143
   Insn 457(l0): point = 145
   Insn 456(l0): point = 147
   Insn 455(l0): point = 149
   Insn 454(l0): point = 151
   Insn 453(l0): point = 153
   Insn 452(l0): point = 155
   Insn 451(l0): point = 157
   Insn 450(l0): point = 159
   Insn 449(l0): point = 161
   Insn 448(l0): point = 163
   Insn 447(l0): point = 165
   Insn 446(l0): point = 167
   Insn 445(l0): point = 169
   Insn 428(l0): point = 172
   Insn 427(l0): point = 174
   Insn 426(l0): point = 176
   Insn 425(l0): point = 178
   Insn 424(l0): point = 180
   Insn 423(l0): point = 182
   Insn 422(l0): point = 184
   Insn 421(l0): point = 186
   Insn 420(l0): point = 188
   Insn 419(l0): point = 190
   Insn 418(l0): point = 192
   Insn 417(l0): point = 194
   Insn 416(l0): point = 196
   Insn 475(l0): point = 199
   Insn 474(l0): point = 201
   Insn 472(l0): point = 203
   Insn 471(l0): point = 205
   Insn 468(l0): point = 208
   Insn 436(l0): point = 211
   Insn 435(l0): point = 213
   Insn 434(l0): point = 215
   Insn 433(l0): point = 217
   Insn 432(l0): point = 219
   Insn 431(l0): point = 221
   Insn 430(l0): point = 223
   Insn 443(l0): point = 226
   Insn 442(l0): point = 228
   Insn 441(l0): point = 230
   Insn 440(l0): point = 232
   Insn 439(l0): point = 234
   Insn 438(l0): point = 236
   Insn 580(l0): point = 239
   Insn 412(l0): point = 241
   Insn 578(l0): point = 244
   Insn 398(l0): point = 246
   Insn 397(l0): point = 248
   Insn 396(l0): point = 250
   Insn 395(l0): point = 252
   Insn 394(l0): point = 254
   Insn 393(l0): point = 256
   Insn 392(l0): point = 258
   Insn 391(l0): point = 260
   Insn 390(l0): point = 262
   Insn 389(l0): point = 264
   Insn 388(l0): point = 266
   Insn 387(l0): point = 268
   Insn 386(l0): point = 270
   Insn 385(l0): point = 272
   Insn 384(l0): point = 274
   Insn 383(l0): point = 276
   Insn 382(l0): point = 278
   Insn 381(l0): point = 280
   Insn 380(l0): point = 282
   Insn 363(l0): point = 285
   Insn 362(l0): point = 287
   Insn 361(l0): point = 289
   Insn 360(l0): point = 291
   Insn 359(l0): point = 293
   Insn 358(l0): point = 295
   Insn 357(l0): point = 297
   Insn 356(l0): point = 299
   Insn 355(l0): point = 301
   Insn 354(l0): point = 303
   Insn 353(l0): point = 305
   Insn 352(l0): point = 307
   Insn 351(l0): point = 309
   Insn 410(l0): point = 312
   Insn 409(l0): point = 314
   Insn 407(l0): point = 316
   Insn 406(l0): point = 318
   Insn 403(l0): point = 321
   Insn 371(l0): point = 324
   Insn 370(l0): point = 326
   Insn 369(l0): point = 328
   Insn 368(l0): point = 330
   Insn 367(l0): point = 332
   Insn 366(l0): point = 334
   Insn 365(l0): point = 336
   Insn 378(l0): point = 339
   Insn 377(l0): point = 341
   Insn 376(l0): point = 343
   Insn 375(l0): point = 345
   Insn 374(l0): point = 347
   Insn 373(l0): point = 349
   Insn 576(l0): point = 352
   Insn 347(l0): point = 354
   Insn 574(l0): point = 357
   Insn 333(l0): point = 359
   Insn 332(l0): point = 361
   Insn 331(l0): point = 363
   Insn 330(l0): point = 365
   Insn 329(l0): point = 367
   Insn 328(l0): point = 369
   Insn 327(l0): point = 371
   Insn 326(l0): point = 373
   Insn 325(l0): point = 375
   Insn 324(l0): point = 377
   Insn 323(l0): point = 379
   Insn 322(l0): point = 381
   Insn 321(l0): point = 383
   Insn 320(l0): point = 385
   Insn 319(l0): point = 387
   Insn 318(l0): point = 389
   Insn 317(l0): point = 391
   Insn 300(l0): point = 394
   Insn 299(l0): point = 396
   Insn 298(l0): point = 398
   Insn 297(l0): point = 400
   Insn 296(l0): point = 402
   Insn 295(l0): point = 404
   Insn 294(l0): point = 406
   Insn 293(l0): point = 408
   Insn 292(l0): point = 410
   Insn 291(l0): point = 412
   Insn 290(l0): point = 414
   Insn 289(l0): point = 416
   Insn 288(l0): point = 418
   Insn 345(l0): point = 421
   Insn 344(l0): point = 423
   Insn 342(l0): point = 425
   Insn 341(l0): point = 427
   Insn 338(l0): point = 430
   Insn 308(l0): point = 433
   Insn 307(l0): point = 435
   Insn 306(l0): point = 437
   Insn 305(l0): point = 439
   Insn 304(l0): point = 441
   Insn 303(l0): point = 443
   Insn 302(l0): point = 445
   Insn 315(l0): point = 448
   Insn 314(l0): point = 450
   Insn 313(l0): point = 452
   Insn 312(l0): point = 454
   Insn 311(l0): point = 456
   Insn 310(l0): point = 458
   Insn 572(l0): point = 461
   Insn 284(l0): point = 463
   Insn 283(l0): point = 465
   Insn 282(l0): point = 467
   Insn 281(l0): point = 469
   Insn 280(l0): point = 471
   Insn 279(l0): point = 473
   Insn 278(l0): point = 475
   Insn 277(l0): point = 477
   Insn 276(l0): point = 479
   Insn 570(l0): point = 482
   Insn 262(l0): point = 484
   Insn 261(l0): point = 486
   Insn 260(l0): point = 488
   Insn 259(l0): point = 490
   Insn 258(l0): point = 492
   Insn 257(l0): point = 494
   Insn 256(l0): point = 496
   Insn 255(l0): point = 498
   Insn 254(l0): point = 500
   Insn 253(l0): point = 502
   Insn 252(l0): point = 504
   Insn 251(l0): point = 506
   Insn 250(l0): point = 508
   Insn 249(l0): point = 510
   Insn 248(l0): point = 512
   Insn 247(l0): point = 514
   Insn 246(l0): point = 516
   Insn 245(l0): point = 518
   Insn 244(l0): point = 520
   Insn 243(l0): point = 522
   Insn 242(l0): point = 524
   Insn 241(l0): point = 526
   Insn 240(l0): point = 528
   Insn 239(l0): point = 530
   Insn 238(l0): point = 532
   Insn 237(l0): point = 534
   Insn 236(l0): point = 536
   Insn 235(l0): point = 538
   Insn 234(l0): point = 540
   Insn 217(l0): point = 543
   Insn 216(l0): point = 545
   Insn 215(l0): point = 547
   Insn 214(l0): point = 549
   Insn 213(l0): point = 551
   Insn 212(l0): point = 553
   Insn 211(l0): point = 555
   Insn 274(l0): point = 558
   Insn 273(l0): point = 560
   Insn 271(l0): point = 562
   Insn 270(l0): point = 564
   Insn 267(l0): point = 567
   Insn 225(l0): point = 570
   Insn 224(l0): point = 572
   Insn 223(l0): point = 574
   Insn 222(l0): point = 576
   Insn 221(l0): point = 578
   Insn 220(l0): point = 580
   Insn 219(l0): point = 582
   Insn 232(l0): point = 585
   Insn 231(l0): point = 587
   Insn 230(l0): point = 589
   Insn 229(l0): point = 591
   Insn 228(l0): point = 593
   Insn 227(l0): point = 595
   Insn 568(l0): point = 598
   Insn 207(l0): point = 600
   Insn 566(l0): point = 603
   Insn 193(l0): point = 605
   Insn 192(l0): point = 607
   Insn 191(l0): point = 609
   Insn 190(l0): point = 611
   Insn 189(l0): point = 613
   Insn 188(l0): point = 615
   Insn 187(l0): point = 617
   Insn 186(l0): point = 619
   Insn 185(l0): point = 621
   Insn 184(l0): point = 623
   Insn 183(l0): point = 625
   Insn 182(l0): point = 627
   Insn 181(l0): point = 629
   Insn 180(l0): point = 631
   Insn 179(l0): point = 633
   Insn 178(l0): point = 635
   Insn 177(l0): point = 637
   Insn 176(l0): point = 639
   Insn 175(l0): point = 641
   Insn 158(l0): point = 644
   Insn 157(l0): point = 646
   Insn 156(l0): point = 648
   Insn 155(l0): point = 650
   Insn 154(l0): point = 652
   Insn 153(l0): point = 654
   Insn 152(l0): point = 656
   Insn 151(l0): point = 658
   Insn 150(l0): point = 660
   Insn 149(l0): point = 662
   Insn 148(l0): point = 664
   Insn 147(l0): point = 666
   Insn 146(l0): point = 668
   Insn 205(l0): point = 671
   Insn 204(l0): point = 673
   Insn 202(l0): point = 675
   Insn 201(l0): point = 677
   Insn 198(l0): point = 680
   Insn 166(l0): point = 683
   Insn 165(l0): point = 685
   Insn 164(l0): point = 687
   Insn 163(l0): point = 689
   Insn 162(l0): point = 691
   Insn 161(l0): point = 693
   Insn 160(l0): point = 695
   Insn 173(l0): point = 698
   Insn 172(l0): point = 700
   Insn 171(l0): point = 702
   Insn 170(l0): point = 704
   Insn 169(l0): point = 706
   Insn 168(l0): point = 708
   Insn 564(l0): point = 711
   Insn 142(l0): point = 713
   Insn 562(l0): point = 716
   Insn 128(l0): point = 718
   Insn 127(l0): point = 720
   Insn 126(l0): point = 722
   Insn 125(l0): point = 724
   Insn 124(l0): point = 726
   Insn 123(l0): point = 728
   Insn 122(l0): point = 730
   Insn 121(l0): point = 732
   Insn 120(l0): point = 734
   Insn 119(l0): point = 736
   Insn 118(l0): point = 738
   Insn 117(l0): point = 740
   Insn 116(l0): point = 742
   Insn 115(l0): point = 744
   Insn 114(l0): point = 746
   Insn 113(l0): point = 748
   Insn 112(l0): point = 750
   Insn 111(l0): point = 752
   Insn 110(l0): point = 754
   Insn 93(l0): point = 757
   Insn 92(l0): point = 759
   Insn 91(l0): point = 761
   Insn 90(l0): point = 763
   Insn 89(l0): point = 765
   Insn 88(l0): point = 767
   Insn 87(l0): point = 769
   Insn 86(l0): point = 771
   Insn 85(l0): point = 773
   Insn 84(l0): point = 775
   Insn 83(l0): point = 777
   Insn 82(l0): point = 779
   Insn 81(l0): point = 781
   Insn 140(l0): point = 784
   Insn 139(l0): point = 786
   Insn 137(l0): point = 788
   Insn 136(l0): point = 790
   Insn 133(l0): point = 793
   Insn 101(l0): point = 796
   Insn 100(l0): point = 798
   Insn 99(l0): point = 800
   Insn 98(l0): point = 802
   Insn 97(l0): point = 804
   Insn 96(l0): point = 806
   Insn 95(l0): point = 808
   Insn 108(l0): point = 811
   Insn 107(l0): point = 813
   Insn 106(l0): point = 815
   Insn 105(l0): point = 817
   Insn 104(l0): point = 819
   Insn 103(l0): point = 821
   Insn 560(l0): point = 824
   Insn 77(l0): point = 826
   Insn 558(l0): point = 829
   Insn 63(l0): point = 831
   Insn 62(l0): point = 833
   Insn 61(l0): point = 835
   Insn 60(l0): point = 837
   Insn 59(l0): point = 839
   Insn 58(l0): point = 841
   Insn 57(l0): point = 843
   Insn 56(l0): point = 845
   Insn 55(l0): point = 847
   Insn 54(l0): point = 849
   Insn 53(l0): point = 851
   Insn 52(l0): point = 853
   Insn 51(l0): point = 855
   Insn 50(l0): point = 857
   Insn 49(l0): point = 859
   Insn 48(l0): point = 861
   Insn 47(l0): point = 863
   Insn 30(l0): point = 866
   Insn 29(l0): point = 868
   Insn 28(l0): point = 870
   Insn 27(l0): point = 872
   Insn 26(l0): point = 874
   Insn 25(l0): point = 876
   Insn 24(l0): point = 878
   Insn 23(l0): point = 880
   Insn 22(l0): point = 882
   Insn 21(l0): point = 884
   Insn 20(l0): point = 886
   Insn 19(l0): point = 888
   Insn 18(l0): point = 890
   Insn 75(l0): point = 893
   Insn 74(l0): point = 895
   Insn 72(l0): point = 897
   Insn 71(l0): point = 899
   Insn 68(l0): point = 902
   Insn 38(l0): point = 905
   Insn 37(l0): point = 907
   Insn 36(l0): point = 909
   Insn 35(l0): point = 911
   Insn 34(l0): point = 913
   Insn 33(l0): point = 915
   Insn 32(l0): point = 917
   Insn 45(l0): point = 920
   Insn 44(l0): point = 922
   Insn 43(l0): point = 924
   Insn 42(l0): point = 926
   Insn 41(l0): point = 928
   Insn 40(l0): point = 930
   Insn 556(l0): point = 933
   Insn 14(l0): point = 935
   Insn 13(l0): point = 937
   Insn 12(l0): point = 939
   Insn 11(l0): point = 941
   Insn 10(l0): point = 943
   Insn 9(l0): point = 945
   Insn 8(l0): point = 947
   Insn 7(l0): point = 949
   Insn 6(l0): point = 951
   Insn 2(l0): point = 953
 a0(r254): [3..4]
 a1(r253): [829..831] [716..718] [603..605] [482..484] [357..359] [244..246] [131..133] [10..12] [5..7]
 a2(r252): [89..90]
 a3(r406): [91..92]
 a4(r251): [15..16]
 a5(r250): [17..18]
 a6(r249): [17..22]
 a7(r405): [19..20]
 a8(r248): [23..24]
 a9(r247): [25..26]
 a10(r245): [25..32]
 a11(r246): [27..28]
 a12(r404): [29..30]
 a13(r403): [33..34]
 a14(r399): [37..44]
 a15(r402): [37..38]
 a16(r400): [39..40]
 a17(r401): [41..42]
 a18(r243): [47..50]
 a19(r244): [47..48]
 a20(r242): [49..54]
 a21(r241): [49..64]
 a22(r398): [51..52]
 a23(r394): [55..62]
 a24(r397): [55..56]
 a25(r395): [57..58]
 a26(r396): [59..60]
 a27(r240): [65..66]
 a28(r393): [67..68]
 a29(r239): [116..117]
 a30(r390): [118..123]
 a31(r391): [118..119]
 a32(r392): [120..121]
 a33(r238): [101..102]
 a34(r386): [103..110]
 a35(r389): [103..104]
 a36(r387): [105..106]
 a37(r388): [107..108]
 a38(r237): [74..75]
 a39(r382): [76..83]
 a40(r385): [76..77]
 a41(r383): [78..79]
 a42(r384): [80..81]
 a43(r236): [202..203]
 a44(r381): [204..205]
 a45(r235): [136..137]
 a46(r234): [138..139]
 a47(r233): [138..143]
 a48(r380): [140..141]
 a49(r232): [144..145]
 a50(r231): [146..147]
 a51(r229): [146..153]
 a52(r230): [148..149]
 a53(r379): [150..151]
 a54(r378): [154..155]
 a55(r227): [158..161]
 a56(r228): [158..159]
 a57(r226): [160..165]
 a58(r377): [162..163]
 a59(r225): [166..167]
 a60(r376): [168..169]
 a61(r224): [229..230]
 a62(r373): [231..236]
 a63(r374): [231..232]
 a64(r375): [233..234]
 a65(r223): [214..215]
 a66(r369): [216..223]
 a67(r372): [216..217]
 a68(r370): [218..219]
 a69(r371): [220..221]
 a70(r222): [175..176]
 a71(r221): [177..178]
 a72(r220): [179..180]
 a73(r219): [179..184]
 a74(r368): [181..182]
 a75(r218): [185..186]
 a76(r217): [187..188]
 a77(r215): [187..194]
 a78(r216): [189..190]
 a79(r367): [191..192]
 a80(r366): [195..196]
 a81(r214): [315..316]
 a82(r365): [317..318]
 a83(r213): [249..250]
 a84(r212): [251..252]
 a85(r211): [251..256]
 a86(r364): [253..254]
 a87(r210): [257..258]
 a88(r209): [259..260]
 a89(r207): [259..266]
 a90(r208): [261..262]
 a91(r363): [263..264]
 a92(r362): [267..268]
 a93(r205): [271..274]
 a94(r206): [271..272]
 a95(r204): [273..278]
 a96(r361): [275..276]
 a97(r203): [279..280]
 a98(r360): [281..282]
 a99(r202): [342..343]
 a100(r357): [344..349]
 a101(r358): [344..345]
 a102(r359): [346..347]
 a103(r201): [327..328]
 a104(r353): [329..336]
 a105(r356): [329..330]
 a106(r354): [331..332]
 a107(r355): [333..334]
 a108(r200): [288..289]
 a109(r199): [290..291]
 a110(r198): [292..293]
 a111(r197): [292..297]
 a112(r352): [294..295]
 a113(r196): [298..299]
 a114(r195): [300..301]
 a115(r193): [300..307]
 a116(r194): [302..303]
 a117(r351): [304..305]
 a118(r350): [308..309]
 a119(r192): [424..425]
 a120(r349): [426..427]
 a121(r191): [362..363]
 a122(r190): [364..365]
 a123(r189): [364..369]
 a124(r348): [366..367]
 a125(r188): [370..371]
 a126(r187): [372..373]
 a127(r185): [372..379]
 a128(r186): [374..375]
 a129(r347): [376..377]
 a130(r346): [380..381]
 a131(r182): [384..389]
 a132(r184): [384..385]
 a133(r183): [386..387]
 a134(r345): [390..391]
 a135(r181): [451..452]
 a136(r342): [453..458]
 a137(r343): [453..454]
 a138(r344): [455..456]
 a139(r180): [436..437]
 a140(r338): [438..445]
 a141(r341): [438..439]
 a142(r339): [440..441]
 a143(r340): [442..443]
 a144(r179): [397..398]
 a145(r178): [399..400]
 a146(r177): [401..402]
 a147(r176): [401..406]
 a148(r337): [403..404]
 a149(r175): [407..408]
 a150(r174): [409..410]
 a151(r172): [409..416]
 a152(r173): [411..412]
 a153(r336): [413..414]
 a154(r335): [417..418]
 a155(r334): [466..467]
 a156(r171): [468..469]
 a157(r333): [470..471]
 a158(r332): [474..475]
 a159(r170): [476..477]
 a160(r331): [478..479]
 a161(r169): [561..562]
 a162(r330): [563..564]
 a163(r168): [487..488]
 a164(r167): [489..490]
 a165(r166): [489..494]
 a166(r329): [491..492]
 a167(r165): [495..496]
 a168(r164): [497..498]
 a169(r162): [497..504]
 a170(r163): [499..500]
 a171(r328): [501..502]
 a172(r327): [505..506]
 a173(r323): [509..516]
 a174(r326): [509..510]
 a175(r324): [511..512]
 a176(r325): [513..514]
 a177(r160): [519..522]
 a178(r161): [519..520]
 a179(r159): [521..526]
 a180(r158): [521..536]
 a181(r322): [523..524]
 a182(r318): [527..534]
 a183(r321): [527..528]
 a184(r319): [529..530]
 a185(r320): [531..532]
 a186(r157): [537..538]
 a187(r317): [539..540]
 a188(r156): [588..589]
 a189(r314): [590..595]
 a190(r315): [590..591]
 a191(r316): [592..593]
 a192(r155): [573..574]
 a193(r310): [575..582]
 a194(r313): [575..576]
 a195(r311): [577..578]
 a196(r312): [579..580]
 a197(r154): [546..547]
 a198(r306): [548..555]
 a199(r309): [548..549]
 a200(r307): [550..551]
 a201(r308): [552..553]
 a202(r153): [674..675]
 a203(r305): [676..677]
 a204(r152): [608..609]
 a205(r151): [610..611]
 a206(r150): [610..615]
 a207(r304): [612..613]
 a208(r149): [616..617]
 a209(r148): [618..619]
 a210(r146): [618..625]
 a211(r147): [620..621]
 a212(r303): [622..623]
 a213(r302): [626..627]
 a214(r144): [630..633]
 a215(r145): [630..631]
 a216(r143): [632..637]
 a217(r301): [634..635]
 a218(r142): [638..639]
 a219(r300): [640..641]
 a220(r141): [701..702]
 a221(r297): [703..708]
 a222(r298): [703..704]
 a223(r299): [705..706]
 a224(r140): [686..687]
 a225(r293): [688..695]
 a226(r296): [688..689]
 a227(r294): [690..691]
 a228(r295): [692..693]
 a229(r139): [647..648]
 a230(r138): [649..650]
 a231(r137): [651..652]
 a232(r136): [651..656]
 a233(r292): [653..654]
 a234(r135): [657..658]
 a235(r134): [659..660]
 a236(r132): [659..666]
 a237(r133): [661..662]
 a238(r291): [663..664]
 a239(r290): [667..668]
 a240(r131): [787..788]
 a241(r289): [789..790]
 a242(r130): [721..722]
 a243(r129): [723..724]
 a244(r128): [723..728]
 a245(r288): [725..726]
 a246(r127): [729..730]
 a247(r126): [731..732]
 a248(r124): [731..738]
 a249(r125): [733..734]
 a250(r287): [735..736]
 a251(r286): [739..740]
 a252(r122): [743..746]
 a253(r123): [743..744]
 a254(r121): [745..750]
 a255(r285): [747..748]
 a256(r120): [751..752]
 a257(r284): [753..754]
 a258(r119): [814..815]
 a259(r281): [816..821]
 a260(r282): [816..817]
 a261(r283): [818..819]
 a262(r118): [799..800]
 a263(r277): [801..808]
 a264(r280): [801..802]
 a265(r278): [803..804]
 a266(r279): [805..806]
 a267(r117): [760..761]
 a268(r116): [762..763]
 a269(r115): [764..765]
 a270(r114): [764..769]
 a271(r276): [766..767]
 a272(r113): [770..771]
 a273(r112): [772..773]
 a274(r110): [772..779]
 a275(r111): [774..775]
 a276(r275): [776..777]
 a277(r274): [780..781]
 a278(r109): [896..897]
 a279(r273): [898..899]
 a280(r108): [834..835]
 a281(r107): [836..837]
 a282(r106): [836..841]
 a283(r272): [838..839]
 a284(r105): [842..843]
 a285(r104): [844..845]
 a286(r102): [844..851]
 a287(r103): [846..847]
 a288(r271): [848..849]
 a289(r270): [852..853]
 a290(r99): [856..861]
 a291(r101): [856..857]
 a292(r100): [858..859]
 a293(r269): [862..863]
 a294(r98): [923..924]
 a295(r266): [925..930]
 a296(r267): [925..926]
 a297(r268): [927..928]
 a298(r97): [908..909]
 a299(r262): [910..917]
 a300(r265): [910..911]
 a301(r263): [912..913]
 a302(r264): [914..915]
 a303(r96): [869..870]
 a304(r95): [871..872]
 a305(r94): [873..874]
 a306(r93): [873..878]
 a307(r261): [875..876]
 a308(r92): [879..880]
 a309(r91): [881..882]
 a310(r89): [881..888]
 a311(r90): [883..884]
 a312(r260): [885..886]
 a313(r259): [889..890]
 a314(r258): [938..939]
 a315(r88): [940..941]
 a316(r257): [942..943]
 a317(r256): [946..947]
 a318(r87): [948..949]
 a319(r255): [950..951]
Compressing live ranges: from 956 to 536 - 56%
Ranges after the compression:
 a0(r254): [0..1]
 a1(r253): [464..465] [400..401] [336..337] [270..271] [198..199] [134..135] [70..71] [2..5]
 a2(r252): [52..53]
 a3(r406): [54..55]
 a4(r251): [6..7]
 a5(r250): [8..9]
 a6(r249): [8..11]
 a7(r405): [10..11]
 a8(r248): [12..13]
 a9(r247): [14..15]
 a10(r245): [14..19]
 a11(r246): [16..17]
 a12(r404): [18..19]
 a13(r403): [20..21]
 a14(r399): [22..27]
 a15(r402): [22..23]
 a16(r400): [24..25]
 a17(r401): [26..27]
 a18(r243): [28..31]
 a19(r244): [28..29]
 a20(r242): [30..33]
 a21(r241): [30..39]
 a22(r398): [32..33]
 a23(r394): [34..39]
 a24(r397): [34..35]
 a25(r395): [36..37]
 a26(r396): [38..39]
 a27(r240): [40..41]
 a28(r393): [42..43]
 a29(r239): [64..65]
 a30(r390): [66..69]
 a31(r391): [66..67]
 a32(r392): [68..69]
 a33(r238): [56..57]
 a34(r386): [58..63]
 a35(r389): [58..59]
 a36(r387): [60..61]
 a37(r388): [62..63]
 a38(r237): [44..45]
 a39(r382): [46..51]
 a40(r385): [46..47]
 a41(r383): [48..49]
 a42(r384): [50..51]
 a43(r236): [116..117]
 a44(r381): [118..119]
 a45(r235): [72..73]
 a46(r234): [74..75]
 a47(r233): [74..77]
 a48(r380): [76..77]
 a49(r232): [78..79]
 a50(r231): [80..81]
 a51(r229): [80..85]
 a52(r230): [82..83]
 a53(r379): [84..85]
 a54(r378): [86..87]
 a55(r227): [88..91]
 a56(r228): [88..89]
 a57(r226): [90..93]
 a58(r377): [92..93]
 a59(r225): [94..95]
 a60(r376): [96..97]
 a61(r224): [128..129]
 a62(r373): [130..133]
 a63(r374): [130..131]
 a64(r375): [132..133]
 a65(r223): [120..121]
 a66(r369): [122..127]
 a67(r372): [122..123]
 a68(r370): [124..125]
 a69(r371): [126..127]
 a70(r222): [98..99]
 a71(r221): [100..101]
 a72(r220): [102..103]
 a73(r219): [102..105]
 a74(r368): [104..105]
 a75(r218): [106..107]
 a76(r217): [108..109]
 a77(r215): [108..113]
 a78(r216): [110..111]
 a79(r367): [112..113]
 a80(r366): [114..115]
 a81(r214): [180..181]
 a82(r365): [182..183]
 a83(r213): [136..137]
 a84(r212): [138..139]
 a85(r211): [138..141]
 a86(r364): [140..141]
 a87(r210): [142..143]
 a88(r209): [144..145]
 a89(r207): [144..149]
 a90(r208): [146..147]
 a91(r363): [148..149]
 a92(r362): [150..151]
 a93(r205): [152..155]
 a94(r206): [152..153]
 a95(r204): [154..157]
 a96(r361): [156..157]
 a97(r203): [158..159]
 a98(r360): [160..161]
 a99(r202): [192..193]
 a100(r357): [194..197]
 a101(r358): [194..195]
 a102(r359): [196..197]
 a103(r201): [184..185]
 a104(r353): [186..191]
 a105(r356): [186..187]
 a106(r354): [188..189]
 a107(r355): [190..191]
 a108(r200): [162..163]
 a109(r199): [164..165]
 a110(r198): [166..167]
 a111(r197): [166..169]
 a112(r352): [168..169]
 a113(r196): [170..171]
 a114(r195): [172..173]
 a115(r193): [172..177]
 a116(r194): [174..175]
 a117(r351): [176..177]
 a118(r350): [178..179]
 a119(r192): [240..241]
 a120(r349): [242..243]
 a121(r191): [200..201]
 a122(r190): [202..203]
 a123(r189): [202..205]
 a124(r348): [204..205]
 a125(r188): [206..207]
 a126(r187): [208..209]
 a127(r185): [208..213]
 a128(r186): [210..211]
 a129(r347): [212..213]
 a130(r346): [214..215]
 a131(r182): [216..219]
 a132(r184): [216..217]
 a133(r183): [218..219]
 a134(r345): [220..221]
 a135(r181): [252..253]
 a136(r342): [254..257]
 a137(r343): [254..255]
 a138(r344): [256..257]
 a139(r180): [244..245]
 a140(r338): [246..251]
 a141(r341): [246..247]
 a142(r339): [248..249]
 a143(r340): [250..251]
 a144(r179): [222..223]
 a145(r178): [224..225]
 a146(r177): [226..227]
 a147(r176): [226..229]
 a148(r337): [228..229]
 a149(r175): [230..231]
 a150(r174): [232..233]
 a151(r172): [232..237]
 a152(r173): [234..235]
 a153(r336): [236..237]
 a154(r335): [238..239]
 a155(r334): [258..259]
 a156(r171): [260..261]
 a157(r333): [262..263]
 a158(r332): [264..265]
 a159(r170): [266..267]
 a160(r331): [268..269]
 a161(r169): [318..319]
 a162(r330): [320..321]
 a163(r168): [272..273]
 a164(r167): [274..275]
 a165(r166): [274..277]
 a166(r329): [276..277]
 a167(r165): [278..279]
 a168(r164): [280..281]
 a169(r162): [280..285]
 a170(r163): [282..283]
 a171(r328): [284..285]
 a172(r327): [286..287]
 a173(r323): [288..293]
 a174(r326): [288..289]
 a175(r324): [290..291]
 a176(r325): [292..293]
 a177(r160): [294..297]
 a178(r161): [294..295]
 a179(r159): [296..299]
 a180(r158): [296..305]
 a181(r322): [298..299]
 a182(r318): [300..305]
 a183(r321): [300..301]
 a184(r319): [302..303]
 a185(r320): [304..305]
 a186(r157): [306..307]
 a187(r317): [308..309]
 a188(r156): [330..331]
 a189(r314): [332..335]
 a190(r315): [332..333]
 a191(r316): [334..335]
 a192(r155): [322..323]
 a193(r310): [324..329]
 a194(r313): [324..325]
 a195(r311): [326..327]
 a196(r312): [328..329]
 a197(r154): [310..311]
 a198(r306): [312..317]
 a199(r309): [312..313]
 a200(r307): [314..315]
 a201(r308): [316..317]
 a202(r153): [382..383]
 a203(r305): [384..385]
 a204(r152): [338..339]
 a205(r151): [340..341]
 a206(r150): [340..343]
 a207(r304): [342..343]
 a208(r149): [344..345]
 a209(r148): [346..347]
 a210(r146): [346..351]
 a211(r147): [348..349]
 a212(r303): [350..351]
 a213(r302): [352..353]
 a214(r144): [354..357]
 a215(r145): [354..355]
 a216(r143): [356..359]
 a217(r301): [358..359]
 a218(r142): [360..361]
 a219(r300): [362..363]
 a220(r141): [394..395]
 a221(r297): [396..399]
 a222(r298): [396..397]
 a223(r299): [398..399]
 a224(r140): [386..387]
 a225(r293): [388..393]
 a226(r296): [388..389]
 a227(r294): [390..391]
 a228(r295): [392..393]
 a229(r139): [364..365]
 a230(r138): [366..367]
 a231(r137): [368..369]
 a232(r136): [368..371]
 a233(r292): [370..371]
 a234(r135): [372..373]
 a235(r134): [374..375]
 a236(r132): [374..379]
 a237(r133): [376..377]
 a238(r291): [378..379]
 a239(r290): [380..381]
 a240(r131): [446..447]
 a241(r289): [448..449]
 a242(r130): [402..403]
 a243(r129): [404..405]
 a244(r128): [404..407]
 a245(r288): [406..407]
 a246(r127): [408..409]
 a247(r126): [410..411]
 a248(r124): [410..415]
 a249(r125): [412..413]
 a250(r287): [414..415]
 a251(r286): [416..417]
 a252(r122): [418..421]
 a253(r123): [418..419]
 a254(r121): [420..423]
 a255(r285): [422..423]
 a256(r120): [424..425]
 a257(r284): [426..427]
 a258(r119): [458..459]
 a259(r281): [460..463]
 a260(r282): [460..461]
 a261(r283): [462..463]
 a262(r118): [450..451]
 a263(r277): [452..457]
 a264(r280): [452..453]
 a265(r278): [454..455]
 a266(r279): [456..457]
 a267(r117): [428..429]
 a268(r116): [430..431]
 a269(r115): [432..433]
 a270(r114): [432..435]
 a271(r276): [434..435]
 a272(r113): [436..437]
 a273(r112): [438..439]
 a274(r110): [438..443]
 a275(r111): [440..441]
 a276(r275): [442..443]
 a277(r274): [444..445]
 a278(r109): [506..507]
 a279(r273): [508..509]
 a280(r108): [466..467]
 a281(r107): [468..469]
 a282(r106): [468..471]
 a283(r272): [470..471]
 a284(r105): [472..473]
 a285(r104): [474..475]
 a286(r102): [474..479]
 a287(r103): [476..477]
 a288(r271): [478..479]
 a289(r270): [480..481]
 a290(r99): [482..485]
 a291(r101): [482..483]
 a292(r100): [484..485]
 a293(r269): [486..487]
 a294(r98): [518..519]
 a295(r266): [520..523]
 a296(r267): [520..521]
 a297(r268): [522..523]
 a298(r97): [510..511]
 a299(r262): [512..517]
 a300(r265): [512..513]
 a301(r263): [514..515]
 a302(r264): [516..517]
 a303(r96): [488..489]
 a304(r95): [490..491]
 a305(r94): [492..493]
 a306(r93): [492..495]
 a307(r261): [494..495]
 a308(r92): [496..497]
 a309(r91): [498..499]
 a310(r89): [498..503]
 a311(r90): [500..501]
 a312(r260): [502..503]
 a313(r259): [504..505]
 a314(r258): [524..525]
 a315(r88): [526..527]
 a316(r257): [528..529]
 a317(r256): [530..531]
 a318(r87): [532..533]
 a319(r255): [534..535]
  pref0:a0(r254)<-hr0@500
  regions=1, blocks=60, points=536
    allocnos=320 (big 0), copies=0, conflicts=0, ranges=327
Disposition:
  318:r87  l0     0  315:r88  l0     0  310:r89  l0     0  311:r90  l0     1
  309:r91  l0     1  308:r92  l0     0  306:r93  l0     1  305:r94  l0     0
  304:r95  l0     0  303:r96  l0     0  298:r97  l0     0  294:r98  l0     0
  290:r99  l0     0  292:r100 l0     1  291:r101 l0     1  286:r102 l0     0
  287:r103 l0     1  285:r104 l0     1  284:r105 l0     0  282:r106 l0     1
  281:r107 l0     0  280:r108 l0     0  278:r109 l0     0  274:r110 l0     0
  275:r111 l0     1  273:r112 l0     1  272:r113 l0     0  270:r114 l0     1
  269:r115 l0     0  268:r116 l0     0  267:r117 l0     0  262:r118 l0     0
  258:r119 l0     0  256:r120 l0     0  254:r121 l0     1  252:r122 l0     0
  253:r123 l0     1  248:r124 l0     0  249:r125 l0     1  247:r126 l0     1
  246:r127 l0     0  244:r128 l0     1  243:r129 l0     0  242:r130 l0     0
  240:r131 l0     0  236:r132 l0     0  237:r133 l0     1  235:r134 l0     1
  234:r135 l0     0  232:r136 l0     1  231:r137 l0     0  230:r138 l0     0
  229:r139 l0     0  224:r140 l0     0  220:r141 l0     0  218:r142 l0     0
  216:r143 l0     1  214:r144 l0     0  215:r145 l0     1  210:r146 l0     0
  211:r147 l0     1  209:r148 l0     1  208:r149 l0     0  206:r150 l0     1
  205:r151 l0     0  204:r152 l0     0  202:r153 l0     0  197:r154 l0     0
  192:r155 l0     0  188:r156 l0     0  186:r157 l0     0  180:r158 l0     2
  179:r159 l0     1  177:r160 l0     0  178:r161 l0     1  169:r162 l0     0
  170:r163 l0     1  168:r164 l0     1  167:r165 l0     0  165:r166 l0     1
  164:r167 l0     0  163:r168 l0     0  161:r169 l0     0  159:r170 l0     0
  156:r171 l0     0  151:r172 l0     0  152:r173 l0     1  150:r174 l0     1
  149:r175 l0     0  147:r176 l0     1  146:r177 l0     0  145:r178 l0     0
  144:r179 l0     0  139:r180 l0     0  135:r181 l0     0  131:r182 l0     0
  133:r183 l0     1  132:r184 l0     1  127:r185 l0     0  128:r186 l0     1
  126:r187 l0     1  125:r188 l0     0  123:r189 l0     1  122:r190 l0     0
  121:r191 l0     0  119:r192 l0     0  115:r193 l0     0  116:r194 l0     1
  114:r195 l0     1  113:r196 l0     0  111:r197 l0     1  110:r198 l0     0
  109:r199 l0     0  108:r200 l0     0  103:r201 l0     0   99:r202 l0     0
   97:r203 l0     0   95:r204 l0     1   93:r205 l0     0   94:r206 l0     1
   89:r207 l0     0   90:r208 l0     1   88:r209 l0     1   87:r210 l0     0
   85:r211 l0     1   84:r212 l0     0   83:r213 l0     0   81:r214 l0     0
   77:r215 l0     0   78:r216 l0     1   76:r217 l0     1   75:r218 l0     0
   73:r219 l0     1   72:r220 l0     0   71:r221 l0     0   70:r222 l0     0
   65:r223 l0     0   61:r224 l0     0   59:r225 l0     0   57:r226 l0     1
   55:r227 l0     0   56:r228 l0     1   51:r229 l0     0   52:r230 l0     1
   50:r231 l0     1   49:r232 l0     0   47:r233 l0     1   46:r234 l0     0
   45:r235 l0     0   43:r236 l0     0   38:r237 l0     0   33:r238 l0     0
   29:r239 l0     0   27:r240 l0     0   21:r241 l0     2   20:r242 l0     1
   18:r243 l0     0   19:r244 l0     1   10:r245 l0     0   11:r246 l0     1
    9:r247 l0     1    8:r248 l0     0    6:r249 l0     1    5:r250 l0     0
    4:r251 l0     0    2:r252 l0     0    1:r253 l0     0    0:r254 l0     0
  319:r255 l0     0  317:r256 l0     0  316:r257 l0     0  314:r258 l0     0
  313:r259 l0     0  312:r260 l0     1  307:r261 l0     0  299:r262 l0     0
  301:r263 l0     1  302:r264 l0     1  300:r265 l0     1  295:r266 l0     0
  296:r267 l0     1  297:r268 l0     1  293:r269 l0     0  289:r270 l0     0
  288:r271 l0     1  283:r272 l0     0  279:r273 l0     0  277:r274 l0     0
  276:r275 l0     1  271:r276 l0     0  263:r277 l0     0  265:r278 l0     1
  266:r279 l0     1  264:r280 l0     1  259:r281 l0     0  260:r282 l0     1
  261:r283 l0     1  257:r284 l0     0  255:r285 l0     0  251:r286 l0     0
  250:r287 l0     1  245:r288 l0     0  241:r289 l0     0  239:r290 l0     0
  238:r291 l0     1  233:r292 l0     0  225:r293 l0     0  227:r294 l0     1
  228:r295 l0     1  226:r296 l0     1  221:r297 l0     0  222:r298 l0     1
  223:r299 l0     1  219:r300 l0     0  217:r301 l0     0  213:r302 l0     0
  212:r303 l0     1  207:r304 l0     0  203:r305 l0     0  198:r306 l0     0
  200:r307 l0     1  201:r308 l0     1  199:r309 l0     1  193:r310 l0     0
  195:r311 l0     1  196:r312 l0     1  194:r313 l0     1  189:r314 l0     0
  190:r315 l0     1  191:r316 l0     1  187:r317 l0     0  182:r318 l0     0
  184:r319 l0     1  185:r320 l0     1  183:r321 l0     1  181:r322 l0     0
  173:r323 l0     0  175:r324 l0     1  176:r325 l0     1  174:r326 l0     1
  172:r327 l0     0  171:r328 l0     1  166:r329 l0     0  162:r330 l0     0
  160:r331 l0     0  158:r332 l0     0  157:r333 l0     0  155:r334 l0     0
  154:r335 l0     0  153:r336 l0     1  148:r337 l0     0  140:r338 l0     0
  142:r339 l0     1  143:r340 l0     1  141:r341 l0     1  136:r342 l0     0
  137:r343 l0     1  138:r344 l0     1  134:r345 l0     0  130:r346 l0     0
  129:r347 l0     1  124:r348 l0     0  120:r349 l0     0  118:r350 l0     0
  117:r351 l0     1  112:r352 l0     0  104:r353 l0     0  106:r354 l0     1
  107:r355 l0     1  105:r356 l0     1  100:r357 l0     0  101:r358 l0     1
  102:r359 l0     1   98:r360 l0     0   96:r361 l0     0   92:r362 l0     0
   91:r363 l0     1   86:r364 l0     0   82:r365 l0     0   80:r366 l0     0
   79:r367 l0     1   74:r368 l0     0   66:r369 l0     0   68:r370 l0     1
   69:r371 l0     1   67:r372 l0     1   62:r373 l0     0   63:r374 l0     1
   64:r375 l0     1   60:r376 l0     0   58:r377 l0     0   54:r378 l0     0
   53:r379 l0     1   48:r380 l0     0   44:r381 l0     0   39:r382 l0     0
   41:r383 l0     1   42:r384 l0     1   40:r385 l0     1   34:r386 l0     0
   36:r387 l0     1   37:r388 l0     1   35:r389 l0     1   30:r390 l0     0
   31:r391 l0     1   32:r392 l0     1   28:r393 l0     0   23:r394 l0     0
   25:r395 l0     1   26:r396 l0     1   24:r397 l0     1   22:r398 l0     0
   14:r399 l0     0   16:r400 l0     1   17:r401 l0     1   15:r402 l0     1
   13:r403 l0     0   12:r404 l0     1    7:r405 l0     0    3:r406 l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


collect_skarb

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,59u} r7={1d,59u} r16={1d,58u} r17={104d,32u} r20={1d,224u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,2u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,2u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={9d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,1u} r306={1d,1u} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u} r311={1d,1u} r312={1d,1u} r313={1d,1u} r314={1d,1u} r315={1d,1u} r316={1d,1u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={1d,1u} r321={1d,1u} r322={1d,1u} r323={1d,1u} r324={1d,1u} r325={1d,1u} r326={1d,1u} r327={1d,1u} r328={1d,1u} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={1d,1u} r333={1d,1u} r334={1d,1u} r335={1d,1u} r336={1d,1u} r337={1d,1u} r338={1d,1u} r339={1d,1u} r340={1d,1u} r341={1d,1u} r342={1d,1u} r343={1d,1u} r344={1d,1u} r345={1d,1u} r346={1d,1u} r347={1d,1u} r348={1d,1u} r349={1d,1u} r350={1d,1u} r351={1d,1u} r352={1d,1u} r353={1d,1u} r354={1d,1u} r355={1d,1u} r356={1d,1u} r357={1d,1u} r358={1d,1u} r359={1d,1u} r360={1d,1u} r361={1d,1u} r362={1d,1u} r363={1d,1u} r364={1d,1u} r365={1d,1u} r366={1d,1u} r367={1d,1u} r368={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r373={1d,1u} r374={1d,1u} r375={1d,1u} r376={1d,1u} r377={1d,1u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r381={1d,1u} r382={1d,1u} r383={1d,1u} r384={1d,1u} r385={1d,1u} r386={1d,1u} r387={1d,1u} r388={1d,1u} r389={1d,1u} r390={1d,1u} r391={1d,1u} r392={1d,1u} r393={1d,1u} r394={1d,1u} r395={1d,1u} r396={1d,1u} r397={1d,1u} r398={1d,1u} r399={1d,1u} r400={1d,1u} r401={1d,1u} r402={1d,1u} r403={1d,1u} r404={1d,1u} r405={1d,1u} r406={1d,1u} 
;;    total ref usage 1209{452d,757u,0e} in 449{449 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 87 88 255 256 257 258
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1163 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 255)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1164 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 255)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1164 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 255)
        (nil)))
(insn 8 7 9 2 (set (reg:SI 256)
        (mem:SI (plus:DI (reg/f:DI 87 [ _1 ])
                (const_int 16 [0x10])) [3 _1->y_current+0 S4 A64])) "function.c":1164 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
        (reg:SI 256)) "function.c":1164 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 256)
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 257)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1165 85 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 257)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1165 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 257)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 258)
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":1165 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
        (reg:SI 258)) "function.c":1165 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 258)
        (nil)))
(insn 14 13 556 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1167 86 {*movsi_internal}
     (nil))
(jump_insn 556 14 557 2 (set (pc)
        (label_ref 69)) "function.c":1167 683 {jump}
     (nil)
 -> 69)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 557 556 73)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       8
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 92 93 94 95 96 259 260 261
(code_label 73 557 17 3 202 (nil) [1 uses])
(note 17 73 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg/f:DI 259)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 259)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 259)
        (nil)))
(insn 20 19 21 3 (set (reg:SI 260)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:DI 90 [ _4 ])
        (sign_extend:DI (reg:SI 260))) "function.c":1169 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 260)
        (nil)))
(insn 22 21 23 3 (parallel [
            (set (reg:DI 91 [ _5 ])
                (ashift:DI (reg:DI 90 [ _4 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 23 22 24 3 (parallel [
            (set (reg/f:DI 92 [ _6 ])
                (plus:DI (reg/f:DI 89 [ _3 ])
                    (reg:DI 91 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 24 23 25 3 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (reg/f:DI 92 [ _6 ]) [10 *_6+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _6 ])
        (nil)))
(insn 25 24 26 3 (set (reg:SI 261)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:DI 94 [ _8 ])
        (sign_extend:DI (reg:SI 261))) "function.c":1169 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 261)
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (reg/f:DI 95 [ _9 ])
                (plus:DI (reg/f:DI 93 [ _7 ])
                    (reg:DI 94 [ _8 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 28 27 29 3 (set (reg:QI 96 [ _10 ])
        (mem:QI (reg/f:DI 95 [ _9 ]) [0 *_9+0 S1 A8])) "function.c":1169 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
        (nil)))
(insn 29 28 30 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 96 [ _10 ])
            (const_int 99 [0x63]))) "function.c":1169 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 96 [ _10 ])
        (nil)))
(jump_insn 30 29 31 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1169 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 66)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 262 263 264 265
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 262)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 264)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DI 263)
        (sign_extend:DI (reg:SI 264))) "function.c":1169 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 264)
        (nil)))
(insn 35 34 36 4 (parallel [
            (set (reg:DI 265)
                (plus:DI (reg:DI 263)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1169 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 263)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 36 35 37 4 (set (reg:SI 97 [ _11 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 265)
                    (const_int 8 [0x8]))
                (reg/f:DI 262)) [3 serwer_178(D)->skarb.one_coin S4 A64])) "function.c":1169 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 265)
        (expr_list:REG_DEAD (reg/f:DI 262)
            (nil))))
(insn 37 36 38 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 97 [ _11 ]))) "function.c":1169 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
        (nil)))
(jump_insn 38 37 39 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1169 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 66)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 266 267 268
(note 39 38 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (set (reg/f:DI 266)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1169 85 {*movdi_internal}
     (nil))
(insn 41 40 42 5 (set (reg:SI 268)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "function.c":1169 86 {*movsi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:DI 267)
        (sign_extend:DI (reg:SI 268))) "function.c":1169 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 268)
        (nil)))
(insn 43 42 44 5 (set (reg:SI 98 [ _12 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 267)
                        (const_int 8 [0x8]))
                    (reg/f:DI 266))
                (const_int 52 [0x34])) [3 serwer_178(D)->skarb.one_coin S4 A32])) "function.c":1169 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 267)
        (expr_list:REG_DEAD (reg/f:DI 266)
            (nil))))
(insn 44 43 45 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 98 [ _12 ]))) "function.c":1169 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (nil)))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "function.c":1169 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 66)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 103 104 105 106 107 108 253 269 270 271 272
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (set (reg/f:DI 269)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1171 85 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 269)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1171 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 269)
        (nil)))
(insn 49 48 50 6 (set (reg:SI 100 [ _14 ])
        (mem:SI (plus:DI (reg/f:DI 99 [ _13 ])
                (const_int 32 [0x20])) [3 _13->coins_carried+0 S4 A64])) "function.c":1171 86 {*movsi_internal}
     (nil))
(insn 50 49 51 6 (parallel [
            (set (reg:SI 101 [ _15 ])
                (plus:SI (reg:SI 100 [ _14 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1171 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 51 50 52 6 (set (mem:SI (plus:DI (reg/f:DI 99 [ _13 ])
                (const_int 32 [0x20])) [3 _13->coins_carried+0 S4 A64])
        (reg:SI 101 [ _15 ])) "function.c":1171 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 101 [ _15 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
            (nil))))
(insn 52 51 53 6 (set (reg/f:DI 270)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1172 85 {*movdi_internal}
     (nil))
(insn 53 52 54 6 (set (reg/f:DI 102 [ _16 ])
        (mem/f:DI (plus:DI (reg/f:DI 270)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1172 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 270)
        (nil)))
(insn 54 53 55 6 (set (reg:SI 271)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1172 86 {*movsi_internal}
     (nil))
(insn 55 54 56 6 (set (reg:DI 103 [ _17 ])
        (sign_extend:DI (reg:SI 271))) "function.c":1172 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 271)
        (nil)))
(insn 56 55 57 6 (parallel [
            (set (reg:DI 104 [ _18 ])
                (ashift:DI (reg:DI 103 [ _17 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1172 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 103 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 57 56 58 6 (parallel [
            (set (reg/f:DI 105 [ _19 ])
                (plus:DI (reg/f:DI 102 [ _16 ])
                    (reg:DI 104 [ _18 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1172 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 104 [ _18 ])
        (expr_list:REG_DEAD (reg/f:DI 102 [ _16 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 58 57 59 6 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (reg/f:DI 105 [ _19 ]) [10 *_19+0 S8 A64])) "function.c":1172 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _19 ])
        (nil)))
(insn 59 58 60 6 (set (reg:SI 272)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1172 86 {*movsi_internal}
     (nil))
(insn 60 59 61 6 (set (reg:DI 107 [ _21 ])
        (sign_extend:DI (reg:SI 272))) "function.c":1172 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 272)
        (nil)))
(insn 61 60 62 6 (parallel [
            (set (reg/f:DI 108 [ _22 ])
                (plus:DI (reg/f:DI 106 [ _20 ])
                    (reg:DI 107 [ _21 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1172 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 107 [ _21 ])
        (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 62 61 63 6 (set (mem:QI (reg/f:DI 108 [ _22 ]) [0 *_22+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1172 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 63 62 558 6 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1173 85 {*movdi_internal}
     (nil))
(jump_insn 558 63 559 6 (set (pc)
        (label_ref 547)) "function.c":1173 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 559 558 66)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       3
;;              4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 66 559 67 7 200 (nil) [3 uses])
(note 67 66 68 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1167 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109 273
(code_label 69 68 70 8 199 (nil) [1 uses])
(note 70 69 71 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 8 (set (reg/f:DI 273)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1167 85 {*movdi_internal}
     (nil))
(insn 72 71 74 8 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 273)
                (const_int 8048 [0x1f70])) [3 serwer_178(D)->skarb.count_one_coin+0 S4 A64])) "function.c":1167 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 273)
        (nil)))
(insn 74 72 75 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
            (reg:SI 109 [ _23 ]))) "function.c":1167 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (nil)))
(jump_insn 75 74 76 8 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "function.c":1167 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 73)
;;  succ:       3
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 560 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1177 86 {*movsi_internal}
     (nil))
(jump_insn 560 77 561 9 (set (pc)
        (label_ref 134)) "function.c":1177 683 {jump}
     (nil)
 -> 134)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 561 560 138)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       15
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 110 111 112 113 114 115 116 117 274 275 276
(code_label 138 561 80 10 205 (nil) [1 uses])
(note 80 138 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 10 (set (reg/f:DI 274)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 82 81 83 10 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (plus:DI (reg/f:DI 274)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 274)
        (nil)))
(insn 83 82 84 10 (set (reg:SI 275)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:DI 111 [ _25 ])
        (sign_extend:DI (reg:SI 275))) "function.c":1179 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 275)
        (nil)))
(insn 85 84 86 10 (parallel [
            (set (reg:DI 112 [ _26 ])
                (ashift:DI (reg:DI 111 [ _25 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 111 [ _25 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 86 85 87 10 (parallel [
            (set (reg/f:DI 113 [ _27 ])
                (plus:DI (reg/f:DI 110 [ _24 ])
                    (reg:DI 112 [ _26 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
        (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 87 86 88 10 (set (reg/f:DI 114 [ _28 ])
        (mem/f:DI (reg/f:DI 113 [ _27 ]) [10 *_27+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 88 87 89 10 (set (reg:SI 276)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 89 88 90 10 (set (reg:DI 115 [ _29 ])
        (sign_extend:DI (reg:SI 276))) "function.c":1179 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 276)
        (nil)))
(insn 90 89 91 10 (parallel [
            (set (reg/f:DI 116 [ _30 ])
                (plus:DI (reg/f:DI 114 [ _28 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 91 90 92 10 (set (reg:QI 117 [ _31 ])
        (mem:QI (reg/f:DI 116 [ _30 ]) [0 *_30+0 S1 A8])) "function.c":1179 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
        (nil)))
(insn 92 91 93 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 117 [ _31 ])
            (const_int 116 [0x74]))) "function.c":1179 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 117 [ _31 ])
        (nil)))
(jump_insn 93 92 94 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "function.c":1179 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 131)
;;  succ:       11 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 277 278 279 280
(note 94 93 95 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 11 (set (reg/f:DI 277)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 96 95 97 11 (set (reg:SI 279)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 97 96 98 11 (set (reg:DI 278)
        (sign_extend:DI (reg:SI 279))) "function.c":1179 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 279)
        (nil)))
(insn 98 97 99 11 (parallel [
            (set (reg:DI 280)
                (plus:DI (reg:DI 278)
                    (const_int 1006 [0x3ee])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1179 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 278)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 99 98 100 11 (set (reg:SI 118 [ _32 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 280)
                        (const_int 8 [0x8]))
                    (reg/f:DI 277))
                (const_int 4 [0x4])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1179 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 280)
        (expr_list:REG_DEAD (reg/f:DI 277)
            (nil))))
(insn 100 99 101 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 118 [ _32 ]))) "function.c":1179 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 118 [ _32 ])
        (nil)))
(jump_insn 101 100 102 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "function.c":1179 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 131)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 281 282 283
(note 102 101 103 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 12 (set (reg/f:DI 281)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1179 85 {*movdi_internal}
     (nil))
(insn 104 103 105 12 (set (reg:SI 283)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "function.c":1179 86 {*movsi_internal}
     (nil))
(insn 105 104 106 12 (set (reg:DI 282)
        (sign_extend:DI (reg:SI 283))) "function.c":1179 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 283)
        (nil)))
(insn 106 105 107 12 (set (reg:SI 119 [ _33 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 282)
                        (const_int 8 [0x8]))
                    (reg/f:DI 281))
                (const_int 8056 [0x1f78])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1179 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 282)
        (expr_list:REG_DEAD (reg/f:DI 281)
            (nil))))
(insn 107 106 108 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 119 [ _33 ]))) "function.c":1179 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 119 [ _33 ])
        (nil)))
(jump_insn 108 107 109 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) "function.c":1179 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 131)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126 127 128 129 130 253 284 285 286 287 288
(note 109 108 110 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 110 109 111 13 (set (reg/f:DI 284)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (nil))
(insn 111 110 112 13 (set (reg/f:DI 120 [ _34 ])
        (mem/f:DI (plus:DI (reg/f:DI 284)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 284)
        (nil)))
(insn 112 111 113 13 (set (reg:SI 121 [ _35 ])
        (mem:SI (plus:DI (reg/f:DI 120 [ _34 ])
                (const_int 32 [0x20])) [3 _34->coins_carried+0 S4 A64])) "function.c":1181 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120 [ _34 ])
        (nil)))
(insn 113 112 114 13 (set (reg/f:DI 285)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (nil))
(insn 114 113 115 13 (set (reg/f:DI 122 [ _36 ])
        (mem/f:DI (plus:DI (reg/f:DI 285)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1181 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 285)
        (nil)))
(insn 115 114 116 13 (parallel [
            (set (reg:SI 123 [ _37 ])
                (plus:SI (reg:SI 121 [ _35 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1181 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 121 [ _35 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 116 115 117 13 (set (mem:SI (plus:DI (reg/f:DI 122 [ _36 ])
                (const_int 32 [0x20])) [3 _36->coins_carried+0 S4 A64])
        (reg:SI 123 [ _37 ])) "function.c":1181 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 123 [ _37 ])
        (expr_list:REG_DEAD (reg/f:DI 122 [ _36 ])
            (nil))))
(insn 117 116 118 13 (set (reg/f:DI 286)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1182 85 {*movdi_internal}
     (nil))
(insn 118 117 119 13 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (plus:DI (reg/f:DI 286)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1182 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 286)
        (nil)))
(insn 119 118 120 13 (set (reg:SI 287)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1182 86 {*movsi_internal}
     (nil))
(insn 120 119 121 13 (set (reg:DI 125 [ _39 ])
        (sign_extend:DI (reg:SI 287))) "function.c":1182 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 287)
        (nil)))
(insn 121 120 122 13 (parallel [
            (set (reg:DI 126 [ _40 ])
                (ashift:DI (reg:DI 125 [ _39 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1182 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 125 [ _39 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 122 121 123 13 (parallel [
            (set (reg/f:DI 127 [ _41 ])
                (plus:DI (reg/f:DI 124 [ _38 ])
                    (reg:DI 126 [ _40 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1182 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 126 [ _40 ])
        (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 123 122 124 13 (set (reg/f:DI 128 [ _42 ])
        (mem/f:DI (reg/f:DI 127 [ _41 ]) [10 *_41+0 S8 A64])) "function.c":1182 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ _41 ])
        (nil)))
(insn 124 123 125 13 (set (reg:SI 288)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1182 86 {*movsi_internal}
     (nil))
(insn 125 124 126 13 (set (reg:DI 129 [ _43 ])
        (sign_extend:DI (reg:SI 288))) "function.c":1182 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 288)
        (nil)))
(insn 126 125 127 13 (parallel [
            (set (reg/f:DI 130 [ _44 ])
                (plus:DI (reg/f:DI 128 [ _42 ])
                    (reg:DI 129 [ _43 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1182 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 129 [ _43 ])
        (expr_list:REG_DEAD (reg/f:DI 128 [ _42 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 127 126 128 13 (set (mem:QI (reg/f:DI 130 [ _44 ]) [0 *_44+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1182 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ _44 ])
        (nil)))
(insn 128 127 562 13 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1183 85 {*movdi_internal}
     (nil))
(jump_insn 562 128 563 13 (set (pc)
        (label_ref 547)) "function.c":1183 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 563 562 131)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       10
;;              11
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 131 563 132 14 204 (nil) [3 uses])
(note 132 131 133 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 134 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1177 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              9 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 289
(code_label 134 133 135 15 203 (nil) [1 uses])
(note 135 134 136 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 137 15 (set (reg/f:DI 289)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1177 85 {*movdi_internal}
     (nil))
(insn 137 136 139 15 (set (reg:SI 131 [ _45 ])
        (mem:SI (plus:DI (reg/f:DI 289)
                (const_int 16052 [0x3eb4])) [3 serwer_178(D)->skarb.count_treasure_coin+0 S4 A32])) "function.c":1177 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 289)
        (nil)))
(insn 139 137 140 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
            (reg:SI 131 [ _45 ]))) "function.c":1177 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 131 [ _45 ])
        (nil)))
(jump_insn 140 139 141 15 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) "function.c":1177 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 138)
;;  succ:       10
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 141 140 142 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 142 141 564 16 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1187 86 {*movsi_internal}
     (nil))
(jump_insn 564 142 565 16 (set (pc)
        (label_ref 199)) "function.c":1187 683 {jump}
     (nil)
 -> 199)
;;  succ:       22 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 565 564 203)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       22
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 132 133 134 135 136 137 138 139 290 291 292
(code_label 203 565 145 17 208 (nil) [1 uses])
(note 145 203 146 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 146 145 147 17 (set (reg/f:DI 290)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 147 146 148 17 (set (reg/f:DI 132 [ _46 ])
        (mem/f:DI (plus:DI (reg/f:DI 290)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 290)
        (nil)))
(insn 148 147 149 17 (set (reg:SI 291)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 149 148 150 17 (set (reg:DI 133 [ _47 ])
        (sign_extend:DI (reg:SI 291))) "function.c":1189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 291)
        (nil)))
(insn 150 149 151 17 (parallel [
            (set (reg:DI 134 [ _48 ])
                (ashift:DI (reg:DI 133 [ _47 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 133 [ _47 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 151 150 152 17 (parallel [
            (set (reg/f:DI 135 [ _49 ])
                (plus:DI (reg/f:DI 132 [ _46 ])
                    (reg:DI 134 [ _48 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 134 [ _48 ])
        (expr_list:REG_DEAD (reg/f:DI 132 [ _46 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 152 151 153 17 (set (reg/f:DI 136 [ _50 ])
        (mem/f:DI (reg/f:DI 135 [ _49 ]) [10 *_49+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ _49 ])
        (nil)))
(insn 153 152 154 17 (set (reg:SI 292)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 154 153 155 17 (set (reg:DI 137 [ _51 ])
        (sign_extend:DI (reg:SI 292))) "function.c":1189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 292)
        (nil)))
(insn 155 154 156 17 (parallel [
            (set (reg/f:DI 138 [ _52 ])
                (plus:DI (reg/f:DI 136 [ _50 ])
                    (reg:DI 137 [ _51 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 137 [ _51 ])
        (expr_list:REG_DEAD (reg/f:DI 136 [ _50 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 156 155 157 17 (set (reg:QI 139 [ _53 ])
        (mem:QI (reg/f:DI 138 [ _52 ]) [0 *_52+0 S1 A8])) "function.c":1189 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ _52 ])
        (nil)))
(insn 157 156 158 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 139 [ _53 ])
            (const_int 84 [0x54]))) "function.c":1189 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 139 [ _53 ])
        (nil)))
(jump_insn 158 157 159 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) "function.c":1189 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 196)
;;  succ:       18 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140 293 294 295 296
(note 159 158 160 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 161 18 (set (reg/f:DI 293)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 161 160 162 18 (set (reg:SI 295)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 162 161 163 18 (set (reg:DI 294)
        (sign_extend:DI (reg:SI 295))) "function.c":1189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 295)
        (nil)))
(insn 163 162 164 18 (parallel [
            (set (reg:DI 296)
                (plus:DI (reg:DI 294)
                    (const_int 2006 [0x7d6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1189 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 294)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 164 163 165 18 (set (reg:SI 140 [ _54 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 296)
                        (const_int 8 [0x8]))
                    (reg/f:DI 293))
                (const_int 8 [0x8])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A64])) "function.c":1189 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 296)
        (expr_list:REG_DEAD (reg/f:DI 293)
            (nil))))
(insn 165 164 166 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 140 [ _54 ]))) "function.c":1189 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 140 [ _54 ])
        (nil)))
(jump_insn 166 165 167 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) "function.c":1189 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 196)
;;  succ:       19 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 297 298 299
(note 167 166 168 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 168 167 169 19 (set (reg/f:DI 297)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1189 85 {*movdi_internal}
     (nil))
(insn 169 168 170 19 (set (reg:SI 299)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])) "function.c":1189 86 {*movsi_internal}
     (nil))
(insn 170 169 171 19 (set (reg:DI 298)
        (sign_extend:DI (reg:SI 299))) "function.c":1189 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 299)
        (nil)))
(insn 171 170 172 19 (set (reg:SI 141 [ _55 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 298)
                        (const_int 8 [0x8]))
                    (reg/f:DI 297))
                (const_int 16060 [0x3ebc])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A32])) "function.c":1189 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 298)
        (expr_list:REG_DEAD (reg/f:DI 297)
            (nil))))
(insn 172 171 173 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 141 [ _55 ]))) "function.c":1189 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 141 [ _55 ])
        (nil)))
(jump_insn 173 172 174 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 196)
            (pc))) "function.c":1189 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 196)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 142 143 144 145 146 147 148 149 150 151 152 253 300 301 302 303 304
(note 174 173 175 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 175 174 176 20 (set (reg/f:DI 300)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (nil))
(insn 176 175 177 20 (set (reg/f:DI 142 [ _56 ])
        (mem/f:DI (plus:DI (reg/f:DI 300)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 300)
        (nil)))
(insn 177 176 178 20 (set (reg:SI 143 [ _57 ])
        (mem:SI (plus:DI (reg/f:DI 142 [ _56 ])
                (const_int 32 [0x20])) [3 _56->coins_carried+0 S4 A64])) "function.c":1191 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _56 ])
        (nil)))
(insn 178 177 179 20 (set (reg/f:DI 301)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (nil))
(insn 179 178 180 20 (set (reg/f:DI 144 [ _58 ])
        (mem/f:DI (plus:DI (reg/f:DI 301)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1191 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 301)
        (nil)))
(insn 180 179 181 20 (parallel [
            (set (reg:SI 145 [ _59 ])
                (plus:SI (reg:SI 143 [ _57 ])
                    (const_int 50 [0x32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1191 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 143 [ _57 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 181 180 182 20 (set (mem:SI (plus:DI (reg/f:DI 144 [ _58 ])
                (const_int 32 [0x20])) [3 _58->coins_carried+0 S4 A64])
        (reg:SI 145 [ _59 ])) "function.c":1191 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 145 [ _59 ])
        (expr_list:REG_DEAD (reg/f:DI 144 [ _58 ])
            (nil))))
(insn 182 181 183 20 (set (reg/f:DI 302)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1192 85 {*movdi_internal}
     (nil))
(insn 183 182 184 20 (set (reg/f:DI 146 [ _60 ])
        (mem/f:DI (plus:DI (reg/f:DI 302)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1192 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 302)
        (nil)))
(insn 184 183 185 20 (set (reg:SI 303)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1192 86 {*movsi_internal}
     (nil))
(insn 185 184 186 20 (set (reg:DI 147 [ _61 ])
        (sign_extend:DI (reg:SI 303))) "function.c":1192 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 303)
        (nil)))
(insn 186 185 187 20 (parallel [
            (set (reg:DI 148 [ _62 ])
                (ashift:DI (reg:DI 147 [ _61 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1192 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 147 [ _61 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 187 186 188 20 (parallel [
            (set (reg/f:DI 149 [ _63 ])
                (plus:DI (reg/f:DI 146 [ _60 ])
                    (reg:DI 148 [ _62 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1192 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 148 [ _62 ])
        (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 188 187 189 20 (set (reg/f:DI 150 [ _64 ])
        (mem/f:DI (reg/f:DI 149 [ _63 ]) [10 *_63+0 S8 A64])) "function.c":1192 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149 [ _63 ])
        (nil)))
(insn 189 188 190 20 (set (reg:SI 304)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1192 86 {*movsi_internal}
     (nil))
(insn 190 189 191 20 (set (reg:DI 151 [ _65 ])
        (sign_extend:DI (reg:SI 304))) "function.c":1192 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 304)
        (nil)))
(insn 191 190 192 20 (parallel [
            (set (reg/f:DI 152 [ _66 ])
                (plus:DI (reg/f:DI 150 [ _64 ])
                    (reg:DI 151 [ _65 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1192 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 151 [ _65 ])
        (expr_list:REG_DEAD (reg/f:DI 150 [ _64 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 192 191 193 20 (set (mem:QI (reg/f:DI 152 [ _66 ]) [0 *_66+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1192 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _66 ])
        (nil)))
(insn 193 192 566 20 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1193 85 {*movdi_internal}
     (nil))
(jump_insn 566 193 567 20 (set (pc)
        (label_ref 547)) "function.c":1193 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 567 566 196)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       17
;;              18
;;              19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 196 567 197 21 207 (nil) [3 uses])
(note 197 196 198 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 198 197 199 21 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1187 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       22 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU,DFS_BACK)
;;              16 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 305
(code_label 199 198 200 22 206 (nil) [1 uses])
(note 200 199 201 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 201 200 202 22 (set (reg/f:DI 305)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1187 85 {*movdi_internal}
     (nil))
(insn 202 201 204 22 (set (reg:SI 153 [ _67 ])
        (mem:SI (plus:DI (reg/f:DI 305)
                (const_int 24056 [0x5df8])) [3 serwer_178(D)->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1187 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 305)
        (nil)))
(insn 204 202 205 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A32])
            (reg:SI 153 [ _67 ]))) "function.c":1187 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 153 [ _67 ])
        (nil)))
(jump_insn 205 204 206 22 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 203)
            (pc))) "function.c":1187 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 203)
;;  succ:       17
;;              23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 206 205 207 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 568 23 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1197 86 {*movsi_internal}
     (nil))
(jump_insn 568 207 569 23 (set (pc)
        (label_ref 268)) "function.c":1197 683 {jump}
     (nil)
 -> 268)
;;  succ:       29 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 569 568 272)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       29
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154 306 307 308 309
(code_label 272 569 210 24 211 (nil) [1 uses])
(note 210 272 211 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 24 (set (reg/f:DI 306)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1199 85 {*movdi_internal}
     (nil))
(insn 212 211 213 24 (set (reg:SI 308)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 213 212 214 24 (set (reg:DI 307)
        (sign_extend:DI (reg:SI 308))) "function.c":1199 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 308)
        (nil)))
(insn 214 213 215 24 (parallel [
            (set (reg:DI 309)
                (plus:DI (reg:DI 307)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1199 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 307)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 215 214 216 24 (set (reg:SI 154 [ _68 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 309)
                    (const_int 4 [0x4]))
                (reg/f:DI 306)) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1199 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 309)
        (expr_list:REG_DEAD (reg/f:DI 306)
            (nil))))
(insn 216 215 217 24 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 154 [ _68 ])
            (const_int 0 [0]))) "function.c":1199 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 154 [ _68 ])
        (nil)))
(jump_insn 217 216 218 24 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "function.c":1199 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 265)
;;  succ:       25 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 155 310 311 312 313
(note 218 217 219 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 220 25 (set (reg/f:DI 310)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1199 85 {*movdi_internal}
     (nil))
(insn 220 219 221 25 (set (reg:SI 312)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 221 220 222 25 (set (reg:DI 311)
        (sign_extend:DI (reg:SI 312))) "function.c":1199 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 312)
        (nil)))
(insn 222 221 223 25 (parallel [
            (set (reg:DI 313)
                (plus:DI (reg:DI 311)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1199 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 311)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 223 222 224 25 (set (reg:SI 155 [ _69 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 313)
                    (const_int 8 [0x8]))
                (reg/f:DI 310)) [3 serwer_178(D)->skarb.dropped_coin S4 A64])) "function.c":1199 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 313)
        (expr_list:REG_DEAD (reg/f:DI 310)
            (nil))))
(insn 224 223 225 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 155 [ _69 ]))) "function.c":1199 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 155 [ _69 ])
        (nil)))
(jump_insn 225 224 226 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "function.c":1199 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 265)
;;  succ:       26 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 156 314 315 316
(note 226 225 227 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 227 226 228 26 (set (reg/f:DI 314)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1199 85 {*movdi_internal}
     (nil))
(insn 228 227 229 26 (set (reg:SI 316)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1199 86 {*movsi_internal}
     (nil))
(insn 229 228 230 26 (set (reg:DI 315)
        (sign_extend:DI (reg:SI 316))) "function.c":1199 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 316)
        (nil)))
(insn 230 229 231 26 (set (reg:SI 156 [ _70 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 315)
                        (const_int 8 [0x8]))
                    (reg/f:DI 314))
                (const_int 24068 [0x5e04])) [3 serwer_178(D)->skarb.dropped_coin S4 A32])) "function.c":1199 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 315)
        (expr_list:REG_DEAD (reg/f:DI 314)
            (nil))))
(insn 231 230 232 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 156 [ _70 ]))) "function.c":1199 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 156 [ _70 ])
        (nil)))
(jump_insn 232 231 233 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "function.c":1199 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 265)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 158 159 160 161 162 163 164 165 166 167 168 253 317 318 319 320 321 322 323 324 325 326 327 328 329
(note 233 232 234 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 27 (set (reg/f:DI 317)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 235 234 236 27 (set (reg/f:DI 157 [ _71 ])
        (mem/f:DI (plus:DI (reg/f:DI 317)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 317)
        (nil)))
(insn 236 235 237 27 (set (reg:SI 158 [ _72 ])
        (mem:SI (plus:DI (reg/f:DI 157 [ _71 ])
                (const_int 32 [0x20])) [3 _71->coins_carried+0 S4 A64])) "function.c":1201 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _71 ])
        (nil)))
(insn 237 236 238 27 (set (reg/f:DI 318)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 238 237 239 27 (set (reg:SI 320)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1201 86 {*movsi_internal}
     (nil))
(insn 239 238 240 27 (set (reg:DI 319)
        (sign_extend:DI (reg:SI 320))) "function.c":1201 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 320)
        (nil)))
(insn 240 239 241 27 (parallel [
            (set (reg:DI 321)
                (plus:DI (reg:DI 319)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1201 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 319)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 241 240 242 27 (set (reg:SI 159 [ _73 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 321)
                    (const_int 4 [0x4]))
                (reg/f:DI 318)) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1201 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 321)
        (expr_list:REG_DEAD (reg/f:DI 318)
            (nil))))
(insn 242 241 243 27 (set (reg/f:DI 322)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (nil))
(insn 243 242 244 27 (set (reg/f:DI 160 [ _74 ])
        (mem/f:DI (plus:DI (reg/f:DI 322)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1201 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 322)
        (nil)))
(insn 244 243 245 27 (parallel [
            (set (reg:SI 161 [ _75 ])
                (plus:SI (reg:SI 158 [ _72 ])
                    (reg:SI 159 [ _73 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1201 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 159 [ _73 ])
        (expr_list:REG_DEAD (reg:SI 158 [ _72 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 245 244 246 27 (set (mem:SI (plus:DI (reg/f:DI 160 [ _74 ])
                (const_int 32 [0x20])) [3 _74->coins_carried+0 S4 A64])
        (reg:SI 161 [ _75 ])) "function.c":1201 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 161 [ _75 ])
        (expr_list:REG_DEAD (reg/f:DI 160 [ _74 ])
            (nil))))
(insn 246 245 247 27 (set (reg/f:DI 323)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1202 85 {*movdi_internal}
     (nil))
(insn 247 246 248 27 (set (reg:SI 325)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])) "function.c":1202 86 {*movsi_internal}
     (nil))
(insn 248 247 249 27 (set (reg:DI 324)
        (sign_extend:DI (reg:SI 325))) "function.c":1202 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 325)
        (nil)))
(insn 249 248 250 27 (parallel [
            (set (reg:DI 326)
                (plus:DI (reg:DI 324)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1202 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 324)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 250 249 251 27 (set (mem:SI (plus:DI (mult:DI (reg:DI 326)
                    (const_int 4 [0x4]))
                (reg/f:DI 323)) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])
        (const_int -1 [0xffffffffffffffff])) "function.c":1202 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 326)
        (expr_list:REG_DEAD (reg/f:DI 323)
            (nil))))
(insn 251 250 252 27 (set (reg/f:DI 327)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1203 85 {*movdi_internal}
     (nil))
(insn 252 251 253 27 (set (reg/f:DI 162 [ _76 ])
        (mem/f:DI (plus:DI (reg/f:DI 327)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1203 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 327)
        (nil)))
(insn 253 252 254 27 (set (reg:SI 328)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1203 86 {*movsi_internal}
     (nil))
(insn 254 253 255 27 (set (reg:DI 163 [ _77 ])
        (sign_extend:DI (reg:SI 328))) "function.c":1203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 328)
        (nil)))
(insn 255 254 256 27 (parallel [
            (set (reg:DI 164 [ _78 ])
                (ashift:DI (reg:DI 163 [ _77 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1203 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 163 [ _77 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 256 255 257 27 (parallel [
            (set (reg/f:DI 165 [ _79 ])
                (plus:DI (reg/f:DI 162 [ _76 ])
                    (reg:DI 164 [ _78 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1203 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 164 [ _78 ])
        (expr_list:REG_DEAD (reg/f:DI 162 [ _76 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 257 256 258 27 (set (reg/f:DI 166 [ _80 ])
        (mem/f:DI (reg/f:DI 165 [ _79 ]) [10 *_79+0 S8 A64])) "function.c":1203 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165 [ _79 ])
        (nil)))
(insn 258 257 259 27 (set (reg:SI 329)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1203 86 {*movsi_internal}
     (nil))
(insn 259 258 260 27 (set (reg:DI 167 [ _81 ])
        (sign_extend:DI (reg:SI 329))) "function.c":1203 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 329)
        (nil)))
(insn 260 259 261 27 (parallel [
            (set (reg/f:DI 168 [ _82 ])
                (plus:DI (reg/f:DI 166 [ _80 ])
                    (reg:DI 167 [ _81 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1203 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 167 [ _81 ])
        (expr_list:REG_DEAD (reg/f:DI 166 [ _80 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 261 260 262 27 (set (mem:QI (reg/f:DI 168 [ _82 ]) [0 *_82+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1203 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168 [ _82 ])
        (nil)))
(insn 262 261 570 27 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1204 85 {*movdi_internal}
     (nil))
(jump_insn 570 262 571 27 (set (pc)
        (label_ref 547)) "function.c":1204 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 571 570 265)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       24
;;              25
;;              26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 265 571 266 28 210 (nil) [3 uses])
(note 266 265 267 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 28 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1197 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              23 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 169 330
(code_label 268 267 269 29 209 (nil) [1 uses])
(note 269 268 270 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 270 269 271 29 (set (reg/f:DI 330)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1197 85 {*movdi_internal}
     (nil))
(insn 271 270 273 29 (set (reg:SI 169 [ _83 ])
        (mem:SI (plus:DI (reg/f:DI 330)
                (const_int 24060 [0x5dfc])) [3 serwer_178(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1197 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 330)
        (nil)))
(insn 273 271 274 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [3 i+0 S4 A32])
            (reg:SI 169 [ _83 ]))) "function.c":1197 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 169 [ _83 ])
        (nil)))
(jump_insn 274 273 275 29 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 272)
            (pc))) "function.c":1197 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 272)
;;  succ:       24
;;              30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 170 171 331 332 333 334
(note 275 274 276 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 30 (set (reg/f:DI 331)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1208 85 {*movdi_internal}
     (nil))
(insn 277 276 278 30 (set (reg/f:DI 170 [ _84 ])
        (mem/f:DI (plus:DI (reg/f:DI 331)
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1208 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 331)
        (nil)))
(insn 278 277 279 30 (set (reg:SI 332)
        (mem:SI (plus:DI (reg/f:DI 170 [ _84 ])
                (const_int 16 [0x10])) [3 _84->y_current+0 S4 A64])) "function.c":1208 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170 [ _84 ])
        (nil)))
(insn 279 278 280 30 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
        (reg:SI 332)) "function.c":1208 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 332)
        (nil)))
(insn 280 279 281 30 (set (reg/f:DI 333)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1209 85 {*movdi_internal}
     (nil))
(insn 281 280 282 30 (set (reg/f:DI 171 [ _85 ])
        (mem/f:DI (plus:DI (reg/f:DI 333)
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1209 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 333)
        (nil)))
(insn 282 281 283 30 (set (reg:SI 334)
        (mem:SI (plus:DI (reg/f:DI 171 [ _85 ])
                (const_int 12 [0xc])) [3 _85->x_current+0 S4 A32])) "function.c":1209 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171 [ _85 ])
        (nil)))
(insn 283 282 284 30 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
        (reg:SI 334)) "function.c":1209 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 334)
        (nil)))
(insn 284 283 572 30 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1211 86 {*movsi_internal}
     (nil))
(jump_insn 572 284 573 30 (set (pc)
        (label_ref 339)) "function.c":1211 683 {jump}
     (nil)
 -> 339)
;;  succ:       36 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 573 572 343)
;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       36
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 172 173 174 175 176 177 178 179 335 336 337
(code_label 343 573 287 31 214 (nil) [1 uses])
(note 287 343 288 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 288 287 289 31 (set (reg/f:DI 335)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 289 288 290 31 (set (reg/f:DI 172 [ _86 ])
        (mem/f:DI (plus:DI (reg/f:DI 335)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 335)
        (nil)))
(insn 290 289 291 31 (set (reg:SI 336)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 291 290 292 31 (set (reg:DI 173 [ _87 ])
        (sign_extend:DI (reg:SI 336))) "function.c":1213 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 336)
        (nil)))
(insn 292 291 293 31 (parallel [
            (set (reg:DI 174 [ _88 ])
                (ashift:DI (reg:DI 173 [ _87 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 173 [ _87 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 293 292 294 31 (parallel [
            (set (reg/f:DI 175 [ _89 ])
                (plus:DI (reg/f:DI 172 [ _86 ])
                    (reg:DI 174 [ _88 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 174 [ _88 ])
        (expr_list:REG_DEAD (reg/f:DI 172 [ _86 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 294 293 295 31 (set (reg/f:DI 176 [ _90 ])
        (mem/f:DI (reg/f:DI 175 [ _89 ]) [10 *_89+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 175 [ _89 ])
        (nil)))
(insn 295 294 296 31 (set (reg:SI 337)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 296 295 297 31 (set (reg:DI 177 [ _91 ])
        (sign_extend:DI (reg:SI 337))) "function.c":1213 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 337)
        (nil)))
(insn 297 296 298 31 (parallel [
            (set (reg/f:DI 178 [ _92 ])
                (plus:DI (reg/f:DI 176 [ _90 ])
                    (reg:DI 177 [ _91 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 177 [ _91 ])
        (expr_list:REG_DEAD (reg/f:DI 176 [ _90 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 298 297 299 31 (set (reg:QI 179 [ _93 ])
        (mem:QI (reg/f:DI 178 [ _92 ]) [0 *_92+0 S1 A8])) "function.c":1213 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178 [ _92 ])
        (nil)))
(insn 299 298 300 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 179 [ _93 ])
            (const_int 99 [0x63]))) "function.c":1213 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 179 [ _93 ])
        (nil)))
(jump_insn 300 299 301 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) "function.c":1213 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 336)
;;  succ:       32 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 180 338 339 340 341
(note 301 300 302 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 32 (set (reg/f:DI 338)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 303 302 304 32 (set (reg:SI 340)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 304 303 305 32 (set (reg:DI 339)
        (sign_extend:DI (reg:SI 340))) "function.c":1213 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 340)
        (nil)))
(insn 305 304 306 32 (parallel [
            (set (reg:DI 341)
                (plus:DI (reg:DI 339)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1213 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 339)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 306 305 307 32 (set (reg:SI 180 [ _94 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 341)
                    (const_int 8 [0x8]))
                (reg/f:DI 338)) [3 serwer_178(D)->skarb.one_coin S4 A64])) "function.c":1213 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 341)
        (expr_list:REG_DEAD (reg/f:DI 338)
            (nil))))
(insn 307 306 308 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 180 [ _94 ]))) "function.c":1213 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 180 [ _94 ])
        (nil)))
(jump_insn 308 307 309 32 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) "function.c":1213 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 336)
;;  succ:       33 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 181 342 343 344
(note 309 308 310 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 33 (set (reg/f:DI 342)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1213 85 {*movdi_internal}
     (nil))
(insn 311 310 312 33 (set (reg:SI 344)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])) "function.c":1213 86 {*movsi_internal}
     (nil))
(insn 312 311 313 33 (set (reg:DI 343)
        (sign_extend:DI (reg:SI 344))) "function.c":1213 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 344)
        (nil)))
(insn 313 312 314 33 (set (reg:SI 181 [ _95 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 343)
                        (const_int 8 [0x8]))
                    (reg/f:DI 342))
                (const_int 52 [0x34])) [3 serwer_178(D)->skarb.one_coin S4 A32])) "function.c":1213 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 343)
        (expr_list:REG_DEAD (reg/f:DI 342)
            (nil))))
(insn 314 313 315 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 181 [ _95 ]))) "function.c":1213 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 181 [ _95 ])
        (nil)))
(jump_insn 315 314 316 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) "function.c":1213 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 336)
;;  succ:       34 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 182 183 184 185 186 187 188 189 190 191 253 345 346 347 348
(note 316 315 317 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 317 316 318 34 (set (reg/f:DI 345)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1215 85 {*movdi_internal}
     (nil))
(insn 318 317 319 34 (set (reg/f:DI 182 [ _96 ])
        (mem/f:DI (plus:DI (reg/f:DI 345)
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1215 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 345)
        (nil)))
(insn 319 318 320 34 (set (reg:SI 183 [ _97 ])
        (mem:SI (plus:DI (reg/f:DI 182 [ _96 ])
                (const_int 32 [0x20])) [3 _96->coins_carried+0 S4 A64])) "function.c":1215 86 {*movsi_internal}
     (nil))
(insn 320 319 321 34 (parallel [
            (set (reg:SI 184 [ _98 ])
                (plus:SI (reg:SI 183 [ _97 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1215 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 183 [ _97 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 321 320 322 34 (set (mem:SI (plus:DI (reg/f:DI 182 [ _96 ])
                (const_int 32 [0x20])) [3 _96->coins_carried+0 S4 A64])
        (reg:SI 184 [ _98 ])) "function.c":1215 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 184 [ _98 ])
        (expr_list:REG_DEAD (reg/f:DI 182 [ _96 ])
            (nil))))
(insn 322 321 323 34 (set (reg/f:DI 346)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1216 85 {*movdi_internal}
     (nil))
(insn 323 322 324 34 (set (reg/f:DI 185 [ _99 ])
        (mem/f:DI (plus:DI (reg/f:DI 346)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1216 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 346)
        (nil)))
(insn 324 323 325 34 (set (reg:SI 347)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1216 86 {*movsi_internal}
     (nil))
(insn 325 324 326 34 (set (reg:DI 186 [ _100 ])
        (sign_extend:DI (reg:SI 347))) "function.c":1216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 347)
        (nil)))
(insn 326 325 327 34 (parallel [
            (set (reg:DI 187 [ _101 ])
                (ashift:DI (reg:DI 186 [ _100 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1216 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 186 [ _100 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 327 326 328 34 (parallel [
            (set (reg/f:DI 188 [ _102 ])
                (plus:DI (reg/f:DI 185 [ _99 ])
                    (reg:DI 187 [ _101 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1216 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 187 [ _101 ])
        (expr_list:REG_DEAD (reg/f:DI 185 [ _99 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 328 327 329 34 (set (reg/f:DI 189 [ _103 ])
        (mem/f:DI (reg/f:DI 188 [ _102 ]) [10 *_102+0 S8 A64])) "function.c":1216 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 188 [ _102 ])
        (nil)))
(insn 329 328 330 34 (set (reg:SI 348)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1216 86 {*movsi_internal}
     (nil))
(insn 330 329 331 34 (set (reg:DI 190 [ _104 ])
        (sign_extend:DI (reg:SI 348))) "function.c":1216 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 348)
        (nil)))
(insn 331 330 332 34 (parallel [
            (set (reg/f:DI 191 [ _105 ])
                (plus:DI (reg/f:DI 189 [ _103 ])
                    (reg:DI 190 [ _104 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1216 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 190 [ _104 ])
        (expr_list:REG_DEAD (reg/f:DI 189 [ _103 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 332 331 333 34 (set (mem:QI (reg/f:DI 191 [ _105 ]) [0 *_105+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1216 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191 [ _105 ])
        (nil)))
(insn 333 332 574 34 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1217 85 {*movdi_internal}
     (nil))
(jump_insn 574 333 575 34 (set (pc)
        (label_ref 547)) "function.c":1217 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 575 574 336)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       31
;;              32
;;              33
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 336 575 337 35 213 (nil) [3 uses])
(note 337 336 338 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 338 337 339 35 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1211 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       36 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU,DFS_BACK)
;;              30 [always] 
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 192 349
(code_label 339 338 340 36 212 (nil) [1 uses])
(note 340 339 341 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 341 340 342 36 (set (reg/f:DI 349)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1211 85 {*movdi_internal}
     (nil))
(insn 342 341 344 36 (set (reg:SI 192 [ _106 ])
        (mem:SI (plus:DI (reg/f:DI 349)
                (const_int 8048 [0x1f70])) [3 serwer_178(D)->skarb.count_one_coin+0 S4 A64])) "function.c":1211 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 349)
        (nil)))
(insn 344 342 345 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [3 i+0 S4 A32])
            (reg:SI 192 [ _106 ]))) "function.c":1211 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 192 [ _106 ])
        (nil)))
(jump_insn 345 344 346 36 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) "function.c":1211 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 343)
;;  succ:       31
;;              37 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 346 345 347 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 576 37 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1221 86 {*movsi_internal}
     (nil))
(jump_insn 576 347 577 37 (set (pc)
        (label_ref 404)) "function.c":1221 683 {jump}
     (nil)
 -> 404)
;;  succ:       43 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 577 576 408)
;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       43
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 193 194 195 196 197 198 199 200 350 351 352
(code_label 408 577 350 38 217 (nil) [1 uses])
(note 350 408 351 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 38 (set (reg/f:DI 350)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 352 351 353 38 (set (reg/f:DI 193 [ _107 ])
        (mem/f:DI (plus:DI (reg/f:DI 350)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 350)
        (nil)))
(insn 353 352 354 38 (set (reg:SI 351)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 354 353 355 38 (set (reg:DI 194 [ _108 ])
        (sign_extend:DI (reg:SI 351))) "function.c":1223 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 351)
        (nil)))
(insn 355 354 356 38 (parallel [
            (set (reg:DI 195 [ _109 ])
                (ashift:DI (reg:DI 194 [ _108 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 194 [ _108 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 356 355 357 38 (parallel [
            (set (reg/f:DI 196 [ _110 ])
                (plus:DI (reg/f:DI 193 [ _107 ])
                    (reg:DI 195 [ _109 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 195 [ _109 ])
        (expr_list:REG_DEAD (reg/f:DI 193 [ _107 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 357 356 358 38 (set (reg/f:DI 197 [ _111 ])
        (mem/f:DI (reg/f:DI 196 [ _110 ]) [10 *_110+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 196 [ _110 ])
        (nil)))
(insn 358 357 359 38 (set (reg:SI 352)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 359 358 360 38 (set (reg:DI 198 [ _112 ])
        (sign_extend:DI (reg:SI 352))) "function.c":1223 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 352)
        (nil)))
(insn 360 359 361 38 (parallel [
            (set (reg/f:DI 199 [ _113 ])
                (plus:DI (reg/f:DI 197 [ _111 ])
                    (reg:DI 198 [ _112 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 198 [ _112 ])
        (expr_list:REG_DEAD (reg/f:DI 197 [ _111 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 361 360 362 38 (set (reg:QI 200 [ _114 ])
        (mem:QI (reg/f:DI 199 [ _113 ]) [0 *_113+0 S1 A8])) "function.c":1223 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 199 [ _113 ])
        (nil)))
(insn 362 361 363 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 200 [ _114 ])
            (const_int 116 [0x74]))) "function.c":1223 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 200 [ _114 ])
        (nil)))
(jump_insn 363 362 364 38 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 401)
            (pc))) "function.c":1223 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 401)
;;  succ:       39 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 201 353 354 355 356
(note 364 363 365 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 365 364 366 39 (set (reg/f:DI 353)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 366 365 367 39 (set (reg:SI 355)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 367 366 368 39 (set (reg:DI 354)
        (sign_extend:DI (reg:SI 355))) "function.c":1223 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 355)
        (nil)))
(insn 368 367 369 39 (parallel [
            (set (reg:DI 356)
                (plus:DI (reg:DI 354)
                    (const_int 1006 [0x3ee])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1223 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 354)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 369 368 370 39 (set (reg:SI 201 [ _115 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 356)
                        (const_int 8 [0x8]))
                    (reg/f:DI 353))
                (const_int 4 [0x4])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1223 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 356)
        (expr_list:REG_DEAD (reg/f:DI 353)
            (nil))))
(insn 370 369 371 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 201 [ _115 ]))) "function.c":1223 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 201 [ _115 ])
        (nil)))
(jump_insn 371 370 372 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 401)
            (pc))) "function.c":1223 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 401)
;;  succ:       40 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 202 357 358 359
(note 372 371 373 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 373 372 374 40 (set (reg/f:DI 357)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1223 85 {*movdi_internal}
     (nil))
(insn 374 373 375 40 (set (reg:SI 359)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])) "function.c":1223 86 {*movsi_internal}
     (nil))
(insn 375 374 376 40 (set (reg:DI 358)
        (sign_extend:DI (reg:SI 359))) "function.c":1223 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 359)
        (nil)))
(insn 376 375 377 40 (set (reg:SI 202 [ _116 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 358)
                        (const_int 8 [0x8]))
                    (reg/f:DI 357))
                (const_int 8056 [0x1f78])) [3 serwer_178(D)->skarb.treasure_coin S4 A32])) "function.c":1223 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 358)
        (expr_list:REG_DEAD (reg/f:DI 357)
            (nil))))
(insn 377 376 378 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 202 [ _116 ]))) "function.c":1223 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 202 [ _116 ])
        (nil)))
(jump_insn 378 377 379 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 401)
            (pc))) "function.c":1223 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 401)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 203 204 205 206 207 208 209 210 211 212 213 253 360 361 362 363 364
(note 379 378 380 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 380 379 381 41 (set (reg/f:DI 360)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (nil))
(insn 381 380 382 41 (set (reg/f:DI 203 [ _117 ])
        (mem/f:DI (plus:DI (reg/f:DI 360)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 360)
        (nil)))
(insn 382 381 383 41 (set (reg:SI 204 [ _118 ])
        (mem:SI (plus:DI (reg/f:DI 203 [ _117 ])
                (const_int 32 [0x20])) [3 _117->coins_carried+0 S4 A64])) "function.c":1225 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 203 [ _117 ])
        (nil)))
(insn 383 382 384 41 (set (reg/f:DI 361)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (nil))
(insn 384 383 385 41 (set (reg/f:DI 205 [ _119 ])
        (mem/f:DI (plus:DI (reg/f:DI 361)
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1225 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 361)
        (nil)))
(insn 385 384 386 41 (parallel [
            (set (reg:SI 206 [ _120 ])
                (plus:SI (reg:SI 204 [ _118 ])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1225 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 204 [ _118 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 386 385 387 41 (set (mem:SI (plus:DI (reg/f:DI 205 [ _119 ])
                (const_int 32 [0x20])) [3 _119->coins_carried+0 S4 A64])
        (reg:SI 206 [ _120 ])) "function.c":1225 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 206 [ _120 ])
        (expr_list:REG_DEAD (reg/f:DI 205 [ _119 ])
            (nil))))
(insn 387 386 388 41 (set (reg/f:DI 362)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1226 85 {*movdi_internal}
     (nil))
(insn 388 387 389 41 (set (reg/f:DI 207 [ _121 ])
        (mem/f:DI (plus:DI (reg/f:DI 362)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1226 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 362)
        (nil)))
(insn 389 388 390 41 (set (reg:SI 363)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1226 86 {*movsi_internal}
     (nil))
(insn 390 389 391 41 (set (reg:DI 208 [ _122 ])
        (sign_extend:DI (reg:SI 363))) "function.c":1226 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 363)
        (nil)))
(insn 391 390 392 41 (parallel [
            (set (reg:DI 209 [ _123 ])
                (ashift:DI (reg:DI 208 [ _122 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1226 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 208 [ _122 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 392 391 393 41 (parallel [
            (set (reg/f:DI 210 [ _124 ])
                (plus:DI (reg/f:DI 207 [ _121 ])
                    (reg:DI 209 [ _123 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1226 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 209 [ _123 ])
        (expr_list:REG_DEAD (reg/f:DI 207 [ _121 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 393 392 394 41 (set (reg/f:DI 211 [ _125 ])
        (mem/f:DI (reg/f:DI 210 [ _124 ]) [10 *_124+0 S8 A64])) "function.c":1226 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 210 [ _124 ])
        (nil)))
(insn 394 393 395 41 (set (reg:SI 364)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1226 86 {*movsi_internal}
     (nil))
(insn 395 394 396 41 (set (reg:DI 212 [ _126 ])
        (sign_extend:DI (reg:SI 364))) "function.c":1226 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 364)
        (nil)))
(insn 396 395 397 41 (parallel [
            (set (reg/f:DI 213 [ _127 ])
                (plus:DI (reg/f:DI 211 [ _125 ])
                    (reg:DI 212 [ _126 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1226 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 212 [ _126 ])
        (expr_list:REG_DEAD (reg/f:DI 211 [ _125 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 397 396 398 41 (set (mem:QI (reg/f:DI 213 [ _127 ]) [0 *_127+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1226 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 213 [ _127 ])
        (nil)))
(insn 398 397 578 41 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1227 85 {*movdi_internal}
     (nil))
(jump_insn 578 398 579 41 (set (pc)
        (label_ref 547)) "function.c":1227 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 579 578 401)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL)
;;  pred:       38
;;              39
;;              40
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 401 579 402 42 216 (nil) [3 uses])
(note 402 401 403 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 42 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1221 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              37 [always] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 214 365
(code_label 404 403 405 43 215 (nil) [1 uses])
(note 405 404 406 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 43 (set (reg/f:DI 365)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1221 85 {*movdi_internal}
     (nil))
(insn 407 406 409 43 (set (reg:SI 214 [ _128 ])
        (mem:SI (plus:DI (reg/f:DI 365)
                (const_int 16052 [0x3eb4])) [3 serwer_178(D)->skarb.count_treasure_coin+0 S4 A32])) "function.c":1221 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 365)
        (nil)))
(insn 409 407 410 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [3 i+0 S4 A32])
            (reg:SI 214 [ _128 ]))) "function.c":1221 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 214 [ _128 ])
        (nil)))
(jump_insn 410 409 411 43 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 408)
            (pc))) "function.c":1221 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 408)
;;  succ:       38
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 411 410 412 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 412 411 580 44 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1231 86 {*movsi_internal}
     (nil))
(jump_insn 580 412 581 44 (set (pc)
        (label_ref 469)) "function.c":1231 683 {jump}
     (nil)
 -> 469)
;;  succ:       50 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 581 580 473)
;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL)
;;  pred:       50
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 215 216 217 218 219 220 221 222 366 367 368
(code_label 473 581 415 45 220 (nil) [1 uses])
(note 415 473 416 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 416 415 417 45 (set (reg/f:DI 366)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 417 416 418 45 (set (reg/f:DI 215 [ _129 ])
        (mem/f:DI (plus:DI (reg/f:DI 366)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 366)
        (nil)))
(insn 418 417 419 45 (set (reg:SI 367)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 419 418 420 45 (set (reg:DI 216 [ _130 ])
        (sign_extend:DI (reg:SI 367))) "function.c":1233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 367)
        (nil)))
(insn 420 419 421 45 (parallel [
            (set (reg:DI 217 [ _131 ])
                (ashift:DI (reg:DI 216 [ _130 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 216 [ _130 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 421 420 422 45 (parallel [
            (set (reg/f:DI 218 [ _132 ])
                (plus:DI (reg/f:DI 215 [ _129 ])
                    (reg:DI 217 [ _131 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 217 [ _131 ])
        (expr_list:REG_DEAD (reg/f:DI 215 [ _129 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 422 421 423 45 (set (reg/f:DI 219 [ _133 ])
        (mem/f:DI (reg/f:DI 218 [ _132 ]) [10 *_132+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 218 [ _132 ])
        (nil)))
(insn 423 422 424 45 (set (reg:SI 368)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 424 423 425 45 (set (reg:DI 220 [ _134 ])
        (sign_extend:DI (reg:SI 368))) "function.c":1233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 368)
        (nil)))
(insn 425 424 426 45 (parallel [
            (set (reg/f:DI 221 [ _135 ])
                (plus:DI (reg/f:DI 219 [ _133 ])
                    (reg:DI 220 [ _134 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 220 [ _134 ])
        (expr_list:REG_DEAD (reg/f:DI 219 [ _133 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 426 425 427 45 (set (reg:QI 222 [ _136 ])
        (mem:QI (reg/f:DI 221 [ _135 ]) [0 *_135+0 S1 A8])) "function.c":1233 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 221 [ _135 ])
        (nil)))
(insn 427 426 428 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 222 [ _136 ])
            (const_int 84 [0x54]))) "function.c":1233 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 222 [ _136 ])
        (nil)))
(jump_insn 428 427 429 45 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 466)
            (pc))) "function.c":1233 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 466)
;;  succ:       46 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL)
;;  pred:       45 (FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 223 369 370 371 372
(note 429 428 430 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 430 429 431 46 (set (reg/f:DI 369)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 431 430 432 46 (set (reg:SI 371)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 432 431 433 46 (set (reg:DI 370)
        (sign_extend:DI (reg:SI 371))) "function.c":1233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 371)
        (nil)))
(insn 433 432 434 46 (parallel [
            (set (reg:DI 372)
                (plus:DI (reg:DI 370)
                    (const_int 2006 [0x7d6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1233 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 370)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 434 433 435 46 (set (reg:SI 223 [ _137 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 372)
                        (const_int 8 [0x8]))
                    (reg/f:DI 369))
                (const_int 8 [0x8])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A64])) "function.c":1233 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 372)
        (expr_list:REG_DEAD (reg/f:DI 369)
            (nil))))
(insn 435 434 436 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 223 [ _137 ]))) "function.c":1233 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 223 [ _137 ])
        (nil)))
(jump_insn 436 435 437 46 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 466)
            (pc))) "function.c":1233 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 466)
;;  succ:       47 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 224 373 374 375
(note 437 436 438 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 438 437 439 47 (set (reg/f:DI 373)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1233 85 {*movdi_internal}
     (nil))
(insn 439 438 440 47 (set (reg:SI 375)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])) "function.c":1233 86 {*movsi_internal}
     (nil))
(insn 440 439 441 47 (set (reg:DI 374)
        (sign_extend:DI (reg:SI 375))) "function.c":1233 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 375)
        (nil)))
(insn 441 440 442 47 (set (reg:SI 224 [ _138 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 374)
                        (const_int 8 [0x8]))
                    (reg/f:DI 373))
                (const_int 16060 [0x3ebc])) [3 serwer_178(D)->skarb.large_treasure_coin S4 A32])) "function.c":1233 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 374)
        (expr_list:REG_DEAD (reg/f:DI 373)
            (nil))))
(insn 442 441 443 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 224 [ _138 ]))) "function.c":1233 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 224 [ _138 ])
        (nil)))
(jump_insn 443 442 444 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 466)
            (pc))) "function.c":1233 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 466)
;;  succ:       48 (FALLTHRU)
;;              49
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 225 226 227 228 229 230 231 232 233 234 235 253 376 377 378 379 380
(note 444 443 445 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 445 444 446 48 (set (reg/f:DI 376)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (nil))
(insn 446 445 447 48 (set (reg/f:DI 225 [ _139 ])
        (mem/f:DI (plus:DI (reg/f:DI 376)
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 376)
        (nil)))
(insn 447 446 448 48 (set (reg:SI 226 [ _140 ])
        (mem:SI (plus:DI (reg/f:DI 225 [ _139 ])
                (const_int 32 [0x20])) [3 _139->coins_carried+0 S4 A64])) "function.c":1235 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 225 [ _139 ])
        (nil)))
(insn 448 447 449 48 (set (reg/f:DI 377)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (nil))
(insn 449 448 450 48 (set (reg/f:DI 227 [ _141 ])
        (mem/f:DI (plus:DI (reg/f:DI 377)
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1235 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 377)
        (nil)))
(insn 450 449 451 48 (parallel [
            (set (reg:SI 228 [ _142 ])
                (plus:SI (reg:SI 226 [ _140 ])
                    (const_int 50 [0x32])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1235 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 226 [ _140 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 451 450 452 48 (set (mem:SI (plus:DI (reg/f:DI 227 [ _141 ])
                (const_int 32 [0x20])) [3 _141->coins_carried+0 S4 A64])
        (reg:SI 228 [ _142 ])) "function.c":1235 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 228 [ _142 ])
        (expr_list:REG_DEAD (reg/f:DI 227 [ _141 ])
            (nil))))
(insn 452 451 453 48 (set (reg/f:DI 378)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1236 85 {*movdi_internal}
     (nil))
(insn 453 452 454 48 (set (reg/f:DI 229 [ _143 ])
        (mem/f:DI (plus:DI (reg/f:DI 378)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1236 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 378)
        (nil)))
(insn 454 453 455 48 (set (reg:SI 379)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1236 86 {*movsi_internal}
     (nil))
(insn 455 454 456 48 (set (reg:DI 230 [ _144 ])
        (sign_extend:DI (reg:SI 379))) "function.c":1236 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 379)
        (nil)))
(insn 456 455 457 48 (parallel [
            (set (reg:DI 231 [ _145 ])
                (ashift:DI (reg:DI 230 [ _144 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1236 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 230 [ _144 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 457 456 458 48 (parallel [
            (set (reg/f:DI 232 [ _146 ])
                (plus:DI (reg/f:DI 229 [ _143 ])
                    (reg:DI 231 [ _145 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1236 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 231 [ _145 ])
        (expr_list:REG_DEAD (reg/f:DI 229 [ _143 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 458 457 459 48 (set (reg/f:DI 233 [ _147 ])
        (mem/f:DI (reg/f:DI 232 [ _146 ]) [10 *_146+0 S8 A64])) "function.c":1236 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 232 [ _146 ])
        (nil)))
(insn 459 458 460 48 (set (reg:SI 380)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1236 86 {*movsi_internal}
     (nil))
(insn 460 459 461 48 (set (reg:DI 234 [ _148 ])
        (sign_extend:DI (reg:SI 380))) "function.c":1236 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 380)
        (nil)))
(insn 461 460 462 48 (parallel [
            (set (reg/f:DI 235 [ _149 ])
                (plus:DI (reg/f:DI 233 [ _147 ])
                    (reg:DI 234 [ _148 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1236 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 234 [ _148 ])
        (expr_list:REG_DEAD (reg/f:DI 233 [ _147 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 462 461 463 48 (set (mem:QI (reg/f:DI 235 [ _149 ]) [0 *_149+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1236 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 235 [ _149 ])
        (nil)))
(insn 463 462 582 48 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1237 85 {*movdi_internal}
     (nil))
(jump_insn 582 463 583 48 (set (pc)
        (label_ref 547)) "function.c":1237 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 583 582 466)
;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 50, flags: (RTL)
;;  pred:       45
;;              46
;;              47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 466 583 467 49 219 (nil) [3 uses])
(note 467 466 468 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 468 467 469 49 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1231 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       50 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 50, loop depth 0, maybe hot
;;  prev block 49, next block 51, flags: (RTL)
;;  pred:       49 (FALLTHRU,DFS_BACK)
;;              44 [always] 
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 236 381
(code_label 469 468 470 50 218 (nil) [1 uses])
(note 470 469 471 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 471 470 472 50 (set (reg/f:DI 381)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1231 85 {*movdi_internal}
     (nil))
(insn 472 471 474 50 (set (reg:SI 236 [ _150 ])
        (mem:SI (plus:DI (reg/f:DI 381)
                (const_int 24056 [0x5df8])) [3 serwer_178(D)->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1231 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 381)
        (nil)))
(insn 474 472 475 50 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [3 i+0 S4 A32])
            (reg:SI 236 [ _150 ]))) "function.c":1231 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 236 [ _150 ])
        (nil)))
(jump_insn 475 474 476 50 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 473)
            (pc))) "function.c":1231 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 473)
;;  succ:       45
;;              51 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 476 475 477 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 477 476 584 51 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
        (const_int 0 [0])) "function.c":1241 86 {*movsi_internal}
     (nil))
(jump_insn 584 477 585 51 (set (pc)
        (label_ref 538)) "function.c":1241 683 {jump}
     (nil)
 -> 538)
;;  succ:       57 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 585 584 542)
;; basic block 52, loop depth 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL)
;;  pred:       57
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 237 382 383 384 385
(code_label 542 585 480 52 223 (nil) [1 uses])
(note 480 542 481 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 481 480 482 52 (set (reg/f:DI 382)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1243 85 {*movdi_internal}
     (nil))
(insn 482 481 483 52 (set (reg:SI 384)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 483 482 484 52 (set (reg:DI 383)
        (sign_extend:DI (reg:SI 384))) "function.c":1243 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 384)
        (nil)))
(insn 484 483 485 52 (parallel [
            (set (reg:DI 385)
                (plus:DI (reg:DI 383)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1243 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 383)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 485 484 486 52 (set (reg:SI 237 [ _151 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 385)
                    (const_int 4 [0x4]))
                (reg/f:DI 382)) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1243 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 385)
        (expr_list:REG_DEAD (reg/f:DI 382)
            (nil))))
(insn 486 485 487 52 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 237 [ _151 ])
            (const_int 0 [0]))) "function.c":1243 7 {*cmpsi_ccno_1}
     (expr_list:REG_DEAD (reg:SI 237 [ _151 ])
        (nil)))
(jump_insn 487 486 488 52 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) "function.c":1243 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGOC 17 flags)
        (nil))
 -> 535)
;;  succ:       53 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 53, loop depth 0, maybe hot
;;  prev block 52, next block 54, flags: (RTL)
;;  pred:       52 (FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 238 386 387 388 389
(note 488 487 489 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 489 488 490 53 (set (reg/f:DI 386)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1243 85 {*movdi_internal}
     (nil))
(insn 490 489 491 53 (set (reg:SI 388)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 491 490 492 53 (set (reg:DI 387)
        (sign_extend:DI (reg:SI 388))) "function.c":1243 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 388)
        (nil)))
(insn 492 491 493 53 (parallel [
            (set (reg:DI 389)
                (plus:DI (reg:DI 387)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1243 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 387)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 493 492 494 53 (set (reg:SI 238 [ _152 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 389)
                    (const_int 8 [0x8]))
                (reg/f:DI 386)) [3 serwer_178(D)->skarb.dropped_coin S4 A64])) "function.c":1243 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 389)
        (expr_list:REG_DEAD (reg/f:DI 386)
            (nil))))
(insn 494 493 495 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])
            (reg:SI 238 [ _152 ]))) "function.c":1243 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 238 [ _152 ])
        (nil)))
(jump_insn 495 494 496 53 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) "function.c":1243 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 535)
;;  succ:       54 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 54, loop depth 0, maybe hot
;;  prev block 53, next block 55, flags: (RTL)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 390 391 392
(note 496 495 497 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 497 496 498 54 (set (reg/f:DI 390)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1243 85 {*movdi_internal}
     (nil))
(insn 498 497 499 54 (set (reg:SI 392)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1243 86 {*movsi_internal}
     (nil))
(insn 499 498 500 54 (set (reg:DI 391)
        (sign_extend:DI (reg:SI 392))) "function.c":1243 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 392)
        (nil)))
(insn 500 499 501 54 (set (reg:SI 239 [ _153 ])
        (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 391)
                        (const_int 8 [0x8]))
                    (reg/f:DI 390))
                (const_int 24068 [0x5e04])) [3 serwer_178(D)->skarb.dropped_coin S4 A32])) "function.c":1243 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 391)
        (expr_list:REG_DEAD (reg/f:DI 390)
            (nil))))
(insn 501 500 502 54 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])
            (reg:SI 239 [ _153 ]))) "function.c":1243 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 239 [ _153 ])
        (nil)))
(jump_insn 502 501 503 54 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 535)
            (pc))) "function.c":1243 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 535)
;;  succ:       55 (FALLTHRU)
;;              56
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 55, loop depth 0, maybe hot
;;  prev block 54, next block 56, flags: (RTL)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 240 241 242 243 244 245 246 247 248 249 250 251 253 393 394 395 396 397 398 399 400 401 402 403 404 405
(note 503 502 504 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 504 503 505 55 (set (reg/f:DI 393)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 505 504 506 55 (set (reg/f:DI 240 [ _154 ])
        (mem/f:DI (plus:DI (reg/f:DI 393)
                (const_int 32 [0x20])) [14 serwer_178(D)->player1+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 393)
        (nil)))
(insn 506 505 507 55 (set (reg:SI 241 [ _155 ])
        (mem:SI (plus:DI (reg/f:DI 240 [ _154 ])
                (const_int 32 [0x20])) [3 _154->coins_carried+0 S4 A64])) "function.c":1245 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 240 [ _154 ])
        (nil)))
(insn 507 506 508 55 (set (reg/f:DI 394)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 508 507 509 55 (set (reg:SI 396)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1245 86 {*movsi_internal}
     (nil))
(insn 509 508 510 55 (set (reg:DI 395)
        (sign_extend:DI (reg:SI 396))) "function.c":1245 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 396)
        (nil)))
(insn 510 509 511 55 (parallel [
            (set (reg:DI 397)
                (plus:DI (reg:DI 395)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1245 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 395)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 511 510 512 55 (set (reg:SI 242 [ _156 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 397)
                    (const_int 4 [0x4]))
                (reg/f:DI 394)) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])) "function.c":1245 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 397)
        (expr_list:REG_DEAD (reg/f:DI 394)
            (nil))))
(insn 512 511 513 55 (set (reg/f:DI 398)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (nil))
(insn 513 512 514 55 (set (reg/f:DI 243 [ _157 ])
        (mem/f:DI (plus:DI (reg/f:DI 398)
                (const_int 40 [0x28])) [14 serwer_178(D)->player2+0 S8 A64])) "function.c":1245 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 398)
        (nil)))
(insn 514 513 515 55 (parallel [
            (set (reg:SI 244 [ _158 ])
                (plus:SI (reg:SI 241 [ _155 ])
                    (reg:SI 242 [ _156 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1245 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 242 [ _156 ])
        (expr_list:REG_DEAD (reg:SI 241 [ _155 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 515 514 516 55 (set (mem:SI (plus:DI (reg/f:DI 243 [ _157 ])
                (const_int 32 [0x20])) [3 _157->coins_carried+0 S4 A64])
        (reg:SI 244 [ _158 ])) "function.c":1245 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 244 [ _158 ])
        (expr_list:REG_DEAD (reg/f:DI 243 [ _157 ])
            (nil))))
(insn 516 515 517 55 (set (reg/f:DI 399)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1246 85 {*movdi_internal}
     (nil))
(insn 517 516 518 55 (set (reg:SI 401)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])) "function.c":1246 86 {*movsi_internal}
     (nil))
(insn 518 517 519 55 (set (reg:DI 400)
        (sign_extend:DI (reg:SI 401))) "function.c":1246 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 401)
        (nil)))
(insn 519 518 520 55 (parallel [
            (set (reg:DI 402)
                (plus:DI (reg:DI 400)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1246 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 400)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 520 519 521 55 (set (mem:SI (plus:DI (mult:DI (reg:DI 402)
                    (const_int 4 [0x4]))
                (reg/f:DI 399)) [3 serwer_178(D)->skarb.value_all_dropped_coin S4 A32])
        (const_int -1 [0xffffffffffffffff])) "function.c":1246 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 402)
        (expr_list:REG_DEAD (reg/f:DI 399)
            (nil))))
(insn 521 520 522 55 (set (reg/f:DI 403)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1247 85 {*movdi_internal}
     (nil))
(insn 522 521 523 55 (set (reg/f:DI 245 [ _159 ])
        (mem/f:DI (plus:DI (reg/f:DI 403)
                (const_int 16 [0x10])) [9 serwer_178(D)->mapa+0 S8 A64])) "function.c":1247 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 403)
        (nil)))
(insn 523 522 524 55 (set (reg:SI 404)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -36 [0xffffffffffffffdc])) [3 y+0 S4 A32])) "function.c":1247 86 {*movsi_internal}
     (nil))
(insn 524 523 525 55 (set (reg:DI 246 [ _160 ])
        (sign_extend:DI (reg:SI 404))) "function.c":1247 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 404)
        (nil)))
(insn 525 524 526 55 (parallel [
            (set (reg:DI 247 [ _161 ])
                (ashift:DI (reg:DI 246 [ _160 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1247 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 246 [ _160 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 526 525 527 55 (parallel [
            (set (reg/f:DI 248 [ _162 ])
                (plus:DI (reg/f:DI 245 [ _159 ])
                    (reg:DI 247 [ _161 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1247 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 247 [ _161 ])
        (expr_list:REG_DEAD (reg/f:DI 245 [ _159 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 527 526 528 55 (set (reg/f:DI 249 [ _163 ])
        (mem/f:DI (reg/f:DI 248 [ _162 ]) [10 *_162+0 S8 A64])) "function.c":1247 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 248 [ _162 ])
        (nil)))
(insn 528 527 529 55 (set (reg:SI 405)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 x+0 S4 A32])) "function.c":1247 86 {*movsi_internal}
     (nil))
(insn 529 528 530 55 (set (reg:DI 250 [ _164 ])
        (sign_extend:DI (reg:SI 405))) "function.c":1247 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 405)
        (nil)))
(insn 530 529 531 55 (parallel [
            (set (reg/f:DI 251 [ _165 ])
                (plus:DI (reg/f:DI 249 [ _163 ])
                    (reg:DI 250 [ _164 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1247 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 250 [ _164 ])
        (expr_list:REG_DEAD (reg/f:DI 249 [ _163 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 531 530 532 55 (set (mem:QI (reg/f:DI 251 [ _165 ]) [0 *_165+0 S1 A8])
        (const_int 46 [0x2e])) "function.c":1247 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 251 [ _165 ])
        (nil)))
(insn 532 531 586 55 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1248 85 {*movdi_internal}
     (nil))
(jump_insn 586 532 587 55 (set (pc)
        (label_ref 547)) "function.c":1248 683 {jump}
     (nil)
 -> 547)
;;  succ:       59 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

(barrier 587 586 535)
;; basic block 56, loop depth 0, maybe hot
;;  prev block 55, next block 57, flags: (RTL)
;;  pred:       52
;;              53
;;              54
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]
(code_label 535 587 536 56 222 (nil) [3 uses])
(note 536 535 537 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 537 536 538 56 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                        (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                            (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1241 221 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       57 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 57, loop depth 0, maybe hot
;;  prev block 56, next block 58, flags: (RTL)
;;  pred:       56 (FALLTHRU,DFS_BACK)
;;              51 [always] 
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 252 406
(code_label 538 537 539 57 221 (nil) [1 uses])
(note 539 538 540 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 57 (set (reg/f:DI 406)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [12 serwer+0 S8 A64])) "function.c":1241 85 {*movdi_internal}
     (nil))
(insn 541 540 543 57 (set (reg:SI 252 [ _166 ])
        (mem:SI (plus:DI (reg/f:DI 406)
                (const_int 24060 [0x5dfc])) [3 serwer_178(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1241 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 406)
        (nil)))
(insn 543 541 544 57 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                    (const_int -32 [0xffffffffffffffe0])) [3 i+0 S4 A32])
            (reg:SI 252 [ _166 ]))) "function.c":1241 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 252 [ _166 ])
        (nil)))
(jump_insn 544 543 545 57 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 542)
            (pc))) "function.c":1241 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 542)
;;  succ:       52
;;              58 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 58, loop depth 0, maybe hot
;;  prev block 57, next block 59, flags: (RTL)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 253
(note 545 544 546 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 546 545 547 58 (set (reg/f:DI 253 [ _175 ])
        (const_int 0 [0])) "function.c":1251 85 {*movdi_internal}
     (nil))
;;  succ:       59 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253

;; basic block 59, loop depth 0, maybe hot
;;  prev block 58, next block 1, flags: (RTL)
;;  pred:       58 (FALLTHRU)
;;              6 [always] 
;;              13 [always] 
;;              20 [always] 
;;              27 [always] 
;;              34 [always] 
;;              41 [always] 
;;              48 [always] 
;;              55 [always] 
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 253
;; lr  def 	 0 [ax] 254
(code_label 547 546 548 59 201 (nil) [8 uses])
(note 548 547 549 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 549 548 553 59 (set (reg/f:DI 254 [ <retval> ])
        (reg/f:DI 253 [ _175 ])) 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 253 [ _175 ])
        (nil)))
(insn 553 549 554 59 (set (reg/i:DI 0 ax)
        (reg/f:DI 254 [ <retval> ])) "function.c":1252 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 254 [ <retval> ])
        (nil)))
(insn 554 553 0 59 (use (reg/i:DI 0 ax)) "function.c":1252 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function oboz_random (oboz_random, funcdef_no=25, decl_uid=6257, cgraph_uid=25, symbol_order=28)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 7 n_edges 7 count 7 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 3, latch 5
;;  depth 1, outer 0
;;  nodes: 3 5
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 32.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r109,l0) best AREG, allocno GENERAL_REGS
    r108: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r108,l0) best DIREG, allocno GENERAL_REGS
    r107: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r107,l0) best SIREG, allocno GENERAL_REGS
    r106: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r106,l0) best AREG, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r104,l0) best SIREG, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a10(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a12(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a15(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a16(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a17(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a19(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a20(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a21(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a26(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a28(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a29(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a30(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a31(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a32(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000

   Insn 79(l0): point = 0
   Insn 81(l0): point = 3
   Insn 65(l0): point = 5
   Insn 64(l0): point = 7
   Insn 63(l0): point = 9
   Insn 62(l0): point = 11
   Insn 61(l0): point = 13
   Insn 60(l0): point = 15
   Insn 59(l0): point = 17
   Insn 58(l0): point = 19
   Insn 57(l0): point = 21
   Insn 56(l0): point = 23
   Insn 55(l0): point = 25
   Insn 54(l0): point = 27
   Insn 53(l0): point = 29
   Insn 52(l0): point = 31
   Insn 51(l0): point = 33
   Insn 50(l0): point = 35
   Insn 49(l0): point = 37
   Insn 47(l0): point = 40
   Insn 46(l0): point = 42
   Insn 45(l0): point = 44
   Insn 44(l0): point = 46
   Insn 43(l0): point = 48
   Insn 42(l0): point = 50
   Insn 41(l0): point = 52
   Insn 40(l0): point = 54
   Insn 39(l0): point = 56
   Insn 38(l0): point = 58
   Insn 37(l0): point = 60
   Insn 36(l0): point = 62
   Insn 35(l0): point = 64
   Insn 34(l0): point = 66
   Insn 33(l0): point = 68
   Insn 32(l0): point = 70
   Insn 31(l0): point = 72
   Insn 30(l0): point = 74
   Insn 29(l0): point = 76
   Insn 28(l0): point = 78
   Insn 27(l0): point = 80
   Insn 26(l0): point = 82
   Insn 25(l0): point = 84
   Insn 24(l0): point = 86
   Insn 23(l0): point = 88
   Insn 22(l0): point = 90
   Insn 21(l0): point = 92
   Insn 20(l0): point = 94
   Insn 19(l0): point = 96
   Insn 18(l0): point = 98
   Insn 17(l0): point = 100
   Insn 83(l0): point = 103
   Insn 15(l0): point = 106
   Insn 14(l0): point = 108
   Insn 13(l0): point = 110
   Insn 12(l0): point = 112
   Insn 11(l0): point = 114
   Insn 10(l0): point = 116
   Insn 9(l0): point = 118
   Insn 8(l0): point = 120
   Insn 7(l0): point = 122
   Insn 6(l0): point = 124
   Insn 2(l0): point = 126
 a0(r118): [6..9]
 a1(r119): [6..7]
 a2(r116): [12..15]
 a3(r117): [12..13]
 a4(r103): [18..19]
 a5(r102): [20..21]
 a6(r101): [20..25]
 a7(r115): [22..23]
 a8(r100): [26..27]
 a9(r99): [28..29]
 a10(r97): [28..35]
 a11(r98): [30..31]
 a12(r114): [32..33]
 a13(r113): [36..37]
 a14(r96): [43..44]
 a15(r95): [45..46]
 a16(r94): [47..48]
 a17(r93): [47..52]
 a18(r112): [49..50]
 a19(r92): [53..54]
 a20(r91): [55..56]
 a21(r89): [55..62]
 a22(r90): [57..58]
 a23(r111): [59..60]
 a24(r110): [63..64]
 a25(r109): [67..68]
 a26(r108): [73..76]
 a27(r107): [75..78]
 a28(r106): [85..86]
 a29(r105): [91..94]
 a30(r104): [93..96]
 a31(r88): [117..118]
 a32(r87): [119..120]
Compressing live ranges: from 129 to 50 - 38%
Ranges after the compression:
 a0(r118): [0..1]
 a1(r119): [0..1]
 a2(r116): [2..3]
 a3(r117): [2..3]
 a4(r103): [4..5]
 a5(r102): [6..7]
 a6(r101): [6..9]
 a7(r115): [8..9]
 a8(r100): [10..11]
 a9(r99): [12..13]
 a10(r97): [12..17]
 a11(r98): [14..15]
 a12(r114): [16..17]
 a13(r113): [18..19]
 a14(r96): [20..21]
 a15(r95): [22..23]
 a16(r94): [24..25]
 a17(r93): [24..27]
 a18(r112): [26..27]
 a19(r92): [28..29]
 a20(r91): [30..31]
 a21(r89): [30..35]
 a22(r90): [32..33]
 a23(r111): [34..35]
 a24(r110): [36..37]
 a25(r109): [38..39]
 a26(r108): [40..41]
 a27(r107): [40..41]
 a28(r106): [42..43]
 a29(r105): [44..45]
 a30(r104): [44..45]
 a31(r88): [46..47]
 a32(r87): [48..49]
  pref0:a25(r109)<-hr0@500
  pref1:a26(r108)<-hr5@500
  pref2:a27(r107)<-hr4@500
  pref3:a28(r106)<-hr0@500
  pref4:a29(r105)<-hr5@500
  pref5:a30(r104)<-hr4@500
  pref6:a31(r88)<-hr5@500
  pref7:a32(r87)<-hr0@500
  regions=1, blocks=7, points=50
    allocnos=33 (big 0), copies=0, conflicts=0, ranges=33
Disposition:
   32:r87  l0     0   31:r88  l0     0   21:r89  l0     0   22:r90  l0     1
   20:r91  l0     1   19:r92  l0     0   17:r93  l0     1   16:r94  l0     0
   15:r95  l0     0   14:r96  l0     0   10:r97  l0     0   11:r98  l0     1
    9:r99  l0     1    8:r100 l0     0    6:r101 l0     1    5:r102 l0     0
    4:r103 l0     0   30:r104 l0     1   29:r105 l0     0   28:r106 l0     0
   27:r107 l0     1   26:r108 l0     0   25:r109 l0     0   24:r110 l0     0
   23:r111 l0     1   18:r112 l0     0   13:r113 l0     0   12:r114 l0     1
    7:r115 l0     0    2:r116 l0     0    3:r117 l0     1    0:r118 l0     0
    1:r119 l0     1
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


oboz_random

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,3u} r1={5d} r2={5d} r4={7d,2u} r5={9d,5u} r6={1d,6u} r7={1d,10u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,5u} r17={11d,1u} r18={4d} r19={4d} r20={1d,31u} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} 
;;    total ref usage 449{353d,96u,0e} in 62{58 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1255 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":1256 85 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":1256 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 87 [ _1 ])
        (reg:DI 0 ax)) "function.c":1256 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (reg:SI 88 [ _2 ])
        (subreg:SI (reg:DI 87 [ _1 ]) 0)) "function.c":1256 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 87 [ _1 ])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 5 di)
        (reg:SI 88 [ _2 ])) "function.c":1256 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":1256 689 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 0 [0])) "function.c":1257 86 {*movsi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1258 86 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":1259 86 {*movsi_internal}
     (nil))
(insn 15 14 70 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":1260 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              5 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 104 105 106 107 108 109 110 111 112
(code_label 70 15 16 3 227 (nil) [1 uses])
(note 16 70 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1264 86 {*movsi_internal}
     (nil))
(insn 18 17 19 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":1264 86 {*movsi_internal}
     (nil))
(insn 19 18 20 3 (set (reg:SI 104)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1265 86 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 105)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1265 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 4 si)
        (reg:SI 104)) "function.c":1265 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 104)
        (nil)))
(insn 22 21 23 3 (set (reg:SI 5 di)
        (reg:SI 105)) "function.c":1265 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 105)
        (nil)))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1265 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 24 23 25 3 (set (reg:SI 106)
        (reg:SI 0 ax)) "function.c":1265 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 25 24 26 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 106)) "function.c":1265 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 26 25 27 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1268 86 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":1268 86 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:SI 107)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1269 86 {*movsi_internal}
     (nil))
(insn 29 28 30 3 (set (reg:SI 108)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1269 86 {*movsi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:SI 4 si)
        (reg:SI 107)) "function.c":1269 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 107)
        (nil)))
(insn 31 30 32 3 (set (reg:SI 5 di)
        (reg:SI 108)) "function.c":1269 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108)
        (nil)))
(call_insn 32 31 33 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1269 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 33 32 34 3 (set (reg:SI 109)
        (reg:SI 0 ax)) "function.c":1269 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 34 33 35 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 109)) "function.c":1269 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 109)
        (nil)))
(insn 35 34 36 3 (set (reg/f:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1271 85 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 110)
                (const_int 16 [0x10])) [9 serwer_34(D)->mapa+0 S8 A64])) "function.c":1271 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 110)
        (nil)))
(insn 37 36 38 3 (set (reg:SI 111)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1271 86 {*movsi_internal}
     (nil))
(insn 38 37 39 3 (set (reg:DI 90 [ _4 ])
        (sign_extend:DI (reg:SI 111))) "function.c":1271 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 111)
        (nil)))
(insn 39 38 40 3 (parallel [
            (set (reg:DI 91 [ _5 ])
                (ashift:DI (reg:DI 90 [ _4 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1271 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 90 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 40 39 41 3 (parallel [
            (set (reg/f:DI 92 [ _6 ])
                (plus:DI (reg/f:DI 89 [ _3 ])
                    (reg:DI 91 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1271 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 41 40 42 3 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (reg/f:DI 92 [ _6 ]) [10 *_6+0 S8 A64])) "function.c":1271 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92 [ _6 ])
        (nil)))
(insn 42 41 43 3 (set (reg:SI 112)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1271 86 {*movsi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:DI 94 [ _8 ])
        (sign_extend:DI (reg:SI 112))) "function.c":1271 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 112)
        (nil)))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 95 [ _9 ])
                (plus:DI (reg/f:DI 93 [ _7 ])
                    (reg:DI 94 [ _8 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1271 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _8 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 45 44 46 3 (set (reg:QI 96 [ _10 ])
        (mem:QI (reg/f:DI 95 [ _9 ]) [0 *_9+0 S1 A8])) "function.c":1271 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
        (nil)))
(insn 46 45 47 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 96 [ _10 ])
            (const_int 46 [0x2e]))) "function.c":1271 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 96 [ _10 ])
        (nil)))
(jump_insn 47 46 48 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) "function.c":1271 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 68)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97 98 99 100 101 102 103 113 114 115 116 117 118 119
(note 48 47 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 48 50 4 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1273 85 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg/f:DI 97 [ _11 ])
        (mem/f:DI (plus:DI (reg/f:DI 113)
                (const_int 16 [0x10])) [9 serwer_34(D)->mapa+0 S8 A64])) "function.c":1273 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113)
        (nil)))
(insn 51 50 52 4 (set (reg:SI 114)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1273 86 {*movsi_internal}
     (nil))
(insn 52 51 53 4 (set (reg:DI 98 [ _12 ])
        (sign_extend:DI (reg:SI 114))) "function.c":1273 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(insn 53 52 54 4 (parallel [
            (set (reg:DI 99 [ _13 ])
                (ashift:DI (reg:DI 98 [ _12 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1273 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 98 [ _12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 54 53 55 4 (parallel [
            (set (reg/f:DI 100 [ _14 ])
                (plus:DI (reg/f:DI 97 [ _11 ])
                    (reg:DI 99 [ _13 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1273 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 99 [ _13 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 55 54 56 4 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (reg/f:DI 100 [ _14 ]) [10 *_14+0 S8 A64])) "function.c":1273 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _14 ])
        (nil)))
(insn 56 55 57 4 (set (reg:SI 115)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1273 86 {*movsi_internal}
     (nil))
(insn 57 56 58 4 (set (reg:DI 102 [ _16 ])
        (sign_extend:DI (reg:SI 115))) "function.c":1273 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
(insn 58 57 59 4 (parallel [
            (set (reg/f:DI 103 [ _17 ])
                (plus:DI (reg/f:DI 101 [ _15 ])
                    (reg:DI 102 [ _16 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1273 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
        (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 59 58 60 4 (set (mem:QI (reg/f:DI 103 [ _17 ]) [0 *_17+0 S1 A8])
        (const_int 65 [0x41])) "function.c":1273 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
        (nil)))
(insn 60 59 61 4 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1274 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:SI 117)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1274 86 {*movsi_internal}
     (nil))
(insn 62 61 63 4 (set (mem:SI (plus:DI (reg/f:DI 116)
                (const_int 4 [0x4])) [3 serwer_34(D)->x_camp+0 S4 A32])
        (reg:SI 117)) "function.c":1274 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 117)
        (expr_list:REG_DEAD (reg/f:DI 116)
            (nil))))
(insn 63 62 64 4 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1275 85 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg:SI 119)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1275 86 {*movsi_internal}
     (nil))
(insn 65 64 81 4 (set (mem:SI (plus:DI (reg/f:DI 118)
                (const_int 8 [0x8])) [3 serwer_34(D)->y_camp+0 S4 A64])
        (reg:SI 119)) "function.c":1275 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 119)
        (expr_list:REG_DEAD (reg/f:DI 118)
            (nil))))
(jump_insn 81 65 82 4 (set (pc)
        (label_ref 80)) "function.c":1276 683 {jump}
     (nil)
 -> 80)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 82 81 68)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 68 82 69 5 225 (nil) [1 uses])
(note 69 68 83 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 83 69 84 5 (set (pc)
        (label_ref 70)) "function.c":1264 683 {jump}
     (nil)
 -> 70)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 84 83 80)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL)
;;  pred:       4 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 80 84 74 6 229 (nil) [1 uses])
(note 74 80 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 79 74 0 6 (const_int 0 [0]) "function.c":1279 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function oboz_coins (oboz_coins, funcdef_no=26, decl_uid=6259, cgraph_uid=26, symbol_order=29)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 13 count 10 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 9 8
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 9 }
;; 6 succs { 7 9 }
;; 7 succs { 9 }
;; 9 succs { 8 }
;; 8 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a4(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a5(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a17(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a25(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a26(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a27(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a32(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a38(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a39(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 77(l0): point = 1
   Insn 72(l0): point = 4
   Insn 65(l0): point = 6
   Insn 64(l0): point = 8
   Insn 63(l0): point = 10
   Insn 62(l0): point = 12
   Insn 61(l0): point = 14
   Insn 60(l0): point = 16
   Insn 59(l0): point = 18
   Insn 58(l0): point = 20
   Insn 57(l0): point = 22
   Insn 56(l0): point = 24
   Insn 55(l0): point = 26
   Insn 54(l0): point = 28
   Insn 53(l0): point = 30
   Insn 51(l0): point = 33
   Insn 50(l0): point = 35
   Insn 49(l0): point = 37
   Insn 48(l0): point = 39
   Insn 47(l0): point = 41
   Insn 46(l0): point = 43
   Insn 45(l0): point = 45
   Insn 43(l0): point = 48
   Insn 42(l0): point = 50
   Insn 41(l0): point = 52
   Insn 40(l0): point = 54
   Insn 39(l0): point = 56
   Insn 38(l0): point = 58
   Insn 37(l0): point = 60
   Insn 34(l0): point = 63
   Insn 33(l0): point = 65
   Insn 32(l0): point = 67
   Insn 31(l0): point = 69
   Insn 30(l0): point = 71
   Insn 29(l0): point = 73
   Insn 28(l0): point = 75
   Insn 27(l0): point = 77
   Insn 26(l0): point = 79
   Insn 25(l0): point = 81
   Insn 24(l0): point = 83
   Insn 23(l0): point = 85
   Insn 22(l0): point = 87
   Insn 20(l0): point = 90
   Insn 19(l0): point = 92
   Insn 18(l0): point = 94
   Insn 17(l0): point = 96
   Insn 16(l0): point = 98
   Insn 15(l0): point = 100
   Insn 14(l0): point = 102
   Insn 12(l0): point = 105
   Insn 11(l0): point = 107
   Insn 10(l0): point = 109
   Insn 9(l0): point = 111
   Insn 8(l0): point = 113
   Insn 7(l0): point = 115
   Insn 6(l0): point = 117
   Insn 2(l0): point = 119
 a0(r112): [7..8]
 a1(r128): [9..10]
 a2(r110): [13..16]
 a3(r111): [13..14]
 a4(r109): [15..20]
 a5(r107): [15..26]
 a6(r127): [17..18]
 a7(r108): [21..22]
 a8(r126): [23..24]
 a9(r106): [27..28]
 a10(r125): [29..30]
 a11(r105): [36..37]
 a12(r103): [36..43]
 a13(r104): [38..39]
 a14(r124): [40..41]
 a15(r123): [44..45]
 a16(r102): [51..52]
 a17(r100): [51..58]
 a18(r101): [53..54]
 a19(r122): [55..56]
 a20(r121): [59..60]
 a21(r99): [64..65]
 a22(r120): [66..67]
 a23(r97): [70..73]
 a24(r98): [70..71]
 a25(r96): [72..77]
 a26(r94): [72..83]
 a27(r119): [74..75]
 a28(r95): [78..79]
 a29(r118): [80..81]
 a30(r93): [84..85]
 a31(r117): [86..87]
 a32(r92): [93..94]
 a33(r90): [93..100]
 a34(r91): [95..96]
 a35(r116): [97..98]
 a36(r115): [101..102]
 a37(r89): [108..109]
 a38(r87): [108..115]
 a39(r88): [110..111]
 a40(r114): [112..113]
 a41(r113): [116..117]
Compressing live ranges: from 122 to 68 - 55%
Ranges after the compression:
 a0(r112): [0..1]
 a1(r128): [2..3]
 a2(r110): [4..7]
 a3(r111): [4..5]
 a4(r109): [6..9]
 a5(r107): [6..13]
 a6(r127): [8..9]
 a7(r108): [10..11]
 a8(r126): [12..13]
 a9(r106): [14..15]
 a10(r125): [16..17]
 a11(r105): [18..19]
 a12(r103): [18..23]
 a13(r104): [20..21]
 a14(r124): [22..23]
 a15(r123): [24..25]
 a16(r102): [26..27]
 a17(r100): [26..31]
 a18(r101): [28..29]
 a19(r122): [30..31]
 a20(r121): [32..33]
 a21(r99): [34..35]
 a22(r120): [36..37]
 a23(r97): [38..41]
 a24(r98): [38..39]
 a25(r96): [40..43]
 a26(r94): [40..47]
 a27(r119): [42..43]
 a28(r95): [44..45]
 a29(r118): [46..47]
 a30(r93): [48..49]
 a31(r117): [50..51]
 a32(r92): [52..53]
 a33(r90): [52..57]
 a34(r91): [54..55]
 a35(r116): [56..57]
 a36(r115): [58..59]
 a37(r89): [60..61]
 a38(r87): [60..65]
 a39(r88): [62..63]
 a40(r114): [64..65]
 a41(r113): [66..67]
  regions=1, blocks=10, points=68
    allocnos=42 (big 0), copies=0, conflicts=0, ranges=42
Disposition:
   38:r87  l0     1   39:r88  l0     0   37:r89  l0     0   33:r90  l0     1
   34:r91  l0     0   32:r92  l0     0   30:r93  l0     0   26:r94  l0     2
   28:r95  l0     0   25:r96  l0     1   23:r97  l0     0   24:r98  l0     1
   21:r99  l0     0   17:r100 l0     1   18:r101 l0     0   16:r102 l0     0
   12:r103 l0     1   13:r104 l0     0   11:r105 l0     0    9:r106 l0     0
    5:r107 l0     2    7:r108 l0     0    4:r109 l0     1    2:r110 l0     0
    3:r111 l0     1    0:r112 l0     0   41:r113 l0     0   40:r114 l0     0
   36:r115 l0     0   35:r116 l0     0   31:r117 l0     0   29:r118 l0     0
   27:r119 l0     0   22:r120 l0     0   20:r121 l0     0   19:r122 l0     0
   15:r123 l0     0   14:r124 l0     0   10:r125 l0     0    8:r126 l0     0
    6:r127 l0     0    1:r128 l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


oboz_coins

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,9u} r7={1d,9u} r16={1d,8u} r17={6d,4u} r20={1d,26u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} 
;;    total ref usage 166{67d,99u,0e} in 57{57 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 113 114
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1283 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 113)
                (const_int 4 [0x4])) [3 serwer_30(D)->x_camp+0 S4 A32])) "function.c":1284 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113)
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 114)
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114)
        (nil)))
(insn 10 9 11 2 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":1284 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (reg:SI 89 [ _3 ]))) "function.c":1284 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
            (nil))))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "function.c":1284 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 35)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 115 116
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 115)
                (const_int 8 [0x8])) [3 serwer_30(D)->y_camp+0 S4 A64])) "function.c":1284 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115)
        (nil)))
(insn 16 15 17 3 (set (reg/f:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 116)
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1284 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116)
        (nil)))
(insn 18 17 19 3 (set (reg:SI 92 [ _6 ])
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1284 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 19 18 20 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ _4 ])
            (reg:SI 92 [ _6 ]))) "function.c":1284 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
            (nil))))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "function.c":1284 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 117 118 119 120
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 117)
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117)
        (nil)))
(insn 24 23 25 4 (set (reg:SI 94 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 93 [ _7 ])
                (const_int 36 [0x24])) [3 _7->coins_brought+0 S4 A32])) "function.c":1285 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
        (nil)))
(insn 25 24 26 4 (set (reg/f:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 26 25 27 4 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 118)
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118)
        (nil)))
(insn 27 26 28 4 (set (reg:SI 96 [ _10 ])
        (mem:SI (plus:DI (reg/f:DI 95 [ _9 ])
                (const_int 32 [0x20])) [3 _9->coins_carried+0 S4 A64])) "function.c":1285 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
        (nil)))
(insn 28 27 29 4 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg/f:DI 97 [ _11 ])
        (mem/f:DI (plus:DI (reg/f:DI 119)
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1285 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119)
        (nil)))
(insn 30 29 31 4 (parallel [
            (set (reg:SI 98 [ _12 ])
                (plus:SI (reg:SI 94 [ _8 ])
                    (reg:SI 96 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1285 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 96 [ _10 ])
        (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 31 30 32 4 (set (mem:SI (plus:DI (reg/f:DI 97 [ _11 ])
                (const_int 36 [0x24])) [3 _11->coins_brought+0 S4 A32])
        (reg:SI 98 [ _12 ])) "function.c":1285 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (expr_list:REG_DEAD (reg/f:DI 97 [ _11 ])
            (nil))))
(insn 32 31 33 4 (set (reg/f:DI 120)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1286 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 120)
                (const_int 32 [0x20])) [14 serwer_30(D)->player1+0 S8 A64])) "function.c":1286 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120)
        (nil)))
(insn 34 33 35 4 (set (mem:SI (plus:DI (reg/f:DI 99 [ _13 ])
                (const_int 32 [0x20])) [3 _13->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1286 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 100 101 102 121 122
(code_label 35 34 36 5 231 (nil) [2 uses])
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg/f:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:SI 100 [ _14 ])
        (mem:SI (plus:DI (reg/f:DI 121)
                (const_int 4 [0x4])) [3 serwer_30(D)->x_camp+0 S4 A32])) "function.c":1289 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121)
        (nil)))
(insn 39 38 40 5 (set (reg/f:DI 122)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 40 39 41 5 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 122)
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122)
        (nil)))
(insn 41 40 42 5 (set (reg:SI 102 [ _16 ])
        (mem:SI (plus:DI (reg/f:DI 101 [ _15 ])
                (const_int 12 [0xc])) [3 _15->x_current+0 S4 A32])) "function.c":1289 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 42 41 43 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 100 [ _14 ])
            (reg:SI 102 [ _16 ]))) "function.c":1289 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 102 [ _16 ])
        (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
            (nil))))
(jump_insn 43 42 44 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 76)
            (pc))) "function.c":1289 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 76)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 123 124
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg/f:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 46 45 47 6 (set (reg:SI 103 [ _17 ])
        (mem:SI (plus:DI (reg/f:DI 123)
                (const_int 8 [0x8])) [3 serwer_30(D)->y_camp+0 S4 A64])) "function.c":1289 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123)
        (nil)))
(insn 47 46 48 6 (set (reg/f:DI 124)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (nil))
(insn 48 47 49 6 (set (reg/f:DI 104 [ _18 ])
        (mem/f:DI (plus:DI (reg/f:DI 124)
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1289 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124)
        (nil)))
(insn 49 48 50 6 (set (reg:SI 105 [ _19 ])
        (mem:SI (plus:DI (reg/f:DI 104 [ _18 ])
                (const_int 16 [0x10])) [3 _18->y_current+0 S4 A64])) "function.c":1289 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
        (nil)))
(insn 50 49 51 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 103 [ _17 ])
            (reg:SI 105 [ _19 ]))) "function.c":1289 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 105 [ _19 ])
        (expr_list:REG_DEAD (reg:SI 103 [ _17 ])
            (nil))))
(jump_insn 51 50 52 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 76)
            (pc))) "function.c":1289 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 76)
;;  succ:       7 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 111 112 125 126 127 128
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg/f:DI 125)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 54 53 55 7 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (plus:DI (reg/f:DI 125)
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125)
        (nil)))
(insn 55 54 56 7 (set (reg:SI 107 [ _21 ])
        (mem:SI (plus:DI (reg/f:DI 106 [ _20 ])
                (const_int 36 [0x24])) [3 _20->coins_brought+0 S4 A32])) "function.c":1290 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 56 55 57 7 (set (reg/f:DI 126)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 57 56 58 7 (set (reg/f:DI 108 [ _22 ])
        (mem/f:DI (plus:DI (reg/f:DI 126)
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 126)
        (nil)))
(insn 58 57 59 7 (set (reg:SI 109 [ _23 ])
        (mem:SI (plus:DI (reg/f:DI 108 [ _22 ])
                (const_int 32 [0x20])) [3 _22->coins_carried+0 S4 A64])) "function.c":1290 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 59 58 60 7 (set (reg/f:DI 127)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (nil))
(insn 60 59 61 7 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (plus:DI (reg/f:DI 127)
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1290 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127)
        (nil)))
(insn 61 60 62 7 (parallel [
            (set (reg:SI 111 [ _25 ])
                (plus:SI (reg:SI 107 [ _21 ])
                    (reg:SI 109 [ _23 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1290 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 109 [ _23 ])
        (expr_list:REG_DEAD (reg:SI 107 [ _21 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 62 61 63 7 (set (mem:SI (plus:DI (reg/f:DI 110 [ _24 ])
                (const_int 36 [0x24])) [3 _24->coins_brought+0 S4 A32])
        (reg:SI 111 [ _25 ])) "function.c":1290 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
        (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
            (nil))))
(insn 63 62 64 7 (set (reg/f:DI 128)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1291 85 {*movdi_internal}
     (nil))
(insn 64 63 65 7 (set (reg/f:DI 112 [ _26 ])
        (mem/f:DI (plus:DI (reg/f:DI 128)
                (const_int 40 [0x28])) [14 serwer_30(D)->player2+0 S8 A64])) "function.c":1291 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 128)
        (nil)))
(insn 65 64 72 7 (set (mem:SI (plus:DI (reg/f:DI 112 [ _26 ])
                (const_int 32 [0x20])) [3 _26->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1291 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 112 [ _26 ])
        (nil)))
(insn 72 65 76 7 (const_int 0 [0]) "function.c":1293 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL)
;;  pred:       5
;;              6
;;              7 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 76 72 75 9 234 (nil) [2 uses])
(note 75 76 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 77 75 70 9 (const_int 0 [0]) "function.c":1293 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 70 77 71 8 230 (nil) [0 uses])
(note 71 70 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function player_position_random (player_position_random, funcdef_no=27, decl_uid=6261, cgraph_uid=27, symbol_order=30)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 2
;;  header 6, latch 8
;;  depth 1, outer 0
;;  nodes: 6 8
;;
;; Loop 1
;;  header 3, latch 5
;;  depth 1, outer 0
;;  nodes: 3 5
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 3 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 6 }
;; 9 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 84.
verify found no changes in insn with uid = 95.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r151,l0) best DIREG, allocno GENERAL_REGS
    r150: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r150,l0) best SIREG, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r148,l0) best DIREG, allocno GENERAL_REGS
    r147: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r147,l0) best SIREG, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a62 (r138,l0) best DIREG, allocno GENERAL_REGS
    r137: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a63 (r137,l0) best SIREG, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a67 (r135,l0) best DIREG, allocno GENERAL_REGS
    r134: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a68 (r134,l0) best SIREG, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r114,l0) best AREG, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r112,l0) best AREG, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a61 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a66 (r90,l0) best AREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a70 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a71 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a11(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a12(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a13(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a15(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a18(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a19(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a20(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a21(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a27(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a28(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a29(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a32(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a38(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a39(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a42(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a46(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a47(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a48(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a49(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a50(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a51(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a52(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a54(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a55(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a56(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a57(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a61(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a62(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a65(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a67(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a68(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a69(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a70(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a71(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000

   Insn 140(l0): point = 0
   Insn 146(l0): point = 3
   Insn 127(l0): point = 5
   Insn 126(l0): point = 7
   Insn 125(l0): point = 9
   Insn 124(l0): point = 11
   Insn 123(l0): point = 13
   Insn 122(l0): point = 15
   Insn 121(l0): point = 17
   Insn 120(l0): point = 19
   Insn 119(l0): point = 21
   Insn 118(l0): point = 23
   Insn 117(l0): point = 25
   Insn 116(l0): point = 27
   Insn 114(l0): point = 30
   Insn 113(l0): point = 32
   Insn 112(l0): point = 34
   Insn 111(l0): point = 36
   Insn 110(l0): point = 38
   Insn 109(l0): point = 40
   Insn 108(l0): point = 42
   Insn 107(l0): point = 44
   Insn 106(l0): point = 46
   Insn 105(l0): point = 48
   Insn 104(l0): point = 50
   Insn 103(l0): point = 52
   Insn 102(l0): point = 54
   Insn 101(l0): point = 56
   Insn 100(l0): point = 58
   Insn 99(l0): point = 60
   Insn 98(l0): point = 62
   Insn 97(l0): point = 64
   Insn 96(l0): point = 66
   Insn 95(l0): point = 68
   Insn 94(l0): point = 70
   Insn 93(l0): point = 72
   Insn 92(l0): point = 74
   Insn 91(l0): point = 76
   Insn 90(l0): point = 78
   Insn 89(l0): point = 80
   Insn 88(l0): point = 82
   Insn 87(l0): point = 84
   Insn 86(l0): point = 86
   Insn 85(l0): point = 88
   Insn 84(l0): point = 90
   Insn 83(l0): point = 92
   Insn 82(l0): point = 94
   Insn 81(l0): point = 96
   Insn 80(l0): point = 98
   Insn 79(l0): point = 100
   Insn 78(l0): point = 102
   Insn 77(l0): point = 104
   Insn 76(l0): point = 106
   Insn 148(l0): point = 109
   Insn 141(l0): point = 112
   Insn 66(l0): point = 114
   Insn 65(l0): point = 116
   Insn 64(l0): point = 118
   Insn 63(l0): point = 120
   Insn 62(l0): point = 122
   Insn 61(l0): point = 124
   Insn 60(l0): point = 126
   Insn 59(l0): point = 128
   Insn 58(l0): point = 130
   Insn 57(l0): point = 132
   Insn 56(l0): point = 134
   Insn 55(l0): point = 136
   Insn 53(l0): point = 139
   Insn 52(l0): point = 141
   Insn 51(l0): point = 143
   Insn 50(l0): point = 145
   Insn 49(l0): point = 147
   Insn 48(l0): point = 149
   Insn 47(l0): point = 151
   Insn 46(l0): point = 153
   Insn 45(l0): point = 155
   Insn 44(l0): point = 157
   Insn 43(l0): point = 159
   Insn 42(l0): point = 161
   Insn 41(l0): point = 163
   Insn 40(l0): point = 165
   Insn 39(l0): point = 167
   Insn 38(l0): point = 169
   Insn 37(l0): point = 171
   Insn 36(l0): point = 173
   Insn 35(l0): point = 175
   Insn 34(l0): point = 177
   Insn 33(l0): point = 179
   Insn 32(l0): point = 181
   Insn 31(l0): point = 183
   Insn 30(l0): point = 185
   Insn 29(l0): point = 187
   Insn 28(l0): point = 189
   Insn 27(l0): point = 191
   Insn 26(l0): point = 193
   Insn 25(l0): point = 195
   Insn 24(l0): point = 197
   Insn 23(l0): point = 199
   Insn 22(l0): point = 201
   Insn 21(l0): point = 203
   Insn 20(l0): point = 205
   Insn 19(l0): point = 207
   Insn 18(l0): point = 209
   Insn 17(l0): point = 211
   Insn 16(l0): point = 213
   Insn 15(l0): point = 215
   Insn 143(l0): point = 218
   Insn 13(l0): point = 221
   Insn 12(l0): point = 223
   Insn 11(l0): point = 225
   Insn 10(l0): point = 227
   Insn 9(l0): point = 229
   Insn 8(l0): point = 231
   Insn 7(l0): point = 233
   Insn 6(l0): point = 235
   Insn 2(l0): point = 237
 a0(r131): [6..9]
 a1(r132): [6..7]
 a2(r130): [8..13]
 a3(r158): [10..11]
 a4(r157): [14..15]
 a5(r128): [18..21]
 a6(r129): [18..19]
 a7(r127): [20..25]
 a8(r156): [22..23]
 a9(r155): [26..27]
 a10(r126): [33..34]
 a11(r125): [35..36]
 a12(r124): [37..38]
 a13(r121): [37..46]
 a14(r123): [39..40]
 a15(r122): [41..42]
 a16(r154): [43..44]
 a17(r120): [47..48]
 a18(r119): [49..50]
 a19(r115): [49..60]
 a20(r118): [51..52]
 a21(r117): [53..54]
 a22(r116): [55..56]
 a23(r153): [57..58]
 a24(r152): [61..62]
 a25(r113): [65..78]
 a26(r114): [65..66]
 a27(r151): [71..74]
 a28(r150): [73..76]
 a29(r149): [79..80]
 a30(r111): [87..100]
 a31(r112): [87..88]
 a32(r148): [93..96]
 a33(r147): [95..98]
 a34(r146): [101..102]
 a35(r109): [115..118]
 a36(r110): [115..116]
 a37(r108): [117..122]
 a38(r145): [119..120]
 a39(r144): [123..124]
 a40(r106): [127..130]
 a41(r107): [127..128]
 a42(r105): [129..134]
 a43(r143): [131..132]
 a44(r142): [135..136]
 a45(r104): [142..143]
 a46(r103): [144..145]
 a47(r102): [146..147]
 a48(r99): [146..155]
 a49(r101): [148..149]
 a50(r100): [150..151]
 a51(r141): [152..153]
 a52(r98): [156..157]
 a53(r97): [158..159]
 a54(r93): [158..169]
 a55(r96): [160..161]
 a56(r95): [162..163]
 a57(r94): [164..165]
 a58(r140): [166..167]
 a59(r139): [170..171]
 a60(r91): [174..187]
 a61(r92): [174..175]
 a62(r138): [180..183]
 a63(r137): [182..185]
 a64(r136): [188..189]
 a65(r89): [196..209]
 a66(r90): [196..197]
 a67(r135): [202..205]
 a68(r134): [204..207]
 a69(r133): [210..211]
 a70(r88): [228..229]
 a71(r87): [230..231]
Compressing live ranges: from 240 to 112 - 46%
Ranges after the compression:
 a0(r131): [0..3]
 a1(r132): [0..1]
 a2(r130): [2..5]
 a3(r158): [4..5]
 a4(r157): [6..7]
 a5(r128): [8..11]
 a6(r129): [8..9]
 a7(r127): [10..13]
 a8(r156): [12..13]
 a9(r155): [14..15]
 a10(r126): [16..17]
 a11(r125): [18..19]
 a12(r124): [20..21]
 a13(r121): [20..27]
 a14(r123): [22..23]
 a15(r122): [24..25]
 a16(r154): [26..27]
 a17(r120): [28..29]
 a18(r119): [30..31]
 a19(r115): [30..39]
 a20(r118): [32..33]
 a21(r117): [34..35]
 a22(r116): [36..37]
 a23(r153): [38..39]
 a24(r152): [40..41]
 a25(r113): [42..45]
 a26(r114): [42..43]
 a27(r151): [44..45]
 a28(r150): [44..45]
 a29(r149): [46..47]
 a30(r111): [48..51]
 a31(r112): [48..49]
 a32(r148): [50..51]
 a33(r147): [50..51]
 a34(r146): [52..53]
 a35(r109): [54..57]
 a36(r110): [54..55]
 a37(r108): [56..59]
 a38(r145): [58..59]
 a39(r144): [60..61]
 a40(r106): [62..65]
 a41(r107): [62..63]
 a42(r105): [64..67]
 a43(r143): [66..67]
 a44(r142): [68..69]
 a45(r104): [70..71]
 a46(r103): [72..73]
 a47(r102): [74..75]
 a48(r99): [74..81]
 a49(r101): [76..77]
 a50(r100): [78..79]
 a51(r141): [80..81]
 a52(r98): [82..83]
 a53(r97): [84..85]
 a54(r93): [84..93]
 a55(r96): [86..87]
 a56(r95): [88..89]
 a57(r94): [90..91]
 a58(r140): [92..93]
 a59(r139): [94..95]
 a60(r91): [96..99]
 a61(r92): [96..97]
 a62(r138): [98..99]
 a63(r137): [98..99]
 a64(r136): [100..101]
 a65(r89): [102..105]
 a66(r90): [102..103]
 a67(r135): [104..105]
 a68(r134): [104..105]
 a69(r133): [106..107]
 a70(r88): [108..109]
 a71(r87): [110..111]
  pref0:a27(r151)<-hr5@500
  pref1:a28(r150)<-hr4@500
  pref2:a32(r148)<-hr5@500
  pref3:a33(r147)<-hr4@500
  pref4:a62(r138)<-hr5@500
  pref5:a63(r137)<-hr4@500
  pref6:a67(r135)<-hr5@500
  pref7:a68(r134)<-hr4@500
  pref8:a26(r114)<-hr0@500
  pref9:a31(r112)<-hr0@500
  pref10:a61(r92)<-hr0@500
  pref11:a66(r90)<-hr0@500
  pref12:a70(r88)<-hr5@500
  pref13:a71(r87)<-hr0@500
  regions=1, blocks=10, points=112
    allocnos=72 (big 0), copies=0, conflicts=0, ranges=72
Disposition:
   71:r87  l0     0   70:r88  l0     0   65:r89  l0     3   66:r90  l0     0
   60:r91  l0     3   61:r92  l0     0   54:r93  l0     1   57:r94  l0     0
   56:r95  l0     0   55:r96  l0     0   53:r97  l0     0   52:r98  l0     0
   48:r99  l0     1   50:r100 l0     0   49:r101 l0     0   47:r102 l0     0
   46:r103 l0     0   45:r104 l0     0   42:r105 l0     1   40:r106 l0     0
   41:r107 l0     1   37:r108 l0     1   35:r109 l0     0   36:r110 l0     1
   30:r111 l0     3   31:r112 l0     0   25:r113 l0     3   26:r114 l0     0
   19:r115 l0     1   22:r116 l0     0   21:r117 l0     0   20:r118 l0     0
   18:r119 l0     0   17:r120 l0     0   13:r121 l0     1   15:r122 l0     0
   14:r123 l0     0   12:r124 l0     0   11:r125 l0     0   10:r126 l0     0
    7:r127 l0     1    5:r128 l0     0    6:r129 l0     1    2:r130 l0     1
    0:r131 l0     0    1:r132 l0     1   69:r133 l0     0   68:r134 l0     1
   67:r135 l0     0   64:r136 l0     0   63:r137 l0     1   62:r138 l0     0
   59:r139 l0     0   58:r140 l0     0   51:r141 l0     0   44:r142 l0     0
   43:r143 l0     0   39:r144 l0     0   38:r145 l0     0   34:r146 l0     0
   33:r147 l0     1   32:r148 l0     0   29:r149 l0     0   28:r150 l0     1
   27:r151 l0     0   24:r152 l0     0   23:r153 l0     0   16:r154 l0     0
    9:r155 l0     0    8:r156 l0     0    4:r157 l0     0    3:r158 l0     0
+++Costs: overall -14000, reg -14000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


player_position_random

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,5u} r1={7d} r2={7d} r4={11d,4u} r5={13d,7u} r6={1d,9u} r7={1d,15u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1d,8u} r17={14d,2u} r18={6d} r19={6d} r20={1d,46u} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} 
;;    total ref usage 709{541d,168u,0e} in 116{110 regular + 6 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1297 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":1298 85 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":1298 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (reg:DI 87 [ _1 ])
        (reg:DI 0 ax)) "function.c":1298 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 9 8 10 2 (set (reg:SI 88 [ _2 ])
        (subreg:SI (reg:DI 87 [ _1 ]) 0)) "function.c":1298 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 87 [ _1 ])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 5 di)
        (reg:SI 88 [ _2 ])) "function.c":1298 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":1298 689 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 0 [0])) "function.c":1299 86 {*movsi_internal}
     (nil))
(insn 13 12 71 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 0 [0])) "function.c":1300 86 {*movsi_internal}
     (nil))
;;  succ:       3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;;              5 [always] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 133 134 135 136 137 138 139 140 141
(code_label 71 13 14 3 238 (nil) [1 uses])
(note 14 71 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1304 86 {*movsi_internal}
     (nil))
(insn 16 15 17 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":1304 86 {*movsi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1305 85 {*movdi_internal}
     (nil))
(insn 18 17 19 3 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 133)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1305 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133)
        (nil)))
(insn 19 18 20 3 (set (reg:SI 134)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1305 86 {*movsi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:SI 135)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1305 86 {*movsi_internal}
     (nil))
(insn 21 20 22 3 (set (reg:SI 4 si)
        (reg:SI 134)) "function.c":1305 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 22 21 23 3 (set (reg:SI 5 di)
        (reg:SI 135)) "function.c":1305 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(call_insn 23 22 24 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1305 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 24 23 25 3 (set (reg:SI 90 [ _4 ])
        (reg:SI 0 ax)) "function.c":1305 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 25 24 26 3 (set (mem:SI (plus:DI (reg/f:DI 89 [ _3 ])
                (const_int 24 [0x18])) [3 _3->y_start+0 S4 A64])
        (reg:SI 90 [ _4 ])) "function.c":1305 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
        (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
            (nil))))
(insn 26 25 27 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1307 86 {*movsi_internal}
     (nil))
(insn 27 26 28 3 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":1307 86 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg/f:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1308 85 {*movdi_internal}
     (nil))
(insn 29 28 30 3 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 136)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1308 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136)
        (nil)))
(insn 30 29 31 3 (set (reg:SI 137)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1308 86 {*movsi_internal}
     (nil))
(insn 31 30 32 3 (set (reg:SI 138)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1308 86 {*movsi_internal}
     (nil))
(insn 32 31 33 3 (set (reg:SI 4 si)
        (reg:SI 137)) "function.c":1308 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 137)
        (nil)))
(insn 33 32 34 3 (set (reg:SI 5 di)
        (reg:SI 138)) "function.c":1308 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 138)
        (nil)))
(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1308 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 35 34 36 3 (set (reg:SI 92 [ _6 ])
        (reg:SI 0 ax)) "function.c":1308 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 36 35 37 3 (set (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 20 [0x14])) [3 _5->x_start+0 S4 A32])
        (reg:SI 92 [ _6 ])) "function.c":1308 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
            (nil))))
(insn 37 36 38 3 (set (reg/f:DI 139)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 38 37 39 3 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 139)
                (const_int 16 [0x10])) [9 serwer_56(D)->mapa+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 139)
        (nil)))
(insn 39 38 40 3 (set (reg/f:DI 140)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 40 39 41 3 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (plus:DI (reg/f:DI 140)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140)
        (nil)))
(insn 41 40 42 3 (set (reg:SI 95 [ _9 ])
        (mem:SI (plus:DI (reg/f:DI 94 [ _8 ])
                (const_int 24 [0x18])) [3 _8->y_start+0 S4 A64])) "function.c":1310 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94 [ _8 ])
        (nil)))
(insn 42 41 43 3 (set (reg:DI 96 [ _10 ])
        (sign_extend:DI (reg:SI 95 [ _9 ]))) "function.c":1310 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 95 [ _9 ])
        (nil)))
(insn 43 42 44 3 (parallel [
            (set (reg:DI 97 [ _11 ])
                (ashift:DI (reg:DI 96 [ _10 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1310 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 96 [ _10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 44 43 45 3 (parallel [
            (set (reg/f:DI 98 [ _12 ])
                (plus:DI (reg/f:DI 93 [ _7 ])
                    (reg:DI 97 [ _11 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1310 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 97 [ _11 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 45 44 46 3 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (reg/f:DI 98 [ _12 ]) [10 *_12+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
        (nil)))
(insn 46 45 47 3 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (nil))
(insn 47 46 48 3 (set (reg/f:DI 100 [ _14 ])
        (mem/f:DI (plus:DI (reg/f:DI 141)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1310 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))
(insn 48 47 49 3 (set (reg:SI 101 [ _15 ])
        (mem:SI (plus:DI (reg/f:DI 100 [ _14 ])
                (const_int 20 [0x14])) [3 _14->x_start+0 S4 A32])) "function.c":1310 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _14 ])
        (nil)))
(insn 49 48 50 3 (set (reg:DI 102 [ _16 ])
        (sign_extend:DI (reg:SI 101 [ _15 ]))) "function.c":1310 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 101 [ _15 ])
        (nil)))
(insn 50 49 51 3 (parallel [
            (set (reg/f:DI 103 [ _17 ])
                (plus:DI (reg/f:DI 99 [ _13 ])
                    (reg:DI 102 [ _16 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1310 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
        (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 51 50 52 3 (set (reg:QI 104 [ _18 ])
        (mem:QI (reg/f:DI 103 [ _17 ]) [0 *_17+0 S1 A8])) "function.c":1310 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
        (nil)))
(insn 52 51 53 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 104 [ _18 ])
            (const_int 46 [0x2e]))) "function.c":1310 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 104 [ _18 ])
        (nil)))
(jump_insn 53 52 54 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 69)
            (pc))) "function.c":1310 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 69)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 105 106 107 108 109 110 142 143 144 145
(note 54 53 55 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 56 4 (set (reg/f:DI 142)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (nil))
(insn 56 55 57 4 (set (reg/f:DI 105 [ _19 ])
        (mem/f:DI (plus:DI (reg/f:DI 142)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142)
        (nil)))
(insn 57 56 58 4 (set (reg/f:DI 143)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (plus:DI (reg/f:DI 143)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1312 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143)
        (nil)))
(insn 59 58 60 4 (set (reg:SI 107 [ _21 ])
        (mem:SI (plus:DI (reg/f:DI 105 [ _19 ])
                (const_int 20 [0x14])) [3 _19->x_start+0 S4 A32])) "function.c":1312 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _19 ])
        (nil)))
(insn 60 59 61 4 (set (mem:SI (plus:DI (reg/f:DI 106 [ _20 ])
                (const_int 12 [0xc])) [3 _20->x_current+0 S4 A32])
        (reg:SI 107 [ _21 ])) "function.c":1312 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 107 [ _21 ])
        (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
            (nil))))
(insn 61 60 62 4 (set (reg/f:DI 144)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (nil))
(insn 62 61 63 4 (set (reg/f:DI 108 [ _22 ])
        (mem/f:DI (plus:DI (reg/f:DI 144)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 144)
        (nil)))
(insn 63 62 64 4 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (nil))
(insn 64 63 65 4 (set (reg/f:DI 109 [ _23 ])
        (mem/f:DI (plus:DI (reg/f:DI 145)
                (const_int 32 [0x20])) [14 serwer_56(D)->player1+0 S8 A64])) "function.c":1313 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145)
        (nil)))
(insn 65 64 66 4 (set (reg:SI 110 [ _24 ])
        (mem:SI (plus:DI (reg/f:DI 108 [ _22 ])
                (const_int 24 [0x18])) [3 _22->y_start+0 S4 A64])) "function.c":1313 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ _22 ])
        (nil)))
(insn 66 65 141 4 (set (mem:SI (plus:DI (reg/f:DI 109 [ _23 ])
                (const_int 16 [0x10])) [3 _23->y_current+0 S4 A64])
        (reg:SI 110 [ _24 ])) "function.c":1313 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 110 [ _24 ])
        (expr_list:REG_DEAD (reg/f:DI 109 [ _23 ])
            (nil))))
(jump_insn 141 66 142 4 (set (pc)
        (label_ref 74)) "function.c":1314 683 {jump}
     (nil)
 -> 74)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 142 141 69)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 69 142 70 5 236 (nil) [1 uses])
(note 70 69 143 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(jump_insn 143 70 144 5 (set (pc)
        (label_ref 71)) "function.c":1304 683 {jump}
     (nil)
 -> 71)
;;  succ:       3 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 144 143 74)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4 [always] 
;;              8 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 146 147 148 149 150 151 152 153 154
(code_label 74 144 75 6 237 (nil) [2 uses])
(note 75 74 76 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1320 86 {*movsi_internal}
     (nil))
(insn 77 76 78 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 19 [0x13])) "function.c":1320 86 {*movsi_internal}
     (nil))
(insn 78 77 79 6 (set (reg/f:DI 146)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1321 85 {*movdi_internal}
     (nil))
(insn 79 78 80 6 (set (reg/f:DI 111 [ _25 ])
        (mem/f:DI (plus:DI (reg/f:DI 146)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1321 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146)
        (nil)))
(insn 80 79 81 6 (set (reg:SI 147)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1321 86 {*movsi_internal}
     (nil))
(insn 81 80 82 6 (set (reg:SI 148)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1321 86 {*movsi_internal}
     (nil))
(insn 82 81 83 6 (set (reg:SI 4 si)
        (reg:SI 147)) "function.c":1321 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
(insn 83 82 84 6 (set (reg:SI 5 di)
        (reg:SI 148)) "function.c":1321 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 148)
        (nil)))
(call_insn 84 83 85 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1321 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 85 84 86 6 (set (reg:SI 112 [ _26 ])
        (reg:SI 0 ax)) "function.c":1321 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 86 85 87 6 (set (mem:SI (plus:DI (reg/f:DI 111 [ _25 ])
                (const_int 24 [0x18])) [3 _25->y_start+0 S4 A64])
        (reg:SI 112 [ _26 ])) "function.c":1321 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 112 [ _26 ])
        (expr_list:REG_DEAD (reg/f:DI 111 [ _25 ])
            (nil))))
(insn 87 86 88 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])
        (const_int 1 [0x1])) "function.c":1323 86 {*movsi_internal}
     (nil))
(insn 88 87 89 6 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])
        (const_int 29 [0x1d])) "function.c":1323 86 {*movsi_internal}
     (nil))
(insn 89 88 90 6 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1324 85 {*movdi_internal}
     (nil))
(insn 90 89 91 6 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 149)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1324 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149)
        (nil)))
(insn 91 90 92 6 (set (reg:SI 150)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [3 upp+0 S4 A32])) "function.c":1324 86 {*movsi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:SI 151)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -4 [0xfffffffffffffffc])) [3 low+0 S4 A32])) "function.c":1324 86 {*movsi_internal}
     (nil))
(insn 93 92 94 6 (set (reg:SI 4 si)
        (reg:SI 150)) "function.c":1324 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 150)
        (nil)))
(insn 94 93 95 6 (set (reg:SI 5 di)
        (reg:SI 151)) "function.c":1324 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(call_insn 95 94 96 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1324 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 96 95 97 6 (set (reg:SI 114 [ _28 ])
        (reg:SI 0 ax)) "function.c":1324 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 97 96 98 6 (set (mem:SI (plus:DI (reg/f:DI 113 [ _27 ])
                (const_int 20 [0x14])) [3 _27->x_start+0 S4 A32])
        (reg:SI 114 [ _28 ])) "function.c":1324 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 114 [ _28 ])
        (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
            (nil))))
(insn 98 97 99 6 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 115 [ _29 ])
        (mem/f:DI (plus:DI (reg/f:DI 152)
                (const_int 16 [0x10])) [9 serwer_56(D)->mapa+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (nil)))
(insn 100 99 101 6 (set (reg/f:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 101 100 102 6 (set (reg/f:DI 116 [ _30 ])
        (mem/f:DI (plus:DI (reg/f:DI 153)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 153)
        (nil)))
(insn 102 101 103 6 (set (reg:SI 117 [ _31 ])
        (mem:SI (plus:DI (reg/f:DI 116 [ _30 ])
                (const_int 24 [0x18])) [3 _30->y_start+0 S4 A64])) "function.c":1326 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
        (nil)))
(insn 103 102 104 6 (set (reg:DI 118 [ _32 ])
        (sign_extend:DI (reg:SI 117 [ _31 ]))) "function.c":1326 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 117 [ _31 ])
        (nil)))
(insn 104 103 105 6 (parallel [
            (set (reg:DI 119 [ _33 ])
                (ashift:DI (reg:DI 118 [ _32 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1326 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _32 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 105 104 106 6 (parallel [
            (set (reg/f:DI 120 [ _34 ])
                (plus:DI (reg/f:DI 115 [ _29 ])
                    (reg:DI 119 [ _33 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1326 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 119 [ _33 ])
        (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 106 105 107 6 (set (reg/f:DI 121 [ _35 ])
        (mem/f:DI (reg/f:DI 120 [ _34 ]) [10 *_34+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 120 [ _34 ])
        (nil)))
(insn 107 106 108 6 (set (reg/f:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (nil))
(insn 108 107 109 6 (set (reg/f:DI 122 [ _36 ])
        (mem/f:DI (plus:DI (reg/f:DI 154)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1326 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154)
        (nil)))
(insn 109 108 110 6 (set (reg:SI 123 [ _37 ])
        (mem:SI (plus:DI (reg/f:DI 122 [ _36 ])
                (const_int 20 [0x14])) [3 _36->x_start+0 S4 A32])) "function.c":1326 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122 [ _36 ])
        (nil)))
(insn 110 109 111 6 (set (reg:DI 124 [ _38 ])
        (sign_extend:DI (reg:SI 123 [ _37 ]))) "function.c":1326 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 123 [ _37 ])
        (nil)))
(insn 111 110 112 6 (parallel [
            (set (reg/f:DI 125 [ _39 ])
                (plus:DI (reg/f:DI 121 [ _35 ])
                    (reg:DI 124 [ _38 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1326 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 124 [ _38 ])
        (expr_list:REG_DEAD (reg/f:DI 121 [ _35 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 112 111 113 6 (set (reg:QI 126 [ _40 ])
        (mem:QI (reg/f:DI 125 [ _39 ]) [0 *_39+0 S1 A8])) "function.c":1326 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ _39 ])
        (nil)))
(insn 113 112 114 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 126 [ _40 ])
            (const_int 46 [0x2e]))) "function.c":1326 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 126 [ _40 ])
        (nil)))
(jump_insn 114 113 115 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 130)
            (pc))) "function.c":1326 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 130)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 127 128 129 130 131 132 155 156 157 158
(note 115 114 116 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 7 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (nil))
(insn 117 116 118 7 (set (reg/f:DI 127 [ _41 ])
        (mem/f:DI (plus:DI (reg/f:DI 155)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (nil)))
(insn 118 117 119 7 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (nil))
(insn 119 118 120 7 (set (reg/f:DI 128 [ _42 ])
        (mem/f:DI (plus:DI (reg/f:DI 156)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1328 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (nil)))
(insn 120 119 121 7 (set (reg:SI 129 [ _43 ])
        (mem:SI (plus:DI (reg/f:DI 127 [ _41 ])
                (const_int 20 [0x14])) [3 _41->x_start+0 S4 A32])) "function.c":1328 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ _41 ])
        (nil)))
(insn 121 120 122 7 (set (mem:SI (plus:DI (reg/f:DI 128 [ _42 ])
                (const_int 12 [0xc])) [3 _42->x_current+0 S4 A32])
        (reg:SI 129 [ _43 ])) "function.c":1328 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 129 [ _43 ])
        (expr_list:REG_DEAD (reg/f:DI 128 [ _42 ])
            (nil))))
(insn 122 121 123 7 (set (reg/f:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (nil))
(insn 123 122 124 7 (set (reg/f:DI 130 [ _44 ])
        (mem/f:DI (plus:DI (reg/f:DI 157)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157)
        (nil)))
(insn 124 123 125 7 (set (reg/f:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [12 serwer+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (nil))
(insn 125 124 126 7 (set (reg/f:DI 131 [ _45 ])
        (mem/f:DI (plus:DI (reg/f:DI 158)
                (const_int 40 [0x28])) [14 serwer_56(D)->player2+0 S8 A64])) "function.c":1329 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158)
        (nil)))
(insn 126 125 127 7 (set (reg:SI 132 [ _46 ])
        (mem:SI (plus:DI (reg/f:DI 130 [ _44 ])
                (const_int 24 [0x18])) [3 _44->y_start+0 S4 A64])) "function.c":1329 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ _44 ])
        (nil)))
(insn 127 126 146 7 (set (mem:SI (plus:DI (reg/f:DI 131 [ _45 ])
                (const_int 16 [0x10])) [3 _45->y_current+0 S4 A64])
        (reg:SI 132 [ _46 ])) "function.c":1329 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 132 [ _46 ])
        (expr_list:REG_DEAD (reg/f:DI 131 [ _45 ])
            (nil))))
(jump_insn 146 127 147 7 (set (pc)
        (label_ref 145)) "function.c":1330 683 {jump}
     (nil)
 -> 145)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 147 146 130)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 130 147 131 8 239 (nil) [1 uses])
(note 131 130 148 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 148 131 149 8 (set (pc)
        (label_ref 74)) "function.c":1320 683 {jump}
     (nil)
 -> 74)
;;  succ:       6 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 149 148 145)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL)
;;  pred:       7 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 145 149 135 9 242 (nil) [1 uses])
(note 135 145 140 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 140 135 0 9 (const_int 0 [0]) "function.c":1333 718 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function bestia_kolizja (bestia_kolizja, funcdef_no=28, decl_uid=6263, cgraph_uid=28, symbol_order=31)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 13 count 10 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 9 8
;; 2 succs { 3 5 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 9 }
;; 6 succs { 7 9 }
;; 7 succs { 9 }
;; 9 succs { 8 }
;; 8 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a1(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a4(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a7(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a10(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a14(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a15(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a34(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a38(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a39(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a40(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a42(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a44(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a45(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a46(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a47(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a48(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a49(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a50(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a51(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a52(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a53(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a54(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a56(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a57(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a61(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a62(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a63(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a64(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a65(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a66(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a67(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a68(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a69(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a70(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a71(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a72(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a73(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a74(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a75(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a76(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a77(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a78(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a79(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a80(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a81(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a83(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a84(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a85(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a86(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a87(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a88(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a89(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a90(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a91(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a92(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a93(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a94(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a95(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a96(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a97(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a98(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a99(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a100(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a101(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a102(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a103(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a104(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a105(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a106(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a107(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a108(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a109(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a110(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a111(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a112(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a113(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a114(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a115(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a116(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a117(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a118(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a119(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a120(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a121(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a122(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a123(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a124(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a125(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a126(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a127(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a128(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a129(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 179(l0): point = 1
   Insn 174(l0): point = 4
   Insn 167(l0): point = 6
   Insn 166(l0): point = 8
   Insn 165(l0): point = 10
   Insn 164(l0): point = 12
   Insn 163(l0): point = 14
   Insn 162(l0): point = 16
   Insn 161(l0): point = 18
   Insn 160(l0): point = 20
   Insn 159(l0): point = 22
   Insn 158(l0): point = 24
   Insn 157(l0): point = 26
   Insn 156(l0): point = 28
   Insn 155(l0): point = 30
   Insn 154(l0): point = 32
   Insn 153(l0): point = 34
   Insn 152(l0): point = 36
   Insn 151(l0): point = 38
   Insn 150(l0): point = 40
   Insn 149(l0): point = 42
   Insn 148(l0): point = 44
   Insn 147(l0): point = 46
   Insn 146(l0): point = 48
   Insn 145(l0): point = 50
   Insn 144(l0): point = 52
   Insn 143(l0): point = 54
   Insn 142(l0): point = 56
   Insn 141(l0): point = 58
   Insn 140(l0): point = 60
   Insn 139(l0): point = 62
   Insn 138(l0): point = 64
   Insn 137(l0): point = 66
   Insn 136(l0): point = 68
   Insn 135(l0): point = 70
   Insn 134(l0): point = 72
   Insn 133(l0): point = 74
   Insn 132(l0): point = 76
   Insn 131(l0): point = 78
   Insn 130(l0): point = 80
   Insn 129(l0): point = 82
   Insn 128(l0): point = 84
   Insn 127(l0): point = 86
   Insn 126(l0): point = 88
   Insn 125(l0): point = 90
   Insn 124(l0): point = 92
   Insn 123(l0): point = 94
   Insn 122(l0): point = 96
   Insn 121(l0): point = 98
   Insn 120(l0): point = 100
   Insn 119(l0): point = 102
   Insn 118(l0): point = 104
   Insn 117(l0): point = 106
   Insn 116(l0): point = 108
   Insn 115(l0): point = 110
   Insn 114(l0): point = 112
   Insn 113(l0): point = 114
   Insn 112(l0): point = 116
   Insn 111(l0): point = 118
   Insn 110(l0): point = 120
   Insn 109(l0): point = 122
   Insn 108(l0): point = 124
   Insn 107(l0): point = 126
   Insn 106(l0): point = 128
   Insn 105(l0): point = 130
   Insn 104(l0): point = 132
   Insn 102(l0): point = 135
   Insn 101(l0): point = 137
   Insn 100(l0): point = 139
   Insn 99(l0): point = 141
   Insn 98(l0): point = 143
   Insn 97(l0): point = 145
   Insn 96(l0): point = 147
   Insn 94(l0): point = 150
   Insn 93(l0): point = 152
   Insn 92(l0): point = 154
   Insn 91(l0): point = 156
   Insn 90(l0): point = 158
   Insn 89(l0): point = 160
   Insn 88(l0): point = 162
   Insn 85(l0): point = 165
   Insn 84(l0): point = 167
   Insn 83(l0): point = 169
   Insn 82(l0): point = 171
   Insn 81(l0): point = 173
   Insn 80(l0): point = 175
   Insn 79(l0): point = 177
   Insn 78(l0): point = 179
   Insn 77(l0): point = 181
   Insn 76(l0): point = 183
   Insn 75(l0): point = 185
   Insn 74(l0): point = 187
   Insn 73(l0): point = 189
   Insn 72(l0): point = 191
   Insn 71(l0): point = 193
   Insn 70(l0): point = 195
   Insn 69(l0): point = 197
   Insn 68(l0): point = 199
   Insn 67(l0): point = 201
   Insn 66(l0): point = 203
   Insn 65(l0): point = 205
   Insn 64(l0): point = 207
   Insn 63(l0): point = 209
   Insn 62(l0): point = 211
   Insn 61(l0): point = 213
   Insn 60(l0): point = 215
   Insn 59(l0): point = 217
   Insn 58(l0): point = 219
   Insn 57(l0): point = 221
   Insn 56(l0): point = 223
   Insn 55(l0): point = 225
   Insn 54(l0): point = 227
   Insn 53(l0): point = 229
   Insn 52(l0): point = 231
   Insn 51(l0): point = 233
   Insn 50(l0): point = 235
   Insn 49(l0): point = 237
   Insn 48(l0): point = 239
   Insn 47(l0): point = 241
   Insn 46(l0): point = 243
   Insn 45(l0): point = 245
   Insn 44(l0): point = 247
   Insn 43(l0): point = 249
   Insn 42(l0): point = 251
   Insn 41(l0): point = 253
   Insn 40(l0): point = 255
   Insn 39(l0): point = 257
   Insn 38(l0): point = 259
   Insn 37(l0): point = 261
   Insn 36(l0): point = 263
   Insn 35(l0): point = 265
   Insn 34(l0): point = 267
   Insn 33(l0): point = 269
   Insn 32(l0): point = 271
   Insn 31(l0): point = 273
   Insn 30(l0): point = 275
   Insn 29(l0): point = 277
   Insn 28(l0): point = 279
   Insn 27(l0): point = 281
   Insn 26(l0): point = 283
   Insn 25(l0): point = 285
   Insn 24(l0): point = 287
   Insn 23(l0): point = 289
   Insn 22(l0): point = 291
   Insn 20(l0): point = 294
   Insn 19(l0): point = 296
   Insn 18(l0): point = 298
   Insn 17(l0): point = 300
   Insn 16(l0): point = 302
   Insn 15(l0): point = 304
   Insn 14(l0): point = 306
   Insn 12(l0): point = 309
   Insn 11(l0): point = 311
   Insn 10(l0): point = 313
   Insn 9(l0): point = 315
   Insn 8(l0): point = 317
   Insn 7(l0): point = 319
   Insn 6(l0): point = 321
   Insn 2(l0): point = 323
 a0(r158): [7..8]
 a1(r157): [9..10]
 a2(r155): [9..16]
 a3(r156): [11..12]
 a4(r216): [13..14]
 a5(r154): [17..18]
 a6(r153): [19..20]
 a7(r150): [19..28]
 a8(r152): [21..22]
 a9(r151): [23..24]
 a10(r215): [25..26]
 a11(r214): [29..30]
 a12(r213): [33..34]
 a13(r149): [33..36]
 a14(r148): [37..38]
 a15(r212): [39..40]
 a16(r146): [43..46]
 a17(r147): [43..44]
 a18(r145): [45..50]
 a19(r211): [47..48]
 a20(r210): [51..52]
 a21(r143): [55..58]
 a22(r144): [55..56]
 a23(r142): [57..62]
 a24(r209): [59..60]
 a25(r208): [63..64]
 a26(r141): [67..68]
 a27(r207): [69..70]
 a28(r204): [73..78]
 a29(r206): [73..74]
 a30(r140): [73..80]
 a31(r205): [75..76]
 a32(r139): [77..82]
 a33(r138): [81..86]
 a34(r203): [83..84]
 a35(r202): [87..88]
 a36(r200): [91..94]
 a37(r201): [91..92]
 a38(r137): [91..96]
 a39(r136): [93..98]
 a40(r135): [97..102]
 a41(r199): [99..100]
 a42(r198): [103..104]
 a43(r195): [107..112]
 a44(r197): [107..108]
 a45(r134): [107..114]
 a46(r196): [109..110]
 a47(r133): [111..116]
 a48(r132): [115..120]
 a49(r194): [117..118]
 a50(r193): [121..122]
 a51(r129): [125..130]
 a52(r131): [125..126]
 a53(r130): [127..128]
 a54(r192): [131..132]
 a55(r128): [138..139]
 a56(r126): [138..145]
 a57(r127): [140..141]
 a58(r191): [142..143]
 a59(r190): [146..147]
 a60(r125): [153..154]
 a61(r123): [153..160]
 a62(r124): [155..156]
 a63(r189): [157..158]
 a64(r188): [161..162]
 a65(r122): [166..167]
 a66(r121): [168..169]
 a67(r119): [168..175]
 a68(r120): [170..171]
 a69(r187): [172..173]
 a70(r118): [176..177]
 a71(r117): [178..179]
 a72(r114): [178..187]
 a73(r116): [180..181]
 a74(r115): [182..183]
 a75(r186): [184..185]
 a76(r185): [188..189]
 a77(r184): [192..193]
 a78(r113): [192..195]
 a79(r112): [196..197]
 a80(r183): [198..199]
 a81(r110): [202..205]
 a82(r111): [202..203]
 a83(r109): [204..209]
 a84(r182): [206..207]
 a85(r181): [210..211]
 a86(r107): [214..217]
 a87(r108): [214..215]
 a88(r106): [216..221]
 a89(r180): [218..219]
 a90(r179): [222..223]
 a91(r105): [226..227]
 a92(r178): [228..229]
 a93(r175): [232..237]
 a94(r177): [232..233]
 a95(r104): [232..239]
 a96(r176): [234..235]
 a97(r103): [236..241]
 a98(r102): [240..245]
 a99(r174): [242..243]
 a100(r173): [246..247]
 a101(r171): [250..253]
 a102(r172): [250..251]
 a103(r101): [250..255]
 a104(r100): [252..257]
 a105(r99): [256..261]
 a106(r170): [258..259]
 a107(r169): [262..263]
 a108(r166): [266..271]
 a109(r168): [266..267]
 a110(r98): [266..273]
 a111(r167): [268..269]
 a112(r97): [270..275]
 a113(r96): [274..279]
 a114(r165): [276..277]
 a115(r164): [280..281]
 a116(r93): [284..289]
 a117(r95): [284..285]
 a118(r94): [286..287]
 a119(r163): [290..291]
 a120(r92): [297..298]
 a121(r90): [297..304]
 a122(r91): [299..300]
 a123(r162): [301..302]
 a124(r161): [305..306]
 a125(r89): [312..313]
 a126(r87): [312..319]
 a127(r88): [314..315]
 a128(r160): [316..317]
 a129(r159): [320..321]
Compressing live ranges: from 326 to 204 - 62%
Ranges after the compression:
 a0(r158): [0..1]
 a1(r157): [2..3]
 a2(r155): [2..7]
 a3(r156): [4..5]
 a4(r216): [6..7]
 a5(r154): [8..9]
 a6(r153): [10..11]
 a7(r150): [10..17]
 a8(r152): [12..13]
 a9(r151): [14..15]
 a10(r215): [16..17]
 a11(r214): [18..19]
 a12(r213): [20..21]
 a13(r149): [20..21]
 a14(r148): [22..23]
 a15(r212): [24..25]
 a16(r146): [26..29]
 a17(r147): [26..27]
 a18(r145): [28..31]
 a19(r211): [30..31]
 a20(r210): [32..33]
 a21(r143): [34..37]
 a22(r144): [34..35]
 a23(r142): [36..39]
 a24(r209): [38..39]
 a25(r208): [40..41]
 a26(r141): [42..43]
 a27(r207): [44..45]
 a28(r204): [46..51]
 a29(r206): [46..47]
 a30(r140): [46..51]
 a31(r205): [48..49]
 a32(r139): [50..53]
 a33(r138): [52..55]
 a34(r203): [54..55]
 a35(r202): [56..57]
 a36(r200): [58..61]
 a37(r201): [58..59]
 a38(r137): [58..61]
 a39(r136): [60..63]
 a40(r135): [62..65]
 a41(r199): [64..65]
 a42(r198): [66..67]
 a43(r195): [68..73]
 a44(r197): [68..69]
 a45(r134): [68..73]
 a46(r196): [70..71]
 a47(r133): [72..75]
 a48(r132): [74..77]
 a49(r194): [76..77]
 a50(r193): [78..79]
 a51(r129): [80..83]
 a52(r131): [80..81]
 a53(r130): [82..83]
 a54(r192): [84..85]
 a55(r128): [86..87]
 a56(r126): [86..91]
 a57(r127): [88..89]
 a58(r191): [90..91]
 a59(r190): [92..93]
 a60(r125): [94..95]
 a61(r123): [94..99]
 a62(r124): [96..97]
 a63(r189): [98..99]
 a64(r188): [100..101]
 a65(r122): [102..103]
 a66(r121): [104..105]
 a67(r119): [104..109]
 a68(r120): [106..107]
 a69(r187): [108..109]
 a70(r118): [110..111]
 a71(r117): [112..113]
 a72(r114): [112..119]
 a73(r116): [114..115]
 a74(r115): [116..117]
 a75(r186): [118..119]
 a76(r185): [120..121]
 a77(r184): [122..123]
 a78(r113): [122..123]
 a79(r112): [124..125]
 a80(r183): [126..127]
 a81(r110): [128..131]
 a82(r111): [128..129]
 a83(r109): [130..133]
 a84(r182): [132..133]
 a85(r181): [134..135]
 a86(r107): [136..139]
 a87(r108): [136..137]
 a88(r106): [138..141]
 a89(r180): [140..141]
 a90(r179): [142..143]
 a91(r105): [144..145]
 a92(r178): [146..147]
 a93(r175): [148..153]
 a94(r177): [148..149]
 a95(r104): [148..153]
 a96(r176): [150..151]
 a97(r103): [152..155]
 a98(r102): [154..157]
 a99(r174): [156..157]
 a100(r173): [158..159]
 a101(r171): [160..163]
 a102(r172): [160..161]
 a103(r101): [160..163]
 a104(r100): [162..165]
 a105(r99): [164..167]
 a106(r170): [166..167]
 a107(r169): [168..169]
 a108(r166): [170..175]
 a109(r168): [170..171]
 a110(r98): [170..175]
 a111(r167): [172..173]
 a112(r97): [174..177]
 a113(r96): [176..179]
 a114(r165): [178..179]
 a115(r164): [180..181]
 a116(r93): [182..185]
 a117(r95): [182..183]
 a118(r94): [184..185]
 a119(r163): [186..187]
 a120(r92): [188..189]
 a121(r90): [188..193]
 a122(r91): [190..191]
 a123(r162): [192..193]
 a124(r161): [194..195]
 a125(r89): [196..197]
 a126(r87): [196..201]
 a127(r88): [198..199]
 a128(r160): [200..201]
 a129(r159): [202..203]
  regions=1, blocks=10, points=204
    allocnos=130 (big 0), copies=0, conflicts=0, ranges=130
Disposition:
  126:r87  l0     1  127:r88  l0     0  125:r89  l0     0  121:r90  l0     1
  122:r91  l0     0  120:r92  l0     0  116:r93  l0     0  118:r94  l0     1
  117:r95  l0     1  113:r96  l0     0  112:r97  l0     2  110:r98  l0     1
  105:r99  l0     0  104:r100 l0     1  103:r101 l0     2   98:r102 l0     0
   97:r103 l0     2   95:r104 l0     1   91:r105 l0     0   88:r106 l0     1
   86:r107 l0     0   87:r108 l0     1   83:r109 l0     1   81:r110 l0     0
   82:r111 l0     1   79:r112 l0     0   78:r113 l0     1   72:r114 l0     1
   74:r115 l0     0   73:r116 l0     0   71:r117 l0     0   70:r118 l0     0
   67:r119 l0     1   68:r120 l0     0   66:r121 l0     0   65:r122 l0     0
   61:r123 l0     1   62:r124 l0     0   60:r125 l0     0   56:r126 l0     1
   57:r127 l0     0   55:r128 l0     0   51:r129 l0     0   53:r130 l0     1
   52:r131 l0     1   48:r132 l0     0   47:r133 l0     2   45:r134 l0     1
   40:r135 l0     0   39:r136 l0     1   38:r137 l0     2   33:r138 l0     0
   32:r139 l0     2   30:r140 l0     1   26:r141 l0     0   23:r142 l0     1
   21:r143 l0     0   22:r144 l0     1   18:r145 l0     1   16:r146 l0     0
   17:r147 l0     1   14:r148 l0     0   13:r149 l0     1    7:r150 l0     1
    9:r151 l0     0    8:r152 l0     0    6:r153 l0     0    5:r154 l0     0
    2:r155 l0     1    3:r156 l0     0    1:r157 l0     0    0:r158 l0     0
  129:r159 l0     0  128:r160 l0     0  124:r161 l0     0  123:r162 l0     0
  119:r163 l0     0  115:r164 l0     0  114:r165 l0     1  108:r166 l0     0
  111:r167 l0     2  109:r168 l0     2  107:r169 l0     0  106:r170 l0     1
  101:r171 l0     0  102:r172 l0     1  100:r173 l0     0   99:r174 l0     1
   93:r175 l0     0   96:r176 l0     2   94:r177 l0     2   92:r178 l0     0
   90:r179 l0     0   89:r180 l0     0   85:r181 l0     0   84:r182 l0     0
   80:r183 l0     0   77:r184 l0     0   76:r185 l0     0   75:r186 l0     0
   69:r187 l0     0   64:r188 l0     0   63:r189 l0     0   59:r190 l0     0
   58:r191 l0     0   54:r192 l0     0   50:r193 l0     0   49:r194 l0     1
   43:r195 l0     0   46:r196 l0     2   44:r197 l0     2   42:r198 l0     0
   41:r199 l0     1   36:r200 l0     0   37:r201 l0     1   35:r202 l0     0
   34:r203 l0     1   28:r204 l0     0   31:r205 l0     2   29:r206 l0     2
   27:r207 l0     0   25:r208 l0     0   24:r209 l0     0   20:r210 l0     0
   19:r211 l0     0   15:r212 l0     0   12:r213 l0     0   11:r214 l0     0
   10:r215 l0     0    4:r216 l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


bestia_kolizja

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,9u} r7={1d,9u} r16={1d,8u} r17={18d,4u} r20={1d,58u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,2u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,2u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} 
;;    total ref usage 388{167d,221u,0e} in 159{159 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 159 160
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1337 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 159)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 87 [ _1 ])
        (mem:SI (plus:DI (reg/f:DI 159)
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1338 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 159)
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 88 [ _2 ])
        (mem/f:DI (plus:DI (reg/f:DI 160)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (nil)))
(insn 10 9 11 2 (set (reg:SI 89 [ _3 ])
        (mem:SI (plus:DI (reg/f:DI 88 [ _2 ])
                (const_int 12 [0xc])) [3 _2->x_current+0 S4 A32])) "function.c":1338 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _2 ])
        (nil)))
(insn 11 10 12 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ _1 ])
            (reg:SI 89 [ _3 ]))) "function.c":1338 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 89 [ _3 ])
        (expr_list:REG_DEAD (reg:SI 87 [ _1 ])
            (nil))))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "function.c":1338 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 86)
;;  succ:       3 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 90 91 92 161 162
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 161)
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1338 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (nil)))
(insn 16 15 17 3 (set (reg/f:DI 162)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 162)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1338 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162)
        (nil)))
(insn 18 17 19 3 (set (reg:SI 92 [ _6 ])
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1338 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 19 18 20 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 90 [ _4 ])
            (reg:SI 92 [ _6 ]))) "function.c":1338 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
        (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
            (nil))))
(jump_insn 20 19 21 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 86)
            (pc))) "function.c":1338 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 86)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:DI 163)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1340 85 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 163)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1340 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 163)
        (nil)))
(insn 24 23 25 4 (set (reg:SI 94 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 93 [ _7 ])
                (const_int 28 [0x1c])) [3 _7->deaths+0 S4 A32])) "function.c":1340 86 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (parallel [
            (set (reg:SI 95 [ _9 ])
                (plus:SI (reg:SI 94 [ _8 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1340 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 4 (set (mem:SI (plus:DI (reg/f:DI 93 [ _7 ])
                (const_int 28 [0x1c])) [3 _7->deaths+0 S4 A32])
        (reg:SI 95 [ _9 ])) "function.c":1340 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 95 [ _9 ])
        (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
            (nil))))
(insn 27 26 28 4 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/f:DI 96 [ _10 ])
        (mem/f:DI (plus:DI (reg/f:DI 164)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (nil)))
(insn 29 28 30 4 (set (reg/f:DI 165)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 97 [ _11 ])
        (mem:SI (plus:DI (reg/f:DI 165)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1342 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165)
        (nil)))
(insn 31 30 32 4 (set (reg:SI 98 [ _12 ])
        (mem:SI (plus:DI (reg/f:DI 96 [ _10 ])
                (const_int 16 [0x10])) [3 _10->y_current+0 S4 A64])) "function.c":1342 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _10 ])
        (nil)))
(insn 32 31 33 4 (set (reg/f:DI 166)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1342 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 167)
        (sign_extend:DI (reg:SI 97 [ _11 ]))) "function.c":1342 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
        (nil)))
(insn 34 33 35 4 (parallel [
            (set (reg:DI 168)
                (plus:DI (reg:DI 167)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1342 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 167)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 35 34 36 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 168)
                    (const_int 8 [0x8]))
                (reg/f:DI 166)) [3 serwer_76(D)->skarb.dropped_coin S4 A64])
        (reg:SI 98 [ _12 ])) "function.c":1342 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 168)
        (expr_list:REG_DEAD (reg/f:DI 166)
            (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
                (nil)))))
(insn 36 35 37 4 (set (reg/f:DI 169)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg/f:DI 99 [ _13 ])
        (mem/f:DI (plus:DI (reg/f:DI 169)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169)
        (nil)))
(insn 38 37 39 4 (set (reg/f:DI 170)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:SI 100 [ _14 ])
        (mem:SI (plus:DI (reg/f:DI 170)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1343 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 170)
        (nil)))
(insn 40 39 41 4 (set (reg:SI 101 [ _15 ])
        (mem:SI (plus:DI (reg/f:DI 99 [ _13 ])
                (const_int 12 [0xc])) [3 _13->x_current+0 S4 A32])) "function.c":1343 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 99 [ _13 ])
        (nil)))
(insn 41 40 42 4 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1343 85 {*movdi_internal}
     (nil))
(insn 42 41 43 4 (set (reg:DI 172)
        (sign_extend:DI (reg:SI 100 [ _14 ]))) "function.c":1343 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (nil)))
(insn 43 42 44 4 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 172)
                        (const_int 8 [0x8]))
                    (reg/f:DI 171))
                (const_int 24068 [0x5e04])) [3 serwer_76(D)->skarb.dropped_coin S4 A32])
        (reg:SI 101 [ _15 ])) "function.c":1343 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 172)
        (expr_list:REG_DEAD (reg/f:DI 171)
            (expr_list:REG_DEAD (reg:SI 101 [ _15 ])
                (nil)))))
(insn 44 43 45 4 (set (reg/f:DI 173)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg/f:DI 102 [ _16 ])
        (mem/f:DI (plus:DI (reg/f:DI 173)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173)
        (nil)))
(insn 46 45 47 4 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (nil))
(insn 47 46 48 4 (set (reg:SI 103 [ _17 ])
        (mem:SI (plus:DI (reg/f:DI 174)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1345 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (nil)))
(insn 48 47 49 4 (set (reg:SI 104 [ _18 ])
        (mem:SI (plus:DI (reg/f:DI 102 [ _16 ])
                (const_int 32 [0x20])) [3 _16->coins_carried+0 S4 A64])) "function.c":1345 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102 [ _16 ])
        (nil)))
(insn 49 48 50 4 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1345 85 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 176)
        (sign_extend:DI (reg:SI 103 [ _17 ]))) "function.c":1345 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 103 [ _17 ])
        (nil)))
(insn 51 50 52 4 (parallel [
            (set (reg:DI 177)
                (plus:DI (reg:DI 176)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1345 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 176)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 52 51 53 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 177)
                    (const_int 4 [0x4]))
                (reg/f:DI 175)) [3 serwer_76(D)->skarb.value_all_dropped_coin S4 A32])
        (reg:SI 104 [ _18 ])) "function.c":1345 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 177)
        (expr_list:REG_DEAD (reg/f:DI 175)
            (expr_list:REG_DEAD (reg:SI 104 [ _18 ])
                (nil)))))
(insn 53 52 54 4 (set (reg/f:DI 178)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1347 85 {*movdi_internal}
     (nil))
(insn 54 53 55 4 (set (reg/f:DI 105 [ _19 ])
        (mem/f:DI (plus:DI (reg/f:DI 178)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1347 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 178)
        (nil)))
(insn 55 54 56 4 (set (mem:SI (plus:DI (reg/f:DI 105 [ _19 ])
                (const_int 32 [0x20])) [3 _19->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1347 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 105 [ _19 ])
        (nil)))
(insn 56 55 57 4 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (nil))
(insn 57 56 58 4 (set (reg/f:DI 106 [ _20 ])
        (mem/f:DI (plus:DI (reg/f:DI 179)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 58 57 59 4 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (nil))
(insn 59 58 60 4 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 180)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1349 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180)
        (nil)))
(insn 60 59 61 4 (set (reg:SI 108 [ _22 ])
        (mem:SI (plus:DI (reg/f:DI 106 [ _20 ])
                (const_int 20 [0x14])) [3 _20->x_start+0 S4 A32])) "function.c":1349 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 61 60 62 4 (set (mem:SI (plus:DI (reg/f:DI 107 [ _21 ])
                (const_int 12 [0xc])) [3 _21->x_current+0 S4 A32])
        (reg:SI 108 [ _22 ])) "function.c":1349 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108 [ _22 ])
        (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
            (nil))))
(insn 62 61 63 4 (set (reg/f:DI 181)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (nil))
(insn 63 62 64 4 (set (reg/f:DI 109 [ _23 ])
        (mem/f:DI (plus:DI (reg/f:DI 181)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 181)
        (nil)))
(insn 64 63 65 4 (set (reg/f:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (plus:DI (reg/f:DI 182)
                (const_int 32 [0x20])) [14 serwer_76(D)->player1+0 S8 A64])) "function.c":1350 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 182)
        (nil)))
(insn 66 65 67 4 (set (reg:SI 111 [ _25 ])
        (mem:SI (plus:DI (reg/f:DI 109 [ _23 ])
                (const_int 24 [0x18])) [3 _23->y_start+0 S4 A64])) "function.c":1350 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ _23 ])
        (nil)))
(insn 67 66 68 4 (set (mem:SI (plus:DI (reg/f:DI 110 [ _24 ])
                (const_int 16 [0x10])) [3 _24->y_current+0 S4 A64])
        (reg:SI 111 [ _25 ])) "function.c":1350 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
        (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
            (nil))))
(insn 68 67 69 4 (set (reg/f:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1352 85 {*movdi_internal}
     (nil))
(insn 69 68 70 4 (set (reg:SI 112 [ _26 ])
        (mem:SI (plus:DI (reg/f:DI 183)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1352 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 183)
        (nil)))
(insn 70 69 71 4 (parallel [
            (set (reg:SI 113 [ _27 ])
                (plus:SI (reg:SI 112 [ _26 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1352 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 112 [ _26 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 71 70 72 4 (set (reg/f:DI 184)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1352 85 {*movdi_internal}
     (nil))
(insn 72 71 73 4 (set (mem:SI (plus:DI (reg/f:DI 184)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])
        (reg:SI 113 [ _27 ])) "function.c":1352 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 184)
        (expr_list:REG_DEAD (reg:SI 113 [ _27 ])
            (nil))))
(insn 73 72 74 4 (set (reg/f:DI 185)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 74 73 75 4 (set (reg/f:DI 114 [ _28 ])
        (mem/f:DI (plus:DI (reg/f:DI 185)
                (const_int 16 [0x10])) [9 serwer_76(D)->mapa+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 185)
        (nil)))
(insn 75 74 76 4 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 76 75 77 4 (set (reg:SI 115 [ _29 ])
        (mem:SI (plus:DI (reg/f:DI 186)
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1354 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 186)
        (nil)))
(insn 77 76 78 4 (set (reg:DI 116 [ _30 ])
        (sign_extend:DI (reg:SI 115 [ _29 ]))) "function.c":1354 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 115 [ _29 ])
        (nil)))
(insn 78 77 79 4 (parallel [
            (set (reg:DI 117 [ _31 ])
                (ashift:DI (reg:DI 116 [ _30 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1354 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 116 [ _30 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 79 78 80 4 (parallel [
            (set (reg/f:DI 118 [ _32 ])
                (plus:DI (reg/f:DI 114 [ _28 ])
                    (reg:DI 117 [ _31 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1354 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _31 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 80 79 81 4 (set (reg/f:DI 119 [ _33 ])
        (mem/f:DI (reg/f:DI 118 [ _32 ]) [10 *_32+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ _32 ])
        (nil)))
(insn 81 80 82 4 (set (reg/f:DI 187)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1354 85 {*movdi_internal}
     (nil))
(insn 82 81 83 4 (set (reg:SI 120 [ _34 ])
        (mem:SI (plus:DI (reg/f:DI 187)
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1354 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (nil)))
(insn 83 82 84 4 (set (reg:DI 121 [ _35 ])
        (sign_extend:DI (reg:SI 120 [ _34 ]))) "function.c":1354 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 120 [ _34 ])
        (nil)))
(insn 84 83 85 4 (parallel [
            (set (reg/f:DI 122 [ _36 ])
                (plus:DI (reg/f:DI 119 [ _33 ])
                    (reg:DI 121 [ _35 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1354 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 121 [ _35 ])
        (expr_list:REG_DEAD (reg/f:DI 119 [ _33 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 85 84 86 4 (set (mem:QI (reg/f:DI 122 [ _36 ]) [0 *_36+0 S1 A8])
        (const_int 68 [0x44])) "function.c":1354 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122 [ _36 ])
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       2
;;              3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 123 124 125 188 189
(code_label 86 85 87 5 244 (nil) [2 uses])
(note 87 86 88 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 5 (set (reg/f:DI 188)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 89 88 90 5 (set (reg:SI 123 [ _37 ])
        (mem:SI (plus:DI (reg/f:DI 188)
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1357 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 188)
        (nil)))
(insn 90 89 91 5 (set (reg/f:DI 189)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 91 90 92 5 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (plus:DI (reg/f:DI 189)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 189)
        (nil)))
(insn 92 91 93 5 (set (reg:SI 125 [ _39 ])
        (mem:SI (plus:DI (reg/f:DI 124 [ _38 ])
                (const_int 12 [0xc])) [3 _38->x_current+0 S4 A32])) "function.c":1357 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
        (nil)))
(insn 93 92 94 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 123 [ _37 ])
            (reg:SI 125 [ _39 ]))) "function.c":1357 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 125 [ _39 ])
        (expr_list:REG_DEAD (reg:SI 123 [ _37 ])
            (nil))))
(jump_insn 94 93 95 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 178)
            (pc))) "function.c":1357 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 178)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 126 127 128 190 191
(note 95 94 96 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 6 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 97 96 98 6 (set (reg:SI 126 [ _40 ])
        (mem:SI (plus:DI (reg/f:DI 190)
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1357 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (nil)))
(insn 98 97 99 6 (set (reg/f:DI 191)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 127 [ _41 ])
        (mem/f:DI (plus:DI (reg/f:DI 191)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1357 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 191)
        (nil)))
(insn 100 99 101 6 (set (reg:SI 128 [ _42 ])
        (mem:SI (plus:DI (reg/f:DI 127 [ _41 ])
                (const_int 16 [0x10])) [3 _41->y_current+0 S4 A64])) "function.c":1357 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 127 [ _41 ])
        (nil)))
(insn 101 100 102 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 126 [ _40 ])
            (reg:SI 128 [ _42 ]))) "function.c":1357 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 128 [ _42 ])
        (expr_list:REG_DEAD (reg:SI 126 [ _40 ])
            (nil))))
(jump_insn 102 101 103 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 178)
            (pc))) "function.c":1357 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 178)
;;  succ:       7 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216
(note 103 102 104 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 7 (set (reg/f:DI 192)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1359 85 {*movdi_internal}
     (nil))
(insn 105 104 106 7 (set (reg/f:DI 129 [ _43 ])
        (mem/f:DI (plus:DI (reg/f:DI 192)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1359 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 192)
        (nil)))
(insn 106 105 107 7 (set (reg:SI 130 [ _44 ])
        (mem:SI (plus:DI (reg/f:DI 129 [ _43 ])
                (const_int 28 [0x1c])) [3 _43->deaths+0 S4 A32])) "function.c":1359 86 {*movsi_internal}
     (nil))
(insn 107 106 108 7 (parallel [
            (set (reg:SI 131 [ _45 ])
                (plus:SI (reg:SI 130 [ _44 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1359 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 130 [ _44 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 108 107 109 7 (set (mem:SI (plus:DI (reg/f:DI 129 [ _43 ])
                (const_int 28 [0x1c])) [3 _43->deaths+0 S4 A32])
        (reg:SI 131 [ _45 ])) "function.c":1359 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 131 [ _45 ])
        (expr_list:REG_DEAD (reg/f:DI 129 [ _43 ])
            (nil))))
(insn 109 108 110 7 (set (reg/f:DI 193)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (nil))
(insn 110 109 111 7 (set (reg/f:DI 132 [ _46 ])
        (mem/f:DI (plus:DI (reg/f:DI 193)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 193)
        (nil)))
(insn 111 110 112 7 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (nil))
(insn 112 111 113 7 (set (reg:SI 133 [ _47 ])
        (mem:SI (plus:DI (reg/f:DI 194)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1361 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 194)
        (nil)))
(insn 113 112 114 7 (set (reg:SI 134 [ _48 ])
        (mem:SI (plus:DI (reg/f:DI 132 [ _46 ])
                (const_int 16 [0x10])) [3 _46->y_current+0 S4 A64])) "function.c":1361 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ _46 ])
        (nil)))
(insn 114 113 115 7 (set (reg/f:DI 195)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1361 85 {*movdi_internal}
     (nil))
(insn 115 114 116 7 (set (reg:DI 196)
        (sign_extend:DI (reg:SI 133 [ _47 ]))) "function.c":1361 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 133 [ _47 ])
        (nil)))
(insn 116 115 117 7 (parallel [
            (set (reg:DI 197)
                (plus:DI (reg:DI 196)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1361 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 196)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 117 116 118 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 197)
                    (const_int 8 [0x8]))
                (reg/f:DI 195)) [3 serwer_76(D)->skarb.dropped_coin S4 A64])
        (reg:SI 134 [ _48 ])) "function.c":1361 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_DEAD (reg/f:DI 195)
            (expr_list:REG_DEAD (reg:SI 134 [ _48 ])
                (nil)))))
(insn 118 117 119 7 (set (reg/f:DI 198)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (nil))
(insn 119 118 120 7 (set (reg/f:DI 135 [ _49 ])
        (mem/f:DI (plus:DI (reg/f:DI 198)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 198)
        (nil)))
(insn 120 119 121 7 (set (reg/f:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (nil))
(insn 121 120 122 7 (set (reg:SI 136 [ _50 ])
        (mem:SI (plus:DI (reg/f:DI 199)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1362 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 199)
        (nil)))
(insn 122 121 123 7 (set (reg:SI 137 [ _51 ])
        (mem:SI (plus:DI (reg/f:DI 135 [ _49 ])
                (const_int 12 [0xc])) [3 _49->x_current+0 S4 A32])) "function.c":1362 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135 [ _49 ])
        (nil)))
(insn 123 122 124 7 (set (reg/f:DI 200)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1362 85 {*movdi_internal}
     (nil))
(insn 124 123 125 7 (set (reg:DI 201)
        (sign_extend:DI (reg:SI 136 [ _50 ]))) "function.c":1362 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 136 [ _50 ])
        (nil)))
(insn 125 124 126 7 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 201)
                        (const_int 8 [0x8]))
                    (reg/f:DI 200))
                (const_int 24068 [0x5e04])) [3 serwer_76(D)->skarb.dropped_coin S4 A32])
        (reg:SI 137 [ _51 ])) "function.c":1362 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 201)
        (expr_list:REG_DEAD (reg/f:DI 200)
            (expr_list:REG_DEAD (reg:SI 137 [ _51 ])
                (nil)))))
(insn 126 125 127 7 (set (reg/f:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (nil))
(insn 127 126 128 7 (set (reg/f:DI 138 [ _52 ])
        (mem/f:DI (plus:DI (reg/f:DI 202)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202)
        (nil)))
(insn 128 127 129 7 (set (reg/f:DI 203)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (nil))
(insn 129 128 130 7 (set (reg:SI 139 [ _53 ])
        (mem:SI (plus:DI (reg/f:DI 203)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1364 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 203)
        (nil)))
(insn 130 129 131 7 (set (reg:SI 140 [ _54 ])
        (mem:SI (plus:DI (reg/f:DI 138 [ _52 ])
                (const_int 32 [0x20])) [3 _52->coins_carried+0 S4 A64])) "function.c":1364 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ _52 ])
        (nil)))
(insn 131 130 132 7 (set (reg/f:DI 204)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1364 85 {*movdi_internal}
     (nil))
(insn 132 131 133 7 (set (reg:DI 205)
        (sign_extend:DI (reg:SI 139 [ _53 ]))) "function.c":1364 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 139 [ _53 ])
        (nil)))
(insn 133 132 134 7 (parallel [
            (set (reg:DI 206)
                (plus:DI (reg:DI 205)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1364 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 205)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 134 133 135 7 (set (mem:SI (plus:DI (mult:DI (reg:DI 206)
                    (const_int 4 [0x4]))
                (reg/f:DI 204)) [3 serwer_76(D)->skarb.value_all_dropped_coin S4 A32])
        (reg:SI 140 [ _54 ])) "function.c":1364 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 206)
        (expr_list:REG_DEAD (reg/f:DI 204)
            (expr_list:REG_DEAD (reg:SI 140 [ _54 ])
                (nil)))))
(insn 135 134 136 7 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1366 85 {*movdi_internal}
     (nil))
(insn 136 135 137 7 (set (reg/f:DI 141 [ _55 ])
        (mem/f:DI (plus:DI (reg/f:DI 207)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1366 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 207)
        (nil)))
(insn 137 136 138 7 (set (mem:SI (plus:DI (reg/f:DI 141 [ _55 ])
                (const_int 32 [0x20])) [3 _55->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1366 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141 [ _55 ])
        (nil)))
(insn 138 137 139 7 (set (reg/f:DI 208)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (nil))
(insn 139 138 140 7 (set (reg/f:DI 142 [ _56 ])
        (mem/f:DI (plus:DI (reg/f:DI 208)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 208)
        (nil)))
(insn 140 139 141 7 (set (reg/f:DI 209)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (nil))
(insn 141 140 142 7 (set (reg/f:DI 143 [ _57 ])
        (mem/f:DI (plus:DI (reg/f:DI 209)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1368 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 209)
        (nil)))
(insn 142 141 143 7 (set (reg:SI 144 [ _58 ])
        (mem:SI (plus:DI (reg/f:DI 142 [ _56 ])
                (const_int 20 [0x14])) [3 _56->x_start+0 S4 A32])) "function.c":1368 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _56 ])
        (nil)))
(insn 143 142 144 7 (set (mem:SI (plus:DI (reg/f:DI 143 [ _57 ])
                (const_int 12 [0xc])) [3 _57->x_current+0 S4 A32])
        (reg:SI 144 [ _58 ])) "function.c":1368 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 144 [ _58 ])
        (expr_list:REG_DEAD (reg/f:DI 143 [ _57 ])
            (nil))))
(insn 144 143 145 7 (set (reg/f:DI 210)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (nil))
(insn 145 144 146 7 (set (reg/f:DI 145 [ _59 ])
        (mem/f:DI (plus:DI (reg/f:DI 210)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 210)
        (nil)))
(insn 146 145 147 7 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (nil))
(insn 147 146 148 7 (set (reg/f:DI 146 [ _60 ])
        (mem/f:DI (plus:DI (reg/f:DI 211)
                (const_int 40 [0x28])) [14 serwer_76(D)->player2+0 S8 A64])) "function.c":1369 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 211)
        (nil)))
(insn 148 147 149 7 (set (reg:SI 147 [ _61 ])
        (mem:SI (plus:DI (reg/f:DI 145 [ _59 ])
                (const_int 24 [0x18])) [3 _59->y_start+0 S4 A64])) "function.c":1369 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145 [ _59 ])
        (nil)))
(insn 149 148 150 7 (set (mem:SI (plus:DI (reg/f:DI 146 [ _60 ])
                (const_int 16 [0x10])) [3 _60->y_current+0 S4 A64])
        (reg:SI 147 [ _61 ])) "function.c":1369 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 147 [ _61 ])
        (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
            (nil))))
(insn 150 149 151 7 (set (reg/f:DI 212)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1371 85 {*movdi_internal}
     (nil))
(insn 151 150 152 7 (set (reg:SI 148 [ _62 ])
        (mem:SI (plus:DI (reg/f:DI 212)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1371 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 212)
        (nil)))
(insn 152 151 153 7 (parallel [
            (set (reg:SI 149 [ _63 ])
                (plus:SI (reg:SI 148 [ _62 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1371 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 148 [ _62 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 153 152 154 7 (set (reg/f:DI 213)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1371 85 {*movdi_internal}
     (nil))
(insn 154 153 155 7 (set (mem:SI (plus:DI (reg/f:DI 213)
                (const_int 24060 [0x5dfc])) [3 serwer_76(D)->skarb.count_drop_coin+0 S4 A32])
        (reg:SI 149 [ _63 ])) "function.c":1371 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 213)
        (expr_list:REG_DEAD (reg:SI 149 [ _63 ])
            (nil))))
(insn 155 154 156 7 (set (reg/f:DI 214)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 156 155 157 7 (set (reg/f:DI 150 [ _64 ])
        (mem/f:DI (plus:DI (reg/f:DI 214)
                (const_int 16 [0x10])) [9 serwer_76(D)->mapa+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 214)
        (nil)))
(insn 157 156 158 7 (set (reg/f:DI 215)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 158 157 159 7 (set (reg:SI 151 [ _65 ])
        (mem:SI (plus:DI (reg/f:DI 215)
                (const_int 36068 [0x8ce4])) [3 serwer_76(D)->bestia.y+0 S4 A32])) "function.c":1373 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 215)
        (nil)))
(insn 159 158 160 7 (set (reg:DI 152 [ _66 ])
        (sign_extend:DI (reg:SI 151 [ _65 ]))) "function.c":1373 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 151 [ _65 ])
        (nil)))
(insn 160 159 161 7 (parallel [
            (set (reg:DI 153 [ _67 ])
                (ashift:DI (reg:DI 152 [ _66 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1373 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 152 [ _66 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 161 160 162 7 (parallel [
            (set (reg/f:DI 154 [ _68 ])
                (plus:DI (reg/f:DI 150 [ _64 ])
                    (reg:DI 153 [ _67 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1373 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 153 [ _67 ])
        (expr_list:REG_DEAD (reg/f:DI 150 [ _64 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 162 161 163 7 (set (reg/f:DI 155 [ _69 ])
        (mem/f:DI (reg/f:DI 154 [ _68 ]) [10 *_68+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ _68 ])
        (nil)))
(insn 163 162 164 7 (set (reg/f:DI 216)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1373 85 {*movdi_internal}
     (nil))
(insn 164 163 165 7 (set (reg:SI 156 [ _70 ])
        (mem:SI (plus:DI (reg/f:DI 216)
                (const_int 36064 [0x8ce0])) [3 serwer_76(D)->bestia.x+0 S4 A64])) "function.c":1373 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 216)
        (nil)))
(insn 165 164 166 7 (set (reg:DI 157 [ _71 ])
        (sign_extend:DI (reg:SI 156 [ _70 ]))) "function.c":1373 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 156 [ _70 ])
        (nil)))
(insn 166 165 167 7 (parallel [
            (set (reg/f:DI 158 [ _72 ])
                (plus:DI (reg/f:DI 155 [ _69 ])
                    (reg:DI 157 [ _71 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1373 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 157 [ _71 ])
        (expr_list:REG_DEAD (reg/f:DI 155 [ _69 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 167 166 174 7 (set (mem:QI (reg/f:DI 158 [ _72 ]) [0 *_72+0 S1 A8])
        (const_int 68 [0x44])) "function.c":1373 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158 [ _72 ])
        (nil)))
(insn 174 167 178 7 (const_int 0 [0]) "function.c":1375 718 {nop}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL)
;;  pred:       5
;;              6
;;              7 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 178 174 177 9 247 (nil) [2 uses])
(note 177 178 179 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 179 177 172 9 (const_int 0 [0]) "function.c":1375 718 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 172 179 173 8 243 (nil) [0 uses])
(note 173 172 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function player_kolizja (player_kolizja, funcdef_no=29, decl_uid=6265, cgraph_uid=29, symbol_order=32)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 7 n_edges 8 count 7 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 6 5
;; 2 succs { 3 6 }
;; 3 succs { 4 6 }
;; 4 succs { 6 }
;; 6 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a26(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a30(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a31(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a32(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a34(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a35(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a38(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a39(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a42(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a44(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a45(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a46(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a47(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a48(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a49(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a50(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a51(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a56(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a57(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a58(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:28000 NO_REX_SSE_REGS:28000 SSE_REGS:28000 MMX_REGS:38000 INT_SSE_REGS:38000 ALL_REGS:530000 MEM:18000
  a60(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a61(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a62(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a63(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a64(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a65(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a66(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a67(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a68(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a69(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a70(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a71(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a72(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a73(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a74(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 110(l0): point = 1
   Insn 105(l0): point = 4
   Insn 98(l0): point = 6
   Insn 97(l0): point = 8
   Insn 96(l0): point = 10
   Insn 95(l0): point = 12
   Insn 94(l0): point = 14
   Insn 93(l0): point = 16
   Insn 92(l0): point = 18
   Insn 91(l0): point = 20
   Insn 90(l0): point = 22
   Insn 89(l0): point = 24
   Insn 88(l0): point = 26
   Insn 87(l0): point = 28
   Insn 86(l0): point = 30
   Insn 85(l0): point = 32
   Insn 84(l0): point = 34
   Insn 83(l0): point = 36
   Insn 82(l0): point = 38
   Insn 81(l0): point = 40
   Insn 80(l0): point = 42
   Insn 79(l0): point = 44
   Insn 78(l0): point = 46
   Insn 77(l0): point = 48
   Insn 76(l0): point = 50
   Insn 75(l0): point = 52
   Insn 74(l0): point = 54
   Insn 73(l0): point = 56
   Insn 72(l0): point = 58
   Insn 71(l0): point = 60
   Insn 70(l0): point = 62
   Insn 69(l0): point = 64
   Insn 68(l0): point = 66
   Insn 67(l0): point = 68
   Insn 66(l0): point = 70
   Insn 65(l0): point = 72
   Insn 64(l0): point = 74
   Insn 63(l0): point = 76
   Insn 62(l0): point = 78
   Insn 61(l0): point = 80
   Insn 60(l0): point = 82
   Insn 59(l0): point = 84
   Insn 58(l0): point = 86
   Insn 57(l0): point = 88
   Insn 56(l0): point = 90
   Insn 55(l0): point = 92
   Insn 54(l0): point = 94
   Insn 53(l0): point = 96
   Insn 52(l0): point = 98
   Insn 51(l0): point = 100
   Insn 50(l0): point = 102
   Insn 49(l0): point = 104
   Insn 48(l0): point = 106
   Insn 47(l0): point = 108
   Insn 46(l0): point = 110
   Insn 45(l0): point = 112
   Insn 44(l0): point = 114
   Insn 43(l0): point = 116
   Insn 42(l0): point = 118
   Insn 41(l0): point = 120
   Insn 40(l0): point = 122
   Insn 39(l0): point = 124
   Insn 38(l0): point = 126
   Insn 37(l0): point = 128
   Insn 36(l0): point = 130
   Insn 35(l0): point = 132
   Insn 34(l0): point = 134
   Insn 33(l0): point = 136
   Insn 32(l0): point = 138
   Insn 31(l0): point = 140
   Insn 30(l0): point = 142
   Insn 29(l0): point = 144
   Insn 28(l0): point = 146
   Insn 27(l0): point = 148
   Insn 26(l0): point = 150
   Insn 25(l0): point = 152
   Insn 24(l0): point = 154
   Insn 22(l0): point = 157
   Insn 21(l0): point = 159
   Insn 20(l0): point = 161
   Insn 19(l0): point = 163
   Insn 18(l0): point = 165
   Insn 17(l0): point = 167
   Insn 16(l0): point = 169
   Insn 15(l0): point = 171
   Insn 13(l0): point = 174
   Insn 12(l0): point = 176
   Insn 11(l0): point = 178
   Insn 10(l0): point = 180
   Insn 9(l0): point = 182
   Insn 8(l0): point = 184
   Insn 7(l0): point = 186
   Insn 6(l0): point = 188
   Insn 2(l0): point = 190
 a0(r161): [7..8]
 a1(r128): [7..10]
 a2(r127): [11..12]
 a3(r160): [13..14]
 a4(r125): [17..20]
 a5(r126): [17..18]
 a6(r124): [19..24]
 a7(r159): [21..22]
 a8(r158): [25..26]
 a9(r122): [29..32]
 a10(r123): [29..30]
 a11(r121): [31..36]
 a12(r157): [33..34]
 a13(r156): [37..38]
 a14(r119): [41..44]
 a15(r120): [41..42]
 a16(r118): [43..48]
 a17(r155): [45..46]
 a18(r154): [49..50]
 a19(r116): [53..56]
 a20(r117): [53..54]
 a21(r115): [55..60]
 a22(r153): [57..58]
 a23(r152): [61..62]
 a24(r114): [65..66]
 a25(r151): [67..68]
 a26(r113): [71..72]
 a27(r150): [73..74]
 a28(r147): [77..82]
 a29(r149): [77..78]
 a30(r112): [77..84]
 a31(r148): [79..80]
 a32(r111): [81..86]
 a33(r110): [85..90]
 a34(r108): [85..96]
 a35(r146): [87..88]
 a36(r109): [91..92]
 a37(r145): [93..94]
 a38(r107): [97..98]
 a39(r144): [99..100]
 a40(r142): [103..106]
 a41(r143): [103..104]
 a42(r106): [103..108]
 a43(r105): [105..110]
 a44(r104): [109..114]
 a45(r141): [111..112]
 a46(r140): [115..116]
 a47(r137): [119..124]
 a48(r139): [119..120]
 a49(r103): [119..126]
 a50(r138): [121..122]
 a51(r102): [123..128]
 a52(r101): [127..132]
 a53(r136): [129..130]
 a54(r135): [133..134]
 a55(r98): [137..142]
 a56(r100): [137..138]
 a57(r99): [139..140]
 a58(r134): [143..144]
 a59(r95): [147..152]
 a60(r97): [147..148]
 a61(r96): [149..150]
 a62(r133): [153..154]
 a63(r94): [160..161]
 a64(r92): [160..167]
 a65(r93): [162..163]
 a66(r132): [164..165]
 a67(r91): [168..169]
 a68(r131): [170..171]
 a69(r90): [177..178]
 a70(r88): [177..184]
 a71(r89): [179..180]
 a72(r130): [181..182]
 a73(r87): [185..186]
 a74(r129): [187..188]
Compressing live ranges: from 193 to 118 - 61%
Ranges after the compression:
 a0(r161): [0..1]
 a1(r128): [0..1]
 a2(r127): [2..3]
 a3(r160): [4..5]
 a4(r125): [6..9]
 a5(r126): [6..7]
 a6(r124): [8..11]
 a7(r159): [10..11]
 a8(r158): [12..13]
 a9(r122): [14..17]
 a10(r123): [14..15]
 a11(r121): [16..19]
 a12(r157): [18..19]
 a13(r156): [20..21]
 a14(r119): [22..25]
 a15(r120): [22..23]
 a16(r118): [24..27]
 a17(r155): [26..27]
 a18(r154): [28..29]
 a19(r116): [30..33]
 a20(r117): [30..31]
 a21(r115): [32..35]
 a22(r153): [34..35]
 a23(r152): [36..37]
 a24(r114): [38..39]
 a25(r151): [40..41]
 a26(r113): [42..43]
 a27(r150): [44..45]
 a28(r147): [46..51]
 a29(r149): [46..47]
 a30(r112): [46..51]
 a31(r148): [48..49]
 a32(r111): [50..53]
 a33(r110): [52..55]
 a34(r108): [52..59]
 a35(r146): [54..55]
 a36(r109): [56..57]
 a37(r145): [58..59]
 a38(r107): [60..61]
 a39(r144): [62..63]
 a40(r142): [64..67]
 a41(r143): [64..65]
 a42(r106): [64..67]
 a43(r105): [66..69]
 a44(r104): [68..71]
 a45(r141): [70..71]
 a46(r140): [72..73]
 a47(r137): [74..79]
 a48(r139): [74..75]
 a49(r103): [74..79]
 a50(r138): [76..77]
 a51(r102): [78..81]
 a52(r101): [80..83]
 a53(r136): [82..83]
 a54(r135): [84..85]
 a55(r98): [86..89]
 a56(r100): [86..87]
 a57(r99): [88..89]
 a58(r134): [90..91]
 a59(r95): [92..95]
 a60(r97): [92..93]
 a61(r96): [94..95]
 a62(r133): [96..97]
 a63(r94): [98..99]
 a64(r92): [98..103]
 a65(r93): [100..101]
 a66(r132): [102..103]
 a67(r91): [104..105]
 a68(r131): [106..107]
 a69(r90): [108..109]
 a70(r88): [108..113]
 a71(r89): [110..111]
 a72(r130): [112..113]
 a73(r87): [114..115]
 a74(r129): [116..117]
  regions=1, blocks=7, points=118
    allocnos=75 (big 0), copies=0, conflicts=0, ranges=75
Disposition:
   73:r87  l0     0   70:r88  l0     1   71:r89  l0     0   69:r90  l0     0
   67:r91  l0     0   64:r92  l0     1   65:r93  l0     0   63:r94  l0     0
   59:r95  l0     0   61:r96  l0     1   60:r97  l0     1   55:r98  l0     0
   57:r99  l0     1   56:r100 l0     1   52:r101 l0     0   51:r102 l0     2
   49:r103 l0     1   44:r104 l0     0   43:r105 l0     1   42:r106 l0     2
   38:r107 l0     0   34:r108 l0     4   36:r109 l0     0   33:r110 l0     2
   32:r111 l0     1   30:r112 l0     2   26:r113 l0     0   24:r114 l0     0
   21:r115 l0     1   19:r116 l0     0   20:r117 l0     1   16:r118 l0     1
   14:r119 l0     0   15:r120 l0     1   11:r121 l0     1    9:r122 l0     0
   10:r123 l0     1    6:r124 l0     1    4:r125 l0     0    5:r126 l0     1
    2:r127 l0     0    1:r128 l0     1   74:r129 l0     0   72:r130 l0     0
   68:r131 l0     0   66:r132 l0     0   62:r133 l0     0   58:r134 l0     0
   54:r135 l0     0   53:r136 l0     1   47:r137 l0     0   50:r138 l0     2
   48:r139 l0     2   46:r140 l0     0   45:r141 l0     1   40:r142 l0     0
   41:r143 l0     1   39:r144 l0     0   37:r145 l0     0   35:r146 l0     0
   28:r147 l0     0   31:r148 l0     1   29:r149 l0     1   27:r150 l0     0
   25:r151 l0     0   23:r152 l0     0   22:r153 l0     0   18:r154 l0     0
   17:r155 l0     0   13:r156 l0     0   12:r157 l0     0    8:r158 l0     0
    7:r159 l0     0    3:r160 l0     0    0:r161 l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


player_kolizja

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,6u} r7={1d,6u} r16={1d,5u} r17={8d,2u} r20={1d,35u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,2u} r96={1d,1u} r97={1d,1u} r98={1d,2u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} 
;;    total ref usage 234{102d,132u,0e} in 94{94 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 129 130
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg:DI 5 di [ serwer ])) "function.c":1379 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ serwer ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 129)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 87 [ _1 ])
        (mem/f:DI (plus:DI (reg/f:DI 129)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 129)
        (nil)))
(insn 8 7 9 2 (set (reg:SI 88 [ _2 ])
        (mem:SI (plus:DI (reg/f:DI 87 [ _1 ])
                (const_int 12 [0xc])) [3 _1->x_current+0 S4 A32])) "function.c":1380 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _1 ])
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 130)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 89 [ _3 ])
        (mem/f:DI (plus:DI (reg/f:DI 130)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130)
        (nil)))
(insn 11 10 12 2 (set (reg:SI 90 [ _4 ])
        (mem:SI (plus:DI (reg/f:DI 89 [ _3 ])
                (const_int 12 [0xc])) [3 _3->x_current+0 S4 A32])) "function.c":1380 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _3 ])
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ _2 ])
            (reg:SI 90 [ _4 ]))) "function.c":1380 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 90 [ _4 ])
        (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
            (nil))))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 109)
            (pc))) "function.c":1380 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 109)
;;  succ:       3 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 91 92 93 94 131 132
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 131)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg/f:DI 91 [ _5 ])
        (mem/f:DI (plus:DI (reg/f:DI 131)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131)
        (nil)))
(insn 17 16 18 3 (set (reg:SI 92 [ _6 ])
        (mem:SI (plus:DI (reg/f:DI 91 [ _5 ])
                (const_int 16 [0x10])) [3 _5->y_current+0 S4 A64])) "function.c":1380 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ _5 ])
        (nil)))
(insn 18 17 19 3 (set (reg/f:DI 132)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (nil))
(insn 19 18 20 3 (set (reg/f:DI 93 [ _7 ])
        (mem/f:DI (plus:DI (reg/f:DI 132)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1380 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 132)
        (nil)))
(insn 20 19 21 3 (set (reg:SI 94 [ _8 ])
        (mem:SI (plus:DI (reg/f:DI 93 [ _7 ])
                (const_int 16 [0x10])) [3 _7->y_current+0 S4 A64])) "function.c":1380 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
        (nil)))
(insn 21 20 22 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 92 [ _6 ])
            (reg:SI 94 [ _8 ]))) "function.c":1380 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 94 [ _8 ])
        (expr_list:REG_DEAD (reg:SI 92 [ _6 ])
            (nil))))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 109)
            (pc))) "function.c":1380 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 109)
;;  succ:       4 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg/f:DI 133)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1382 85 {*movdi_internal}
     (nil))
(insn 25 24 26 4 (set (reg/f:DI 95 [ _9 ])
        (mem/f:DI (plus:DI (reg/f:DI 133)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1382 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133)
        (nil)))
(insn 26 25 27 4 (set (reg:SI 96 [ _10 ])
        (mem:SI (plus:DI (reg/f:DI 95 [ _9 ])
                (const_int 28 [0x1c])) [3 _9->deaths+0 S4 A32])) "function.c":1382 86 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (parallel [
            (set (reg:SI 97 [ _11 ])
                (plus:SI (reg:SI 96 [ _10 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1382 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 96 [ _10 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 28 27 29 4 (set (mem:SI (plus:DI (reg/f:DI 95 [ _9 ])
                (const_int 28 [0x1c])) [3 _9->deaths+0 S4 A32])
        (reg:SI 97 [ _11 ])) "function.c":1382 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97 [ _11 ])
        (expr_list:REG_DEAD (reg/f:DI 95 [ _9 ])
            (nil))))
(insn 29 28 30 4 (set (reg/f:DI 134)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1383 85 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg/f:DI 98 [ _12 ])
        (mem/f:DI (plus:DI (reg/f:DI 134)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1383 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134)
        (nil)))
(insn 31 30 32 4 (set (reg:SI 99 [ _13 ])
        (mem:SI (plus:DI (reg/f:DI 98 [ _12 ])
                (const_int 28 [0x1c])) [3 _12->deaths+0 S4 A32])) "function.c":1383 86 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg:SI 100 [ _14 ])
                (plus:SI (reg:SI 99 [ _13 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1383 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 33 32 34 4 (set (mem:SI (plus:DI (reg/f:DI 98 [ _12 ])
                (const_int 28 [0x1c])) [3 _12->deaths+0 S4 A32])
        (reg:SI 100 [ _14 ])) "function.c":1383 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 100 [ _14 ])
        (expr_list:REG_DEAD (reg/f:DI 98 [ _12 ])
            (nil))))
(insn 34 33 35 4 (set (reg/f:DI 135)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (nil))
(insn 35 34 36 4 (set (reg/f:DI 101 [ _15 ])
        (mem/f:DI (plus:DI (reg/f:DI 135)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 135)
        (nil)))
(insn 36 35 37 4 (set (reg/f:DI 136)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (reg:SI 102 [ _16 ])
        (mem:SI (plus:DI (reg/f:DI 136)
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1385 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136)
        (nil)))
(insn 38 37 39 4 (set (reg:SI 103 [ _17 ])
        (mem:SI (plus:DI (reg/f:DI 101 [ _15 ])
                (const_int 16 [0x10])) [3 _15->y_current+0 S4 A64])) "function.c":1385 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 101 [ _15 ])
        (nil)))
(insn 39 38 40 4 (set (reg/f:DI 137)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1385 85 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 138)
        (sign_extend:DI (reg:SI 102 [ _16 ]))) "function.c":1385 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 102 [ _16 ])
        (nil)))
(insn 41 40 42 4 (parallel [
            (set (reg:DI 139)
                (plus:DI (reg:DI 138)
                    (const_int 3008 [0xbc0])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1385 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 138)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 42 41 43 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 139)
                    (const_int 8 [0x8]))
                (reg/f:DI 137)) [3 serwer_45(D)->skarb.dropped_coin S4 A64])
        (reg:SI 103 [ _17 ])) "function.c":1385 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 139)
        (expr_list:REG_DEAD (reg/f:DI 137)
            (expr_list:REG_DEAD (reg:SI 103 [ _17 ])
                (nil)))))
(insn 43 42 44 4 (set (reg/f:DI 140)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (nil))
(insn 44 43 45 4 (set (reg/f:DI 104 [ _18 ])
        (mem/f:DI (plus:DI (reg/f:DI 140)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 140)
        (nil)))
(insn 45 44 46 4 (set (reg/f:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (set (reg:SI 105 [ _19 ])
        (mem:SI (plus:DI (reg/f:DI 141)
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1386 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 141)
        (nil)))
(insn 47 46 48 4 (set (reg:SI 106 [ _20 ])
        (mem:SI (plus:DI (reg/f:DI 104 [ _18 ])
                (const_int 12 [0xc])) [3 _18->x_current+0 S4 A32])) "function.c":1386 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
        (nil)))
(insn 48 47 49 4 (set (reg/f:DI 142)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1386 85 {*movdi_internal}
     (nil))
(insn 49 48 50 4 (set (reg:DI 143)
        (sign_extend:DI (reg:SI 105 [ _19 ]))) "function.c":1386 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 105 [ _19 ])
        (nil)))
(insn 50 49 51 4 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 143)
                        (const_int 8 [0x8]))
                    (reg/f:DI 142))
                (const_int 24068 [0x5e04])) [3 serwer_45(D)->skarb.dropped_coin S4 A32])
        (reg:SI 106 [ _20 ])) "function.c":1386 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 143)
        (expr_list:REG_DEAD (reg/f:DI 142)
            (expr_list:REG_DEAD (reg:SI 106 [ _20 ])
                (nil)))))
(insn 51 50 52 4 (set (reg/f:DI 144)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 52 51 53 4 (set (reg/f:DI 107 [ _21 ])
        (mem/f:DI (plus:DI (reg/f:DI 144)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 144)
        (nil)))
(insn 53 52 54 4 (set (reg:SI 108 [ _22 ])
        (mem:SI (plus:DI (reg/f:DI 107 [ _21 ])
                (const_int 32 [0x20])) [3 _21->coins_carried+0 S4 A64])) "function.c":1387 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ _21 ])
        (nil)))
(insn 54 53 55 4 (set (reg/f:DI 145)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 55 54 56 4 (set (reg/f:DI 109 [ _23 ])
        (mem/f:DI (plus:DI (reg/f:DI 145)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145)
        (nil)))
(insn 56 55 57 4 (set (reg:SI 110 [ _24 ])
        (mem:SI (plus:DI (reg/f:DI 109 [ _23 ])
                (const_int 32 [0x20])) [3 _23->coins_carried+0 S4 A64])) "function.c":1387 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ _23 ])
        (nil)))
(insn 57 56 58 4 (set (reg/f:DI 146)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 58 57 59 4 (set (reg:SI 111 [ _25 ])
        (mem:SI (plus:DI (reg/f:DI 146)
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1387 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146)
        (nil)))
(insn 59 58 60 4 (parallel [
            (set (reg:SI 112 [ _26 ])
                (plus:SI (reg:SI 108 [ _22 ])
                    (reg:SI 110 [ _24 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1387 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 110 [ _24 ])
        (expr_list:REG_DEAD (reg:SI 108 [ _22 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 60 59 61 4 (set (reg/f:DI 147)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1387 85 {*movdi_internal}
     (nil))
(insn 61 60 62 4 (set (reg:DI 148)
        (sign_extend:DI (reg:SI 111 [ _25 ]))) "function.c":1387 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 111 [ _25 ])
        (nil)))
(insn 62 61 63 4 (parallel [
            (set (reg:DI 149)
                (plus:DI (reg:DI 148)
                    (const_int 8016 [0x1f50])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1387 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 148)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 63 62 64 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 149)
                    (const_int 4 [0x4]))
                (reg/f:DI 147)) [3 serwer_45(D)->skarb.value_all_dropped_coin S4 A32])
        (reg:SI 112 [ _26 ])) "function.c":1387 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 149)
        (expr_list:REG_DEAD (reg/f:DI 147)
            (expr_list:REG_DEAD (reg:SI 112 [ _26 ])
                (nil)))))
(insn 64 63 65 4 (set (reg/f:DI 150)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1389 85 {*movdi_internal}
     (nil))
(insn 65 64 66 4 (set (reg/f:DI 113 [ _27 ])
        (mem/f:DI (plus:DI (reg/f:DI 150)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1389 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150)
        (nil)))
(insn 66 65 67 4 (set (mem:SI (plus:DI (reg/f:DI 113 [ _27 ])
                (const_int 32 [0x20])) [3 _27->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1389 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 67 66 68 4 (set (reg/f:DI 151)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1390 85 {*movdi_internal}
     (nil))
(insn 68 67 69 4 (set (reg/f:DI 114 [ _28 ])
        (mem/f:DI (plus:DI (reg/f:DI 151)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1390 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 151)
        (nil)))
(insn 69 68 70 4 (set (mem:SI (plus:DI (reg/f:DI 114 [ _28 ])
                (const_int 32 [0x20])) [3 _28->coins_carried+0 S4 A64])
        (const_int 0 [0])) "function.c":1390 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
        (nil)))
(insn 70 69 71 4 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (nil))
(insn 71 70 72 4 (set (reg/f:DI 115 [ _29 ])
        (mem/f:DI (plus:DI (reg/f:DI 152)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (nil)))
(insn 72 71 73 4 (set (reg/f:DI 153)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (nil))
(insn 73 72 74 4 (set (reg/f:DI 116 [ _30 ])
        (mem/f:DI (plus:DI (reg/f:DI 153)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1392 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 153)
        (nil)))
(insn 74 73 75 4 (set (reg:SI 117 [ _31 ])
        (mem:SI (plus:DI (reg/f:DI 115 [ _29 ])
                (const_int 20 [0x14])) [3 _29->x_start+0 S4 A32])) "function.c":1392 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 115 [ _29 ])
        (nil)))
(insn 75 74 76 4 (set (mem:SI (plus:DI (reg/f:DI 116 [ _30 ])
                (const_int 12 [0xc])) [3 _30->x_current+0 S4 A32])
        (reg:SI 117 [ _31 ])) "function.c":1392 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 117 [ _31 ])
        (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
            (nil))))
(insn 76 75 77 4 (set (reg/f:DI 154)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (nil))
(insn 77 76 78 4 (set (reg/f:DI 118 [ _32 ])
        (mem/f:DI (plus:DI (reg/f:DI 154)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154)
        (nil)))
(insn 78 77 79 4 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (nil))
(insn 79 78 80 4 (set (reg/f:DI 119 [ _33 ])
        (mem/f:DI (plus:DI (reg/f:DI 155)
                (const_int 32 [0x20])) [14 serwer_45(D)->player1+0 S8 A64])) "function.c":1393 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (nil)))
(insn 80 79 81 4 (set (reg:SI 120 [ _34 ])
        (mem:SI (plus:DI (reg/f:DI 118 [ _32 ])
                (const_int 24 [0x18])) [3 _32->y_start+0 S4 A64])) "function.c":1393 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ _32 ])
        (nil)))
(insn 81 80 82 4 (set (mem:SI (plus:DI (reg/f:DI 119 [ _33 ])
                (const_int 16 [0x10])) [3 _33->y_current+0 S4 A64])
        (reg:SI 120 [ _34 ])) "function.c":1393 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 120 [ _34 ])
        (expr_list:REG_DEAD (reg/f:DI 119 [ _33 ])
            (nil))))
(insn 82 81 83 4 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (nil))
(insn 83 82 84 4 (set (reg/f:DI 121 [ _35 ])
        (mem/f:DI (plus:DI (reg/f:DI 156)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156)
        (nil)))
(insn 84 83 85 4 (set (reg/f:DI 157)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (nil))
(insn 85 84 86 4 (set (reg/f:DI 122 [ _36 ])
        (mem/f:DI (plus:DI (reg/f:DI 157)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1395 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157)
        (nil)))
(insn 86 85 87 4 (set (reg:SI 123 [ _37 ])
        (mem:SI (plus:DI (reg/f:DI 121 [ _35 ])
                (const_int 20 [0x14])) [3 _35->x_start+0 S4 A32])) "function.c":1395 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121 [ _35 ])
        (nil)))
(insn 87 86 88 4 (set (mem:SI (plus:DI (reg/f:DI 122 [ _36 ])
                (const_int 12 [0xc])) [3 _36->x_current+0 S4 A32])
        (reg:SI 123 [ _37 ])) "function.c":1395 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 123 [ _37 ])
        (expr_list:REG_DEAD (reg/f:DI 122 [ _36 ])
            (nil))))
(insn 88 87 89 4 (set (reg/f:DI 158)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (nil))
(insn 89 88 90 4 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (plus:DI (reg/f:DI 158)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158)
        (nil)))
(insn 90 89 91 4 (set (reg/f:DI 159)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (nil))
(insn 91 90 92 4 (set (reg/f:DI 125 [ _39 ])
        (mem/f:DI (plus:DI (reg/f:DI 159)
                (const_int 40 [0x28])) [14 serwer_45(D)->player2+0 S8 A64])) "function.c":1396 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 159)
        (nil)))
(insn 92 91 93 4 (set (reg:SI 126 [ _40 ])
        (mem:SI (plus:DI (reg/f:DI 124 [ _38 ])
                (const_int 24 [0x18])) [3 _38->y_start+0 S4 A64])) "function.c":1396 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
        (nil)))
(insn 93 92 94 4 (set (mem:SI (plus:DI (reg/f:DI 125 [ _39 ])
                (const_int 16 [0x10])) [3 _39->y_current+0 S4 A64])
        (reg:SI 126 [ _40 ])) "function.c":1396 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 126 [ _40 ])
        (expr_list:REG_DEAD (reg/f:DI 125 [ _39 ])
            (nil))))
(insn 94 93 95 4 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1398 85 {*movdi_internal}
     (nil))
(insn 95 94 96 4 (set (reg:SI 127 [ _41 ])
        (mem:SI (plus:DI (reg/f:DI 160)
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])) "function.c":1398 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (nil)))
(insn 96 95 97 4 (parallel [
            (set (reg:SI 128 [ _42 ])
                (plus:SI (reg:SI 127 [ _41 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1398 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 127 [ _41 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 97 96 98 4 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1398 85 {*movdi_internal}
     (nil))
(insn 98 97 105 4 (set (mem:SI (plus:DI (reg/f:DI 161)
                (const_int 24060 [0x5dfc])) [3 serwer_45(D)->skarb.count_drop_coin+0 S4 A32])
        (reg:SI 128 [ _42 ])) "function.c":1398 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161)
        (expr_list:REG_DEAD (reg:SI 128 [ _42 ])
            (nil))))
(insn 105 98 109 4 (const_int 0 [0]) "function.c":1401 718 {nop}
     (nil))
;;  succ:       6 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL)
;;  pred:       2
;;              3
;;              4 [always]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 109 105 108 6 251 (nil) [2 uses])
(note 108 109 110 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 110 108 103 6 (const_int 0 [0]) "function.c":1401 718 {nop}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 103 110 104 5 248 (nil) [0 uses])
(note 104 103 0 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function skarbunio (skarbunio, funcdef_no=30, decl_uid=6267, cgraph_uid=30, symbol_order=33)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 19 n_edges 24 count 19 (    1)
;; 4 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 17
;;
;; Loop 3
;;  header 14, latch 16
;;  depth 1, outer 0
;;  nodes: 14 16
;;
;; Loop 2
;;  header 9, latch 11
;;  depth 1, outer 0
;;  nodes: 9 11
;;
;; Loop 1
;;  header 4, latch 6
;;  depth 1, outer 0
;;  nodes: 4 6
;; 2 succs { 3 7 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 7 }
;; 6 succs { 4 }
;; 7 succs { 8 12 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 12 }
;; 11 succs { 9 }
;; 12 succs { 13 18 }
;; 13 succs { 14 }
;; 14 succs { 15 16 }
;; 15 succs { 18 }
;; 16 succs { 14 }
;; 18 succs { 17 }
;; 17 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 169.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r189,l0) best AREG, allocno GENERAL_REGS
    r188: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r188,l0) best AREG, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a75 (r170,l0) best AREG, allocno GENERAL_REGS
    r169: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a76 (r169,l0) best AREG, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a114 (r151,l0) best AREG, allocno GENERAL_REGS
    r150: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a115 (r150,l0) best AREG, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a117 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a118 (r87,l0) best AREG, allocno GENERAL_REGS

  a0(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a3(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a6(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a8(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a10(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a12(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r200,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a16(r201,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a18(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a21(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a23(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a24(r193,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a26(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a27(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a28(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a29(r192,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a30(r133,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a31(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a32(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a33(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a34(r191,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a35(r190,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a36(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a37(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a38(r129,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a39(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a41(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a42(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a43(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a44(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a45(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a46(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a47(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a48(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a49(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a50(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a51(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a52(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a53(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r181,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a55(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a56(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a57(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a58(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a59(r177,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a60(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a61(r176,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a62(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a63(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a64(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a65(r116,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a66(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a67(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a68(r173,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a69(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a70(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a71(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a72(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a73(r172,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a74(r171,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a75(r170,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a76(r169,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a77(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a78(r168,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a79(r108,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a80(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a81(r167,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r106,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a83(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a84(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a85(r166,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a86(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a87(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a88(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a89(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r164,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a92(r161,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a93(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a94(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a95(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a96(r160,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a97(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a98(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a99(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a100(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a101(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a102(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a103(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a104(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a105(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a106(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a107(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a108(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a109(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a110(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a111(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:21000 NO_REX_SSE_REGS:21000 SSE_REGS:21000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a112(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a113(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:20000 NO_REX_SSE_REGS:20000 SSE_REGS:20000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a114(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a115(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a116(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a117(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a118(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:14000 NO_REX_SSE_REGS:14000 SSE_REGS:14000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a119(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 NON_Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 248(l0): point = 1
   Insn 242(l0): point = 4
   Insn 230(l0): point = 6
   Insn 223(l0): point = 8
   Insn 222(l0): point = 10
   Insn 221(l0): point = 12
   Insn 220(l0): point = 14
   Insn 219(l0): point = 16
   Insn 233(l0): point = 18
   Insn 209(l0): point = 20
   Insn 208(l0): point = 22
   Insn 207(l0): point = 24
   Insn 206(l0): point = 26
   Insn 205(l0): point = 28
   Insn 204(l0): point = 30
   Insn 203(l0): point = 32
   Insn 202(l0): point = 34
   Insn 201(l0): point = 36
   Insn 200(l0): point = 38
   Insn 199(l0): point = 40
   Insn 198(l0): point = 42
   Insn 197(l0): point = 44
   Insn 196(l0): point = 46
   Insn 195(l0): point = 48
   Insn 194(l0): point = 50
   Insn 193(l0): point = 52
   Insn 192(l0): point = 54
   Insn 191(l0): point = 56
   Insn 190(l0): point = 58
   Insn 189(l0): point = 60
   Insn 188(l0): point = 62
   Insn 187(l0): point = 64
   Insn 186(l0): point = 66
   Insn 184(l0): point = 69
   Insn 183(l0): point = 71
   Insn 182(l0): point = 73
   Insn 181(l0): point = 75
   Insn 180(l0): point = 77
   Insn 179(l0): point = 79
   Insn 178(l0): point = 81
   Insn 177(l0): point = 83
   Insn 176(l0): point = 85
   Insn 175(l0): point = 87
   Insn 174(l0): point = 89
   Insn 173(l0): point = 91
   Insn 172(l0): point = 93
   Insn 171(l0): point = 95
   Insn 170(l0): point = 97
   Insn 169(l0): point = 99
   Insn 168(l0): point = 101
   Insn 167(l0): point = 103
   Insn 166(l0): point = 105
   Insn 165(l0): point = 107
   Insn 164(l0): point = 109
   Insn 163(l0): point = 111
   Insn 162(l0): point = 113
   Insn 244(l0): point = 116
   Insn 160(l0): point = 119
   Insn 158(l0): point = 122
   Insn 157(l0): point = 124
   Insn 156(l0): point = 126
   Insn 238(l0): point = 129
   Insn 153(l0): point = 131
   Insn 152(l0): point = 133
   Insn 151(l0): point = 135
   Insn 150(l0): point = 137
   Insn 149(l0): point = 139
   Insn 232(l0): point = 141
   Insn 139(l0): point = 143
   Insn 138(l0): point = 145
   Insn 137(l0): point = 147
   Insn 136(l0): point = 149
   Insn 135(l0): point = 151
   Insn 134(l0): point = 153
   Insn 133(l0): point = 155
   Insn 132(l0): point = 157
   Insn 131(l0): point = 159
   Insn 130(l0): point = 161
   Insn 129(l0): point = 163
   Insn 128(l0): point = 165
   Insn 127(l0): point = 167
   Insn 126(l0): point = 169
   Insn 125(l0): point = 171
   Insn 124(l0): point = 173
   Insn 123(l0): point = 175
   Insn 122(l0): point = 177
   Insn 121(l0): point = 179
   Insn 120(l0): point = 181
   Insn 119(l0): point = 183
   Insn 118(l0): point = 185
   Insn 117(l0): point = 187
   Insn 116(l0): point = 189
   Insn 114(l0): point = 192
   Insn 113(l0): point = 194
   Insn 112(l0): point = 196
   Insn 111(l0): point = 198
   Insn 110(l0): point = 200
   Insn 109(l0): point = 202
   Insn 108(l0): point = 204
   Insn 107(l0): point = 206
   Insn 106(l0): point = 208
   Insn 105(l0): point = 210
   Insn 104(l0): point = 212
   Insn 103(l0): point = 214
   Insn 102(l0): point = 216
   Insn 101(l0): point = 218
   Insn 100(l0): point = 220
   Insn 99(l0): point = 222
   Insn 98(l0): point = 224
   Insn 97(l0): point = 226
   Insn 96(l0): point = 228
   Insn 95(l0): point = 230
   Insn 94(l0): point = 232
   Insn 93(l0): point = 234
   Insn 92(l0): point = 236
   Insn 240(l0): point = 239
   Insn 90(l0): point = 242
   Insn 88(l0): point = 245
   Insn 87(l0): point = 247
   Insn 86(l0): point = 249
   Insn 234(l0): point = 252
   Insn 83(l0): point = 254
   Insn 82(l0): point = 256
   Insn 81(l0): point = 258
   Insn 80(l0): point = 260
   Insn 79(l0): point = 262
   Insn 231(l0): point = 264
   Insn 69(l0): point = 266
   Insn 68(l0): point = 268
   Insn 67(l0): point = 270
   Insn 66(l0): point = 272
   Insn 65(l0): point = 274
   Insn 64(l0): point = 276
   Insn 63(l0): point = 278
   Insn 62(l0): point = 280
   Insn 61(l0): point = 282
   Insn 60(l0): point = 284
   Insn 59(l0): point = 286
   Insn 58(l0): point = 288
   Insn 57(l0): point = 290
   Insn 56(l0): point = 292
   Insn 55(l0): point = 294
   Insn 54(l0): point = 296
   Insn 53(l0): point = 298
   Insn 52(l0): point = 300
   Insn 51(l0): point = 302
   Insn 50(l0): point = 304
   Insn 49(l0): point = 306
   Insn 48(l0): point = 308
   Insn 47(l0): point = 310
   Insn 46(l0): point = 312
   Insn 44(l0): point = 315
   Insn 43(l0): point = 317
   Insn 42(l0): point = 319
   Insn 41(l0): point = 321
   Insn 40(l0): point = 323
   Insn 39(l0): point = 325
   Insn 38(l0): point = 327
   Insn 37(l0): point = 329
   Insn 36(l0): point = 331
   Insn 35(l0): point = 333
   Insn 34(l0): point = 335
   Insn 33(l0): point = 337
   Insn 32(l0): point = 339
   Insn 31(l0): point = 341
   Insn 30(l0): point = 343
   Insn 29(l0): point = 345
   Insn 28(l0): point = 347
   Insn 27(l0): point = 349
   Insn 26(l0): point = 351
   Insn 25(l0): point = 353
   Insn 24(l0): point = 355
   Insn 23(l0): point = 357
   Insn 22(l0): point = 359
   Insn 236(l0): point = 362
   Insn 20(l0): point = 365
   Insn 18(l0): point = 368
   Insn 17(l0): point = 370
   Insn 16(l0): point = 372
   Insn 15(l0): point = 374
   Insn 14(l0): point = 376
   Insn 13(l0): point = 378
   Insn 12(l0): point = 380
   Insn 11(l0): point = 382
   Insn 10(l0): point = 384
   Insn 9(l0): point = 386
   Insn 8(l0): point = 388
   Insn 7(l0): point = 390
   Insn 6(l0): point = 392
   Insn 2(l0): point = 394
 a0(r206): [9..10]
 a1(r148): [9..12]
 a2(r147): [13..14]
 a3(r205): [15..16]
 a4(r146): [21..22]
 a5(r145): [23..24]
 a6(r144): [23..28]
 a7(r204): [25..26]
 a8(r143): [29..30]
 a9(r142): [31..32]
 a10(r140): [31..38]
 a11(r141): [33..34]
 a12(r203): [35..36]
 a13(r202): [39..40]
 a14(r199): [43..48]
 a15(r200): [43..46]
 a16(r201): [43..44]
 a17(r139): [47..50]
 a18(r198): [51..52]
 a19(r194): [55..62]
 a20(r196): [55..58]
 a21(r197): [55..56]
 a22(r195): [59..60]
 a23(r138): [61..64]
 a24(r193): [65..66]
 a25(r137): [72..73]
 a26(r136): [74..75]
 a27(r135): [76..77]
 a28(r134): [76..81]
 a29(r192): [78..79]
 a30(r133): [82..83]
 a31(r132): [84..85]
 a32(r130): [84..91]
 a33(r131): [86..87]
 a34(r191): [88..89]
 a35(r190): [92..93]
 a36(r189): [96..97]
 a37(r188): [106..107]
 a38(r129): [125..126]
 a39(r187): [132..133]
 a40(r128): [132..135]
 a41(r127): [136..137]
 a42(r186): [138..139]
 a43(r126): [144..145]
 a44(r125): [146..147]
 a45(r124): [146..151]
 a46(r185): [148..149]
 a47(r123): [152..153]
 a48(r122): [154..155]
 a49(r120): [154..161]
 a50(r121): [156..157]
 a51(r184): [158..159]
 a52(r183): [162..163]
 a53(r180): [166..171]
 a54(r181): [166..169]
 a55(r182): [166..167]
 a56(r119): [170..173]
 a57(r179): [174..175]
 a58(r175): [178..185]
 a59(r177): [178..181]
 a60(r178): [178..179]
 a61(r176): [182..183]
 a62(r118): [184..187]
 a63(r174): [188..189]
 a64(r117): [195..196]
 a65(r116): [197..198]
 a66(r115): [199..200]
 a67(r114): [199..204]
 a68(r173): [201..202]
 a69(r113): [205..206]
 a70(r112): [207..208]
 a71(r110): [207..214]
 a72(r111): [209..210]
 a73(r172): [211..212]
 a74(r171): [215..216]
 a75(r170): [219..220]
 a76(r169): [229..230]
 a77(r109): [248..249]
 a78(r168): [255..256]
 a79(r108): [255..258]
 a80(r107): [259..260]
 a81(r167): [261..262]
 a82(r106): [267..268]
 a83(r105): [269..270]
 a84(r104): [269..274]
 a85(r166): [271..272]
 a86(r103): [275..276]
 a87(r102): [277..278]
 a88(r100): [277..284]
 a89(r101): [279..280]
 a90(r165): [281..282]
 a91(r164): [285..286]
 a92(r161): [289..294]
 a93(r162): [289..292]
 a94(r163): [289..290]
 a95(r99): [293..296]
 a96(r160): [297..298]
 a97(r156): [301..308]
 a98(r158): [301..304]
 a99(r159): [301..302]
 a100(r157): [305..306]
 a101(r98): [307..310]
 a102(r155): [311..312]
 a103(r97): [318..319]
 a104(r96): [320..321]
 a105(r95): [322..323]
 a106(r94): [322..327]
 a107(r154): [324..325]
 a108(r93): [328..329]
 a109(r92): [330..331]
 a110(r90): [330..337]
 a111(r91): [332..333]
 a112(r153): [334..335]
 a113(r152): [338..339]
 a114(r151): [342..343]
 a115(r150): [352..353]
 a116(r89): [371..372]
 a117(r88): [381..382]
 a118(r87): [383..384]
 a119(r149): [391..392]
Compressing live ranges: from 397 to 186 - 46%
Ranges after the compression:
 a0(r206): [0..1]
 a1(r148): [0..1]
 a2(r147): [2..3]
 a3(r205): [4..5]
 a4(r146): [6..7]
 a5(r145): [8..9]
 a6(r144): [8..11]
 a7(r204): [10..11]
 a8(r143): [12..13]
 a9(r142): [14..15]
 a10(r140): [14..19]
 a11(r141): [16..17]
 a12(r203): [18..19]
 a13(r202): [20..21]
 a14(r199): [22..25]
 a15(r200): [22..23]
 a16(r201): [22..23]
 a17(r139): [24..25]
 a18(r198): [26..27]
 a19(r194): [28..33]
 a20(r196): [28..29]
 a21(r197): [28..29]
 a22(r195): [30..31]
 a23(r138): [32..33]
 a24(r193): [34..35]
 a25(r137): [36..37]
 a26(r136): [38..39]
 a27(r135): [40..41]
 a28(r134): [40..43]
 a29(r192): [42..43]
 a30(r133): [44..45]
 a31(r132): [46..47]
 a32(r130): [46..51]
 a33(r131): [48..49]
 a34(r191): [50..51]
 a35(r190): [52..53]
 a36(r189): [54..55]
 a37(r188): [56..57]
 a38(r129): [58..59]
 a39(r187): [60..61]
 a40(r128): [60..61]
 a41(r127): [62..63]
 a42(r186): [64..65]
 a43(r126): [66..67]
 a44(r125): [68..69]
 a45(r124): [68..71]
 a46(r185): [70..71]
 a47(r123): [72..73]
 a48(r122): [74..75]
 a49(r120): [74..79]
 a50(r121): [76..77]
 a51(r184): [78..79]
 a52(r183): [80..81]
 a53(r180): [82..85]
 a54(r181): [82..83]
 a55(r182): [82..83]
 a56(r119): [84..85]
 a57(r179): [86..87]
 a58(r175): [88..93]
 a59(r177): [88..89]
 a60(r178): [88..89]
 a61(r176): [90..91]
 a62(r118): [92..93]
 a63(r174): [94..95]
 a64(r117): [96..97]
 a65(r116): [98..99]
 a66(r115): [100..101]
 a67(r114): [100..103]
 a68(r173): [102..103]
 a69(r113): [104..105]
 a70(r112): [106..107]
 a71(r110): [106..111]
 a72(r111): [108..109]
 a73(r172): [110..111]
 a74(r171): [112..113]
 a75(r170): [114..115]
 a76(r169): [116..117]
 a77(r109): [118..119]
 a78(r168): [120..121]
 a79(r108): [120..121]
 a80(r107): [122..123]
 a81(r167): [124..125]
 a82(r106): [126..127]
 a83(r105): [128..129]
 a84(r104): [128..131]
 a85(r166): [130..131]
 a86(r103): [132..133]
 a87(r102): [134..135]
 a88(r100): [134..139]
 a89(r101): [136..137]
 a90(r165): [138..139]
 a91(r164): [140..141]
 a92(r161): [142..145]
 a93(r162): [142..143]
 a94(r163): [142..143]
 a95(r99): [144..145]
 a96(r160): [146..147]
 a97(r156): [148..153]
 a98(r158): [148..149]
 a99(r159): [148..149]
 a100(r157): [150..151]
 a101(r98): [152..153]
 a102(r155): [154..155]
 a103(r97): [156..157]
 a104(r96): [158..159]
 a105(r95): [160..161]
 a106(r94): [160..163]
 a107(r154): [162..163]
 a108(r93): [164..165]
 a109(r92): [166..167]
 a110(r90): [166..171]
 a111(r91): [168..169]
 a112(r153): [170..171]
 a113(r152): [172..173]
 a114(r151): [174..175]
 a115(r150): [176..177]
 a116(r89): [178..179]
 a117(r88): [180..181]
 a118(r87): [182..183]
 a119(r149): [184..185]
  pref0:a36(r189)<-hr0@500
  pref1:a37(r188)<-hr0@500
  pref2:a75(r170)<-hr0@500
  pref3:a76(r169)<-hr0@500
  pref4:a114(r151)<-hr0@500
  pref5:a115(r150)<-hr0@500
  pref6:a117(r88)<-hr5@500
  pref7:a118(r87)<-hr0@500
  regions=1, blocks=19, points=186
    allocnos=120 (big 0), copies=0, conflicts=0, ranges=120
Disposition:
  118:r87  l0     0  117:r88  l0     0  116:r89  l0     0  110:r90  l0     0
  111:r91  l0     1  109:r92  l0     1  108:r93  l0     0  106:r94  l0     1
  105:r95  l0     0  104:r96  l0     0  103:r97  l0     0  101:r98  l0     1
   95:r99  l0     1   88:r100 l0     0   89:r101 l0     1   87:r102 l0     1
   86:r103 l0     0   84:r104 l0     1   83:r105 l0     0   82:r106 l0     0
   80:r107 l0     0   79:r108 l0     1   77:r109 l0     0   71:r110 l0     0
   72:r111 l0     1   70:r112 l0     1   69:r113 l0     0   67:r114 l0     1
   66:r115 l0     0   65:r116 l0     0   64:r117 l0     0   62:r118 l0     1
   56:r119 l0     1   49:r120 l0     0   50:r121 l0     1   48:r122 l0     1
   47:r123 l0     0   45:r124 l0     1   44:r125 l0     0   43:r126 l0     0
   41:r127 l0     0   40:r128 l0     1   38:r129 l0     0   32:r130 l0     0
   33:r131 l0     1   31:r132 l0     1   30:r133 l0     0   28:r134 l0     1
   27:r135 l0     0   26:r136 l0     0   25:r137 l0     0   23:r138 l0     1
   17:r139 l0     1   10:r140 l0     0   11:r141 l0     1    9:r142 l0     1
    8:r143 l0     0    6:r144 l0     1    5:r145 l0     0    4:r146 l0     0
    2:r147 l0     0    1:r148 l0     1  119:r149 l0     0  115:r150 l0     0
  114:r151 l0     0  113:r152 l0     0  112:r153 l0     1  107:r154 l0     0
  102:r155 l0     0   97:r156 l0     0  100:r157 l0     1   98:r158 l0     2
   99:r159 l0     1   96:r160 l0     0   92:r161 l0     0   93:r162 l0     1
   94:r163 l0     2   91:r164 l0     0   90:r165 l0     1   85:r166 l0     0
   81:r167 l0     0   78:r168 l0     0   76:r169 l0     0   75:r170 l0     0
   74:r171 l0     0   73:r172 l0     1   68:r173 l0     0   63:r174 l0     0
   58:r175 l0     0   61:r176 l0     1   59:r177 l0     2   60:r178 l0     1
   57:r179 l0     0   53:r180 l0     0   54:r181 l0     1   55:r182 l0     2
   52:r183 l0     0   51:r184 l0     1   46:r185 l0     0   42:r186 l0     0
   39:r187 l0     0   37:r188 l0     0   36:r189 l0     0   35:r190 l0     0
   34:r191 l0     1   29:r192 l0     0   24:r193 l0     0   19:r194 l0     0
   22:r195 l0     1   20:r196 l0     2   21:r197 l0     1   18:r198 l0     0
   14:r199 l0     0   15:r200 l0     1   16:r201 l0     2   13:r202 l0     0
   12:r203 l0     1    7:r204 l0     0    3:r205 l0     0    0:r206 l0     0
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


skarbunio

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,7u} r1={9d} r2={9d} r4={15d,6u} r5={17d,9u} r6={1d,18u} r7={1d,26u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1d,17u} r17={38d,6u} r18={8d} r19={8d} r20={1d,71u} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} 
;;    total ref usage 1039{759d,280u,0e} in 190{182 regular + 8 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 149
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [19 pom+0 S8 A64])
        (reg:DI 5 di [ pom ])) "function.c":1405 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ pom ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 149)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -24 [0xffffffffffffffe8])) [19 pom+0 S8 A64])) "function.c":1406 85 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])
        (reg/f:DI 149)) "function.c":1406 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 149)
        (nil)))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (const_int 0 [0])) "function.c":1407 85 {*movdi_internal}
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("time") [flags 0x41]  <function_decl 0x7f7cd1000300 time>) [0 time S1 A8])
            (const_int 0 [0]))) "function.c":1407 700 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 10 9 11 2 (set (reg:DI 87 [ _1 ])
        (reg:DI 0 ax)) "function.c":1407 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 11 10 12 2 (set (reg:SI 88 [ _2 ])
        (subreg:SI (reg:DI 87 [ _1 ]) 0)) "function.c":1407 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 87 [ _1 ])
        (nil)))
(insn 12 11 13 2 (set (reg:SI 5 di)
        (reg:SI 88 [ _2 ])) "function.c":1407 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 88 [ _2 ])
        (nil)))
(call_insn 13 12 14 2 (call (mem:QI (symbol_ref:DI ("srand") [flags 0x41]  <function_decl 0x7f7cd0fe1700 srand>) [0 srand S1 A8])
        (const_int 0 [0])) "function.c":1407 689 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 14 13 15 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (const_int 0 [0])) "function.c":1408 86 {*movsi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (const_int 0 [0])) "function.c":1409 86 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:QI 89 [ END.133_3 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":1411 88 {*movqi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 89 [ END.133_3 ])
            (const_int 99 [0x63]))) "function.c":1411 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 89 [ END.133_3 ])
        (nil)))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "function.c":1411 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 84)
;;  succ:       3 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 74 3 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":1413 88 {*movqi_internal}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;;              6 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90 91 92 93 94 95 96 97 150 151 152 153 154
(code_label 74 20 21 4 256 (nil) [1 uses])
(note 21 74 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":1416 86 {*movsi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1416 86 {*movsi_internal}
     (nil))
(call_insn 24 23 25 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1416 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 25 24 26 4 (set (reg:SI 150)
        (reg:SI 0 ax)) "function.c":1416 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 26 25 27 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 150)) "function.c":1416 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 150)
        (nil)))
(insn 27 26 28 4 (set (reg:SI 4 si)
        (const_int 29 [0x1d])) "function.c":1417 86 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1417 86 {*movsi_internal}
     (nil))
(call_insn 29 28 30 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1417 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 30 29 31 4 (set (reg:SI 151)
        (reg:SI 0 ax)) "function.c":1417 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 31 30 32 4 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 151)) "function.c":1417 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 32 31 33 4 (set (reg/f:DI 152)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1418 85 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg/f:DI 90 [ _4 ])
        (mem/f:DI (plus:DI (reg/f:DI 152)
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1418 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152)
        (nil)))
(insn 34 33 35 4 (set (reg:SI 153)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1418 86 {*movsi_internal}
     (nil))
(insn 35 34 36 4 (set (reg:DI 91 [ _5 ])
        (sign_extend:DI (reg:SI 153))) "function.c":1418 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 153)
        (nil)))
(insn 36 35 37 4 (parallel [
            (set (reg:DI 92 [ _6 ])
                (ashift:DI (reg:DI 91 [ _5 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1418 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 91 [ _5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 37 36 38 4 (parallel [
            (set (reg/f:DI 93 [ _7 ])
                (plus:DI (reg/f:DI 90 [ _4 ])
                    (reg:DI 92 [ _6 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1418 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 92 [ _6 ])
        (expr_list:REG_DEAD (reg/f:DI 90 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 38 37 39 4 (set (reg/f:DI 94 [ _8 ])
        (mem/f:DI (reg/f:DI 93 [ _7 ]) [10 *_7+0 S8 A64])) "function.c":1418 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _7 ])
        (nil)))
(insn 39 38 40 4 (set (reg:SI 154)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1418 86 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (set (reg:DI 95 [ _9 ])
        (sign_extend:DI (reg:SI 154))) "function.c":1418 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 154)
        (nil)))
(insn 41 40 42 4 (parallel [
            (set (reg/f:DI 96 [ _10 ])
                (plus:DI (reg/f:DI 94 [ _8 ])
                    (reg:DI 95 [ _9 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1418 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 95 [ _9 ])
        (expr_list:REG_DEAD (reg/f:DI 94 [ _8 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 42 41 43 4 (set (reg:QI 97 [ _11 ])
        (mem:QI (reg/f:DI 96 [ _10 ]) [0 *_10+0 S1 A8])) "function.c":1418 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96 [ _10 ])
        (nil)))
(insn 43 42 44 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 97 [ _11 ])
            (const_int 46 [0x2e]))) "function.c":1418 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 97 [ _11 ])
        (nil)))
(jump_insn 44 43 45 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) "function.c":1418 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 72)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98 99 100 101 102 103 104 105 106 107 108 155 156 157 158 159 160 161 162 163 164 165 166 167 168
(note 45 44 46 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 5 (set (reg/f:DI 155)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1420 85 {*movdi_internal}
     (nil))
(insn 47 46 48 5 (set (reg:SI 98 [ _12 ])
        (mem:SI (plus:DI (reg/f:DI 155)
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])) "function.c":1420 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 155)
        (nil)))
(insn 48 47 49 5 (set (reg/f:DI 156)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1420 85 {*movdi_internal}
     (nil))
(insn 49 48 50 5 (set (reg:DI 157)
        (sign_extend:DI (reg:SI 98 [ _12 ]))) "function.c":1420 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 98 [ _12 ])
        (nil)))
(insn 50 49 51 5 (parallel [
            (set (reg:DI 158)
                (plus:DI (reg:DI 157)
                    (const_int 6 [0x6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1420 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 157)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 51 50 52 5 (set (reg:SI 159)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1420 86 {*movsi_internal}
     (nil))
(insn 52 51 53 5 (set (mem:SI (plus:DI (mult:DI (reg:DI 158)
                    (const_int 8 [0x8]))
                (reg/f:DI 156)) [3 serwer_70->skarb.one_coin S4 A64])
        (reg:SI 159)) "function.c":1420 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 159)
        (expr_list:REG_DEAD (reg:DI 158)
            (expr_list:REG_DEAD (reg/f:DI 156)
                (nil)))))
(insn 53 52 54 5 (set (reg/f:DI 160)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1421 85 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:SI 99 [ _13 ])
        (mem:SI (plus:DI (reg/f:DI 160)
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])) "function.c":1421 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160)
        (nil)))
(insn 55 54 56 5 (set (reg/f:DI 161)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1421 85 {*movdi_internal}
     (nil))
(insn 56 55 57 5 (set (reg:DI 162)
        (sign_extend:DI (reg:SI 99 [ _13 ]))) "function.c":1421 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 99 [ _13 ])
        (nil)))
(insn 57 56 58 5 (set (reg:SI 163)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1421 86 {*movsi_internal}
     (nil))
(insn 58 57 59 5 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 162)
                        (const_int 8 [0x8]))
                    (reg/f:DI 161))
                (const_int 52 [0x34])) [3 serwer_70->skarb.one_coin S4 A32])
        (reg:SI 163)) "function.c":1421 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 163)
        (expr_list:REG_DEAD (reg:DI 162)
            (expr_list:REG_DEAD (reg/f:DI 161)
                (nil)))))
(insn 59 58 60 5 (set (reg/f:DI 164)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1422 85 {*movdi_internal}
     (nil))
(insn 60 59 61 5 (set (reg/f:DI 100 [ _14 ])
        (mem/f:DI (plus:DI (reg/f:DI 164)
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1422 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 164)
        (nil)))
(insn 61 60 62 5 (set (reg:SI 165)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1422 86 {*movsi_internal}
     (nil))
(insn 62 61 63 5 (set (reg:DI 101 [ _15 ])
        (sign_extend:DI (reg:SI 165))) "function.c":1422 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 165)
        (nil)))
(insn 63 62 64 5 (parallel [
            (set (reg:DI 102 [ _16 ])
                (ashift:DI (reg:DI 101 [ _15 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1422 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 101 [ _15 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 64 63 65 5 (parallel [
            (set (reg/f:DI 103 [ _17 ])
                (plus:DI (reg/f:DI 100 [ _14 ])
                    (reg:DI 102 [ _16 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1422 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 102 [ _16 ])
        (expr_list:REG_DEAD (reg/f:DI 100 [ _14 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 65 64 66 5 (set (reg/f:DI 104 [ _18 ])
        (mem/f:DI (reg/f:DI 103 [ _17 ]) [10 *_17+0 S8 A64])) "function.c":1422 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _17 ])
        (nil)))
(insn 66 65 67 5 (set (reg:SI 166)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1422 86 {*movsi_internal}
     (nil))
(insn 67 66 68 5 (set (reg:DI 105 [ _19 ])
        (sign_extend:DI (reg:SI 166))) "function.c":1422 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 166)
        (nil)))
(insn 68 67 69 5 (parallel [
            (set (reg/f:DI 106 [ _20 ])
                (plus:DI (reg/f:DI 104 [ _18 ])
                    (reg:DI 105 [ _19 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1422 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 105 [ _19 ])
        (expr_list:REG_DEAD (reg/f:DI 104 [ _18 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 69 68 231 5 (set (mem:QI (reg/f:DI 106 [ _20 ]) [0 *_20+0 S1 A8])
        (const_int 99 [0x63])) "function.c":1422 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _20 ])
        (nil)))
(insn 231 69 79 5 (const_int 0 [0]) "function.c":1423 718 {nop}
     (nil))
(insn 79 231 80 5 (set (reg/f:DI 167)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1426 85 {*movdi_internal}
     (nil))
(insn 80 79 81 5 (set (reg:SI 107 [ _21 ])
        (mem:SI (plus:DI (reg/f:DI 167)
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])) "function.c":1426 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 167)
        (nil)))
(insn 81 80 82 5 (parallel [
            (set (reg:SI 108 [ _22 ])
                (plus:SI (reg:SI 107 [ _21 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1426 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 107 [ _21 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 82 81 83 5 (set (reg/f:DI 168)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1426 85 {*movdi_internal}
     (nil))
(insn 83 82 234 5 (set (mem:SI (plus:DI (reg/f:DI 168)
                (const_int 8048 [0x1f70])) [3 serwer_70->skarb.count_one_coin+0 S4 A64])
        (reg:SI 108 [ _22 ])) "function.c":1426 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 168)
        (expr_list:REG_DEAD (reg:SI 108 [ _22 ])
            (nil))))
(jump_insn 234 83 235 5 (set (pc)
        (label_ref 84)) 683 {jump}
     (nil)
 -> 84)
;;  succ:       7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 235 234 72)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 72 235 73 6 254 (nil) [1 uses])
(note 73 72 236 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 236 73 237 6 (set (pc)
        (label_ref 74)) "function.c":1416 683 {jump}
     (nil)
 -> 74)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 237 236 84)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       2
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 109
(code_label 84 237 85 7 253 (nil) [2 uses])
(note 85 84 86 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 7 (set (reg:QI 109 [ END.134_23 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":1429 88 {*movqi_internal}
     (nil))
(insn 87 86 88 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 109 [ END.134_23 ])
            (const_int 116 [0x74]))) "function.c":1429 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 109 [ END.134_23 ])
        (nil)))
(jump_insn 88 87 89 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 154)
            (pc))) "function.c":1429 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 154)
;;  succ:       8 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 89 88 90 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 144 8 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":1431 88 {*movqi_internal}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;;              11 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110 111 112 113 114 115 116 117 169 170 171 172 173
(code_label 144 90 91 9 260 (nil) [1 uses])
(note 91 144 92 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 9 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":1434 86 {*movsi_internal}
     (nil))
(insn 93 92 94 9 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1434 86 {*movsi_internal}
     (nil))
(call_insn 94 93 95 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1434 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 95 94 96 9 (set (reg:SI 169)
        (reg:SI 0 ax)) "function.c":1434 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 96 95 97 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 169)) "function.c":1434 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 169)
        (nil)))
(insn 97 96 98 9 (set (reg:SI 4 si)
        (const_int 29 [0x1d])) "function.c":1435 86 {*movsi_internal}
     (nil))
(insn 98 97 99 9 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1435 86 {*movsi_internal}
     (nil))
(call_insn 99 98 100 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1435 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 100 99 101 9 (set (reg:SI 170)
        (reg:SI 0 ax)) "function.c":1435 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 101 100 102 9 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 170)) "function.c":1435 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 170)
        (nil)))
(insn 102 101 103 9 (set (reg/f:DI 171)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1436 85 {*movdi_internal}
     (nil))
(insn 103 102 104 9 (set (reg/f:DI 110 [ _24 ])
        (mem/f:DI (plus:DI (reg/f:DI 171)
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1436 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 171)
        (nil)))
(insn 104 103 105 9 (set (reg:SI 172)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1436 86 {*movsi_internal}
     (nil))
(insn 105 104 106 9 (set (reg:DI 111 [ _25 ])
        (sign_extend:DI (reg:SI 172))) "function.c":1436 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 106 105 107 9 (parallel [
            (set (reg:DI 112 [ _26 ])
                (ashift:DI (reg:DI 111 [ _25 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1436 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 111 [ _25 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 107 106 108 9 (parallel [
            (set (reg/f:DI 113 [ _27 ])
                (plus:DI (reg/f:DI 110 [ _24 ])
                    (reg:DI 112 [ _26 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1436 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _26 ])
        (expr_list:REG_DEAD (reg/f:DI 110 [ _24 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 108 107 109 9 (set (reg/f:DI 114 [ _28 ])
        (mem/f:DI (reg/f:DI 113 [ _27 ]) [10 *_27+0 S8 A64])) "function.c":1436 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ _27 ])
        (nil)))
(insn 109 108 110 9 (set (reg:SI 173)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1436 86 {*movsi_internal}
     (nil))
(insn 110 109 111 9 (set (reg:DI 115 [ _29 ])
        (sign_extend:DI (reg:SI 173))) "function.c":1436 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(insn 111 110 112 9 (parallel [
            (set (reg/f:DI 116 [ _30 ])
                (plus:DI (reg/f:DI 114 [ _28 ])
                    (reg:DI 115 [ _29 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1436 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 115 [ _29 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ _28 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 112 111 113 9 (set (reg:QI 117 [ _31 ])
        (mem:QI (reg/f:DI 116 [ _30 ]) [0 *_30+0 S1 A8])) "function.c":1436 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _30 ])
        (nil)))
(insn 113 112 114 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 117 [ _31 ])
            (const_int 46 [0x2e]))) "function.c":1436 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 117 [ _31 ])
        (nil)))
(jump_insn 114 113 115 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) "function.c":1436 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 142)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 122 123 124 125 126 127 128 174 175 176 177 178 179 180 181 182 183 184 185 186 187
(note 115 114 116 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 10 (set (reg/f:DI 174)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1438 85 {*movdi_internal}
     (nil))
(insn 117 116 118 10 (set (reg:SI 118 [ _32 ])
        (mem:SI (plus:DI (reg/f:DI 174)
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])) "function.c":1438 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174)
        (nil)))
(insn 118 117 119 10 (set (reg/f:DI 175)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1438 85 {*movdi_internal}
     (nil))
(insn 119 118 120 10 (set (reg:DI 176)
        (sign_extend:DI (reg:SI 118 [ _32 ]))) "function.c":1438 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 118 [ _32 ])
        (nil)))
(insn 120 119 121 10 (parallel [
            (set (reg:DI 177)
                (plus:DI (reg:DI 176)
                    (const_int 1006 [0x3ee])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1438 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 176)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 121 120 122 10 (set (reg:SI 178)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1438 86 {*movsi_internal}
     (nil))
(insn 122 121 123 10 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 177)
                        (const_int 8 [0x8]))
                    (reg/f:DI 175))
                (const_int 4 [0x4])) [3 serwer_70->skarb.treasure_coin S4 A32])
        (reg:SI 178)) "function.c":1438 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 178)
        (expr_list:REG_DEAD (reg:DI 177)
            (expr_list:REG_DEAD (reg/f:DI 175)
                (nil)))))
(insn 123 122 124 10 (set (reg/f:DI 179)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1439 85 {*movdi_internal}
     (nil))
(insn 124 123 125 10 (set (reg:SI 119 [ _33 ])
        (mem:SI (plus:DI (reg/f:DI 179)
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])) "function.c":1439 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 179)
        (nil)))
(insn 125 124 126 10 (set (reg/f:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1439 85 {*movdi_internal}
     (nil))
(insn 126 125 127 10 (set (reg:DI 181)
        (sign_extend:DI (reg:SI 119 [ _33 ]))) "function.c":1439 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 119 [ _33 ])
        (nil)))
(insn 127 126 128 10 (set (reg:SI 182)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1439 86 {*movsi_internal}
     (nil))
(insn 128 127 129 10 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 181)
                        (const_int 8 [0x8]))
                    (reg/f:DI 180))
                (const_int 8056 [0x1f78])) [3 serwer_70->skarb.treasure_coin S4 A32])
        (reg:SI 182)) "function.c":1439 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 182)
        (expr_list:REG_DEAD (reg:DI 181)
            (expr_list:REG_DEAD (reg/f:DI 180)
                (nil)))))
(insn 129 128 130 10 (set (reg/f:DI 183)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1440 85 {*movdi_internal}
     (nil))
(insn 130 129 131 10 (set (reg/f:DI 120 [ _34 ])
        (mem/f:DI (plus:DI (reg/f:DI 183)
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1440 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 183)
        (nil)))
(insn 131 130 132 10 (set (reg:SI 184)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1440 86 {*movsi_internal}
     (nil))
(insn 132 131 133 10 (set (reg:DI 121 [ _35 ])
        (sign_extend:DI (reg:SI 184))) "function.c":1440 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 184)
        (nil)))
(insn 133 132 134 10 (parallel [
            (set (reg:DI 122 [ _36 ])
                (ashift:DI (reg:DI 121 [ _35 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1440 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 121 [ _35 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 134 133 135 10 (parallel [
            (set (reg/f:DI 123 [ _37 ])
                (plus:DI (reg/f:DI 120 [ _34 ])
                    (reg:DI 122 [ _36 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1440 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 122 [ _36 ])
        (expr_list:REG_DEAD (reg/f:DI 120 [ _34 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 135 134 136 10 (set (reg/f:DI 124 [ _38 ])
        (mem/f:DI (reg/f:DI 123 [ _37 ]) [10 *_37+0 S8 A64])) "function.c":1440 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ _37 ])
        (nil)))
(insn 136 135 137 10 (set (reg:SI 185)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1440 86 {*movsi_internal}
     (nil))
(insn 137 136 138 10 (set (reg:DI 125 [ _39 ])
        (sign_extend:DI (reg:SI 185))) "function.c":1440 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 185)
        (nil)))
(insn 138 137 139 10 (parallel [
            (set (reg/f:DI 126 [ _40 ])
                (plus:DI (reg/f:DI 124 [ _38 ])
                    (reg:DI 125 [ _39 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1440 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 125 [ _39 ])
        (expr_list:REG_DEAD (reg/f:DI 124 [ _38 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 139 138 232 10 (set (mem:QI (reg/f:DI 126 [ _40 ]) [0 *_40+0 S1 A8])
        (const_int 116 [0x74])) "function.c":1440 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 126 [ _40 ])
        (nil)))
(insn 232 139 149 10 (const_int 0 [0]) "function.c":1441 718 {nop}
     (nil))
(insn 149 232 150 10 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1444 85 {*movdi_internal}
     (nil))
(insn 150 149 151 10 (set (reg:SI 127 [ _41 ])
        (mem:SI (plus:DI (reg/f:DI 186)
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])) "function.c":1444 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 186)
        (nil)))
(insn 151 150 152 10 (parallel [
            (set (reg:SI 128 [ _42 ])
                (plus:SI (reg:SI 127 [ _41 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1444 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 127 [ _41 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 152 151 153 10 (set (reg/f:DI 187)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1444 85 {*movdi_internal}
     (nil))
(insn 153 152 238 10 (set (mem:SI (plus:DI (reg/f:DI 187)
                (const_int 16052 [0x3eb4])) [3 serwer_70->skarb.count_treasure_coin+0 S4 A32])
        (reg:SI 128 [ _42 ])) "function.c":1444 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 187)
        (expr_list:REG_DEAD (reg:SI 128 [ _42 ])
            (nil))))
(jump_insn 238 153 239 10 (set (pc)
        (label_ref 154)) 683 {jump}
     (nil)
 -> 154)
;;  succ:       12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 239 238 142)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 142 239 143 11 258 (nil) [1 uses])
(note 143 142 240 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 240 143 241 11 (set (pc)
        (label_ref 144)) "function.c":1434 683 {jump}
     (nil)
 -> 144)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 241 240 154)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       7
;;              10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 129
(code_label 154 241 155 12 257 (nil) [2 uses])
(note 155 154 156 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 12 (set (reg:QI 129 [ END.135_43 ])
        (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])) "function.c":1447 88 {*movqi_internal}
     (nil))
(insn 157 156 158 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 129 [ END.135_43 ])
            (const_int 84 [0x54]))) "function.c":1447 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 129 [ END.135_43 ])
        (nil)))
(jump_insn 158 157 159 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "function.c":1447 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 247)
;;  succ:       13 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 159 158 160 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 160 159 214 13 (set (mem/c:QI (symbol_ref:DI ("END") [flags 0x2]  <var_decl 0x7f7cd111b510 END>) [0 END+0 S1 A8])
        (const_int 48 [0x30])) "function.c":1449 88 {*movqi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;;              16 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 130 131 132 133 134 135 136 137 188 189 190 191 192
(code_label 214 160 161 14 264 (nil) [1 uses])
(note 161 214 162 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 14 (set (reg:SI 4 si)
        (const_int 19 [0x13])) "function.c":1452 86 {*movsi_internal}
     (nil))
(insn 163 162 164 14 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1452 86 {*movsi_internal}
     (nil))
(call_insn 164 163 165 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1452 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 165 164 166 14 (set (reg:SI 188)
        (reg:SI 0 ax)) "function.c":1452 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 166 165 167 14 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 188)) "function.c":1452 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 188)
        (nil)))
(insn 167 166 168 14 (set (reg:SI 4 si)
        (const_int 29 [0x1d])) "function.c":1453 86 {*movsi_internal}
     (nil))
(insn 168 167 169 14 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "function.c":1453 86 {*movsi_internal}
     (nil))
(call_insn 169 168 170 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("random_return") [flags 0x3]  <function_decl 0x7f7cd1169e00 random_return>) [0 random_return S1 A8])
            (const_int 0 [0]))) "function.c":1453 700 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 170 169 171 14 (set (reg:SI 189)
        (reg:SI 0 ax)) "function.c":1453 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(insn 171 170 172 14 (set (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 189)) "function.c":1453 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 189)
        (nil)))
(insn 172 171 173 14 (set (reg/f:DI 190)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1454 85 {*movdi_internal}
     (nil))
(insn 173 172 174 14 (set (reg/f:DI 130 [ _44 ])
        (mem/f:DI (plus:DI (reg/f:DI 190)
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1454 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 190)
        (nil)))
(insn 174 173 175 14 (set (reg:SI 191)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1454 86 {*movsi_internal}
     (nil))
(insn 175 174 176 14 (set (reg:DI 131 [ _45 ])
        (sign_extend:DI (reg:SI 191))) "function.c":1454 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 191)
        (nil)))
(insn 176 175 177 14 (parallel [
            (set (reg:DI 132 [ _46 ])
                (ashift:DI (reg:DI 131 [ _45 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1454 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 131 [ _45 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 177 176 178 14 (parallel [
            (set (reg/f:DI 133 [ _47 ])
                (plus:DI (reg/f:DI 130 [ _44 ])
                    (reg:DI 132 [ _46 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1454 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 132 [ _46 ])
        (expr_list:REG_DEAD (reg/f:DI 130 [ _44 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 178 177 179 14 (set (reg/f:DI 134 [ _48 ])
        (mem/f:DI (reg/f:DI 133 [ _47 ]) [10 *_47+0 S8 A64])) "function.c":1454 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133 [ _47 ])
        (nil)))
(insn 179 178 180 14 (set (reg:SI 192)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1454 86 {*movsi_internal}
     (nil))
(insn 180 179 181 14 (set (reg:DI 135 [ _49 ])
        (sign_extend:DI (reg:SI 192))) "function.c":1454 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 192)
        (nil)))
(insn 181 180 182 14 (parallel [
            (set (reg/f:DI 136 [ _50 ])
                (plus:DI (reg/f:DI 134 [ _48 ])
                    (reg:DI 135 [ _49 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1454 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 135 [ _49 ])
        (expr_list:REG_DEAD (reg/f:DI 134 [ _48 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 182 181 183 14 (set (reg:QI 137 [ _51 ])
        (mem:QI (reg/f:DI 136 [ _50 ]) [0 *_50+0 S1 A8])) "function.c":1454 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 136 [ _50 ])
        (nil)))
(insn 183 182 184 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 137 [ _51 ])
            (const_int 46 [0x2e]))) "function.c":1454 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 137 [ _51 ])
        (nil)))
(jump_insn 184 183 185 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 212)
            (pc))) "function.c":1454 682 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 212)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138 139 140 141 142 143 144 145 146 147 148 193 194 195 196 197 198 199 200 201 202 203 204 205 206
(note 185 184 186 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 187 15 (set (reg/f:DI 193)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1456 85 {*movdi_internal}
     (nil))
(insn 187 186 188 15 (set (reg:SI 138 [ _52 ])
        (mem:SI (plus:DI (reg/f:DI 193)
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1456 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 193)
        (nil)))
(insn 188 187 189 15 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1456 85 {*movdi_internal}
     (nil))
(insn 189 188 190 15 (set (reg:DI 195)
        (sign_extend:DI (reg:SI 138 [ _52 ]))) "function.c":1456 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 138 [ _52 ])
        (nil)))
(insn 190 189 191 15 (parallel [
            (set (reg:DI 196)
                (plus:DI (reg:DI 195)
                    (const_int 2006 [0x7d6])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1456 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 195)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 191 190 192 15 (set (reg:SI 197)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1456 86 {*movsi_internal}
     (nil))
(insn 192 191 193 15 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 196)
                        (const_int 8 [0x8]))
                    (reg/f:DI 194))
                (const_int 8 [0x8])) [3 serwer_70->skarb.large_treasure_coin S4 A64])
        (reg:SI 197)) "function.c":1456 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 197)
        (expr_list:REG_DEAD (reg:DI 196)
            (expr_list:REG_DEAD (reg/f:DI 194)
                (nil)))))
(insn 193 192 194 15 (set (reg/f:DI 198)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1457 85 {*movdi_internal}
     (nil))
(insn 194 193 195 15 (set (reg:SI 139 [ _53 ])
        (mem:SI (plus:DI (reg/f:DI 198)
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1457 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 198)
        (nil)))
(insn 195 194 196 15 (set (reg/f:DI 199)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1457 85 {*movdi_internal}
     (nil))
(insn 196 195 197 15 (set (reg:DI 200)
        (sign_extend:DI (reg:SI 139 [ _53 ]))) "function.c":1457 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 139 [ _53 ])
        (nil)))
(insn 197 196 198 15 (set (reg:SI 201)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1457 86 {*movsi_internal}
     (nil))
(insn 198 197 199 15 (set (mem:SI (plus:DI (plus:DI (mult:DI (reg:DI 200)
                        (const_int 8 [0x8]))
                    (reg/f:DI 199))
                (const_int 16060 [0x3ebc])) [3 serwer_70->skarb.large_treasure_coin S4 A32])
        (reg:SI 201)) "function.c":1457 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 201)
        (expr_list:REG_DEAD (reg:DI 200)
            (expr_list:REG_DEAD (reg/f:DI 199)
                (nil)))))
(insn 199 198 200 15 (set (reg/f:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1458 85 {*movdi_internal}
     (nil))
(insn 200 199 201 15 (set (reg/f:DI 140 [ _54 ])
        (mem/f:DI (plus:DI (reg/f:DI 202)
                (const_int 16 [0x10])) [9 serwer_70->mapa+0 S8 A64])) "function.c":1458 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 202)
        (nil)))
(insn 201 200 202 15 (set (reg:SI 203)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "function.c":1458 86 {*movsi_internal}
     (nil))
(insn 202 201 203 15 (set (reg:DI 141 [ _55 ])
        (sign_extend:DI (reg:SI 203))) "function.c":1458 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 203)
        (nil)))
(insn 203 202 204 15 (parallel [
            (set (reg:DI 142 [ _56 ])
                (ashift:DI (reg:DI 141 [ _55 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1458 551 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 141 [ _55 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 204 203 205 15 (parallel [
            (set (reg/f:DI 143 [ _57 ])
                (plus:DI (reg/f:DI 140 [ _54 ])
                    (reg:DI 142 [ _56 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1458 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 142 [ _56 ])
        (expr_list:REG_DEAD (reg/f:DI 140 [ _54 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 205 204 206 15 (set (reg/f:DI 144 [ _58 ])
        (mem/f:DI (reg/f:DI 143 [ _57 ]) [10 *_57+0 S8 A64])) "function.c":1458 85 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143 [ _57 ])
        (nil)))
(insn 206 205 207 15 (set (reg:SI 204)
        (mem/c:SI (plus:DI (reg/f:DI 20 frame)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "function.c":1458 86 {*movsi_internal}
     (nil))
(insn 207 206 208 15 (set (reg:DI 145 [ _59 ])
        (sign_extend:DI (reg:SI 204))) "function.c":1458 149 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 204)
        (nil)))
(insn 208 207 209 15 (parallel [
            (set (reg/f:DI 146 [ _60 ])
                (plus:DI (reg/f:DI 144 [ _58 ])
                    (reg:DI 145 [ _59 ])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1458 222 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _59 ])
        (expr_list:REG_DEAD (reg/f:DI 144 [ _58 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 209 208 233 15 (set (mem:QI (reg/f:DI 146 [ _60 ]) [0 *_60+0 S1 A8])
        (const_int 84 [0x54])) "function.c":1458 88 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 146 [ _60 ])
        (nil)))
(insn 233 209 219 15 (const_int 0 [0]) "function.c":1459 718 {nop}
     (nil))
(insn 219 233 220 15 (set (reg/f:DI 205)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1462 85 {*movdi_internal}
     (nil))
(insn 220 219 221 15 (set (reg:SI 147 [ _61 ])
        (mem:SI (plus:DI (reg/f:DI 205)
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])) "function.c":1462 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 205)
        (nil)))
(insn 221 220 222 15 (parallel [
            (set (reg:SI 148 [ _62 ])
                (plus:SI (reg:SI 147 [ _61 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "function.c":1462 221 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 147 [ _61 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 222 221 223 15 (set (reg/f:DI 206)
        (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -8 [0xfffffffffffffff8])) [12 serwer+0 S8 A64])) "function.c":1462 85 {*movdi_internal}
     (nil))
(insn 223 222 230 15 (set (mem:SI (plus:DI (reg/f:DI 206)
                (const_int 24056 [0x5df8])) [3 serwer_70->skarb.count_large_treasure_coin+0 S4 A64])
        (reg:SI 148 [ _62 ])) "function.c":1462 86 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 206)
        (expr_list:REG_DEAD (reg:SI 148 [ _62 ])
            (nil))))
(insn 230 223 242 15 (const_int 0 [0]) "function.c":1465 718 {nop}
     (nil))
(jump_insn 242 230 243 15 (set (pc)
        (label_ref:DI 247)) "function.c":1465 683 {jump}
     (nil)
 -> 247)
;;  succ:       18 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 243 242 212)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 18, flags: (RTL)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 212 243 213 16 262 (nil) [1 uses])
(note 213 212 244 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(jump_insn 244 213 245 16 (set (pc)
        (label_ref 214)) "function.c":1452 683 {jump}
     (nil)
 -> 214)
;;  succ:       14 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(barrier 245 244 247)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 16, next block 17, flags: (RTL)
;;  pred:       12
;;              15 [always] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 247 245 246 18 266 (nil) [2 uses])
(note 246 247 248 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 248 246 228 18 (const_int 0 [0]) "function.c":1465 718 {nop}
     (nil))
;;  succ:       17 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 18, next block 1, flags: (RTL)
;;  pred:       18 [always]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(code_label 228 248 229 17 252 (nil) [0 uses])
(note 229 228 0 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

